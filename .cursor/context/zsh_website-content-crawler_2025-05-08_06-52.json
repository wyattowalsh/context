[{
  "url": "https://zsh.sourceforge.io/Doc/Release/",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "loadedTime": "2025-05-08T06:50:51.075Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 0,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "title": "zsh: The Z Shell Manual",
    "description": "zsh: The Z Shell Manual",
    "author": null,
    "keywords": "zsh: The Z Shell Manual",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:50:50 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-8190\"",
      "expires": "Thu, 08 May 2025 06:51:50 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "DYNAMIC",
      "server": "cloudflare",
      "cf-ray": "93c706728cac4bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: The Z Shell Manual\nVersion 5.9\nUpdated May 14, 2022\nOriginal documentation by Paul Falstad \nThis is a texinfo version of the documentation for the Z Shell, originally by Paul Falstad. \nPermission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies. \nPermission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided also that the entire resulting derived work is distributed under the terms of a permission notice identical to this one. \nPermission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions. \nThe Z Shell Manual\nThis Info file documents Zsh, a freely available UNIX command interpreter (shell), which of the standard shells most closely resembles the Korn shell (ksh), although it is not completely compatible. Zsh is able to emulate POSIX shells, but its default mode is not POSIX compatible, either. \nVersion 5.9, last updated May 14, 2022. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release--njdgp.html",
  "markdown": "# zsh: The Z Shell Manual\n\n### Version 5.9\n\n### Updated May 14, 2022\n\n**Original documentation by Paul Falstad**\n\nThis is a texinfo version of the documentation for the Z Shell, originally by Paul Falstad.\n\nPermission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.\n\nPermission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided also that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.\n\nPermission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions.\n\n* * *\n\n## The Z Shell Manual\n\nThis Info file documents Zsh, a freely available UNIX command interpreter (shell), which of the standard shells most closely resembles the Korn shell (ksh), although it is not completely compatible. Zsh is able to emulate POSIX shells, but its default mode is not POSIX compatible, either.\n\nVersion 5.9, last updated May 14, 2022.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Category",
    "pageTypeReason": "None",
    "totalLinks": 160,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release--originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release--removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release--extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release--readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release--readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 1436,
      "readableText": 1642,
      "none": 31487,
      "readableTextIfPossible": 31487,
      "result": 1642,
      "markdown": 1287
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Options-Index.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Options-Index.html#Options-Index",
    "loadedTime": "2025-05-08T06:50:58.213Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Options-Index.html#Options-Index",
    "title": "zsh: Options Index",
    "description": "zsh: Options Index",
    "author": null,
    "keywords": "zsh: Options Index",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:50:57 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-807c\"",
      "expires": "Thu, 08 May 2025 06:51:57 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7069caa214bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Options Index\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-Index-html-Options-Index-hxk3x.html",
  "markdown": "# zsh: Options Index\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 281,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-Index-html-Options-Index-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-Index-html-Options-Index-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-Index-html-Options-Index-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-Index-html-Options-Index-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-Index-html-Options-Index-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 32468,
      "readableText": 346,
      "none": 31292,
      "readableTextIfPossible": 31292,
      "result": 346,
      "markdown": 171
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Functions-Index.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Functions-Index.html#Functions-Index",
    "loadedTime": "2025-05-08T06:50:58.736Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Functions-Index.html#Functions-Index",
    "title": "zsh: Functions Index",
    "description": "zsh: Functions Index",
    "author": null,
    "keywords": "zsh: Functions Index",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:50:58 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-8ada\"",
      "expires": "Thu, 08 May 2025 06:51:58 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706a00b244bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Functions Index\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-Index-html-Functions-Index-ri580g.html",
  "markdown": "# zsh: Functions Index\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 283,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-Index-html-Functions-Index-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-Index-html-Functions-Index-removedElementsHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-Index-html-Functions-Index-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-Index-html-Functions-Index-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 0,
      "readableText": 348,
      "none": 33942,
      "readableTextIfPossible": 33942,
      "result": 348,
      "markdown": 173
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Function-System",
    "loadedTime": "2025-05-08T06:50:58.212Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Function-System",
    "title": "zsh: 24 TCP Function System",
    "description": "zsh: 24 TCP Function System",
    "author": null,
    "keywords": "zsh: 24 TCP Function System",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:50:57 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-ff28\"",
      "expires": "Thu, 08 May 2025 06:51:57 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "MISS",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7069bd9e94bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 24 TCP Function System\n24.1 Description\nA module zsh/net/tcp is provided to provide network I/O over TCP/IP from within the shell; see its description in Zsh Modules. This manual page describes a function suite based on the module. If the module is installed, the functions are usually installed at the same time, in which case they will be available for autoloading in the default function search path. In addition to the zsh/net/tcp module, the zsh/zselect module is used to implement timeouts on read operations. For troubleshooting tips, consult the corresponding advice for the zftp functions described in Zftp Function System. \nThere are functions corresponding to the basic I/O operations open, close, read and send, named tcp_open etc., as well as a function tcp_expect for pattern match analysis of data read as input. The system makes it easy to receive data from and send data to multiple named sessions at once. In addition, it can be linked with the shell’s line editor in such a way that input data is automatically shown at the terminal. Other facilities available including logging, filtering and configurable output prompts. \nTo use the system where it is available, it should be enough to ‘autoload -U tcp_open’ and run tcp_open as documented below to start a session. The tcp_open function will autoload the remaining functions. \n24.2 TCP User Functions\n24.2.1 Basic I/O\ntcp_open [ -qz ] host port [ sess ] tcp_open [ -qz ] [ -s sess | -l sess[,...] ] ... tcp_open [ -qz ] [ -a fd | -f fd ] [ sess ] \nOpen a new session. In the first and simplest form, open a TCP connection to host host at port port; numeric and symbolic forms are understood for both. \nIf sess is given, this becomes the name of the session which can be used to refer to multiple different TCP connections. If sess is not given, the function will invent a numeric name value (note this is not the same as the file descriptor to which the session is attached). It is recommended that session names not include ‘funny’ characters, where funny characters are not well-defined but certainly do not include alphanumerics or underscores, and certainly do include whitespace. \nIn the second case, one or more sessions to be opened are given by name. A single session name is given after -s and a comma-separated list after -l; both options may be repeated as many times as necessary. A failure to open any session causes tcp_open to abort. The host and port are read from the file .ztcp_sessions in the same directory as the user’s zsh initialisation files, i.e. usually the home directory, but $ZDOTDIR if that is set. The file consists of lines each giving a session name and the corresponding host and port, in that order (note the session name comes first, not last), separated by whitespace. \nThe third form allows passive and fake TCP connections. If the option -a is used, its argument is a file descriptor open for listening for connections. No function front-end is provided to open such a file descriptor, but a call to ‘ztcp -l port’ will create one with the file descriptor stored in the parameter $REPLY. The listening port can be closed with ‘ztcp -c fd’. A call to ‘tcp_open -a fd’ will block until a remote TCP connection is made to port on the local machine. At this point, a session is created in the usual way and is largely indistinguishable from an active connection created with one of the first two forms. \nIf the option -f is used, its argument is a file descriptor which is used directly as if it were a TCP session. How well the remainder of the TCP function system copes with this depends on what actually underlies this file descriptor. A regular file is likely to be unusable; a FIFO (pipe) of some sort will work better, but note that it is not a good idea for two different sessions to attempt to read from the same FIFO at once. \nIf the option -q is given with any of the three forms, tcp_open will not print informational messages, although it will in any case exit with an appropriate status. \nIf the line editor (zle) is in use, which is typically the case if the shell is interactive, tcp_open installs a handler inside zle which will check for new data at the same time as it checks for keyboard input. This is convenient as the shell consumes no CPU time while waiting; the test is performed by the operating system. Giving the option -z to any of the forms of tcp_open prevents the handler from being installed, so data must be read explicitly. Note, however, this is not necessary for executing complete sets of send and read commands from a function, as zle is not active at this point. Generally speaking, the handler is only active when the shell is waiting for input at a command prompt or in the vared builtin. The option has no effect if zle is not active; ‘[[ -o zle]]’ will test for this. \nThe first session to be opened becomes the current session and subsequent calls to tcp_open do not change it. The current session is stored in the parameter $TCP_SESS; see below for more detail about the parameters used by the system. \nThe function tcp_on_open, if defined, is called when a session is opened. See the description below. \ntcp_close [ -qn ] [ -a | -l sess[,...] | sess ... ] \nClose the named sessions, or the current session if none is given, or all open sessions if -a is given. The options -l and -s are both handled for consistency with tcp_open, although the latter is redundant. \nIf the session being closed is the current one, $TCP_SESS is unset, leaving no current session, even if there are other sessions still open. \nIf the session was opened with tcp_open -f, the file descriptor is closed so long as it is in the range 0 to 9 accessible directly from the command line. If the option -n is given, no attempt will be made to close file descriptors in this case. The -n option is not used for genuine ztcp session; the file descriptors are always closed with the session. \nIf the option -q is given, no informational messages will be printed. \ntcp_read [ -bdq ] [ -t TO ] [ -T TO ] [ -a | -u fd[,...] | -l sess[,...] | -s sess ... ] \nPerform a read operation on the current session, or on a list of sessions if any are given with -u, -l or -s, or all open sessions if the option -a is given. Any of the -u, -l or -s options may be repeated or mixed together. The -u option specifies a file descriptor directly (only those managed by this system are useful), the other two specify sessions as described for tcp_open above. \nThe function checks for new data available on all the sessions listed. Unless the -b option is given, it will not block waiting for new data. Any one line of data from any of the available sessions will be read, stored in the parameter $TCP_LINE, and displayed to standard output unless $TCP_SILENT contains a non-empty string. When printed to standard output the string $TCP_PROMPT will be shown at the start of the line; the default form for this includes the name of the session being read. See below for more information on these parameters. In this mode, tcp_read can be called repeatedly until it returns status 2 which indicates all pending input from all specified sessions has been handled. \nWith the option -b, equivalent to an infinite timeout, the function will block until a line is available to read from one of the specified sessions. However, only a single line is returned. \nThe option -d indicates that all pending input should be drained. In this case tcp_read may process multiple lines in the manner given above; only the last is stored in $TCP_LINE, but the complete set is stored in the array $tcp_lines. This is cleared at the start of each call to tcp_read. \nThe options -t and -T specify a timeout in seconds, which may be a floating point number for increased accuracy. With -t the timeout is applied before each line read. With -T, the timeout applies to the overall operation, possibly including multiple read operations if the option -d is present; without this option, there is no distinction between -t and -T. \nThe function does not print informational messages, but if the option -q is given, no error message is printed for a non-existent session. \nA return status of 2 indicates a timeout or no data to read. Any other non-zero return status indicates some error condition. \nSee tcp_log for how to control where data is sent by tcp_read. \ntcp_send [ -cnq ] [ -s sess | -l sess[,...] ] data ... tcp_send [ -cnq ] -a data ... \nSend the supplied data strings to all the specified sessions in turn. The underlying operation differs little from a ‘print -r’ to the session’s file descriptor, although it attempts to prevent the shell from dying owing to a SIGPIPE caused by an attempt to write to a defunct session. \nThe option -c causes tcp_send to behave like cat. It reads lines from standard input until end of input and sends them in turn to the specified session(s) exactly as if they were given as data arguments to individual tcp_send commands. \nThe option -n prevents tcp_send from putting a newline at the end of the data strings. \nThe remaining options all behave as for tcp_read. \nThe data arguments are not further processed once they have been passed to tcp_send; they are simply passed down to print -r. \nIf the parameter $TCP_OUTPUT is a non-empty string and logging is enabled then the data sent to each session will be echoed to the log file(s) with $TCP_OUTPUT in front where appropriate, much in the manner of $TCP_PROMPT. \n24.2.2 Session Management\ntcp_alias [ -q ] alias=sess ... tcp_alias [ -q ] [ alias ... ] tcp_alias -d [ -q ] alias ... \nThis function is not particularly well tested. \nThe first form creates an alias for a session name; alias can then be used to refer to the existing session sess. As many aliases may be listed as required. \nThe second form lists any aliases specified, or all aliases if none. \nThe third form deletes all the aliases listed. The underlying sessions are not affected. \nThe option -q suppresses an inconsistently chosen subset of error messages. \ntcp_log [ -asc ] [ -n | -N ] [ logfile ] \nWith an argument logfile, all future input from tcp_read will be logged to the named file. Unless -a (append) is given, this file will first be truncated or created empty. With no arguments, show the current status of logging. \nWith the option -s, per-session logging is enabled. Input from tcp_read is output to the file logfile.sess. As the session is automatically discriminated by the filename, the contents are raw (no $TCP_PROMPT). The option -a applies as above. Per-session logging and logging of all data in one file are not mutually exclusive. \nThe option -c closes all logging, both complete and per-session logs. \nThe options -n and -N respectively turn off or restore output of data read by tcp_read to standard output; hence ‘tcp_log -cn’ turns off all output by tcp_read. \nThe function is purely a convenient front end to setting the parameters $TCP_LOG, $TCP_LOG_SESS, $TCP_SILENT, which are described below. \ntcp_rename old new \nRename session old to session new. The old name becomes invalid. \ntcp_sess [ sess [ command [ arg ... ] ] ] \nWith no arguments, list all the open sessions and associated file descriptors. The current session is marked with a star. For use in functions, direct access to the parameters $tcp_by_name, $tcp_by_fd and $TCP_SESS is probably more convenient; see below. \nWith a sess argument, set the current session to sess. This is equivalent to changing $TCP_SESS directly. \nWith additional arguments, temporarily set the current session while executing ‘command arg ...’. command is re-evaluated so as to expand aliases etc., but the remaining args are passed through as that appear to tcp_sess. The original session is restored when tcp_sess exits. \n24.2.3 Advanced I/O\ntcp_command send-option ... send-argument ... \nThis is a convenient front-end to tcp_send. All arguments are passed to tcp_send, then the function pauses waiting for data. While data is arriving at least every $TCP_TIMEOUT (default 0.3) seconds, data is handled and printed out according to the current settings. Status 0 is always returned. \nThis is generally only useful for interactive use, to prevent the display becoming fragmented by output returned from the connection. Within a programme or function it is generally better to handle reading data by a more explicit method. \ntcp_expect [ -q ] [ -p var | -P var ] [ -t TO | -T TO ] [ -a | -s sess | -l sess[,...] ] pattern ... \nWait for input matching any of the given patterns from any of the specified sessions. Input is ignored until an input line matches one of the given patterns; at this point status zero is returned, the matching line is stored in $TCP_LINE, and the full set of lines read during the call to tcp_expect is stored in the array $tcp_expect_lines. \nSessions are specified in the same way as tcp_read: the default is to use the current session, otherwise the sessions specified by -a, -s, or -l are used. \nEach pattern is a standard zsh extended-globbing pattern; note that it needs to be quoted to avoid it being expanded immediately by filename generation. It must match the full line, so to match a substring there must be a ‘*’ at the start and end. The line matched against includes the $TCP_PROMPT added by tcp_read. It is possible to include the globbing flags ‘#b’ or ‘#m’ in the patterns to make backreferences available in the parameters $MATCH, $match, etc., as described in the base zsh documentation on pattern matching. \nUnlike tcp_read, the default behaviour of tcp_expect is to block indefinitely until the required input is found. This can be modified by specifying a timeout with -t or -T; these function as in tcp_read, specifying a per-read or overall timeout, respectively, in seconds, as an integer or floating-point number. As tcp_read, the function returns status 2 if a timeout occurs. \nThe function returns as soon as any one of the patterns given match. If the caller needs to know which of the patterns matched, the option -p var can be used; on return, $var is set to the number of the pattern using ordinary zsh indexing, i.e. the first is 1, and so on. Note the absence of a ‘$’ in front of var. To avoid clashes, the parameter cannot begin with ‘_expect’. The index -1 is used if there is a timeout and 0 if there is no match. \nThe option -P var works similarly to -p, but instead of numerical indexes the regular arguments must begin with a prefix followed by a colon: that prefix is then used as a tag to which var is set when the argument matches. The tag timeout is used if there is a timeout and the empty string if there is no match. Note it is acceptable for different arguments to start with the same prefix if the matches do not need to be distinguished. \nThe option -q is passed directly down to tcp_read. \nAs all input is done via tcp_read, all the usual rules about output of lines read apply. One exception is that the parameter $tcp_lines will only reflect the line actually matched by tcp_expect; use $tcp_expect_lines for the full set of lines read during the function call. \ntcp_proxy \nThis is a simple-minded function to accept a TCP connection and execute a command with I/O redirected to the connection. Extreme caution should be taken as there is no security whatsoever and this can leave your computer open to the world. Ideally, it should only be used behind a firewall. \nThe first argument is a TCP port on which the function will listen. \nThe remaining arguments give a command and its arguments to execute with standard input, standard output and standard error redirected to the file descriptor on which the TCP session has been accepted. If no command is given, a new zsh is started. This gives everyone on your network direct access to your account, which in many cases will be a bad thing. \nThe command is run in the background, so tcp_proxy can then accept new connections. It continues to accept new connections until interrupted. \ntcp_spam [ -ertv ] [ -a | -s sess | -l sess[,...] ] cmd [ arg ... ] \nExecute ‘cmd [ arg ... ]’ for each session in turn. Note this executes the command and arguments; it does not send the command line as data unless the -t (transmit) option is given. \nThe sessions may be selected explicitly with the standard -a, -s or -l options, or may be chosen implicitly. If none of the three options is given the rules are: first, if the array $tcp_spam_list is set, this is taken as the list of sessions, otherwise all sessions are taken. Second, any sessions given in the array $tcp_no_spam_list are removed from the list of sessions. \nNormally, any sessions added by the ‘-a’ flag or when all sessions are chosen implicitly are spammed in alphabetic order; sessions given by the $tcp_spam_list array or on the command line are spammed in the order given. The -r flag reverses the order however it was arrived it. \nThe -v flag specifies that a $TCP_PROMPT will be output before each session. This is output after any modification to TCP_SESS by the user-defined tcp_on_spam function described below. (Obviously that function is able to generate its own output.) \nIf the option -e is present, the line given as ‘cmd [ arg ... ]’ is executed using eval, otherwise it is executed without any further processing. \ntcp_talk \nThis is a fairly simple-minded attempt to force input to the line editor to go straight to the default TCP_SESS. \nAn escape string, $TCP_TALK_ESCAPE, default ‘:’, is used to allow access to normal shell operation. If it is on its own at the start of the line, or followed only by whitespace, the line editor returns to normal operation. Otherwise, the string and any following whitespace are skipped and the remainder of the line executed as shell input without any change of the line editor’s operating mode. \nThe current implementation is somewhat deficient in terms of use of the command history. For this reason, many users will prefer to use some form of alternative approach for sending data easily to the current session. One simple approach is to alias some special character (such as ‘%’) to ‘tcp_command --’. \ntcp_wait \nThe sole argument is an integer or floating point number which gives the seconds to delay. The shell will do nothing for that period except wait for input on all TCP sessions by calling tcp_read -a. This is similar to the interactive behaviour at the command prompt when zle handlers are installed. \n24.2.4 ‘One-shot’ file transfer\ntcp_point port tcp_shoot host port \nThis pair of functions provide a simple way to transfer a file between two hosts within the shell. Note, however, that bulk data transfer is currently done using cat. tcp_point reads any data arriving at port and sends it to standard output; tcp_shoot connects to port on host and sends its standard input. Any unused port may be used; the standard mechanism for picking a port is to think of a random four-digit number above 1024 until one works. \nTo transfer a file from host woodcock to host springes, on springes: \ntcp_point 8091 >output_file\nand on woodcock: \ntcp_shoot springes 8091 <input_file\nAs these two functions do not require tcp_open to set up a TCP connection first, they may need to be autoloaded separately. \n24.3 TCP User-defined Functions\nCertain functions, if defined by the user, will be called by the function system in certain contexts. This facility depends on the module zsh/parameter, which is usually available in interactive shells as the completion system depends on it. None of the functions need be defined; they simply provide convenient hooks when necessary. \nTypically, these are called after the requested action has been taken, so that the various parameters will reflect the new state. \ntcp_on_alias alias fd \nWhen an alias is defined, this function will be called with two arguments: the name of the alias, and the file descriptor of the corresponding session. \ntcp_on_awol sess fd \nIf the function tcp_fd_handler is handling input from the line editor and detects that the file descriptor is no longer reusable, by default it removes it from the list of file descriptors handled by this method and prints a message. If the function tcp_on_awol is defined it is called immediately before this point. It may return status 100, which indicates that the normal handling should still be performed; any other return status indicates that no further action should be taken and the tcp_fd_handler should return immediately with the given status. Typically the action of tcp_on_awol will be to close the session. \nThe variable TCP_INVALIDATE_ZLE will be a non-empty string if it is necessary to invalidate the line editor display using ‘zle -I’ before printing output from the function. \n(‘AWOL’ is military jargon for ‘absent without leave’ or some variation. It has no pre-existing technical meaning known to the author.) \ntcp_on_close sess fd \nThis is called with the name of a session being closed and the file descriptor which corresponded to that session. Both will be invalid by the time the function is called. \ntcp_on_open sess fd \nThis is called after a new session has been defined with the session name and file descriptor as arguments. If it returns a non-zero status, opening the session is assumed to fail and the session is closed again; however, tcp_open will continue to attempt to open any remaining sessions given on the command line. \ntcp_on_rename oldsess fd newsess \nThis is called after a session has been renamed with the three arguments old session name, file descriptor, new session name. \ntcp_on_spam sess command ... \nThis is called once for each session spammed, just before a command is executed for a session by tcp_spam. The arguments are the session name followed by the command list to be executed. If tcp_spam was called with the option -t, the first command will be tcp_send. \nThis function is called after $TCP_SESS is set to reflect the session to be spammed, but before any use of it is made. Hence it is possible to alter the value of $TCP_SESS within this function. For example, the session arguments to tcp_spam could include extra information to be stripped off and processed in tcp_on_spam. \nIf the function sets the parameter $REPLY to ‘done’, the command line is not executed; in addition, no prompt is printed for the -v option to tcp_spam. \ntcp_on_unalias alias fd \nThis is called with the name of an alias and the corresponding session’s file descriptor after an alias has been deleted. \n24.4 TCP Utility Functions\nThe following functions are used by the TCP function system but will rarely if ever need to be called directly. \ntcp_fd_handler \nThis is the function installed by tcp_open for handling input from within the line editor, if that is required. It is in the format documented for the builtin ‘zle -F’ in Zle Builtins . \nWhile active, the function sets the parameter TCP_HANDLER_ACTIVE to 1. This allows shell code called internally (for example, by setting tcp_on_read) to tell if is being called when the shell is otherwise idle at the editor prompt. \ntcp_output [ -q ] -P prompt -F fd -S sess \nThis function is used for both logging and handling output to standard output, from within tcp_read and (if $TCP_OUTPUT is set) tcp_send. \nThe prompt to use is specified by -P; the default is the empty string. It can contain: \n%c \nExpands to 1 if the session is the current session, otherwise 0. Used with ternary expressions such as ‘%(c.-.+)’ to output ‘+’ for the current session and ‘-’ otherwise. \n%f \nReplaced by the session’s file descriptor. \n%s \nReplaced by the session name. \n%% \nReplaced by a single ‘%’. \nThe option -q suppresses output to standard output, but not to any log files which are configured. \nThe -S and -F options are used to pass in the session name and file descriptor for possible replacement in the prompt. \n24.5 TCP User Parameters\nParameters follow the usual convention that uppercase is used for scalars and integers, while lowercase is used for normal and associative array. It is always safe for user code to read these parameters. Some parameters may also be set; these are noted explicitly. Others are included in this group as they are set by the function system for the user’s benefit, i.e. setting them is typically not useful but is benign. \nIt is often also useful to make settable parameters local to a function. For example, ‘local TCP_SILENT=1’ specifies that data read during the function call will not be printed to standard output, regardless of the setting outside the function. Likewise, ‘local TCP_SESS=sess’ sets a session for the duration of a function, and ‘local TCP_PROMPT=’ specifies that no prompt is used for input during the function. \ntcp_expect_lines \nArray. The set of lines read during the last call to tcp_expect, including the last ($TCP_LINE). \ntcp_filter \nArray. May be set directly. A set of extended globbing patterns which, if matched in tcp_output, will cause the line not to be printed to standard output. The patterns should be defined as described for the arguments to tcp_expect. Output of line to log files is not affected. \nTCP_HANDLER_ACTIVE \nScalar. Set to 1 within tcp_fd_handler to indicate to functions called recursively that they have been called during an editor session. Otherwise unset. \nTCP_LINE \nThe last line read by tcp_read, and hence also tcp_expect. \nTCP_LINE_FD \nThe file descriptor from which $TCP_LINE was read. ${tcp_by_fd[$TCP_LINE_FD]} will give the corresponding session name. \ntcp_lines \nArray. The set of lines read during the last call to tcp_read, including the last ($TCP_LINE). \nTCP_LOG \nMay be set directly, although it is also controlled by tcp_log. The name of a file to which output from all sessions will be sent. The output is proceeded by the usual $TCP_PROMPT. If it is not an absolute path name, it will follow the user’s current directory. \nTCP_LOG_SESS \nMay be set directly, although it is also controlled by tcp_log. The prefix for a set of files to which output from each session separately will be sent; the full filename is ${TCP_LOG_SESS}.sess. Output to each file is raw; no prompt is added. If it is not an absolute path name, it will follow the user’s current directory. \ntcp_no_spam_list \nArray. May be set directly. See tcp_spam for how this is used. \nTCP_OUTPUT \nMay be set directly. If a non-empty string, any data sent to a session by tcp_send will be logged. This parameter gives the prompt to be used in a file specified by $TCP_LOG but not in a file generated from $TCP_LOG_SESS. The prompt string has the same format as TCP_PROMPT and the same rules for its use apply. \nTCP_PROMPT \nMay be set directly. Used as the prefix for data read by tcp_read which is printed to standard output or to the log file given by $TCP_LOG, if any. Any ‘%s’, ‘%f’ or ‘%%’ occurring in the string will be replaced by the name of the session, the session’s underlying file descriptor, or a single ‘%’, respectively. The expression ‘%c’ expands to 1 if the session being read is the current session, else 0; this is most useful in ternary expressions such as ‘%(c.-.+)’ which outputs ‘+’ if the session is the current one, else ‘-’. \nIf the prompt starts with %P, this is stripped and the complete result of the previous stage is passed through standard prompt %-style formatting before being output. \nTCP_READ_DEBUG \nMay be set directly. If this has non-zero length, tcp_read will give some limited diagnostics about data being read. \nTCP_SECONDS_START \nThis value is created and initialised to zero by tcp_open. \nThe functions tcp_read and tcp_expect use the shell’s SECONDS parameter for their own timing purposes. If that parameter is not of floating point type on entry to one of the functions, it will create a local parameter SECONDS which is floating point and set the parameter TCP_SECONDS_START to the previous value of $SECONDS. If the parameter is already floating point, it is used without a local copy being created and TCP_SECONDS_START is not set. As the global value is zero, the shell elapsed time is guaranteed to be the sum of $SECONDS and $TCP_SECONDS_START. \nThis can be avoided by setting SECONDS globally to a floating point value using ‘typeset -F SECONDS’; then the TCP functions will never make a local copy and never set TCP_SECONDS_START to a non-zero value. \nTCP_SESS \nMay be set directly. The current session; must refer to one of the sessions established by tcp_open. \nTCP_SILENT \nMay be set directly, although it is also controlled by tcp_log. If of non-zero length, data read by tcp_read will not be written to standard output, though may still be written to a log file. \ntcp_spam_list \nArray. May be set directly. See the description of the function tcp_spam for how this is used. \nTCP_TALK_ESCAPE \nMay be set directly. See the description of the function tcp_talk for how this is used. \nTCP_TIMEOUT \nMay be set directly. Currently this is only used by the function tcp_command, see above. \n24.6 TCP User-defined Parameters\nThe following parameters are not set by the function system, but have a special effect if set by the user. \ntcp_on_read \nThis should be an associative array; if it is not, the behaviour is undefined. Each key is the name of a shell function or other command, and the corresponding value is a shell pattern (using EXTENDED_GLOB). Every line read from a TCP session directly or indirectly using tcp_read (which includes lines read by tcp_expect) is compared against the pattern. If the line matches, the command given in the key is called with two arguments: the name of the session from which the line was read, and the line itself. \nIf any function called to handle a line returns a non-zero status, the line is not output. Thus a tcp_on_read handler containing only the instruction ‘return 1’ can be used to suppress output of particular lines (see, however, tcp_filter above). However, the line is still stored in TCP_LINE and tcp_lines; this occurs after all tcp_on_read processing. \n24.7 TCP Utility Parameters\nThese parameters are controlled by the function system; they may be read directly, but should not usually be set by user code. \ntcp_aliases \nAssociative array. The keys are the names of sessions established with tcp_open; each value is a space-separated list of aliases which refer to that session. \ntcp_by_fd \nAssociative array. The keys are session file descriptors; each value is the name of that session. \ntcp_by_name \nAssociative array. The keys are the names of sessions; each value is the file descriptor associated with that session. \n24.8 TCP Examples\nHere is a trivial example using a remote calculator. \nTo create a calculator server on port 7337 (see the dc manual page for quite how infuriating the underlying command is): \nTo connect to this from the same host with a session also named ‘dc’: \ntcp_open localhost 7337 dc\nTo send a command to the remote session and wait a short while for output (assuming dc is the current session): \nTo close the session: \nThe tcp_proxy needs to be killed to be stopped. Note this will not usually kill any connections which have already been accepted, and also that the port is not immediately available for reuse. \nThe following chunk of code puts a list of sessions into an xterm header, with the current session followed by a star. \nprint -n \"\\033]2;TCP:\" ${(k)tcp_by_name:/$TCP_SESS/$TCP_SESS\\*} \"\\a\"\n24.9 TCP Bugs\nThe function tcp_read uses the shell’s normal read builtin. As this reads a complete line at once, data arriving without a terminating newline can cause the function to block indefinitely. \nThough the function suite works well for interactive use and for data arriving in small amounts, the performance when large amounts of data are being exchanged is likely to be extremely poor. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-TCP-Function-System-html-TCP-Function-System-7eopi.html",
  "markdown": "# zsh: 24 TCP Function System\n\n* * *\n\n## 24.1 Description\n\nA module zsh/net/tcp is provided to provide network I/O over TCP/IP from within the shell; see its description in [Zsh Modules](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Zsh-Modules). This manual page describes a function suite based on the module. If the module is installed, the functions are usually installed at the same time, in which case they will be available for autoloading in the default function search path. In addition to the zsh/net/tcp module, the zsh/zselect module is used to implement timeouts on read operations. For troubleshooting tips, consult the corresponding advice for the zftp functions described in [Zftp Function System](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Zftp-Function-System).\n\nThere are functions corresponding to the basic I/O operations open, close, read and send, named tcp\\_open etc., as well as a function tcp\\_expect for pattern match analysis of data read as input. The system makes it easy to receive data from and send data to multiple named sessions at once. In addition, it can be linked with the shell’s line editor in such a way that input data is automatically shown at the terminal. Other facilities available including logging, filtering and configurable output prompts.\n\nTo use the system where it is available, it should be enough to ‘autoload -U tcp\\_open’ and run tcp\\_open as documented below to start a session. The tcp\\_open function will autoload the remaining functions.\n\n* * *\n\n## 24.2 TCP User Functions\n\n* * *\n\n### 24.2.1 Basic I/O\n\ntcp\\_open \\[ \\-qz \\] host port \\[ sess \\]\n\ntcp\\_open \\[ \\-qz \\] \\[ \\-s sess | \\-l sess\\[,...\\] \\] ...\n\ntcp\\_open \\[ \\-qz \\] \\[ \\-a fd | \\-f fd \\] \\[ sess \\]\n\nOpen a new session. In the first and simplest form, open a TCP connection to host host at port port; numeric and symbolic forms are understood for both.\n\nIf sess is given, this becomes the name of the session which can be used to refer to multiple different TCP connections. If sess is not given, the function will invent a numeric name value (note this is _not_ the same as the file descriptor to which the session is attached). It is recommended that session names not include ‘funny’ characters, where funny characters are not well-defined but certainly do not include alphanumerics or underscores, and certainly do include whitespace.\n\nIn the second case, one or more sessions to be opened are given by name. A single session name is given after \\-s and a comma-separated list after \\-l; both options may be repeated as many times as necessary. A failure to open any session causes tcp\\_open to abort. The host and port are read from the file .ztcp\\_sessions in the same directory as the user’s zsh initialisation files, i.e. usually the home directory, but $ZDOTDIR if that is set. The file consists of lines each giving a session name and the corresponding host and port, in that order (note the session name comes first, not last), separated by whitespace.\n\nThe third form allows passive and fake TCP connections. If the option \\-a is used, its argument is a file descriptor open for listening for connections. No function front-end is provided to open such a file descriptor, but a call to ‘ztcp -l port’ will create one with the file descriptor stored in the parameter $REPLY. The listening port can be closed with ‘ztcp -c fd’. A call to ‘tcp\\_open -a fd’ will block until a remote TCP connection is made to port on the local machine. At this point, a session is created in the usual way and is largely indistinguishable from an active connection created with one of the first two forms.\n\nIf the option \\-f is used, its argument is a file descriptor which is used directly as if it were a TCP session. How well the remainder of the TCP function system copes with this depends on what actually underlies this file descriptor. A regular file is likely to be unusable; a FIFO (pipe) of some sort will work better, but note that it is not a good idea for two different sessions to attempt to read from the same FIFO at once.\n\nIf the option \\-q is given with any of the three forms, tcp\\_open will not print informational messages, although it will in any case exit with an appropriate status.\n\nIf the line editor (zle) is in use, which is typically the case if the shell is interactive, tcp\\_open installs a handler inside zle which will check for new data at the same time as it checks for keyboard input. This is convenient as the shell consumes no CPU time while waiting; the test is performed by the operating system. Giving the option \\-z to any of the forms of tcp\\_open prevents the handler from being installed, so data must be read explicitly. Note, however, this is not necessary for executing complete sets of send and read commands from a function, as zle is not active at this point. Generally speaking, the handler is only active when the shell is waiting for input at a command prompt or in the vared builtin. The option has no effect if zle is not active; ‘\\[\\[ -o zle\\]\\]’ will test for this.\n\nThe first session to be opened becomes the current session and subsequent calls to tcp\\_open do not change it. The current session is stored in the parameter $TCP\\_SESS; see below for more detail about the parameters used by the system.\n\nThe function tcp\\_on\\_open, if defined, is called when a session is opened. See the description below.\n\ntcp\\_close \\[ \\-qn \\] \\[ \\-a | \\-l sess\\[,...\\] | sess ... \\]\n\nClose the named sessions, or the current session if none is given, or all open sessions if \\-a is given. The options \\-l and \\-s are both handled for consistency with tcp\\_open, although the latter is redundant.\n\nIf the session being closed is the current one, $TCP\\_SESS is unset, leaving no current session, even if there are other sessions still open.\n\nIf the session was opened with tcp\\_open -f, the file descriptor is closed so long as it is in the range 0 to 9 accessible directly from the command line. If the option \\-n is given, no attempt will be made to close file descriptors in this case. The \\-n option is not used for genuine ztcp session; the file descriptors are always closed with the session.\n\nIf the option \\-q is given, no informational messages will be printed.\n\ntcp\\_read \\[ \\-bdq \\] \\[ \\-t TO \\] \\[ \\-T TO \\]\n\n         \\[ \\-a | \\-u fd\\[,...\\] | \\-l sess\\[,...\\] | \\-s sess ... \\]\n\nPerform a read operation on the current session, or on a list of sessions if any are given with \\-u, \\-l or \\-s, or all open sessions if the option \\-a is given. Any of the \\-u, \\-l or \\-s options may be repeated or mixed together. The \\-u option specifies a file descriptor directly (only those managed by this system are useful), the other two specify sessions as described for tcp\\_open above.\n\nThe function checks for new data available on all the sessions listed. Unless the \\-b option is given, it will not block waiting for new data. Any one line of data from any of the available sessions will be read, stored in the parameter $TCP\\_LINE, and displayed to standard output unless $TCP\\_SILENT contains a non-empty string. When printed to standard output the string $TCP\\_PROMPT will be shown at the start of the line; the default form for this includes the name of the session being read. See below for more information on these parameters. In this mode, tcp\\_read can be called repeatedly until it returns status 2 which indicates all pending input from all specified sessions has been handled.\n\nWith the option \\-b, equivalent to an infinite timeout, the function will block until a line is available to read from one of the specified sessions. However, only a single line is returned.\n\nThe option \\-d indicates that all pending input should be drained. In this case tcp\\_read may process multiple lines in the manner given above; only the last is stored in $TCP\\_LINE, but the complete set is stored in the array $tcp\\_lines. This is cleared at the start of each call to tcp\\_read.\n\nThe options \\-t and \\-T specify a timeout in seconds, which may be a floating point number for increased accuracy. With \\-t the timeout is applied before each line read. With \\-T, the timeout applies to the overall operation, possibly including multiple read operations if the option \\-d is present; without this option, there is no distinction between \\-t and \\-T.\n\nThe function does not print informational messages, but if the option \\-q is given, no error message is printed for a non-existent session.\n\nA return status of 2 indicates a timeout or no data to read. Any other non-zero return status indicates some error condition.\n\nSee tcp\\_log for how to control where data is sent by tcp\\_read.\n\ntcp\\_send \\[ \\-cnq \\] \\[ \\-s sess | \\-l sess\\[,...\\] \\] data ...\n\ntcp\\_send \\[ \\-cnq \\] \\-a data ...\n\nSend the supplied data strings to all the specified sessions in turn. The underlying operation differs little from a ‘print -r’ to the session’s file descriptor, although it attempts to prevent the shell from dying owing to a SIGPIPE caused by an attempt to write to a defunct session.\n\nThe option \\-c causes tcp\\_send to behave like cat. It reads lines from standard input until end of input and sends them in turn to the specified session(s) exactly as if they were given as data arguments to individual tcp\\_send commands.\n\nThe option \\-n prevents tcp\\_send from putting a newline at the end of the data strings.\n\nThe remaining options all behave as for tcp\\_read.\n\nThe data arguments are not further processed once they have been passed to tcp\\_send; they are simply passed down to print -r.\n\nIf the parameter $TCP\\_OUTPUT is a non-empty string and logging is enabled then the data sent to each session will be echoed to the log file(s) with $TCP\\_OUTPUT in front where appropriate, much in the manner of $TCP\\_PROMPT.\n\n* * *\n\n### 24.2.2 Session Management\n\ntcp\\_alias \\[ \\-q \\] alias\\=sess ...\n\ntcp\\_alias \\[ \\-q \\] \\[ alias ... \\]\n\ntcp\\_alias \\-d \\[ \\-q \\] alias ...\n\nThis function is not particularly well tested.\n\nThe first form creates an alias for a session name; alias can then be used to refer to the existing session sess. As many aliases may be listed as required.\n\nThe second form lists any aliases specified, or all aliases if none.\n\nThe third form deletes all the aliases listed. The underlying sessions are not affected.\n\nThe option \\-q suppresses an inconsistently chosen subset of error messages.\n\ntcp\\_log \\[ \\-asc \\] \\[ \\-n | \\-N \\] \\[ logfile \\]\n\nWith an argument logfile, all future input from tcp\\_read will be logged to the named file. Unless \\-a (append) is given, this file will first be truncated or created empty. With no arguments, show the current status of logging.\n\nWith the option \\-s, per-session logging is enabled. Input from tcp\\_read is output to the file logfile.sess. As the session is automatically discriminated by the filename, the contents are raw (no $TCP\\_PROMPT). The option \\-a applies as above. Per-session logging and logging of all data in one file are not mutually exclusive.\n\nThe option \\-c closes all logging, both complete and per-session logs.\n\nThe options \\-n and \\-N respectively turn off or restore output of data read by tcp\\_read to standard output; hence ‘tcp\\_log -cn’ turns off all output by tcp\\_read.\n\nThe function is purely a convenient front end to setting the parameters $TCP\\_LOG, $TCP\\_LOG\\_SESS, $TCP\\_SILENT, which are described below.\n\ntcp\\_rename old new\n\nRename session old to session new. The old name becomes invalid.\n\ntcp\\_sess \\[ sess \\[ command \\[ arg ... \\] \\] \\]\n\nWith no arguments, list all the open sessions and associated file descriptors. The current session is marked with a star. For use in functions, direct access to the parameters $tcp\\_by\\_name, $tcp\\_by\\_fd and $TCP\\_SESS is probably more convenient; see below.\n\nWith a sess argument, set the current session to sess. This is equivalent to changing $TCP\\_SESS directly.\n\nWith additional arguments, temporarily set the current session while executing ‘command arg ...’. command is re-evaluated so as to expand aliases etc., but the remaining args are passed through as that appear to tcp\\_sess. The original session is restored when tcp\\_sess exits.\n\n* * *\n\n### 24.2.3 Advanced I/O\n\ntcp\\_command send-option ... send-argument ...\n\nThis is a convenient front-end to tcp\\_send. All arguments are passed to tcp\\_send, then the function pauses waiting for data. While data is arriving at least every $TCP\\_TIMEOUT (default 0.3) seconds, data is handled and printed out according to the current settings. Status 0 is always returned.\n\nThis is generally only useful for interactive use, to prevent the display becoming fragmented by output returned from the connection. Within a programme or function it is generally better to handle reading data by a more explicit method.\n\ntcp\\_expect \\[ \\-q \\] \\[ \\-p var | \\-P var \\] \\[ \\-t TO | \\-T TO \\]\n\n           \\[ \\-a | \\-s sess | \\-l sess\\[,...\\] \\] pattern ...\n\nWait for input matching any of the given patterns from any of the specified sessions. Input is ignored until an input line matches one of the given patterns; at this point status zero is returned, the matching line is stored in $TCP\\_LINE, and the full set of lines read during the call to tcp\\_expect is stored in the array $tcp\\_expect\\_lines.\n\nSessions are specified in the same way as tcp\\_read: the default is to use the current session, otherwise the sessions specified by \\-a, \\-s, or \\-l are used.\n\nEach pattern is a standard zsh extended-globbing pattern; note that it needs to be quoted to avoid it being expanded immediately by filename generation. It must match the full line, so to match a substring there must be a ‘\\*’ at the start and end. The line matched against includes the $TCP\\_PROMPT added by tcp\\_read. It is possible to include the globbing flags ‘#b’ or ‘#m’ in the patterns to make backreferences available in the parameters $MATCH, $match, etc., as described in the base zsh documentation on pattern matching.\n\nUnlike tcp\\_read, the default behaviour of tcp\\_expect is to block indefinitely until the required input is found. This can be modified by specifying a timeout with \\-t or \\-T; these function as in tcp\\_read, specifying a per-read or overall timeout, respectively, in seconds, as an integer or floating-point number. As tcp\\_read, the function returns status 2 if a timeout occurs.\n\nThe function returns as soon as any one of the patterns given match. If the caller needs to know which of the patterns matched, the option \\-p var can be used; on return, $var is set to the number of the pattern using ordinary zsh indexing, i.e. the first is 1, and so on. Note the absence of a ‘$’ in front of var. To avoid clashes, the parameter cannot begin with ‘\\_expect’. The index -1 is used if there is a timeout and 0 if there is no match.\n\nThe option \\-P var works similarly to \\-p, but instead of numerical indexes the regular arguments must begin with a prefix followed by a colon: that prefix is then used as a tag to which var is set when the argument matches. The tag timeout is used if there is a timeout and the empty string if there is no match. Note it is acceptable for different arguments to start with the same prefix if the matches do not need to be distinguished.\n\nThe option \\-q is passed directly down to tcp\\_read.\n\nAs all input is done via tcp\\_read, all the usual rules about output of lines read apply. One exception is that the parameter $tcp\\_lines will only reflect the line actually matched by tcp\\_expect; use $tcp\\_expect\\_lines for the full set of lines read during the function call.\n\ntcp\\_proxy\n\nThis is a simple-minded function to accept a TCP connection and execute a command with I/O redirected to the connection. Extreme caution should be taken as there is no security whatsoever and this can leave your computer open to the world. Ideally, it should only be used behind a firewall.\n\nThe first argument is a TCP port on which the function will listen.\n\nThe remaining arguments give a command and its arguments to execute with standard input, standard output and standard error redirected to the file descriptor on which the TCP session has been accepted. If no command is given, a new zsh is started. This gives everyone on your network direct access to your account, which in many cases will be a bad thing.\n\nThe command is run in the background, so tcp\\_proxy can then accept new connections. It continues to accept new connections until interrupted.\n\ntcp\\_spam \\[ \\-ertv \\] \\[ \\-a | \\-s sess | \\-l sess\\[,...\\] \\] cmd \\[ arg ... \\]\n\nExecute ‘cmd \\[ arg ... \\]’ for each session in turn. Note this executes the command and arguments; it does not send the command line as data unless the \\-t (transmit) option is given.\n\nThe sessions may be selected explicitly with the standard \\-a, \\-s or \\-l options, or may be chosen implicitly. If none of the three options is given the rules are: first, if the array $tcp\\_spam\\_list is set, this is taken as the list of sessions, otherwise all sessions are taken. Second, any sessions given in the array $tcp\\_no\\_spam\\_list are removed from the list of sessions.\n\nNormally, any sessions added by the ‘\\-a’ flag or when all sessions are chosen implicitly are spammed in alphabetic order; sessions given by the $tcp\\_spam\\_list array or on the command line are spammed in the order given. The \\-r flag reverses the order however it was arrived it.\n\nThe \\-v flag specifies that a $TCP\\_PROMPT will be output before each session. This is output after any modification to TCP\\_SESS by the user-defined tcp\\_on\\_spam function described below. (Obviously that function is able to generate its own output.)\n\nIf the option \\-e is present, the line given as ‘cmd \\[ arg ... \\]’ is executed using eval, otherwise it is executed without any further processing.\n\ntcp\\_talk\n\nThis is a fairly simple-minded attempt to force input to the line editor to go straight to the default TCP\\_SESS.\n\nAn escape string, $TCP\\_TALK\\_ESCAPE, default ‘:’, is used to allow access to normal shell operation. If it is on its own at the start of the line, or followed only by whitespace, the line editor returns to normal operation. Otherwise, the string and any following whitespace are skipped and the remainder of the line executed as shell input without any change of the line editor’s operating mode.\n\nThe current implementation is somewhat deficient in terms of use of the command history. For this reason, many users will prefer to use some form of alternative approach for sending data easily to the current session. One simple approach is to alias some special character (such as ‘%’) to ‘tcp\\_command -\\-’.\n\ntcp\\_wait\n\nThe sole argument is an integer or floating point number which gives the seconds to delay. The shell will do nothing for that period except wait for input on all TCP sessions by calling tcp\\_read -a. This is similar to the interactive behaviour at the command prompt when zle handlers are installed.\n\n* * *\n\n### 24.2.4 ‘One-shot’ file transfer\n\ntcp\\_point port\n\ntcp\\_shoot host port\n\nThis pair of functions provide a simple way to transfer a file between two hosts within the shell. Note, however, that bulk data transfer is currently done using cat. tcp\\_point reads any data arriving at port and sends it to standard output; tcp\\_shoot connects to port on host and sends its standard input. Any unused port may be used; the standard mechanism for picking a port is to think of a random four-digit number above 1024 until one works.\n\nTo transfer a file from host woodcock to host springes, on springes:\n\ntcp\\_point 8091 >output\\_file\n\nand on woodcock:\n\ntcp\\_shoot springes 8091 <input\\_file\n\nAs these two functions do not require tcp\\_open to set up a TCP connection first, they may need to be autoloaded separately.\n\n* * *\n\n## 24.3 TCP User-defined Functions\n\nCertain functions, if defined by the user, will be called by the function system in certain contexts. This facility depends on the module zsh/parameter, which is usually available in interactive shells as the completion system depends on it. None of the functions need be defined; they simply provide convenient hooks when necessary.\n\nTypically, these are called after the requested action has been taken, so that the various parameters will reflect the new state.\n\ntcp\\_on\\_alias alias fd\n\nWhen an alias is defined, this function will be called with two arguments: the name of the alias, and the file descriptor of the corresponding session.\n\ntcp\\_on\\_awol sess fd\n\nIf the function tcp\\_fd\\_handler is handling input from the line editor and detects that the file descriptor is no longer reusable, by default it removes it from the list of file descriptors handled by this method and prints a message. If the function tcp\\_on\\_awol is defined it is called immediately before this point. It may return status 100, which indicates that the normal handling should still be performed; any other return status indicates that no further action should be taken and the tcp\\_fd\\_handler should return immediately with the given status. Typically the action of tcp\\_on\\_awol will be to close the session.\n\nThe variable TCP\\_INVALIDATE\\_ZLE will be a non-empty string if it is necessary to invalidate the line editor display using ‘zle -I’ before printing output from the function.\n\n(‘AWOL’ is military jargon for ‘absent without leave’ or some variation. It has no pre-existing technical meaning known to the author.)\n\ntcp\\_on\\_close sess fd\n\nThis is called with the name of a session being closed and the file descriptor which corresponded to that session. Both will be invalid by the time the function is called.\n\ntcp\\_on\\_open sess fd\n\nThis is called after a new session has been defined with the session name and file descriptor as arguments. If it returns a non-zero status, opening the session is assumed to fail and the session is closed again; however, tcp\\_open will continue to attempt to open any remaining sessions given on the command line.\n\ntcp\\_on\\_rename oldsess fd newsess\n\nThis is called after a session has been renamed with the three arguments old session name, file descriptor, new session name.\n\ntcp\\_on\\_spam sess command ...\n\nThis is called once for each session spammed, just _before_ a command is executed for a session by tcp\\_spam. The arguments are the session name followed by the command list to be executed. If tcp\\_spam was called with the option \\-t, the first command will be tcp\\_send.\n\nThis function is called after $TCP\\_SESS is set to reflect the session to be spammed, but before any use of it is made. Hence it is possible to alter the value of $TCP\\_SESS within this function. For example, the session arguments to tcp\\_spam could include extra information to be stripped off and processed in tcp\\_on\\_spam.\n\nIf the function sets the parameter $REPLY to ‘done’, the command line is not executed; in addition, no prompt is printed for the \\-v option to tcp\\_spam.\n\ntcp\\_on\\_unalias alias fd\n\nThis is called with the name of an alias and the corresponding session’s file descriptor after an alias has been deleted.\n\n* * *\n\n## 24.4 TCP Utility Functions\n\nThe following functions are used by the TCP function system but will rarely if ever need to be called directly.\n\ntcp\\_fd\\_handler\n\nThis is the function installed by tcp\\_open for handling input from within the line editor, if that is required. It is in the format documented for the builtin ‘zle -F’ in [Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) .\n\nWhile active, the function sets the parameter TCP\\_HANDLER\\_ACTIVE to 1. This allows shell code called internally (for example, by setting tcp\\_on\\_read) to tell if is being called when the shell is otherwise idle at the editor prompt.\n\ntcp\\_output \\[ \\-q \\] \\-P prompt \\-F fd \\-S sess\n\nThis function is used for both logging and handling output to standard output, from within tcp\\_read and (if $TCP\\_OUTPUT is set) tcp\\_send.\n\nThe prompt to use is specified by \\-P; the default is the empty string. It can contain:\n\n%c\n\nExpands to 1 if the session is the current session, otherwise 0. Used with ternary expressions such as ‘%(c.-.+)’ to output ‘+’ for the current session and ‘\\-’ otherwise.\n\n%f\n\nReplaced by the session’s file descriptor.\n\n%s\n\nReplaced by the session name.\n\n%%\n\nReplaced by a single ‘%’.\n\nThe option \\-q suppresses output to standard output, but not to any log files which are configured.\n\nThe \\-S and \\-F options are used to pass in the session name and file descriptor for possible replacement in the prompt.\n\n* * *\n\n## 24.5 TCP User Parameters\n\nParameters follow the usual convention that uppercase is used for scalars and integers, while lowercase is used for normal and associative array. It is always safe for user code to read these parameters. Some parameters may also be set; these are noted explicitly. Others are included in this group as they are set by the function system for the user’s benefit, i.e. setting them is typically not useful but is benign.\n\nIt is often also useful to make settable parameters local to a function. For example, ‘local TCP\\_SILENT=1’ specifies that data read during the function call will not be printed to standard output, regardless of the setting outside the function. Likewise, ‘local TCP\\_SESS=sess’ sets a session for the duration of a function, and ‘local TCP\\_PROMPT=’ specifies that no prompt is used for input during the function.\n\ntcp\\_expect\\_lines\n\nArray. The set of lines read during the last call to tcp\\_expect, including the last ($TCP\\_LINE).\n\ntcp\\_filter\n\nArray. May be set directly. A set of extended globbing patterns which, if matched in tcp\\_output, will cause the line not to be printed to standard output. The patterns should be defined as described for the arguments to tcp\\_expect. Output of line to log files is not affected.\n\nTCP\\_HANDLER\\_ACTIVE\n\nScalar. Set to 1 within tcp\\_fd\\_handler to indicate to functions called recursively that they have been called during an editor session. Otherwise unset.\n\nTCP\\_LINE\n\nThe last line read by tcp\\_read, and hence also tcp\\_expect.\n\nTCP\\_LINE\\_FD\n\nThe file descriptor from which $TCP\\_LINE was read. ${tcp\\_by\\_fd\\[$TCP\\_LINE\\_FD\\]} will give the corresponding session name.\n\ntcp\\_lines\n\nArray. The set of lines read during the last call to tcp\\_read, including the last ($TCP\\_LINE).\n\nTCP\\_LOG\n\nMay be set directly, although it is also controlled by tcp\\_log. The name of a file to which output from all sessions will be sent. The output is proceeded by the usual $TCP\\_PROMPT. If it is not an absolute path name, it will follow the user’s current directory.\n\nTCP\\_LOG\\_SESS\n\nMay be set directly, although it is also controlled by tcp\\_log. The prefix for a set of files to which output from each session separately will be sent; the full filename is ${TCP\\_LOG\\_SESS}.sess. Output to each file is raw; no prompt is added. If it is not an absolute path name, it will follow the user’s current directory.\n\ntcp\\_no\\_spam\\_list\n\nArray. May be set directly. See tcp\\_spam for how this is used.\n\nTCP\\_OUTPUT\n\nMay be set directly. If a non-empty string, any data sent to a session by tcp\\_send will be logged. This parameter gives the prompt to be used in a file specified by $TCP\\_LOG but not in a file generated from $TCP\\_LOG\\_SESS. The prompt string has the same format as TCP\\_PROMPT and the same rules for its use apply.\n\nTCP\\_PROMPT\n\nMay be set directly. Used as the prefix for data read by tcp\\_read which is printed to standard output or to the log file given by $TCP\\_LOG, if any. Any ‘%s’, ‘%f’ or ‘%%’ occurring in the string will be replaced by the name of the session, the session’s underlying file descriptor, or a single ‘%’, respectively. The expression ‘%c’ expands to 1 if the session being read is the current session, else 0; this is most useful in ternary expressions such as ‘%(c.-.+)’ which outputs ‘+’ if the session is the current one, else ‘\\-’.\n\nIf the prompt starts with %P, this is stripped and the complete result of the previous stage is passed through standard prompt %\\-style formatting before being output.\n\nTCP\\_READ\\_DEBUG\n\nMay be set directly. If this has non-zero length, tcp\\_read will give some limited diagnostics about data being read.\n\nTCP\\_SECONDS\\_START\n\nThis value is created and initialised to zero by tcp\\_open.\n\nThe functions tcp\\_read and tcp\\_expect use the shell’s SECONDS parameter for their own timing purposes. If that parameter is not of floating point type on entry to one of the functions, it will create a local parameter SECONDS which is floating point and set the parameter TCP\\_SECONDS\\_START to the previous value of $SECONDS. If the parameter is already floating point, it is used without a local copy being created and TCP\\_SECONDS\\_START is not set. As the global value is zero, the shell elapsed time is guaranteed to be the sum of $SECONDS and $TCP\\_SECONDS\\_START.\n\nThis can be avoided by setting SECONDS globally to a floating point value using ‘typeset -F SECONDS’; then the TCP functions will never make a local copy and never set TCP\\_SECONDS\\_START to a non-zero value.\n\nTCP\\_SESS\n\nMay be set directly. The current session; must refer to one of the sessions established by tcp\\_open.\n\nTCP\\_SILENT\n\nMay be set directly, although it is also controlled by tcp\\_log. If of non-zero length, data read by tcp\\_read will not be written to standard output, though may still be written to a log file.\n\ntcp\\_spam\\_list\n\nArray. May be set directly. See the description of the function tcp\\_spam for how this is used.\n\nTCP\\_TALK\\_ESCAPE\n\nMay be set directly. See the description of the function tcp\\_talk for how this is used.\n\nTCP\\_TIMEOUT\n\nMay be set directly. Currently this is only used by the function tcp\\_command, see above.\n\n* * *\n\n## 24.6 TCP User-defined Parameters\n\nThe following parameters are not set by the function system, but have a special effect if set by the user.\n\ntcp\\_on\\_read\n\nThis should be an associative array; if it is not, the behaviour is undefined. Each key is the name of a shell function or other command, and the corresponding value is a shell pattern (using EXTENDED\\_GLOB). Every line read from a TCP session directly or indirectly using tcp\\_read (which includes lines read by tcp\\_expect) is compared against the pattern. If the line matches, the command given in the key is called with two arguments: the name of the session from which the line was read, and the line itself.\n\nIf any function called to handle a line returns a non-zero status, the line is not output. Thus a tcp\\_on\\_read handler containing only the instruction ‘return 1’ can be used to suppress output of particular lines (see, however, tcp\\_filter above). However, the line is still stored in TCP\\_LINE and tcp\\_lines; this occurs after all tcp\\_on\\_read processing.\n\n* * *\n\n## 24.7 TCP Utility Parameters\n\nThese parameters are controlled by the function system; they may be read directly, but should not usually be set by user code.\n\ntcp\\_aliases\n\nAssociative array. The keys are the names of sessions established with tcp\\_open; each value is a space-separated list of aliases which refer to that session.\n\ntcp\\_by\\_fd\n\nAssociative array. The keys are session file descriptors; each value is the name of that session.\n\ntcp\\_by\\_name\n\nAssociative array. The keys are the names of sessions; each value is the file descriptor associated with that session.\n\n* * *\n\n## 24.8 TCP Examples\n\nHere is a trivial example using a remote calculator.\n\nTo create a calculator server on port 7337 (see the dc manual page for quite how infuriating the underlying command is):\n\nTo connect to this from the same host with a session also named ‘dc’:\n\ntcp\\_open localhost 7337 dc\n\nTo send a command to the remote session and wait a short while for output (assuming dc is the current session):\n\nTo close the session:\n\nThe tcp\\_proxy needs to be killed to be stopped. Note this will not usually kill any connections which have already been accepted, and also that the port is not immediately available for reuse.\n\nThe following chunk of code puts a list of sessions into an xterm header, with the current session followed by a star.\n\nprint -n \"\\\\033\\]2;TCP:\" ${(k)tcp\\_by\\_name:/$TCP\\_SESS/$TCP\\_SESS\\\\\\*} \"\\\\a\"\n\n* * *\n\n## 24.9 TCP Bugs\n\nThe function tcp\\_read uses the shell’s normal read builtin. As this reads a complete line at once, data arriving without a terminating newline can cause the function to block indefinitely.\n\nThough the function suite works well for interactive use and for data arriving in small amounts, the performance when large amounts of data are being exchanged is likely to be extremely poor.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 206,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-TCP-Function-System-html-TCP-Function-System-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-TCP-Function-System-html-TCP-Function-System-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-TCP-Function-System-html-TCP-Function-System-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-TCP-Function-System-html-TCP-Function-System-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-TCP-Function-System-html-TCP-Function-System-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 34793,
      "readableText": 42319,
      "none": 63247,
      "readableTextIfPossible": 42319,
      "result": 42319,
      "markdown": 32731
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Zftp-Function-System",
    "loadedTime": "2025-05-08T06:50:59.731Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Zftp-Function-System",
    "title": "zsh: 25 Zftp Function System",
    "description": "zsh: 25 Zftp Function System",
    "author": null,
    "keywords": "zsh: 25 Zftp Function System",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:50:58 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-f917\"",
      "expires": "Thu, 08 May 2025 06:51:58 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706a48c784bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 25 Zftp Function System\n25.1 Description\nThis describes the set of shell functions supplied with the source distribution as an interface to the zftp builtin command, allowing you to perform FTP operations from the shell command line or within functions or scripts. The interface is similar to a traditional FTP client (e.g. the ftp command itself, see ftp(1)), but as it is entirely done within the shell all the familiar completion, editing and globbing features, and so on, are present, and macros are particularly simple to write as they are just ordinary shell functions. \nThe prerequisite is that the zftp command, as described in The zsh/zftp Module , must be available in the version of zsh installed at your site. If the shell is configured to load new commands at run time, it probably is: typing ‘zmodload zsh/zftp’ will make sure (if that runs silently, it has worked). If this is not the case, it is possible zftp was linked into the shell anyway: to test this, type ‘which zftp’ and if zftp is available you will get the message ‘zftp: shell built-in command’. \nCommands given directly with zftp builtin may be interspersed between the functions in this suite; in a few cases, using zftp directly may cause some of the status information stored in shell parameters to become invalid. Note in particular the description of the variables $ZFTP_TMOUT, $ZFTP_PREFS and $ZFTP_VERBOSE for zftp. \n25.2 Installation\nYou should make sure all the functions from the Functions/Zftp directory of the source distribution are available; they all begin with the two letters ‘zf’. They may already have been installed on your system; otherwise, you will need to find them and copy them. The directory should appear as one of the elements of the $fpath array (this should already be the case if they were installed), and at least the function zfinit should be autoloaded; it will autoload the rest. Finally, to initialize the use of the system you need to call the zfinit function. The following code in your .zshrc will arrange for this; assume the functions are stored in the directory ~/myfns: \nfpath=(~/myfns $fpath)\nautoload -U zfinit\nzfinit\nNote that zfinit assumes you are using the zmodload method to load the zftp command. If it is already built into the shell, change zfinit to zfinit -n. It is helpful (though not essential) if the call to zfinit appears after any code to initialize the new completion system, else unnecessary compctl commands will be given. \n25.3 Functions\nThe sequence of operations in performing a file transfer is essentially the same as that in a standard FTP client. Note that, due to a quirk of the shell’s getopts builtin, for those functions that handle options you must use ‘--’ rather than ‘-’ to ensure the remaining arguments are treated literally (a single ‘-’ is treated as an argument). \n25.3.1 Opening a connection\nzfparams [ host [ user [ password ... ] ] ] \nSet or show the parameters for a future zfopen with no arguments. If no arguments are given, the current parameters are displayed (the password will be shown as a line of asterisks). If a host is given, and either the user or password is not, they will be prompted for; also, any parameter given as ‘?’ will be prompted for, and if the ‘?’ is followed by a string, that will be used as the prompt. As zfopen calls zfparams to store the parameters, this usually need not be called directly. \nA single argument ‘-’ will delete the stored parameters. This will also cause the memory of the last directory (and so on) on the other host to be deleted. \nzfopen [ -1 ] [ host [ user [ password [ account ] ] ] ] \nIf host is present, open a connection to that host under username user with password password (and, on the rare occasions when it is necessary, account account). If a necessary parameter is missing or given as ‘?’ it will be prompted for. If host is not present, use a previously stored set of parameters. \nIf the command was successful, and the terminal is compatible with xterm or is sun-cmd, a summary will appear in the title bar, giving the local host:directory and the remote host:directory; this is handled by the function zftp_chpwd, described below. \nNormally, the host, user and password are internally recorded for later re-opening, either by a zfopen with no arguments, or automatically (see below). With the option ‘-1’, no information is stored. Also, if an open command with arguments failed, the parameters will not be retained (and any previous parameters will also be deleted). A zfopen on its own, or a zfopen -1, never alters the stored parameters. \nBoth zfopen and zfanon (but not zfparams) understand URLs of the form ftp://host/path... as meaning to connect to the host, then change directory to path (which must be a directory, not a file). The ‘ftp://’ can be omitted; the trailing ‘/’ is enough to trigger recognition of the path. Note prefixes other than ‘ftp:’ are not recognized, and that all characters after the first slash beyond host are significant in path. \nzfanon [ -1 ] host \nOpen a connection host for anonymous FTP. The username used is ‘anonymous’. The password (which will be reported the first time) is generated as user@host; this is then stored in the shell parameter $EMAIL_ADDR which can alternatively be set manually to a suitable string. \n25.3.2 Directory management\nzfcd [ dir ] zfcd - zfcd old new \nChange the current directory on the remote server: this is implemented to have many of the features of the shell builtin cd. \nIn the first form with dir present, change to the directory dir. The command ‘zfcd ..’ is treated specially, so is guaranteed to work on non-UNIX servers (note this is handled internally by zftp). If dir is omitted, has the effect of ‘zfcd ~’. \nThe second form changes to the directory previously current. \nThe third form attempts to change the current directory by replacing the first occurrence of the string old with the string new in the current directory. \nNote that in this command, and indeed anywhere a remote filename is expected, the string which on the local host corresponds to ‘~’ is converted back to a ‘~’ before being passed to the remote machine. This is convenient because of the way expansion is performed on the command line before zfcd receives a string. For example, suppose the command is ‘zfcd ~/foo’. The shell will expand this to a full path such as ‘zfcd /home/user2/pws/foo’. At this stage, zfcd recognises the initial path as corresponding to ‘~’ and will send the directory to the remote host as ~/foo, so that the ‘~’ will be expanded by the server to the correct remote host directory. Other named directories of the form ‘~name’ are not treated in this fashion. \nzfhere \nChange directory on the remote server to the one corresponding to the current local directory, with special handling of ‘~’ as in zfcd. For example, if the current local directory is ~/foo/bar, then zfhere performs the effect of ‘zfcd ~/foo/bar’. \nzfdir [ -rfd ] [ - ] [ dir-options ] [ dir ] \nProduce a long directory listing. The arguments dir-options and dir are passed directly to the server and their effect is implementation dependent, but specifying a particular remote directory dir is usually possible. The output is passed through a pager given by the environment variable $PAGER, or ‘more’ if that is not set. \nThe directory is usually cached for re-use. In fact, two caches are maintained. One is for use when there is no dir-options or dir, i.e. a full listing of the current remote directory; it is flushed when the current remote directory changes. The other is kept for repeated use of zfdir with the same arguments; for example, repeated use of ‘zfdir /pub/gnu’ will only require the directory to be retrieved on the first call. Alternatively, this cache can be re-viewed with the -r option. As relative directories will confuse zfdir, the -f option can be used to force the cache to be flushed before the directory is listed. The option -d will delete both caches without showing a directory listing; it will also delete the cache of file names in the current remote directory, if any. \nzfls [ ls-options ] [ dir ] \nList files on the remote server. With no arguments, this will produce a simple list of file names for the current remote directory. Any arguments are passed directly to the server. No pager and no caching is used. \n25.3.3 Status commands\nzftype [ type ] \nWith no arguments, show the type of data to be transferred, usually ASCII or binary. With an argument, change the type: the types ‘A’ or ‘ASCII’ for ASCII data and ‘B’ or ‘BINARY’, ‘I’ or ‘IMAGE’ for binary data are understood case-insensitively. \nzfstat [ -v ] \nShow the status of the current or last connection, as well as the status of some of zftp’s status variables. With the -v option, a more verbose listing is produced by querying the server for its version of events, too. \n25.3.4 Retrieving files\nThe commands for retrieving files all take at least two options. -G suppresses remote filename expansion which would otherwise be performed (see below for a more detailed description of that). -t attempts to set the modification time of the local file to that of the remote file: see the description of the function zfrtime below for more information. \nzfget [ -Gtc ] file1 ... \nRetrieve all the listed files file1 ... one at a time from the remote server. If a file contains a ‘/’, the full name is passed to the remote server, but the file is stored locally under the name given by the part after the final ‘/’. The option -c (cat) forces all files to be sent as a single stream to standard output; in this case the -t option has no effect. \nzfuget [ -Gvst ] file1 ... \nAs zfget, but only retrieve files where the version on the remote server is newer (has a later modification time), or where the local file does not exist. If the remote file is older but the files have different sizes, or if the sizes are the same but the remote file is newer, the user will usually be queried. With the option -s, the command runs silently and will always retrieve the file in either of those two cases. With the option -v, the command prints more information about the files while it is working out whether or not to transfer them. \nzfcget [ -Gt ] file1 ... \nAs zfget, but if any of the local files exists, and is shorter than the corresponding remote file, the command assumes that it is the result of a partially completed transfer and attempts to transfer the rest of the file. This is useful on a poor connection which keeps failing. \nNote that this requires a commonly implemented, but non-standard, version of the FTP protocol, so is not guaranteed to work on all servers. \nzfgcp [ -Gt ] remote-file local-file zfgcp [ -Gt ] rfile1 ... ldir \nThis retrieves files from the remote server with arguments behaving similarly to the cp command. \nIn the first form, copy remote-file from the server to the local file local-file. \nIn the second form, copy all the remote files rfile1 ... into the local directory ldir retaining the same basenames. This assumes UNIX directory semantics. \n25.3.5 Sending files\nzfput [ -r ] file1 ... \nSend all the file1 ... given separately to the remote server. If a filename contains a ‘/’, the full filename is used locally to find the file, but only the basename is used for the remote file name. \nWith the option -r, if any of the files are directories they are sent recursively with all their subdirectories, including files beginning with ‘.’. This requires that the remote machine understand UNIX file semantics, since ‘/’ is used as a directory separator. \nzfuput [ -vs ] file1 ... \nAs zfput, but only send files which are newer than their remote equivalents, or if the remote file does not exist. The logic is the same as for zfuget, but reversed between local and remote files. \nzfcput file1 ... \nAs zfput, but if any remote file already exists and is shorter than the local equivalent, assume it is the result of an incomplete transfer and send the rest of the file to append to the existing part. As the FTP append command is part of the standard set, this is in principle more likely to work than zfcget. \nzfpcp local-file remote-file zfpcp lfile1 ... rdir \nThis sends files to the remote server with arguments behaving similarly to the cp command. \nWith two arguments, copy local-file to the server as remote-file. \nWith more than two arguments, copy all the local files lfile1 ... into the existing remote directory rdir retaining the same basenames. This assumes UNIX directory semantics. \nA problem arises if you attempt to use zfpcp lfile1 rdir, i.e. the second form of copying but with two arguments, as the command has no simple way of knowing if rdir corresponds to a directory or a filename. It attempts to resolve this in various ways. First, if the rdir argument is ‘.’ or ‘..’ or ends in a slash, it is assumed to be a directory. Secondly, if the operation of copying to a remote file in the first form failed, and the remote server sends back the expected failure code 553 and a reply including the string ‘Is a directory’, then zfpcp will retry using the second form. \n25.3.6 Closing the connection\nzfclose \nClose the connection. \n25.3.7 Session management\nzfsession [ -lvod ] [ sessname ] \nAllows you to manage multiple FTP sessions at once. By default, connections take place in a session called ‘default’; by giving the command ‘zfsession sessname’ you can change to a new or existing session with a name of your choice. The new session remembers its own connection, as well as associated shell parameters, and also the host/user parameters set by zfparams. Hence you can have different sessions set up to connect to different hosts, each remembering the appropriate host, user and password. \nWith no arguments, zfsession prints the name of the current session; with the option -l it lists all sessions which currently exist, and with the option -v it gives a verbose list showing the host and directory for each session, where the current session is marked with an asterisk. With -o, it will switch to the most recent previous session. \nWith -d, the given session (or else the current one) is removed; everything to do with it is completely forgotten. If it was the only session, a new session called ‘default’ is created and made current. It is safest not to delete sessions while background commands using zftp are active. \nzftransfer sess1:file1 sess2:file2 \nTransfer files between two sessions; no local copy is made. The file is read from the session sess1 as file1 and written to session sess2 as file file2; file1 and file2 may be relative to the current directories of the session. Either sess1 or sess2 may be omitted (though the colon should be retained if there is a possibility of a colon appearing in the file name) and defaults to the current session; file2 may be omitted or may end with a slash, in which case the basename of file1 will be added. The sessions sess1 and sess2 must be distinct. \nThe operation is performed using pipes, so it is required that the connections still be valid in a subshell, which is not the case under versions of some operating systems, presumably due to a system bug. \n25.3.8 Bookmarks\nThe two functions zfmark and zfgoto allow you to ‘bookmark’ the present location (host, user and directory) of the current FTP connection for later use. The file to be used for storing and retrieving bookmarks is given by the parameter $ZFTP_BMFILE; if not set when one of the two functions is called, it will be set to the file .zfbkmarks in the directory where your zsh startup files live (usually ~). \nzfmark [ bookmark ] \nIf given an argument, mark the current host, user and directory under the name bookmark for later use by zfgoto. If there is no connection open, use the values for the last connection immediately before it was closed; it is an error if there was none. Any existing bookmark under the same name will be silently replaced. \nIf not given an argument, list the existing bookmarks and the points to which they refer in the form user@host:directory; this is the format in which they are stored, and the file may be edited directly. \nzfgoto [ -n ] bookmark \nReturn to the location given by bookmark, as previously set by zfmark. If the location has user ‘ftp’ or ‘anonymous’, open the connection with zfanon, so that no password is required. If the user and host parameters match those stored for the current session, if any, those will be used, and again no password is required. Otherwise a password will be prompted for. \nWith the option -n, the bookmark is taken to be a nickname stored by the ncftp program in its bookmark file, which is assumed to be ~/.ncftp/bookmarks. The function works identically in other ways. Note that there is no mechanism for adding or modifying ncftp bookmarks from the zftp functions. \n25.3.9 Other functions\nMostly, these functions will not be called directly (apart from zfinit), but are described here for completeness. You may wish to alter zftp_chpwd and zftp_progress, in particular. \nzfinit [ -n ] \nAs described above, this is used to initialize the zftp function system. The -n option should be used if the zftp command is already built into the shell. \nzfautocheck [ -dn ] \nThis function is called to implement automatic reopening behaviour, as described in more detail below. The options must appear in the first argument; -n prevents the command from changing to the old directory, while -d prevents it from setting the variable do_close, which it otherwise does as a flag for automatically closing the connection after a transfer. The host and directory for the last session are stored in the variable $zflastsession, but the internal host/user/password parameters must also be correctly set. \nzfcd_match prefix suffix \nThis performs matching for completion of remote directory names. If the remote server is UNIX, it will attempt to persuade the server to list the remote directory with subdirectories marked, which usually works but is not guaranteed. On other hosts it simply calls zfget_match and hence completes all files, not just directories. On some systems, directories may not even look like filenames. \nzfget_match prefix suffix \nThis performs matching for completion of remote filenames. It caches files for the current directory (only) in the shell parameter $zftp_fcache. It is in the form to be called by the -K option of compctl, but also works when called from a widget-style completion function with prefix and suffix set appropriately. \nzfrglob varname \nPerform remote globbing, as describes in more detail below. varname is the name of a variable containing the pattern to be expanded; if there were any matches, the same variable will be set to the expanded set of filenames on return. \nzfrtime lfile rfile [ time ] \nSet the local file lfile to have the same modification time as the remote file rfile, or the explicit time time in FTP format CCYYMMDDhhmmSS for the GMT timezone. This uses the shell’s zsh/datetime module to perform the conversion from GMT to local time. \nzftp_chpwd \nThis function is called every time a connection is opened, or closed, or the remote directory changes. This version alters the title bar of an xterm-compatible or sun-cmd terminal emulator to reflect the local and remote hostnames and current directories. It works best when combined with the function chpwd. In particular, a function of the form \nchpwd() {\n  if [[ -n $ZFTP_USER ]]; then\n    zftp_chpwd\n  else\n    # usual chpwd e.g put host:directory in title bar\n  fi\n}\nfits in well. \nzftp_progress \nThis function shows the status of the transfer. It will not write anything unless the output is going to a terminal; however, if you transfer files in the background, you should turn off progress reports by hand using ‘zstyle ’:zftp:*’ progress none’. Note also that if you alter it, any output must be to standard error, as standard output may be a file being received. The form of the progress meter, or whether it is used at all, can be configured without altering the function, as described in the next section. \nzffcache \nThis is used to implement caching of files in the current directory for each session separately. It is used by zfget_match and zfrglob. \n25.4 Miscellaneous Features\n25.4.1 Configuration\nVarious styles are available using the standard shell style mechanism, described in The zsh/zutil Module. Briefly, the command ‘zstyle ’:zftp:*’ style value ...’. defines the style to have value value; more than one value may be given, although that is not useful in the cases described here. These values will then be used throughout the zftp function system. For more precise control, the first argument, which gives a pattern that matches contexts in which the style applies, can be modified to include a particular function, as for example ‘:zftp:zfget’: the style will then have the given value only in the zfget function, and will override styles set under ‘:zftp:*’. Note that only the top level function name, as called by the user, is used; calling of lower level functions is transparent to the user. Hence modifications to the title bar in zftp_chpwd use the contexts :zftp:zfopen, :zftp:zfcd, etc., depending where it was called from. The following styles are understood: \nprogress \nControls the way that zftp_progress reports on the progress of a transfer. If empty, unset, or ‘none’, no progress report is made; if ‘bar’ a growing bar of inverse video is shown; if ‘percent’ (or any other string, though this may change in future), the percentage of the file transferred is shown. The bar meter requires that the width of the terminal be available via the $COLUMNS parameter (normally this is set automatically). If the size of the file being transferred is not available, bar and percent meters will simply show the number of bytes transferred so far. \nWhen zfinit is run, if this style is not defined for the context :zftp:*, it will be set to ‘bar’. \nupdate \nSpecifies the minimum time interval between updates of the progress meter in seconds. No update is made unless new data has been received, so the actual time interval is limited only by $ZFTP_TIMEOUT. \nAs described for progress, zfinit will force this to default to 1. \nremote-glob \nIf set to ‘1’, ‘yes’ or ‘true’, filename generation (globbing) is performed on the remote machine instead of by zsh itself; see below. \ntitlebar \nIf set to ‘1’, ‘yes’ or ‘true’, zftp_chpwd will put the remote host and remote directory into the titlebar of terminal emulators such as xterm or sun-cmd that allow this. \nAs described for progress, zfinit will force this to default to 1. \nchpwd \nIf set to ‘1’ ‘yes’ or ‘true’, zftp_chpwd will call the function chpwd when a connection is closed. This is useful if the remote host details were put into the terminal title bar by zftp_chpwd and your usual chpwd also modifies the title bar. \nWhen zfinit is run, it will determine whether chpwd exists and if so it will set the default value for the style to 1 if none exists already. \nNote that there is also an associative array zfconfig which contains values used by the function system. This should not be modified or overwritten. \n25.4.2 Remote globbing\nThe commands for retrieving files usually perform filename generation (globbing) on their arguments; this can be turned off by passing the option -G to each of the commands. Normally this operates by retrieving a complete list of files for the directory in question, then matching these locally against the pattern supplied. This has the advantage that the full range of zsh patterns (respecting the setting of the option EXTENDED_GLOB) can be used. However, it means that the directory part of a filename will not be expanded and must be given exactly. If the remote server does not support the UNIX directory semantics, directory handling is problematic and it is recommended that globbing only be used within the current directory. The list of files in the current directory, if retrieved, will be cached, so that subsequent globs in the same directory without an intervening zfcd are much faster. \nIf the remote-glob style (see above) is set, globbing is instead performed on the remote host: the server is asked for a list of matching files. This is highly dependent on how the server is implemented, though typically UNIX servers will provide support for basic glob patterns. This may in some cases be faster, as it avoids retrieving the entire list of directory contents. \n25.4.3 Automatic and temporary reopening\nAs described for the zfopen command, a subsequent zfopen with no parameters will reopen the connection to the last host (this includes connections made with the zfanon command). Opened in this fashion, the connection starts in the default remote directory and will remain open until explicitly closed. \nAutomatic re-opening is also available. If a connection is not currently open and a command requiring a connection is given, the last connection is implicitly reopened. In this case the directory which was current when the connection was closed again becomes the current directory (unless, of course, the command given changes it). Automatic reopening will also take place if the connection was close by the remote server for whatever reason (e.g. a timeout). It is not available if the -1 option to zfopen or zfanon was used. \nFurthermore, if the command issued is a file transfer, the connection will be closed after the transfer is finished, hence providing a one-shot mode for transfers. This does not apply to directory changing or listing commands; for example a zfdir may reopen a connection but will leave it open. Also, automatic closure will only ever happen in the same command as automatic opening, i.e a zfdir directly followed by a zfget will never close the connection automatically. \nInformation about the previous connection is given by the zfstat function. So, for example, if that reports: \nSession:        default\nNot connected.\nLast session:   ftp.bar.com:/pub/textfiles\nthen the command zfget file.txt will attempt to reopen a connection to ftp.bar.com, retrieve the file /pub/textfiles/file.txt, and immediately close the connection again. On the other hand, zfcd .. will open the connection in the directory /pub and leave it open. \nNote that all the above is local to each session; if you return to a previous session, the connection for that session is the one which will be reopened. \n25.4.4 Completion\nCompletion of local and remote files, directories, sessions and bookmarks is supported. The older, compctl-style completion is defined when zfinit is called; support for the new widget-based completion system is provided in the function Completion/Zsh/Command/_zftp, which should be installed with the other functions of the completion system and hence should automatically be available. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zftp-Function-System-html-Zftp-Function-System-enk0tg.html",
  "markdown": "# zsh: 25 Zftp Function System\n\n* * *\n\n## 25.1 Description\n\nThis describes the set of shell functions supplied with the source distribution as an interface to the zftp builtin command, allowing you to perform FTP operations from the shell command line or within functions or scripts. The interface is similar to a traditional FTP client (e.g. the ftp command itself, see ftp(1)), but as it is entirely done within the shell all the familiar completion, editing and globbing features, and so on, are present, and macros are particularly simple to write as they are just ordinary shell functions.\n\nThe prerequisite is that the zftp command, as described in [The zsh/zftp Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzftp-Module) , must be available in the version of zsh installed at your site. If the shell is configured to load new commands at run time, it probably is: typing ‘zmodload zsh/zftp’ will make sure (if that runs silently, it has worked). If this is not the case, it is possible zftp was linked into the shell anyway: to test this, type ‘which zftp’ and if zftp is available you will get the message ‘zftp: shell built-in command’.\n\nCommands given directly with zftp builtin may be interspersed between the functions in this suite; in a few cases, using zftp directly may cause some of the status information stored in shell parameters to become invalid. Note in particular the description of the variables $ZFTP\\_TMOUT, $ZFTP\\_PREFS and $ZFTP\\_VERBOSE for zftp.\n\n* * *\n\n## 25.2 Installation\n\nYou should make sure all the functions from the Functions/Zftp directory of the source distribution are available; they all begin with the two letters ‘zf’. They may already have been installed on your system; otherwise, you will need to find them and copy them. The directory should appear as one of the elements of the $fpath array (this should already be the case if they were installed), and at least the function zfinit should be autoloaded; it will autoload the rest. Finally, to initialize the use of the system you need to call the zfinit function. The following code in your .zshrc will arrange for this; assume the functions are stored in the directory ~/myfns:\n\nfpath=(~/myfns $fpath)\nautoload -U zfinit\nzfinit\n\nNote that zfinit assumes you are using the zmodload method to load the zftp command. If it is already built into the shell, change zfinit to zfinit -n. It is helpful (though not essential) if the call to zfinit appears after any code to initialize the new completion system, else unnecessary compctl commands will be given.\n\n* * *\n\n## 25.3 Functions\n\nThe sequence of operations in performing a file transfer is essentially the same as that in a standard FTP client. Note that, due to a quirk of the shell’s getopts builtin, for those functions that handle options you must use ‘\\-\\-’ rather than ‘\\-’ to ensure the remaining arguments are treated literally (a single ‘\\-’ is treated as an argument).\n\n* * *\n\n### 25.3.1 Opening a connection\n\nzfparams \\[ host \\[ user \\[ password ... \\] \\] \\]\n\nSet or show the parameters for a future zfopen with no arguments. If no arguments are given, the current parameters are displayed (the password will be shown as a line of asterisks). If a host is given, and either the user or password is not, they will be prompted for; also, any parameter given as ‘?’ will be prompted for, and if the ‘?’ is followed by a string, that will be used as the prompt. As zfopen calls zfparams to store the parameters, this usually need not be called directly.\n\nA single argument ‘\\-’ will delete the stored parameters. This will also cause the memory of the last directory (and so on) on the other host to be deleted.\n\nzfopen \\[ \\-1 \\] \\[ host \\[ user \\[ password \\[ account \\] \\] \\] \\]\n\nIf host is present, open a connection to that host under username user with password password (and, on the rare occasions when it is necessary, account account). If a necessary parameter is missing or given as ‘?’ it will be prompted for. If host is not present, use a previously stored set of parameters.\n\nIf the command was successful, and the terminal is compatible with xterm or is sun-cmd, a summary will appear in the title bar, giving the local host:directory and the remote host:directory; this is handled by the function zftp\\_chpwd, described below.\n\nNormally, the host, user and password are internally recorded for later re-opening, either by a zfopen with no arguments, or automatically (see below). With the option ‘\\-1’, no information is stored. Also, if an open command with arguments failed, the parameters will not be retained (and any previous parameters will also be deleted). A zfopen on its own, or a zfopen -1, never alters the stored parameters.\n\nBoth zfopen and zfanon (but not zfparams) understand URLs of the form ftp://host/path... as meaning to connect to the host, then change directory to path (which must be a directory, not a file). The ‘ftp://’ can be omitted; the trailing ‘/’ is enough to trigger recognition of the path. Note prefixes other than ‘ftp:’ are not recognized, and that all characters after the first slash beyond host are significant in path.\n\nzfanon \\[ \\-1 \\] host\n\nOpen a connection host for anonymous FTP. The username used is ‘anonymous’. The password (which will be reported the first time) is generated as user@host; this is then stored in the shell parameter $EMAIL\\_ADDR which can alternatively be set manually to a suitable string.\n\n* * *\n\n### 25.3.2 Directory management\n\nzfcd \\[ dir \\]\n\nzfcd -\n\nzfcd old new\n\nChange the current directory on the remote server: this is implemented to have many of the features of the shell builtin cd.\n\nIn the first form with dir present, change to the directory dir. The command ‘zfcd ..’ is treated specially, so is guaranteed to work on non-UNIX servers (note this is handled internally by zftp). If dir is omitted, has the effect of ‘zfcd ~’.\n\nThe second form changes to the directory previously current.\n\nThe third form attempts to change the current directory by replacing the first occurrence of the string old with the string new in the current directory.\n\nNote that in this command, and indeed anywhere a remote filename is expected, the string which on the local host corresponds to ‘~’ is converted back to a ‘~’ before being passed to the remote machine. This is convenient because of the way expansion is performed on the command line before zfcd receives a string. For example, suppose the command is ‘zfcd ~/foo’. The shell will expand this to a full path such as ‘zfcd /home/user2/pws/foo’. At this stage, zfcd recognises the initial path as corresponding to ‘~’ and will send the directory to the remote host as ~/foo, so that the ‘~’ will be expanded by the server to the correct remote host directory. Other named directories of the form ‘~name’ are not treated in this fashion.\n\nzfhere\n\nChange directory on the remote server to the one corresponding to the current local directory, with special handling of ‘~’ as in zfcd. For example, if the current local directory is ~/foo/bar, then zfhere performs the effect of ‘zfcd ~/foo/bar’.\n\nzfdir \\[ \\-rfd \\] \\[ \\- \\] \\[ dir-options \\] \\[ dir \\]\n\nProduce a long directory listing. The arguments dir-options and dir are passed directly to the server and their effect is implementation dependent, but specifying a particular remote directory dir is usually possible. The output is passed through a pager given by the environment variable $PAGER, or ‘more’ if that is not set.\n\nThe directory is usually cached for re-use. In fact, two caches are maintained. One is for use when there is no dir-options or dir, i.e. a full listing of the current remote directory; it is flushed when the current remote directory changes. The other is kept for repeated use of zfdir with the same arguments; for example, repeated use of ‘zfdir /pub/gnu’ will only require the directory to be retrieved on the first call. Alternatively, this cache can be re-viewed with the \\-r option. As relative directories will confuse zfdir, the \\-f option can be used to force the cache to be flushed before the directory is listed. The option \\-d will delete both caches without showing a directory listing; it will also delete the cache of file names in the current remote directory, if any.\n\nzfls \\[ ls-options \\] \\[ dir \\]\n\nList files on the remote server. With no arguments, this will produce a simple list of file names for the current remote directory. Any arguments are passed directly to the server. No pager and no caching is used.\n\n* * *\n\n### 25.3.3 Status commands\n\nzftype \\[ type \\]\n\nWith no arguments, show the type of data to be transferred, usually ASCII or binary. With an argument, change the type: the types ‘A’ or ‘ASCII’ for ASCII data and ‘B’ or ‘BINARY’, ‘I’ or ‘IMAGE’ for binary data are understood case-insensitively.\n\nzfstat \\[ \\-v \\]\n\nShow the status of the current or last connection, as well as the status of some of zftp’s status variables. With the \\-v option, a more verbose listing is produced by querying the server for its version of events, too.\n\n* * *\n\n### 25.3.4 Retrieving files\n\nThe commands for retrieving files all take at least two options. \\-G suppresses remote filename expansion which would otherwise be performed (see below for a more detailed description of that). \\-t attempts to set the modification time of the local file to that of the remote file: see the description of the function zfrtime below for more information.\n\nzfget \\[ \\-Gtc \\] file1 ...\n\nRetrieve all the listed files file1 ... one at a time from the remote server. If a file contains a ‘/’, the full name is passed to the remote server, but the file is stored locally under the name given by the part after the final ‘/’. The option \\-c (cat) forces all files to be sent as a single stream to standard output; in this case the \\-t option has no effect.\n\nzfuget \\[ \\-Gvst \\] file1 ...\n\nAs zfget, but only retrieve files where the version on the remote server is newer (has a later modification time), or where the local file does not exist. If the remote file is older but the files have different sizes, or if the sizes are the same but the remote file is newer, the user will usually be queried. With the option \\-s, the command runs silently and will always retrieve the file in either of those two cases. With the option \\-v, the command prints more information about the files while it is working out whether or not to transfer them.\n\nzfcget \\[ \\-Gt \\] file1 ...\n\nAs zfget, but if any of the local files exists, and is shorter than the corresponding remote file, the command assumes that it is the result of a partially completed transfer and attempts to transfer the rest of the file. This is useful on a poor connection which keeps failing.\n\nNote that this requires a commonly implemented, but non-standard, version of the FTP protocol, so is not guaranteed to work on all servers.\n\nzfgcp \\[ \\-Gt \\] remote-file local-file\n\nzfgcp \\[ \\-Gt \\] rfile1 ... ldir\n\nThis retrieves files from the remote server with arguments behaving similarly to the cp command.\n\nIn the first form, copy remote-file from the server to the local file local-file.\n\nIn the second form, copy all the remote files rfile1 ... into the local directory ldir retaining the same basenames. This assumes UNIX directory semantics.\n\n* * *\n\n### 25.3.5 Sending files\n\nzfput \\[ \\-r \\] file1 ...\n\nSend all the file1 ... given separately to the remote server. If a filename contains a ‘/’, the full filename is used locally to find the file, but only the basename is used for the remote file name.\n\nWith the option \\-r, if any of the files are directories they are sent recursively with all their subdirectories, including files beginning with ‘.’. This requires that the remote machine understand UNIX file semantics, since ‘/’ is used as a directory separator.\n\nzfuput \\[ \\-vs \\] file1 ...\n\nAs zfput, but only send files which are newer than their remote equivalents, or if the remote file does not exist. The logic is the same as for zfuget, but reversed between local and remote files.\n\nzfcput file1 ...\n\nAs zfput, but if any remote file already exists and is shorter than the local equivalent, assume it is the result of an incomplete transfer and send the rest of the file to append to the existing part. As the FTP append command is part of the standard set, this is in principle more likely to work than zfcget.\n\nzfpcp local-file remote-file\n\nzfpcp lfile1 ... rdir\n\nThis sends files to the remote server with arguments behaving similarly to the cp command.\n\nWith two arguments, copy local-file to the server as remote-file.\n\nWith more than two arguments, copy all the local files lfile1 ... into the existing remote directory rdir retaining the same basenames. This assumes UNIX directory semantics.\n\nA problem arises if you attempt to use zfpcp lfile1 rdir, i.e. the second form of copying but with two arguments, as the command has no simple way of knowing if rdir corresponds to a directory or a filename. It attempts to resolve this in various ways. First, if the rdir argument is ‘.’ or ‘..’ or ends in a slash, it is assumed to be a directory. Secondly, if the operation of copying to a remote file in the first form failed, and the remote server sends back the expected failure code 553 and a reply including the string ‘Is a directory’, then zfpcp will retry using the second form.\n\n* * *\n\n### 25.3.6 Closing the connection\n\nzfclose\n\nClose the connection.\n\n* * *\n\n### 25.3.7 Session management\n\nzfsession \\[ \\-lvod \\] \\[ sessname \\]\n\nAllows you to manage multiple FTP sessions at once. By default, connections take place in a session called ‘default’; by giving the command ‘zfsession sessname’ you can change to a new or existing session with a name of your choice. The new session remembers its own connection, as well as associated shell parameters, and also the host/user parameters set by zfparams. Hence you can have different sessions set up to connect to different hosts, each remembering the appropriate host, user and password.\n\nWith no arguments, zfsession prints the name of the current session; with the option \\-l it lists all sessions which currently exist, and with the option \\-v it gives a verbose list showing the host and directory for each session, where the current session is marked with an asterisk. With \\-o, it will switch to the most recent previous session.\n\nWith \\-d, the given session (or else the current one) is removed; everything to do with it is completely forgotten. If it was the only session, a new session called ‘default’ is created and made current. It is safest not to delete sessions while background commands using zftp are active.\n\nzftransfer sess1:file1 sess2:file2\n\nTransfer files between two sessions; no local copy is made. The file is read from the session sess1 as file1 and written to session sess2 as file file2; file1 and file2 may be relative to the current directories of the session. Either sess1 or sess2 may be omitted (though the colon should be retained if there is a possibility of a colon appearing in the file name) and defaults to the current session; file2 may be omitted or may end with a slash, in which case the basename of file1 will be added. The sessions sess1 and sess2 must be distinct.\n\nThe operation is performed using pipes, so it is required that the connections still be valid in a subshell, which is not the case under versions of some operating systems, presumably due to a system bug.\n\n* * *\n\n### 25.3.8 Bookmarks\n\nThe two functions zfmark and zfgoto allow you to ‘bookmark’ the present location (host, user and directory) of the current FTP connection for later use. The file to be used for storing and retrieving bookmarks is given by the parameter $ZFTP\\_BMFILE; if not set when one of the two functions is called, it will be set to the file .zfbkmarks in the directory where your zsh startup files live (usually ~).\n\nzfmark \\[ bookmark \\]\n\nIf given an argument, mark the current host, user and directory under the name bookmark for later use by zfgoto. If there is no connection open, use the values for the last connection immediately before it was closed; it is an error if there was none. Any existing bookmark under the same name will be silently replaced.\n\nIf not given an argument, list the existing bookmarks and the points to which they refer in the form user@host:directory; this is the format in which they are stored, and the file may be edited directly.\n\nzfgoto \\[ \\-n \\] bookmark\n\nReturn to the location given by bookmark, as previously set by zfmark. If the location has user ‘ftp’ or ‘anonymous’, open the connection with zfanon, so that no password is required. If the user and host parameters match those stored for the current session, if any, those will be used, and again no password is required. Otherwise a password will be prompted for.\n\nWith the option \\-n, the bookmark is taken to be a nickname stored by the ncftp program in its bookmark file, which is assumed to be ~/.ncftp/bookmarks. The function works identically in other ways. Note that there is no mechanism for adding or modifying ncftp bookmarks from the zftp functions.\n\n* * *\n\n### 25.3.9 Other functions\n\nMostly, these functions will not be called directly (apart from zfinit), but are described here for completeness. You may wish to alter zftp\\_chpwd and zftp\\_progress, in particular.\n\nzfinit \\[ \\-n \\]\n\nAs described above, this is used to initialize the zftp function system. The \\-n option should be used if the zftp command is already built into the shell.\n\nzfautocheck \\[ \\-dn \\]\n\nThis function is called to implement automatic reopening behaviour, as described in more detail below. The options must appear in the first argument; \\-n prevents the command from changing to the old directory, while \\-d prevents it from setting the variable do\\_close, which it otherwise does as a flag for automatically closing the connection after a transfer. The host and directory for the last session are stored in the variable $zflastsession, but the internal host/user/password parameters must also be correctly set.\n\nzfcd\\_match prefix suffix\n\nThis performs matching for completion of remote directory names. If the remote server is UNIX, it will attempt to persuade the server to list the remote directory with subdirectories marked, which usually works but is not guaranteed. On other hosts it simply calls zfget\\_match and hence completes all files, not just directories. On some systems, directories may not even look like filenames.\n\nzfget\\_match prefix suffix\n\nThis performs matching for completion of remote filenames. It caches files for the current directory (only) in the shell parameter $zftp\\_fcache. It is in the form to be called by the \\-K option of compctl, but also works when called from a widget-style completion function with prefix and suffix set appropriately.\n\nzfrglob varname\n\nPerform remote globbing, as describes in more detail below. varname is the name of a variable containing the pattern to be expanded; if there were any matches, the same variable will be set to the expanded set of filenames on return.\n\nzfrtime lfile rfile \\[ time \\]\n\nSet the local file lfile to have the same modification time as the remote file rfile, or the explicit time time in FTP format CCYYMMDDhhmmSS for the GMT timezone. This uses the shell’s zsh/datetime module to perform the conversion from GMT to local time.\n\nzftp\\_chpwd\n\nThis function is called every time a connection is opened, or closed, or the remote directory changes. This version alters the title bar of an xterm\\-compatible or sun-cmd terminal emulator to reflect the local and remote hostnames and current directories. It works best when combined with the function chpwd. In particular, a function of the form\n\nchpwd() {\n  if \\[\\[ -n $ZFTP\\_USER \\]\\]; then\n    zftp\\_chpwd\n  else\n    # usual chpwd e.g put host:directory in title bar\n  fi\n}\n\nfits in well.\n\nzftp\\_progress\n\nThis function shows the status of the transfer. It will not write anything unless the output is going to a terminal; however, if you transfer files in the background, you should turn off progress reports by hand using ‘zstyle ’:zftp:\\*’ progress none’. Note also that if you alter it, any output _must_ be to standard error, as standard output may be a file being received. The form of the progress meter, or whether it is used at all, can be configured without altering the function, as described in the next section.\n\nzffcache\n\nThis is used to implement caching of files in the current directory for each session separately. It is used by zfget\\_match and zfrglob.\n\n* * *\n\n## 25.4 Miscellaneous Features\n\n* * *\n\n### 25.4.1 Configuration\n\nVarious styles are available using the standard shell style mechanism, described in [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module). Briefly, the command ‘zstyle ’:zftp:\\*’ style value ...’. defines the style to have value value; more than one value may be given, although that is not useful in the cases described here. These values will then be used throughout the zftp function system. For more precise control, the first argument, which gives a pattern that matches _contexts_ in which the style applies, can be modified to include a particular function, as for example ‘:zftp:zfget’: the style will then have the given value only in the zfget function, and will override styles set under ‘:zftp:\\*’. Note that only the top level function name, as called by the user, is used; calling of lower level functions is transparent to the user. Hence modifications to the title bar in zftp\\_chpwd use the contexts :zftp:zfopen, :zftp:zfcd, etc., depending where it was called from. The following styles are understood:\n\nprogress\n\nControls the way that zftp\\_progress reports on the progress of a transfer. If empty, unset, or ‘none’, no progress report is made; if ‘bar’ a growing bar of inverse video is shown; if ‘percent’ (or any other string, though this may change in future), the percentage of the file transferred is shown. The bar meter requires that the width of the terminal be available via the $COLUMNS parameter (normally this is set automatically). If the size of the file being transferred is not available, bar and percent meters will simply show the number of bytes transferred so far.\n\nWhen zfinit is run, if this style is not defined for the context :zftp:\\*, it will be set to ‘bar’.\n\nupdate\n\nSpecifies the minimum time interval between updates of the progress meter in seconds. No update is made unless new data has been received, so the actual time interval is limited only by $ZFTP\\_TIMEOUT.\n\nAs described for progress, zfinit will force this to default to 1.\n\nremote-glob\n\nIf set to ‘1’, ‘yes’ or ‘true’, filename generation (globbing) is performed on the remote machine instead of by zsh itself; see below.\n\ntitlebar\n\nIf set to ‘1’, ‘yes’ or ‘true’, zftp\\_chpwd will put the remote host and remote directory into the titlebar of terminal emulators such as xterm or sun-cmd that allow this.\n\nAs described for progress, zfinit will force this to default to 1.\n\nchpwd\n\nIf set to ‘1’ ‘yes’ or ‘true’, zftp\\_chpwd will call the function chpwd when a connection is closed. This is useful if the remote host details were put into the terminal title bar by zftp\\_chpwd and your usual chpwd also modifies the title bar.\n\nWhen zfinit is run, it will determine whether chpwd exists and if so it will set the default value for the style to 1 if none exists already.\n\nNote that there is also an associative array zfconfig which contains values used by the function system. This should not be modified or overwritten.\n\n* * *\n\n### 25.4.2 Remote globbing\n\nThe commands for retrieving files usually perform filename generation (globbing) on their arguments; this can be turned off by passing the option \\-G to each of the commands. Normally this operates by retrieving a complete list of files for the directory in question, then matching these locally against the pattern supplied. This has the advantage that the full range of zsh patterns (respecting the setting of the option EXTENDED\\_GLOB) can be used. However, it means that the directory part of a filename will not be expanded and must be given exactly. If the remote server does not support the UNIX directory semantics, directory handling is problematic and it is recommended that globbing only be used within the current directory. The list of files in the current directory, if retrieved, will be cached, so that subsequent globs in the same directory without an intervening zfcd are much faster.\n\nIf the remote-glob style (see above) is set, globbing is instead performed on the remote host: the server is asked for a list of matching files. This is highly dependent on how the server is implemented, though typically UNIX servers will provide support for basic glob patterns. This may in some cases be faster, as it avoids retrieving the entire list of directory contents.\n\n* * *\n\n### 25.4.3 Automatic and temporary reopening\n\nAs described for the zfopen command, a subsequent zfopen with no parameters will reopen the connection to the last host (this includes connections made with the zfanon command). Opened in this fashion, the connection starts in the default remote directory and will remain open until explicitly closed.\n\nAutomatic re-opening is also available. If a connection is not currently open and a command requiring a connection is given, the last connection is implicitly reopened. In this case the directory which was current when the connection was closed again becomes the current directory (unless, of course, the command given changes it). Automatic reopening will also take place if the connection was close by the remote server for whatever reason (e.g. a timeout). It is not available if the \\-1 option to zfopen or zfanon was used.\n\nFurthermore, if the command issued is a file transfer, the connection will be closed after the transfer is finished, hence providing a one-shot mode for transfers. This does not apply to directory changing or listing commands; for example a zfdir may reopen a connection but will leave it open. Also, automatic closure will only ever happen in the same command as automatic opening, i.e a zfdir directly followed by a zfget will never close the connection automatically.\n\nInformation about the previous connection is given by the zfstat function. So, for example, if that reports:\n\nSession:        default\nNot connected.\nLast session:   ftp.bar.com:/pub/textfiles\n\nthen the command zfget file.txt will attempt to reopen a connection to ftp.bar.com, retrieve the file /pub/textfiles/file.txt, and immediately close the connection again. On the other hand, zfcd .. will open the connection in the directory /pub and leave it open.\n\nNote that all the above is local to each session; if you return to a previous session, the connection for that session is the one which will be reopened.\n\n* * *\n\n### 25.4.4 Completion\n\nCompletion of local and remote files, directories, sessions and bookmarks is supported. The older, compctl\\-style completion is defined when zfinit is called; support for the new widget-based completion system is provided in the function Completion/Zsh/Command/\\_zftp, which should be installed with the other functions of the completion system and hence should automatically be available.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 239,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zftp-Function-System-html-Zftp-Function-System-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zftp-Function-System-html-Zftp-Function-System-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zftp-Function-System-html-Zftp-Function-System-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zftp-Function-System-html-Zftp-Function-System-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zftp-Function-System-html-Zftp-Function-System-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 29357,
      "readableText": 35710,
      "none": 61538,
      "readableTextIfPossible": 35710,
      "result": 35710,
      "markdown": 27498
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Function-System",
    "loadedTime": "2025-05-08T06:50:59.906Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Function-System",
    "title": "zsh: 23 Calendar Function System",
    "description": "zsh: 23 Calendar Function System",
    "author": null,
    "keywords": "zsh: 23 Calendar Function System",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:50:58 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-10226\"",
      "expires": "Thu, 08 May 2025 06:51:58 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706a5ace14bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 23 Calendar Function System\n23.1 Description\nThe shell is supplied with a series of functions to replace and enhance the traditional Unix calendar programme, which warns the user of imminent or future events, details of which are stored in a text file (typically calendar in the user’s home directory). The version provided here includes a mechanism for alerting the user when an event is due. \nIn addition functions age, before and after are provided that can be used in a glob qualifier; they allow files to be selected based on their modification times. \nThe format of the calendar file and the dates used there in and in the age function are described first, then the functions that can be called to examine and modify the calendar file. \nThe functions here depend on the availability of the zsh/datetime module which is usually installed with the shell. The library function strptime() must be available; it is present on most recent operating systems. \n23.2 File and Date Formats\n23.2.1 Calendar File Format\nThe calendar file is by default ~/calendar. This can be configured by the calendar-file style, see Styles. The basic format consists of a series of separate lines, with no indentation, each including a date and time specification followed by a description of the event. \nVarious enhancements to this format are supported, based on the syntax of Emacs calendar mode. An indented line indicates a continuation line that continues the description of the event from the preceding line (note the date may not be continued in this way). An initial ampersand (&) is ignored for compatibility. \nAn indented line on which the first non-whitespace character is # is not displayed with the calendar entry, but is still scanned for information. This can be used to hide information useful to the calendar system but not to the user, such as the unique identifier used by calendar_add. \nThe Emacs extension that a date with no description may refer to a number of succeeding events at different times is not supported. \nUnless the done-file style has been altered, any events which have been processed are appended to the file with the same name as the calendar file with the suffix .done, hence ~/calendar.done by default. \nAn example is shown below. \n23.2.2 Date Format\nThe format of the date and time is designed to allow flexibility without admitting ambiguity. (The words ‘date’ and ‘time’ are both used in the documentation below; except where specifically noted this implies a string that may include both a date and a time specification.) Note that there is no localization support; month and day names must be in English and separator characters are fixed. Matching is case insensitive, and only the first three letters of the names are significant, although as a special case a form beginning \"month\" does not match \"Monday\". Furthermore, time zones are not handled; all times are assumed to be local. \nIt is recommended that, rather than exploring the intricacies of the system, users find a date format that is natural to them and stick to it. This will avoid unexpected effects. Various key facts should be noted. \nIn particular, note the confusion between month/day/year and day/month/year when the month is numeric; these formats should be avoided if at all possible. Many alternatives are available. \nThe year must be given in full to avoid confusion, and only years from 1900 to 2099 inclusive are matched. \nThe following give some obvious examples; users finding here a format they like and not subject to vagaries of style may skip the full description. As dates and times are matched separately (even though the time may be embedded in the date), any date format may be mixed with any format for the time of day provide the separators are clear (whitespace, colons, commas). \n2007/04/03 13:13\n2007/04/03:13:13\n2007/04/03 1:13 pm\n3rd April 2007, 13:13\nApril 3rd 2007 1:13 p.m.\nApr 3, 2007 13:13\nTue Apr 03 13:13:00 2007\n13:13 2007/apr/3\nMore detailed rules follow. \nTimes are parsed and extracted before dates. They must use colons to separate hours and minutes, though a dot is allowed before seconds if they are present. This limits time formats to the following: \nHH:MM[:SS[.FFFFF]] [am|pm|a.m.|p.m.] \nHH:MM.SS[.FFFFF] [am|pm|a.m.|p.m.] \nHere, square brackets indicate optional elements, possibly with alternatives. Fractions of a second are recognised but ignored. For absolute times (the normal format require by the calendar file and the age, before and after functions) a date is mandatory but a time of day is not; the time returned is at the start of the date. One variation is allowed: if a.m. or p.m. or one of their variants is present, an hour without a minute is allowed, e.g. 3 p.m.. \nTime zones are not handled, though if one is matched following a time specification it will be removed to allow a surrounding date to be parsed. This only happens if the format of the timezone is not too unusual. The following are examples of forms that are understood: \nAny part of the timezone that is not numeric must have exactly three capital letters in the name. \nDates suffer from the ambiguity between DD/MM/YYYY and MM/DD/YYYY. It is recommended this form is avoided with purely numeric dates, but use of ordinals, eg. 3rd/04/2007, will resolve the ambiguity as the ordinal is always parsed as the day of the month. Years must be four digits (and the first two must be 19 or 20); 03/04/08 is not recognised. Other numbers may have leading zeroes, but they are not required. The following are handled: \nYYYY/MM/DD \nYYYY-MM-DD \nYYYY/MNM/DD \nYYYY-MNM-DD \nDD[th|st|rd] MNM[,] [ YYYY ] \nMNM DD[th|st|rd][,] [ YYYY ] \nDD[th|st|rd]/MM[,] YYYY \nDD[th|st|rd]/MM/YYYY \nMM/DD[th|st|rd][,] YYYY \nMM/DD[th|st|rd]/YYYY \nHere, MNM is at least the first three letters of a month name, matched case-insensitively. The remainder of the month name may appear but its contents are irrelevant, so janissary, febrile, martial, apricot, maybe, junta, etc. are happily handled. \nWhere the year is shown as optional, the current year is assumed. There are only two such cases, the form Jun 20 or 14 September (the only two commonly occurring forms, apart from a \"the\" in some forms of English, which isn’t currently supported). Such dates will of course become ambiguous in the future, so should ideally be avoided. \nTimes may follow dates with a colon, e.g. 1965/07/12:09:45; this is in order to provide a format with no whitespace. A comma and whitespace are allowed, e.g. 1965/07/12, 09:45. Currently the order of these separators is not checked, so illogical formats such as 1965/07/12, : ,09:45 will also be matched. For simplicity such variations are not shown in the list above. Otherwise, a time is only recognised as being associated with a date if there is only whitespace in between, or if the time was embedded in the date. \nDays of the week are not normally scanned, but will be ignored if they occur at the start of the date pattern only. However, in contexts where it is useful to specify dates relative to today, days of the week with no other date specification may be given. The day is assumed to be either today or within the past week. Likewise, the words yesterday, today and tomorrow are handled. All matches are case-insensitive. Hence if today is Monday, then Sunday is equivalent to yesterday, Monday is equivalent to today, but Tuesday gives a date six days ago. This is not generally useful within the calendar file. Dates in this format may be combined with a time specification; for example Tomorrow, 8 p.m.. \nFor example, the standard date format: \nFri Aug 18 17:00:48 BST 2006\nis handled by matching HH:MM:SS and removing it together with the matched (but unused) time zone. This leaves the following: \nFri is ignored and the rest is matched according to the standard rules. \n23.2.3 Relative Time Format\nIn certain places relative times are handled. Here, a date is not allowed; instead a combination of various supported periods are allowed, together with an optional time. The periods must be in order from most to least significant. \nIn some cases, a more accurate calculation is possible when there is an anchor date: offsets of months or years pick the correct day, rather than being rounded, and it is possible to pick a particular day in a month as ‘(1st Friday)’, etc., as described in more detail below. \nAnchors are available in the following cases. If one or two times are passed to the function calendar, the start time acts an anchor for the end time when the end time is relative (even if the start time is implicit). When examining calendar files, the scheduled event being examined anchors the warning time when it is given explicitly by means of the WARN keyword; likewise, the scheduled event anchors a repetition period when given by the RPT keyword, so that specifications such as RPT 2 months, 3rd Thursday are handled properly. Finally, the -R argument to calendar_scandate directly provides an anchor for relative calculations. \nThe periods handled, with possible abbreviations are: \nYears \nyears, yrs, ys, year, yr, y, yearly. A year is 365.25 days unless there is an anchor. \nMonths \nmonths, mons, mnths, mths, month, mon, mnth, mth, monthly. Note that m, ms, mn, mns are ambiguous and are not handled. A month is a period of 30 days rather than a calendar month unless there is an anchor. \nWeeks \nweeks, wks, ws, week, wk, w, weekly \nDays \ndays, dys, ds, day, dy, d, daily \nHours \nhours, hrs, hs, hour, hr, h, hourly \nMinutes \nminutes, mins, minute, min, but not m, ms, mn or mns \nSeconds \nseconds, secs, ss, second, sec, s \nSpaces between the numbers are optional, but are required between items, although a comma may be used (with or without spaces). \nThe forms yearly to hourly allow the number to be omitted; it is assumed to be 1. For example, 1 d and daily are equivalent. Note that using those forms with plurals is confusing; 2 yearly is the same as 2 years, not twice yearly, so it is recommended they only be used without numbers. \nWhen an anchor time is present, there is an extension to handle regular events in the form of the nth someday of the month. Such a specification must occur immediately after any year and month specification, but before any time of day, and must be in the form n(th|st|rd) day, for example 1st Tuesday or 3rd Monday. As in other places, days are matched case insensitively, must be in English, and only the first three letters are significant except that a form beginning ‘month’ does not match ‘Monday’. No attempt is made to sanitize the resulting date; attempts to squeeze too many occurrences into a month will push the day into the next month (but in the obvious fashion, retaining the correct day of the week). \nHere are some examples: \n30 years 3 months 4 days 3:42:41\n14 days 5 hours\nMonthly, 3rd Thursday\n4d,10hr\n23.2.4 Example\nHere is an example calendar file. It uses a consistent date format, as recommended above. \nFeb 1, 2006 14:30 Pointless bureaucratic meeting\nMar 27, 2006 11:00 Mutual recrimination and finger pointing\n  Bring water pistol and waterproofs\nMar 31, 2006 14:00 Very serious managerial pontification\n  # UID 12C7878A9A50\nApr 10, 2006 13:30 Even more pointless blame assignment exercise WARN 30 mins\nMay 18, 2006 16:00 Regular moaning session RPT monthly, 3rd Thursday\nThe second entry has a continuation line. The third entry has a continuation line that will not be shown when the entry is displayed, but the unique identifier will be used by the calendar_add function when updating the event. The fourth entry will produce a warning 30 minutes before the event (to allow you to equip yourself appropriately). The fifth entry repeats after a month on the 3rd Thursday, i.e. June 15, 2006, at the same time. \n23.3 User Functions\nThis section describes functions that are designed to be called directly by the user. The first part describes those functions associated with the user’s calendar; the second part describes the use in glob qualifiers. \n23.3.1 Calendar system functions\ncalendar [ -abdDsv ] [ -C calfile ] [ -n num ] [ -S showprog ] [ [ start ] end ] calendar -r [ -abdDrsv ] [ -C calfile ] [ -n num ] [ -S showprog ] [ start ] \nShow events in the calendar. \nWith no arguments, show events from the start of today until the end of the next working day after today. In other words, if today is Friday, Saturday, or Sunday, show up to the end of the following Monday, otherwise show today and tomorrow. \nIf end is given, show events from the start of today up to the time and date given, which is in the format described in the previous section. Note that if this is a date the time is assumed to be midnight at the start of the date, so that effectively this shows all events before the given date. \nend may start with a +, in which case the remainder of the specification is a relative time format as described in the previous section indicating the range of time from the start time that is to be included. \nIf start is also given, show events starting from that time and date. The word now can be used to indicate the current time. \nTo implement an alert when events are due, include calendar -s in your ~/.zshrc file. \nOptions: \n-a \nShow all items in the calendar, regardless of the start and end. \n-b \nBrief: don’t display continuation lines (i.e. indented lines following the line with the date/time), just the first line. \n-B lines \nBrief: display at most the first lines lines of the calendar entry. ‘-B 1’ is equivalent to ‘-b’. \n-C calfile \nExplicitly specify a calendar file instead of the value of the calendar-file style or the default ~/calendar. \n-d \nMove any events that have passed from the calendar file to the \"done\" file, as given by the done-file style or the default which is the calendar file with .done appended. This option is implied by the -s option. \n-D \nTurns off the option -d, even if the -s option is also present. \n-n num, -num \nShow at least num events, if present in the calendar file, regardless of the start and end. \n-r \nShow all the remaining options in the calendar, ignoring the given end time. The start time is respected; any argument given is treated as a start time. \n-s \nUse the shell’s sched command to schedule a timed event that will warn the user when an event is due. Note that the sched command only runs if the shell is at an interactive prompt; a foreground task blocks the scheduled task from running until it is finished. \nThe timed event usually runs the programme calendar_show to show the event, as described in Utility functions. \nBy default, a warning of the event is shown five minutes before it is due. The warning period can be configured by the style warn-time or for a single calendar entry by including WARN reltime in the first line of the entry, where reltime is one of the usual relative time formats. \nA repeated event may be indicated by including RPT reldate in the first line of the entry. After the scheduled event has been displayed it will be re-entered into the calendar file at a time reldate after the existing event. Note that this is currently the only use made of the repeat count, so that it is not possible to query the schedule for a recurrence of an event in the calendar until the previous event has passed. \nIf RPT is used, it is also possible to specify that certain recurrences of an event are rescheduled or cancelled. This is done with the OCCURRENCE keyword, followed by whitespace and the date and time of the occurrence in the regular sequence, followed by whitespace and either the date and time of the rescheduled event or the exact string CANCELLED. In this case the date and time must be in exactly the \"date with local time\" format used by the text/calendar MIME type (RFC 2445), <YYYY><MM><DD>T<hh><mm><ss> (note the presence of the literal character T). The first word (the regular recurrence) may be something other than a proper date/time to indicate that the event is additional to the normal sequence; a convention that retains the formatting appearance is XXXXXXXXTXXXXXX. \nFurthermore, it is useful to record the next regular recurrence (as then the displayed date may be for a rescheduled event so cannot be used for calculating the regular sequence). This is specified by RECURRENCE and a time or date in the same format. calendar_add adds such an indication when it encounters a recurring event that does not include one, based on the headline date/time. \nIf calendar_add is used to update occurrences the UID keyword described there should be present in both the existing entry and the added occurrence in order to identify recurring event sequences. \nFor example, \nThu May 6, 2010 11:00 Informal chat RPT 1 week\n  # RECURRENCE 20100506T110000\n  # OCCURRENCE 20100513T110000 20100513T120000\n  # OCCURRENCE 20100520T110000 CANCELLED\nThe event that occurs at 11:00 on 13th May 2010 is rescheduled an hour later. The event that occurs a week later is cancelled. The occurrences are given on a continuation line starting with a # character so will not usually be displayed as part of the event. As elsewhere, no account of time zones is taken with the times. After the next event occurs the headline date/time will be ‘Thu May 13, 2010 12:00’ while the RECURRENCE date/time will be ‘20100513T110000’ (note that cancelled and moved events are not taken account of in the RECURRENCE, which records what the next regular recurrence is, but they are accounted for in the headline date/time). \nIt is safe to run calendar -s to reschedule an existing event (if the calendar file has changed, for example), and also to have it running in multiples instances of the shell since the calendar file is locked when in use. \nBy default, expired events are moved to the \"done\" file; see the -d option. Use -D to prevent this. \n-S showprog \nExplicitly specify a programme to be used for showing events instead of the value of the show-prog style or the default calendar_show. \n-v \nVerbose: show more information about stages of processing. This is useful for confirming that the function has successfully parsed the dates in the calendar file. \ncalendar_add [ -BL ] event ... \nAdds a single event to the calendar in the appropriate location. The event can contain multiple lines, as described in File and Date Formats. Using this function ensures that the calendar file is sorted in date and time order. It also makes special arrangements for locking the file while it is altered. The old calendar is left in a file with the suffix .old. \nThe option -B indicates that backing up the calendar file will be handled by the caller and should not be performed by calendar_add. The option -L indicates that calendar_add does not need to lock the calendar file as it is already locked. These options will not usually be needed by users. \nIf the style reformat-date is true, the date and time of the new entry will be rewritten into the standard date format: see the descriptions of this style and the style date-format. \nThe function can use a unique identifier stored with each event to ensure that updates to existing events are treated correctly. The entry should contain the word UID, followed by whitespace, followed by a word consisting entirely of hexadecimal digits of arbitrary length (all digits are significant, including leading zeroes). As the UID is not directly useful to the user, it is convenient to hide it on an indented continuation line starting with a #, for example: \nAug 31, 2007 09:30  Celebrate the end of the holidays\n  # UID 045B78A0\nThe second line will not be shown by the calendar function. \nIt is possible to specify the RPT keyword followed by CANCELLED instead of a relative time. This causes any matched event or series of events to be cancelled (the original event does not have to be marked as recurring in order to be cancelled by this method). A UID is required in order to match an existing event in the calendar. \ncalendar_add will attempt to manage recurrences and occurrences of repeating events as described for event scheduling by calendar -s above. To reschedule or cancel a single event calendar_add should be called with an entry that includes the correct UID but does not include the RPT keyword as this is taken to mean the entry applies to a series of repeating events and hence replaces all existing information. Each rescheduled or cancelled occurrence must have an OCCURRENCE keyword in the entry passed to calendar_add which will be merged into the calendar file. Any existing reference to the occurrence is replaced. An occurrence that does not refer to a valid existing event is added as a one-off occurrence to the same calendar entry. \ncalendar_edit \nThis calls the user’s editor to edit the calendar file. If there are arguments, they are taken as the editor to use (the file name is appended to the commands); otherwise, the editor is given by the variable VISUAL, if set, else the variable EDITOR. \nIf the calendar scheduler was running, then after editing the file calendar -s is called to update it. \nThis function locks out the calendar system during the edit. Hence it should be used to edit the calendar file if there is any possibility of a calendar event occurring meanwhile. Note this can lead to another shell with calendar functions enabled hanging waiting for a lock, so it is necessary to quit the editor as soon as possible. \ncalendar_parse calendar-entry \nThis is the internal function that analyses the parts of a calendar entry, which is passed as the only argument. The function returns status 1 if the argument could not be parsed as a calendar entry and status 2 if the wrong number of arguments were passed; it also sets the parameter reply to an empty associative array. Otherwise, it returns status 0 and sets elements of the associative array reply as follows: \ntime \nThe time as a string of digits in the same units as $EPOCHSECONDS \nschedtime \nThe regularly scheduled time. This may differ from the actual event time time if this is a recurring event and the next occurrence has been rescheduled. Then time gives the actual time and schedtime the time of the regular recurrence before modification. \ntext1 \nThe text from the line not including the date and time of the event, but including any WARN or RPT keywords and values. \nwarntime \nAny warning time given by the WARN keyword as a string of digits containing the time at which to warn in the same units as $EPOCHSECONDS. (Note this is an absolute time, not the relative time passed down.) Not set no WARN keyword and value were matched. \nwarnstr \nThe raw string matched after the WARN keyword, else unset. \nrpttime \nAny recurrence time given by the RPT keyword as a string of digits containing the time of the recurrence in the same units as $EPOCHSECONDS. (Note this is an absolute time.) Not set if no RPT keyword and value were matched. \nschedrpttime \nThe next regularly scheduled occurrence of a recurring event before modification. This may differ from rpttime, which is the actual time of the event that may have been rescheduled from the regular time. \nrptstr \nThe raw string matched after the RPT keyword, else unset. \ntext2 \nThe text from the line after removal of the date and any keywords and values. \ncalendar_showdate [ -r ] [ -f fmt ] date-spec ... \nThe given date-spec is interpreted and the corresponding date and time printed. If the initial date-spec begins with a + or - it is treated as relative to the current time; date-specs after the first are treated as relative to the date calculated so far and a leading + is optional in that case. This allows one to use the system as a date calculator. For example, calendar_showdate ’+1 month, 1st Friday’ shows the date of the first Friday of next month. \nWith the option -r nothing is printed but the value of the date and time in seconds since the epoch is stored in the parameter REPLY. \nWith the option -f fmt the given date/time conversion format is passed to strftime; see notes on the date-format style below. \nIn order to avoid ambiguity with negative relative date specifications, options must occur in separate words; in other words, -r and -f should not be combined in the same word. \ncalendar_sort \nSorts the calendar file into date and time order. The old calendar is left in a file with the suffix .old. \n23.3.2 Glob qualifiers\nage \nThe function age can be autoloaded and use separately from the calendar system, although it uses the function calendar_scandate for date formatting. It requires the zsh/stat builtin, but uses only the builtin zstat. \nage selects files having a given modification time for use as a glob qualifier. The format of the date is the same as that understood by the calendar system, described in File and Date Formats. \nThe function can take one or two arguments, which can be supplied either directly as command or arguments, or separately as shell parameters. \nprint *(e:age 2006/10/04 2006/10/09:)\nThe example above matches all files modified between the start of those dates. The second argument may alternatively be a relative time introduced by a +: \nprint *(e:age 2006/10/04 +5d:)\nThe example above is equivalent to the previous example. \nIn addition to the special use of days of the week, today and yesterday, times with no date may be specified; these apply to today. Obviously such uses become problematic around midnight. \nprint *(e-age 12:00 13:30-)\nThe example above shows files modified between 12:00 and 13:00 today. \nprint *(e:age 2006/10/04:)\nThe example above matches all files modified on that date. If the second argument is omitted it is taken to be exactly 24 hours after the first argument (even if the first argument contains a time). \nprint *(e-age 2006/10/04:10:15 2006/10/04:10:45-)\nThe example above supplies times. Note that whitespace within the time and date specification must be quoted to ensure age receives the correct arguments, hence the use of the additional colon to separate the date and time. \nAGEREF=2006/10/04:10:15\nAGEREF2=2006/10/04:10:45\nprint *(+age)\nThis shows the same example before using another form of argument passing. The dates and times in the parameters AGEREF and AGEREF2 stay in effect until unset, but will be overridden if any argument is passed as an explicit argument to age. Any explicit argument causes both parameters to be ignored. \nInstead of an explicit date and time, it’s possible to use the modification time of a file as the date and time for either argument by introducing the file name with a colon: \nmatches all files created on the same day (24 hours starting from midnight) as file1. \nprint *(e-age :file1 :file2-)\nmatches all files modified no earlier than file1 and no later than file2; precision here is to the nearest second. \nafter before \nThe functions after and before are simpler versions of age that take just one argument. The argument is parsed similarly to an argument of age; if it is not given the variable AGEREF is consulted. As the names of the functions suggest, a file matches if its modification time is after or before the time and date specified. If a time only is given the date is today. \nThe two following examples are therefore equivalent: \nprint *(e-after 12:00-)\nprint *(e-after today:12:00-)\n23.4 Styles\nThe zsh style mechanism using the zstyle command is describe in The zsh/zutil Module. This is the same mechanism used in the completion system. \nThe styles below are all examined in the context :datetime:function:, for example :datetime:calendar:. \ncalendar-file \nThe location of the main calendar. The default is ~/calendar. \ndate-format \nA strftime format string (see strftime(3)) with the zsh extensions providing various numbers with no leading zero or space if the number is a single digit as described for the %D{string} prompt format in Prompt Expansion. \nThis is used for outputting dates in calendar, both to support the -v option and when adding recurring events back to the calendar file, and in calendar_showdate as the final output format. \nIf the style is not set, the default used is similar the standard system format as output by the date command (also known as ‘ctime format’): ‘%a %b %d %H:%M:%S %Z %Y’. \ndone-file \nThe location of the file to which events which have passed are appended. The default is the calendar file location with the suffix .done. The style may be set to an empty string in which case a \"done\" file will not be maintained. \nreformat-date \nBoolean, used by calendar_add. If it is true, the date and time of new entries added to the calendar will be reformatted to the format given by the style date-format or its default. Only the date and time of the event itself is reformatted; any subsidiary dates and times such as those associated with repeat and warning times are left alone. \nshow-prog \nThe programme run by calendar for showing events. It will be passed the start time and stop time of the events requested in seconds since the epoch followed by the event text. Note that calendar -s uses a start time and stop time equal to one another to indicate alerts for specific events. \nThe default is the function calendar_show. \nwarn-time \nThe time before an event at which a warning will be displayed, if the first line of the event does not include the text EVENT reltime. The default is 5 minutes. \n23.5 Utility functions\ncalendar_lockfiles \nAttempt to lock the files given in the argument. To prevent problems with network file locking this is done in an ad hoc fashion by attempting to create a symbolic link to the file with the name file.lockfile. No other system level functions are used for locking, i.e. the file can be accessed and modified by any utility that does not use this mechanism. In particular, the user is not prevented from editing the calendar file at the same time unless calendar_edit is used. \nThree attempts are made to lock the file before giving up. If the module zsh/zselect is available, the times of the attempts are jittered so that multiple instances of the calling function are unlikely to retry at the same time. \nThe files locked are appended to the array lockfiles, which should be local to the caller. \nIf all files were successfully locked, status zero is returned, else status one. \nThis function may be used as a general file locking function, although this will only work if only this mechanism is used to lock files. \ncalendar_read \nThis is a backend used by various other functions to parse the calendar file, which is passed as the only argument. The array calendar_entries is set to the list of events in the file; no pruning is done except that ampersands are removed from the start of the line. Each entry may contain multiple lines. \ncalendar_scandate \nThis is a generic function to parse dates and times that may be used separately from the calendar system. The argument is a date or time specification as described in File and Date Formats. The parameter REPLY is set to the number of seconds since the epoch corresponding to that date or time. By default, the date and time may occur anywhere within the given argument. \nReturns status zero if the date and time were successfully parsed, else one. \nOptions: \n-a \nThe date and time are anchored to the start of the argument; they will not be matched if there is preceding text. \n-A \nThe date and time are anchored to both the start and end of the argument; they will not be matched if the is any other text in the argument. \n-d \nEnable additional debugging output. \n-m \nMinus. When -R anchor_time is also given the relative time is calculated backwards from anchor_time. \n-r \nThe argument passed is to be parsed as a relative time. \n-R anchor_time \nThe argument passed is to be parsed as a relative time. The time is relative to anchor_time, a time in seconds since the epoch, and the returned value is the absolute time corresponding to advancing anchor_time by the relative time given. This allows lengths of months to be correctly taken into account. If the final day does not exist in the given month, the last day of the final month is given. For example, if the anchor time is during 31st January 2007 and the relative time is 1 month, the final time is the same time of day during 28th February 2007. \n-s \nIn addition to setting REPLY, set REPLY2 to the remainder of the argument after the date and time have been stripped. This is empty if the option -A was given. \n-t \nAllow a time with no date specification. The date is assumed to be today. The behaviour is unspecified if the iron tongue of midnight is tolling twelve. \ncalendar_show \nThe function used by default to display events. It accepts a start time and end time for events, both in epoch seconds, and an event description. \nThe event is always printed to standard output. If the command line editor is active (which will usually be the case) the command line will be redisplayed after the output. \nIf the parameter DISPLAY is set and the start and end times are the same (indicating a scheduled event), the function uses the command xmessage to display a window with the event details. \n23.6 Bugs\nAs the system is based entirely on shell functions (with a little support from the zsh/datetime module) the mechanisms used are not as robust as those provided by a dedicated calendar utility. Consequently the user should not rely on the shell for vital alerts. \nThere is no calendar_delete function. \nThere is no localization support for dates and times, nor any support for the use of time zones. \nRelative periods of months and years do not take into account the variable number of days. \nThe calendar_show function is currently hardwired to use xmessage for displaying alerts on X Window System displays. This should be configurable and ideally integrate better with the desktop. \ncalendar_lockfiles hangs the shell while waiting for a lock on a file. If called from a scheduled task, it should instead reschedule the event that caused it. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Calendar-Function-System-html-Calendar-Function-System-7tri3h.html",
  "markdown": "# zsh: 23 Calendar Function System\n\n* * *\n\n## 23.1 Description\n\nThe shell is supplied with a series of functions to replace and enhance the traditional Unix calendar programme, which warns the user of imminent or future events, details of which are stored in a text file (typically calendar in the user’s home directory). The version provided here includes a mechanism for alerting the user when an event is due.\n\nIn addition functions age, before and after are provided that can be used in a glob qualifier; they allow files to be selected based on their modification times.\n\nThe format of the calendar file and the dates used there in and in the age function are described first, then the functions that can be called to examine and modify the calendar file.\n\nThe functions here depend on the availability of the zsh/datetime module which is usually installed with the shell. The library function strptime() must be available; it is present on most recent operating systems.\n\n* * *\n\n## 23.2 File and Date Formats\n\n* * *\n\n### 23.2.1 Calendar File Format\n\nThe calendar file is by default ~/calendar. This can be configured by the calendar-file style, see [Styles](#Calendar-Styles). The basic format consists of a series of separate lines, with no indentation, each including a date and time specification followed by a description of the event.\n\nVarious enhancements to this format are supported, based on the syntax of Emacs calendar mode. An indented line indicates a continuation line that continues the description of the event from the preceding line (note the date may not be continued in this way). An initial ampersand (&) is ignored for compatibility.\n\nAn indented line on which the first non-whitespace character is # is not displayed with the calendar entry, but is still scanned for information. This can be used to hide information useful to the calendar system but not to the user, such as the unique identifier used by calendar\\_add.\n\nThe Emacs extension that a date with no description may refer to a number of succeeding events at different times is not supported.\n\nUnless the done-file style has been altered, any events which have been processed are appended to the file with the same name as the calendar file with the suffix .done, hence ~/calendar.done by default.\n\nAn example is shown below.\n\n* * *\n\n### 23.2.2 Date Format\n\nThe format of the date and time is designed to allow flexibility without admitting ambiguity. (The words ‘date’ and ‘time’ are both used in the documentation below; except where specifically noted this implies a string that may include both a date and a time specification.) Note that there is no localization support; month and day names must be in English and separator characters are fixed. Matching is case insensitive, and only the first three letters of the names are significant, although as a special case a form beginning \"month\" does not match \"Monday\". Furthermore, time zones are not handled; all times are assumed to be local.\n\nIt is recommended that, rather than exploring the intricacies of the system, users find a date format that is natural to them and stick to it. This will avoid unexpected effects. Various key facts should be noted.\n\n*   In particular, note the confusion between month/day/year and day/month/year when the month is numeric; these formats should be avoided if at all possible. Many alternatives are available.\n*   The year must be given in full to avoid confusion, and only years from 1900 to 2099 inclusive are matched.\n\nThe following give some obvious examples; users finding here a format they like and not subject to vagaries of style may skip the full description. As dates and times are matched separately (even though the time may be embedded in the date), any date format may be mixed with any format for the time of day provide the separators are clear (whitespace, colons, commas).\n\n2007/04/03 13:13\n2007/04/03:13:13\n2007/04/03 1:13 pm\n3rd April 2007, 13:13\nApril 3rd 2007 1:13 p.m.\nApr 3, 2007 13:13\nTue Apr 03 13:13:00 2007\n13:13 2007/apr/3\n\nMore detailed rules follow.\n\nTimes are parsed and extracted before dates. They must use colons to separate hours and minutes, though a dot is allowed before seconds if they are present. This limits time formats to the following:\n\n*   HH:MM\\[:SS\\[.FFFFF\\]\\] \\[am|pm|a.m.|p.m.\\]\n*   HH:MM.SS\\[.FFFFF\\] \\[am|pm|a.m.|p.m.\\]\n\nHere, square brackets indicate optional elements, possibly with alternatives. Fractions of a second are recognised but ignored. For absolute times (the normal format require by the calendar file and the age, before and after functions) a date is mandatory but a time of day is not; the time returned is at the start of the date. One variation is allowed: if a.m. or p.m. or one of their variants is present, an hour without a minute is allowed, e.g. 3 p.m..\n\nTime zones are not handled, though if one is matched following a time specification it will be removed to allow a surrounding date to be parsed. This only happens if the format of the timezone is not too unusual. The following are examples of forms that are understood:\n\nAny part of the timezone that is not numeric must have exactly three capital letters in the name.\n\nDates suffer from the ambiguity between DD/MM/YYYY and MM/DD/YYYY. It is recommended this form is avoided with purely numeric dates, but use of ordinals, eg. 3rd/04/2007, will resolve the ambiguity as the ordinal is always parsed as the day of the month. Years must be four digits (and the first two must be 19 or 20); 03/04/08 is not recognised. Other numbers may have leading zeroes, but they are not required. The following are handled:\n\n*   YYYY/MM/DD\n*   YYYY\\-MM\\-DD\n*   YYYY/MNM/DD\n*   YYYY\\-MNM\\-DD\n*   DD\\[th|st|rd\\] MNM\\[,\\] \\[ YYYY \\]\n*   MNM DD\\[th|st|rd\\]\\[,\\] \\[ YYYY \\]\n*   DD\\[th|st|rd\\]/MM\\[,\\] YYYY\n*   DD\\[th|st|rd\\]/MM/YYYY\n*   MM/DD\\[th|st|rd\\]\\[,\\] YYYY\n*   MM/DD\\[th|st|rd\\]/YYYY\n\nHere, MNM is at least the first three letters of a month name, matched case-insensitively. The remainder of the month name may appear but its contents are irrelevant, so janissary, febrile, martial, apricot, maybe, junta, etc. are happily handled.\n\nWhere the year is shown as optional, the current year is assumed. There are only two such cases, the form Jun 20 or 14 September (the only two commonly occurring forms, apart from a \"the\" in some forms of English, which isn’t currently supported). Such dates will of course become ambiguous in the future, so should ideally be avoided.\n\nTimes may follow dates with a colon, e.g. 1965/07/12:09:45; this is in order to provide a format with no whitespace. A comma and whitespace are allowed, e.g. 1965/07/12, 09:45. Currently the order of these separators is not checked, so illogical formats such as 1965/07/12, : ,09:45 will also be matched. For simplicity such variations are not shown in the list above. Otherwise, a time is only recognised as being associated with a date if there is only whitespace in between, or if the time was embedded in the date.\n\nDays of the week are not normally scanned, but will be ignored if they occur at the start of the date pattern only. However, in contexts where it is useful to specify dates relative to today, days of the week with no other date specification may be given. The day is assumed to be either today or within the past week. Likewise, the words yesterday, today and tomorrow are handled. All matches are case-insensitive. Hence if today is Monday, then Sunday is equivalent to yesterday, Monday is equivalent to today, but Tuesday gives a date six days ago. This is not generally useful within the calendar file. Dates in this format may be combined with a time specification; for example Tomorrow, 8 p.m..\n\nFor example, the standard date format:\n\nFri Aug 18 17:00:48 BST 2006\n\nis handled by matching HH:MM:SS and removing it together with the matched (but unused) time zone. This leaves the following:\n\nFri is ignored and the rest is matched according to the standard rules.\n\n* * *\n\n### 23.2.3 Relative Time Format\n\nIn certain places relative times are handled. Here, a date is not allowed; instead a combination of various supported periods are allowed, together with an optional time. The periods must be in order from most to least significant.\n\nIn some cases, a more accurate calculation is possible when there is an anchor date: offsets of months or years pick the correct day, rather than being rounded, and it is possible to pick a particular day in a month as ‘(1st Friday)’, etc., as described in more detail below.\n\nAnchors are available in the following cases. If one or two times are passed to the function calendar, the start time acts an anchor for the end time when the end time is relative (even if the start time is implicit). When examining calendar files, the scheduled event being examined anchors the warning time when it is given explicitly by means of the WARN keyword; likewise, the scheduled event anchors a repetition period when given by the RPT keyword, so that specifications such as RPT 2 months, 3rd Thursday are handled properly. Finally, the \\-R argument to calendar\\_scandate directly provides an anchor for relative calculations.\n\nThe periods handled, with possible abbreviations are:\n\nYears\n\nyears, yrs, ys, year, yr, y, yearly. A year is 365.25 days unless there is an anchor.\n\nMonths\n\nmonths, mons, mnths, mths, month, mon, mnth, mth, monthly. Note that m, ms, mn, mns are ambiguous and are _not_ handled. A month is a period of 30 days rather than a calendar month unless there is an anchor.\n\nWeeks\n\nweeks, wks, ws, week, wk, w, weekly\n\nDays\n\ndays, dys, ds, day, dy, d, daily\n\nHours\n\nhours, hrs, hs, hour, hr, h, hourly\n\nMinutes\n\nminutes, mins, minute, min, but _not_ m, ms, mn or mns\n\nSeconds\n\nseconds, secs, ss, second, sec, s\n\nSpaces between the numbers are optional, but are required between items, although a comma may be used (with or without spaces).\n\nThe forms yearly to hourly allow the number to be omitted; it is assumed to be 1. For example, 1 d and daily are equivalent. Note that using those forms with plurals is confusing; 2 yearly is the same as 2 years, _not_ twice yearly, so it is recommended they only be used without numbers.\n\nWhen an anchor time is present, there is an extension to handle regular events in the form of the nth someday of the month. Such a specification must occur immediately after any year and month specification, but before any time of day, and must be in the form n(th|st|rd) day, for example 1st Tuesday or 3rd Monday. As in other places, days are matched case insensitively, must be in English, and only the first three letters are significant except that a form beginning ‘month’ does not match ‘Monday’. No attempt is made to sanitize the resulting date; attempts to squeeze too many occurrences into a month will push the day into the next month (but in the obvious fashion, retaining the correct day of the week).\n\nHere are some examples:\n\n30 years 3 months 4 days 3:42:41\n14 days 5 hours\nMonthly, 3rd Thursday\n4d,10hr\n\n* * *\n\n### 23.2.4 Example\n\nHere is an example calendar file. It uses a consistent date format, as recommended above.\n\nFeb 1, 2006 14:30 Pointless bureaucratic meeting\nMar 27, 2006 11:00 Mutual recrimination and finger pointing\n  Bring water pistol and waterproofs\nMar 31, 2006 14:00 Very serious managerial pontification\n  # UID 12C7878A9A50\nApr 10, 2006 13:30 Even more pointless blame assignment exercise WARN 30 mins\nMay 18, 2006 16:00 Regular moaning session RPT monthly, 3rd Thursday\n\nThe second entry has a continuation line. The third entry has a continuation line that will not be shown when the entry is displayed, but the unique identifier will be used by the calendar\\_add function when updating the event. The fourth entry will produce a warning 30 minutes before the event (to allow you to equip yourself appropriately). The fifth entry repeats after a month on the 3rd Thursday, i.e. June 15, 2006, at the same time.\n\n* * *\n\n## 23.3 User Functions\n\nThis section describes functions that are designed to be called directly by the user. The first part describes those functions associated with the user’s calendar; the second part describes the use in glob qualifiers.\n\n* * *\n\n### 23.3.1 Calendar system functions\n\ncalendar \\[ \\-abdDsv \\] \\[ \\-C calfile \\] \\[ \\-n num \\] \\[ \\-S showprog \\]\n\n         \\[ \\[ start \\] end \\]\n\ncalendar -r \\[ \\-abdDrsv \\] \\[ \\-C calfile \\] \\[ \\-n num \\] \\[ \\-S showprog \\]\n\n         \\[ start \\]\n\nShow events in the calendar.\n\nWith no arguments, show events from the start of today until the end of the next working day after today. In other words, if today is Friday, Saturday, or Sunday, show up to the end of the following Monday, otherwise show today and tomorrow.\n\nIf end is given, show events from the start of today up to the time and date given, which is in the format described in the previous section. Note that if this is a date the time is assumed to be midnight at the start of the date, so that effectively this shows all events before the given date.\n\nend may start with a +, in which case the remainder of the specification is a relative time format as described in the previous section indicating the range of time from the start time that is to be included.\n\nIf start is also given, show events starting from that time and date. The word now can be used to indicate the current time.\n\nTo implement an alert when events are due, include calendar -s in your ~/.zshrc file.\n\nOptions:\n\n\\-a\n\nShow all items in the calendar, regardless of the start and end.\n\n\\-b\n\nBrief: don’t display continuation lines (i.e. indented lines following the line with the date/time), just the first line.\n\n\\-B lines\n\nBrief: display at most the first lines lines of the calendar entry. ‘\\-B 1’ is equivalent to ‘\\-b’.\n\n\\-C calfile\n\nExplicitly specify a calendar file instead of the value of the calendar-file style or the default ~/calendar.\n\n\\-d\n\nMove any events that have passed from the calendar file to the \"done\" file, as given by the done-file style or the default which is the calendar file with .done appended. This option is implied by the \\-s option.\n\n\\-D\n\nTurns off the option \\-d, even if the \\-s option is also present.\n\n\\-n num, \\-num\n\nShow at least num events, if present in the calendar file, regardless of the start and end.\n\n\\-r\n\nShow all the remaining options in the calendar, ignoring the given end time. The start time is respected; any argument given is treated as a start time.\n\n\\-s\n\nUse the shell’s sched command to schedule a timed event that will warn the user when an event is due. Note that the sched command only runs if the shell is at an interactive prompt; a foreground task blocks the scheduled task from running until it is finished.\n\nThe timed event usually runs the programme calendar\\_show to show the event, as described in [Utility functions](#Calendar-Utility-Functions).\n\nBy default, a warning of the event is shown five minutes before it is due. The warning period can be configured by the style warn-time or for a single calendar entry by including WARN reltime in the first line of the entry, where reltime is one of the usual relative time formats.\n\nA repeated event may be indicated by including RPT reldate in the first line of the entry. After the scheduled event has been displayed it will be re-entered into the calendar file at a time reldate after the existing event. Note that this is currently the only use made of the repeat count, so that it is not possible to query the schedule for a recurrence of an event in the calendar until the previous event has passed.\n\nIf RPT is used, it is also possible to specify that certain recurrences of an event are rescheduled or cancelled. This is done with the OCCURRENCE keyword, followed by whitespace and the date and time of the occurrence in the regular sequence, followed by whitespace and either the date and time of the rescheduled event or the exact string CANCELLED. In this case the date and time must be in exactly the \"date with local time\" format used by the text/calendar MIME type (RFC 2445), <YYYY><MM><DD>T<hh><mm><ss> (note the presence of the literal character T). The first word (the regular recurrence) may be something other than a proper date/time to indicate that the event is additional to the normal sequence; a convention that retains the formatting appearance is XXXXXXXXTXXXXXX.\n\nFurthermore, it is useful to record the next regular recurrence (as then the displayed date may be for a rescheduled event so cannot be used for calculating the regular sequence). This is specified by RECURRENCE and a time or date in the same format. calendar\\_add adds such an indication when it encounters a recurring event that does not include one, based on the headline date/time.\n\nIf calendar\\_add is used to update occurrences the UID keyword described there should be present in both the existing entry and the added occurrence in order to identify recurring event sequences.\n\nFor example,\n\nThu May 6, 2010 11:00 Informal chat RPT 1 week\n  # RECURRENCE 20100506T110000\n  # OCCURRENCE 20100513T110000 20100513T120000\n  # OCCURRENCE 20100520T110000 CANCELLED\n\nThe event that occurs at 11:00 on 13th May 2010 is rescheduled an hour later. The event that occurs a week later is cancelled. The occurrences are given on a continuation line starting with a # character so will not usually be displayed as part of the event. As elsewhere, no account of time zones is taken with the times. After the next event occurs the headline date/time will be ‘Thu May 13, 2010 12:00’ while the RECURRENCE date/time will be ‘20100513T110000’ (note that cancelled and moved events are not taken account of in the RECURRENCE, which records what the next regular recurrence is, but they are accounted for in the headline date/time).\n\nIt is safe to run calendar -s to reschedule an existing event (if the calendar file has changed, for example), and also to have it running in multiples instances of the shell since the calendar file is locked when in use.\n\nBy default, expired events are moved to the \"done\" file; see the \\-d option. Use \\-D to prevent this.\n\n\\-S showprog\n\nExplicitly specify a programme to be used for showing events instead of the value of the show-prog style or the default calendar\\_show.\n\n\\-v\n\nVerbose: show more information about stages of processing. This is useful for confirming that the function has successfully parsed the dates in the calendar file.\n\ncalendar\\_add \\[ \\-BL \\] event ...\n\nAdds a single event to the calendar in the appropriate location. The event can contain multiple lines, as described in [File and Date Formats](#Calendar-File-and-Date-Formats). Using this function ensures that the calendar file is sorted in date and time order. It also makes special arrangements for locking the file while it is altered. The old calendar is left in a file with the suffix .old.\n\nThe option \\-B indicates that backing up the calendar file will be handled by the caller and should not be performed by calendar\\_add. The option \\-L indicates that calendar\\_add does not need to lock the calendar file as it is already locked. These options will not usually be needed by users.\n\nIf the style reformat-date is true, the date and time of the new entry will be rewritten into the standard date format: see the descriptions of this style and the style date-format.\n\nThe function can use a unique identifier stored with each event to ensure that updates to existing events are treated correctly. The entry should contain the word UID, followed by whitespace, followed by a word consisting entirely of hexadecimal digits of arbitrary length (all digits are significant, including leading zeroes). As the UID is not directly useful to the user, it is convenient to hide it on an indented continuation line starting with a #, for example:\n\nAug 31, 2007 09:30  Celebrate the end of the holidays\n  # UID 045B78A0\n\nThe second line will not be shown by the calendar function.\n\nIt is possible to specify the RPT keyword followed by CANCELLED instead of a relative time. This causes any matched event or series of events to be cancelled (the original event does not have to be marked as recurring in order to be cancelled by this method). A UID is required in order to match an existing event in the calendar.\n\ncalendar\\_add will attempt to manage recurrences and occurrences of repeating events as described for event scheduling by calendar -s above. To reschedule or cancel a single event calendar\\_add should be called with an entry that includes the correct UID but does _not_ include the RPT keyword as this is taken to mean the entry applies to a series of repeating events and hence replaces all existing information. Each rescheduled or cancelled occurrence must have an OCCURRENCE keyword in the entry passed to calendar\\_add which will be merged into the calendar file. Any existing reference to the occurrence is replaced. An occurrence that does not refer to a valid existing event is added as a one-off occurrence to the same calendar entry.\n\ncalendar\\_edit\n\nThis calls the user’s editor to edit the calendar file. If there are arguments, they are taken as the editor to use (the file name is appended to the commands); otherwise, the editor is given by the variable VISUAL, if set, else the variable EDITOR.\n\nIf the calendar scheduler was running, then after editing the file calendar -s is called to update it.\n\nThis function locks out the calendar system during the edit. Hence it should be used to edit the calendar file if there is any possibility of a calendar event occurring meanwhile. Note this can lead to another shell with calendar functions enabled hanging waiting for a lock, so it is necessary to quit the editor as soon as possible.\n\ncalendar\\_parse calendar-entry\n\nThis is the internal function that analyses the parts of a calendar entry, which is passed as the only argument. The function returns status 1 if the argument could not be parsed as a calendar entry and status 2 if the wrong number of arguments were passed; it also sets the parameter reply to an empty associative array. Otherwise, it returns status 0 and sets elements of the associative array reply as follows:\n\ntime\n\nThe time as a string of digits in the same units as $EPOCHSECONDS\n\nschedtime\n\nThe regularly scheduled time. This may differ from the actual event time time if this is a recurring event and the next occurrence has been rescheduled. Then time gives the actual time and schedtime the time of the regular recurrence before modification.\n\ntext1\n\nThe text from the line not including the date and time of the event, but including any WARN or RPT keywords and values.\n\nwarntime\n\nAny warning time given by the WARN keyword as a string of digits containing the time at which to warn in the same units as $EPOCHSECONDS. (Note this is an absolute time, not the relative time passed down.) Not set no WARN keyword and value were matched.\n\nwarnstr\n\nThe raw string matched after the WARN keyword, else unset.\n\nrpttime\n\nAny recurrence time given by the RPT keyword as a string of digits containing the time of the recurrence in the same units as $EPOCHSECONDS. (Note this is an absolute time.) Not set if no RPT keyword and value were matched.\n\nschedrpttime\n\nThe next regularly scheduled occurrence of a recurring event before modification. This may differ from rpttime, which is the actual time of the event that may have been rescheduled from the regular time.\n\nrptstr\n\nThe raw string matched after the RPT keyword, else unset.\n\ntext2\n\nThe text from the line after removal of the date and any keywords and values.\n\ncalendar\\_showdate \\[ \\-r \\] \\[ \\-f fmt \\] date-spec ...\n\nThe given date-spec is interpreted and the corresponding date and time printed. If the initial date-spec begins with a + or \\- it is treated as relative to the current time; date-specs after the first are treated as relative to the date calculated so far and a leading + is optional in that case. This allows one to use the system as a date calculator. For example, calendar\\_showdate ’+1 month, 1st Friday’ shows the date of the first Friday of next month.\n\nWith the option \\-r nothing is printed but the value of the date and time in seconds since the epoch is stored in the parameter REPLY.\n\nWith the option \\-f fmt the given date/time conversion format is passed to strftime; see notes on the date-format style below.\n\nIn order to avoid ambiguity with negative relative date specifications, options must occur in separate words; in other words, \\-r and \\-f should not be combined in the same word.\n\ncalendar\\_sort\n\nSorts the calendar file into date and time order. The old calendar is left in a file with the suffix .old.\n\n* * *\n\n### 23.3.2 Glob qualifiers\n\nage\n\nThe function age can be autoloaded and use separately from the calendar system, although it uses the function calendar\\_scandate for date formatting. It requires the zsh/stat builtin, but uses only the builtin zstat.\n\nage selects files having a given modification time for use as a glob qualifier. The format of the date is the same as that understood by the calendar system, described in [File and Date Formats](#Calendar-File-and-Date-Formats).\n\nThe function can take one or two arguments, which can be supplied either directly as command or arguments, or separately as shell parameters.\n\nprint \\*(e:age 2006/10/04 2006/10/09:)\n\nThe example above matches all files modified between the start of those dates. The second argument may alternatively be a relative time introduced by a +:\n\nprint \\*(e:age 2006/10/04 +5d:)\n\nThe example above is equivalent to the previous example.\n\nIn addition to the special use of days of the week, today and yesterday, times with no date may be specified; these apply to today. Obviously such uses become problematic around midnight.\n\nprint \\*(e-age 12:00 13:30-)\n\nThe example above shows files modified between 12:00 and 13:00 today.\n\nprint \\*(e:age 2006/10/04:)\n\nThe example above matches all files modified on that date. If the second argument is omitted it is taken to be exactly 24 hours after the first argument (even if the first argument contains a time).\n\nprint \\*(e-age 2006/10/04:10:15 2006/10/04:10:45-)\n\nThe example above supplies times. Note that whitespace within the time and date specification must be quoted to ensure age receives the correct arguments, hence the use of the additional colon to separate the date and time.\n\nAGEREF=2006/10/04:10:15\nAGEREF2=2006/10/04:10:45\nprint \\*(+age)\n\nThis shows the same example before using another form of argument passing. The dates and times in the parameters AGEREF and AGEREF2 stay in effect until unset, but will be overridden if any argument is passed as an explicit argument to age. Any explicit argument causes both parameters to be ignored.\n\nInstead of an explicit date and time, it’s possible to use the modification time of a file as the date and time for either argument by introducing the file name with a colon:\n\nmatches all files created on the same day (24 hours starting from midnight) as file1.\n\nprint \\*(e-age :file1 :file2-)\n\nmatches all files modified no earlier than file1 and no later than file2; precision here is to the nearest second.\n\nafter\n\nbefore\n\nThe functions after and before are simpler versions of age that take just one argument. The argument is parsed similarly to an argument of age; if it is not given the variable AGEREF is consulted. As the names of the functions suggest, a file matches if its modification time is after or before the time and date specified. If a time only is given the date is today.\n\nThe two following examples are therefore equivalent:\n\nprint \\*(e-after 12:00-)\nprint \\*(e-after today:12:00-)\n\n* * *\n\n## 23.4 Styles\n\nThe zsh style mechanism using the zstyle command is describe in [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module). This is the same mechanism used in the completion system.\n\nThe styles below are all examined in the context :datetime:function:, for example :datetime:calendar:.\n\ncalendar-file\n\nThe location of the main calendar. The default is ~/calendar.\n\ndate-format\n\nA strftime format string (see strftime(3)) with the zsh extensions providing various numbers with no leading zero or space if the number is a single digit as described for the %D{string} prompt format in [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion).\n\nThis is used for outputting dates in calendar, both to support the \\-v option and when adding recurring events back to the calendar file, and in calendar\\_showdate as the final output format.\n\nIf the style is not set, the default used is similar the standard system format as output by the date command (also known as ‘ctime format’): ‘%a %b %d %H:%M:%S %Z %Y’.\n\ndone-file\n\nThe location of the file to which events which have passed are appended. The default is the calendar file location with the suffix .done. The style may be set to an empty string in which case a \"done\" file will not be maintained.\n\nreformat-date\n\nBoolean, used by calendar\\_add. If it is true, the date and time of new entries added to the calendar will be reformatted to the format given by the style date-format or its default. Only the date and time of the event itself is reformatted; any subsidiary dates and times such as those associated with repeat and warning times are left alone.\n\nshow-prog\n\nThe programme run by calendar for showing events. It will be passed the start time and stop time of the events requested in seconds since the epoch followed by the event text. Note that calendar -s uses a start time and stop time equal to one another to indicate alerts for specific events.\n\nThe default is the function calendar\\_show.\n\nwarn-time\n\nThe time before an event at which a warning will be displayed, if the first line of the event does not include the text EVENT reltime. The default is 5 minutes.\n\n* * *\n\n## 23.5 Utility functions\n\ncalendar\\_lockfiles\n\nAttempt to lock the files given in the argument. To prevent problems with network file locking this is done in an ad hoc fashion by attempting to create a symbolic link to the file with the name file.lockfile. No other system level functions are used for locking, i.e. the file can be accessed and modified by any utility that does not use this mechanism. In particular, the user is not prevented from editing the calendar file at the same time unless calendar\\_edit is used.\n\nThree attempts are made to lock the file before giving up. If the module zsh/zselect is available, the times of the attempts are jittered so that multiple instances of the calling function are unlikely to retry at the same time.\n\nThe files locked are appended to the array lockfiles, which should be local to the caller.\n\nIf all files were successfully locked, status zero is returned, else status one.\n\nThis function may be used as a general file locking function, although this will only work if only this mechanism is used to lock files.\n\ncalendar\\_read\n\nThis is a backend used by various other functions to parse the calendar file, which is passed as the only argument. The array calendar\\_entries is set to the list of events in the file; no pruning is done except that ampersands are removed from the start of the line. Each entry may contain multiple lines.\n\ncalendar\\_scandate\n\nThis is a generic function to parse dates and times that may be used separately from the calendar system. The argument is a date or time specification as described in [File and Date Formats](#Calendar-File-and-Date-Formats). The parameter REPLY is set to the number of seconds since the epoch corresponding to that date or time. By default, the date and time may occur anywhere within the given argument.\n\nReturns status zero if the date and time were successfully parsed, else one.\n\nOptions:\n\n\\-a\n\nThe date and time are anchored to the start of the argument; they will not be matched if there is preceding text.\n\n\\-A\n\nThe date and time are anchored to both the start and end of the argument; they will not be matched if the is any other text in the argument.\n\n\\-d\n\nEnable additional debugging output.\n\n\\-m\n\nMinus. When \\-R anchor\\_time is also given the relative time is calculated backwards from anchor\\_time.\n\n\\-r\n\nThe argument passed is to be parsed as a relative time.\n\n\\-R anchor\\_time\n\nThe argument passed is to be parsed as a relative time. The time is relative to anchor\\_time, a time in seconds since the epoch, and the returned value is the absolute time corresponding to advancing anchor\\_time by the relative time given. This allows lengths of months to be correctly taken into account. If the final day does not exist in the given month, the last day of the final month is given. For example, if the anchor time is during 31st January 2007 and the relative time is 1 month, the final time is the same time of day during 28th February 2007.\n\n\\-s\n\nIn addition to setting REPLY, set REPLY2 to the remainder of the argument after the date and time have been stripped. This is empty if the option \\-A was given.\n\n\\-t\n\nAllow a time with no date specification. The date is assumed to be today. The behaviour is unspecified if the iron tongue of midnight is tolling twelve.\n\ncalendar\\_show\n\nThe function used by default to display events. It accepts a start time and end time for events, both in epoch seconds, and an event description.\n\nThe event is always printed to standard output. If the command line editor is active (which will usually be the case) the command line will be redisplayed after the output.\n\nIf the parameter DISPLAY is set and the start and end times are the same (indicating a scheduled event), the function uses the command xmessage to display a window with the event details.\n\n* * *\n\n## 23.6 Bugs\n\nAs the system is based entirely on shell functions (with a little support from the zsh/datetime module) the mechanisms used are not as robust as those provided by a dedicated calendar utility. Consequently the user should not rely on the shell for vital alerts.\n\nThere is no calendar\\_delete function.\n\nThere is no localization support for dates and times, nor any support for the use of time zones.\n\nRelative periods of months and years do not take into account the variable number of days.\n\nThe calendar\\_show function is currently hardwired to use xmessage for displaying alerts on X Window System displays. This should be configurable and ideally integrate better with the desktop.\n\ncalendar\\_lockfiles hangs the shell while waiting for a lock on a file. If called from a scheduled task, it should instead reschedule the event that caused it.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 176,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Calendar-Function-System-html-Calendar-Function-System-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Calendar-Function-System-html-Calendar-Function-System-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Calendar-Function-System-html-Calendar-Function-System-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Calendar-Function-System-html-Calendar-Function-System-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Calendar-Function-System-html-Calendar-Function-System-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 37789,
      "readableText": 44071,
      "none": 64352,
      "readableTextIfPossible": 44071,
      "result": 44071,
      "markdown": 34718
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Shell-Grammar",
    "loadedTime": "2025-05-08T06:51:02.649Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Shell-Grammar",
    "title": "zsh: 6 Shell Grammar",
    "description": "zsh: 6 Shell Grammar",
    "author": null,
    "keywords": "zsh: 6 Shell Grammar",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:01 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-d5f5\"",
      "expires": "Thu, 08 May 2025 06:52:01 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706b5d9e34bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 6 Shell Grammar\n6.1 Simple Commands & Pipelines\nA simple command is a sequence of optional parameter assignments followed by blank-separated words, with optional redirections interspersed. For a description of assignment, see the beginning of Parameters. \nThe first word is the command to be executed, and the remaining words, if any, are arguments to the command. If a command name is given, the parameter assignments modify the environment of the command when it is executed. The value of a simple command is its exit status, or 128 plus the signal number if terminated by a signal. For example, \nis a simple command with arguments. \nA pipeline is either a simple command, or a sequence of two or more simple commands where each command is separated from the next by ‘|’ or ‘|&’. Where commands are separated by ‘|’, the standard output of the first command is connected to the standard input of the next. ‘|&’ is shorthand for ‘2>&1 |’, which connects both the standard output and the standard error of the command to the standard input of the next. The value of a pipeline is the value of the last command, unless the pipeline is preceded by ‘!’ in which case the value is the logical inverse of the value of the last command. For example, \necho foo | sed 's/foo/bar/'\nis a pipeline, where the output (‘foo’ plus a newline) of the first command will be passed to the input of the second. \nIf a pipeline is preceded by ‘coproc’, it is executed as a coprocess; a two-way pipe is established between it and the parent shell. The shell can read from or write to the coprocess by means of the ‘>&p’ and ‘<&p’ redirection operators or with ‘print -p’ and ‘read -p’. A pipeline cannot be preceded by both ‘coproc’ and ‘!’. If job control is active, the coprocess can be treated in other than input and output as an ordinary background job. \nA sublist is either a single pipeline, or a sequence of two or more pipelines separated by ‘&&’ or ‘||’. If two pipelines are separated by ‘&&’, the second pipeline is executed only if the first succeeds (returns a zero status). If two pipelines are separated by ‘||’, the second is executed only if the first fails (returns a nonzero status). Both operators have equal precedence and are left associative. The value of the sublist is the value of the last pipeline executed. For example, \ndmesg | grep panic && print yes\nis a sublist consisting of two pipelines, the second just a simple command which will be executed if and only if the grep command returns a zero status. If it does not, the value of the sublist is that return status, else it is the status returned by the print (almost certainly zero). \nA list is a sequence of zero or more sublists, in which each sublist is terminated by ‘;’, ‘&’, ‘&|’, ‘&!’, or a newline. This terminator may optionally be omitted from the last sublist in the list when the list appears as a complex command inside ‘(...)’ or ‘{...}’. When a sublist is terminated by ‘;’ or newline, the shell waits for it to finish before executing the next sublist. If a sublist is terminated by a ‘&’, ‘&|’, or ‘&!’, the shell executes the last pipeline in it in the background, and does not wait for it to finish (note the difference from other shells which execute the whole sublist in the background). A backgrounded pipeline returns a status of zero. \nMore generally, a list can be seen as a set of any shell commands whatsoever, including the complex commands below; this is implied wherever the word ‘list’ appears in later descriptions. For example, the commands in a shell function form a special sort of list. \n6.2 Precommand Modifiers\nA simple command may be preceded by a precommand modifier, which will alter how the command is interpreted. These modifiers are shell builtin commands with the exception of nocorrect which is a reserved word. \n- \nThe command is executed with a ‘-’ prepended to its argv[0] string. \nbuiltin \nThe command word is taken to be the name of a builtin command, rather than a shell function or external command. \ncommand [ -pvV ] \nThe command word is taken to be the name of an external command, rather than a shell function or builtin. If the POSIX_BUILTINS option is set, builtins will also be executed but certain special properties of them are suppressed. The -p flag causes a default path to be searched instead of that in $path. With the -v flag, command is similar to whence and with -V, it is equivalent to whence -v. \nexec [ -cl ] [ -a argv0 ] \nThe following command together with any arguments is run in place of the current process, rather than as a sub-process. The shell does not fork and is replaced. The shell does not invoke TRAPEXIT, nor does it source zlogout files. The options are provided for compatibility with other shells. \nThe -c option clears the environment. \nThe -l option is equivalent to the - precommand modifier, to treat the replacement command as a login shell; the command is executed with a - prepended to its argv[0] string. This flag has no effect if used together with the -a option. \nThe -a option is used to specify explicitly the argv[0] string (the name of the command as seen by the process itself) to be used by the replacement command and is directly equivalent to setting a value for the ARGV0 environment variable. \nnocorrect \nSpelling correction is not done on any of the words. This must appear before any other precommand modifier, as it is interpreted immediately, before any parsing is done. It has no effect in non-interactive shells. \nnoglob \nFilename generation (globbing) is not performed on any of the words. \n6.3 Complex Commands\nA complex command in zsh is one of the following: \nif list then list [ elif list then list ] ... [ else list ] fi \nThe if list is executed, and if it returns a zero exit status, the then list is executed. Otherwise, the elif list is executed and if its status is zero, the then list is executed. If each elif list returns nonzero status, the else list is executed. \nfor name ... [ in word ... ] term do list done \nExpand the list of words, and set the parameter name to each of them in turn, executing list each time. If the ‘in word’ is omitted, use the positional parameters instead of the words. \nThe term consists of one or more newline or ; which terminate the words, and are optional when the ‘in word’ is omitted. \nMore than one parameter name can appear before the list of words. If N names are given, then on each execution of the loop the next N words are assigned to the corresponding parameters. If there are more names than remaining words, the remaining parameters are each set to the empty string. Execution of the loop ends when there is no remaining word to assign to the first name. It is only possible for in to appear as the first name in the list, else it will be treated as marking the end of the list. \nfor (( [expr1] ; [expr2] ; [expr3] )) do list done \nThe arithmetic expression expr1 is evaluated first (see Arithmetic Evaluation). The arithmetic expression expr2 is repeatedly evaluated until it evaluates to zero and when non-zero, list is executed and the arithmetic expression expr3 evaluated. If any expression is omitted, then it behaves as if it evaluated to 1. \nwhile list do list done \nExecute the do list as long as the while list returns a zero exit status. \nuntil list do list done \nExecute the do list as long as until list returns a nonzero exit status. \nrepeat word do list done \nword is expanded and treated as an arithmetic expression, which must evaluate to a number n. list is then executed n times. \nThe repeat syntax is disabled by default when the shell starts in a mode emulating another shell. It can be enabled with the command ‘enable -r repeat’ \ncase word in [ [(] pattern [ | pattern ] ... ) list (;;|;&|;|) ] ... esac \nExecute the list associated with the first pattern that matches word, if any. The form of the patterns is the same as that used for filename generation. See Filename Generation. \nNote further that, unless the SH_GLOB option is set, the whole pattern with alternatives is treated by the shell as equivalent to a group of patterns within parentheses, although white space may appear about the parentheses and the vertical bar and will be stripped from the pattern at those points. White space may appear elsewhere in the pattern; this is not stripped. If the SH_GLOB option is set, so that an opening parenthesis can be unambiguously treated as part of the case syntax, the expression is parsed into separate words and these are treated as strict alternatives (as in other shells). \nIf the list that is executed is terminated with ;& rather than ;;, the following list is also executed. The rule for the terminator of the following list ;;, ;& or ;| is applied unless the esac is reached. \nIf the list that is executed is terminated with ;| the shell continues to scan the patterns looking for the next match, executing the corresponding list, and applying the rule for the corresponding terminator ;;, ;& or ;|. Note that word is not re-expanded; all applicable patterns are tested with the same word. \nselect name [ in word ... term ] do list done \nwhere term is one or more newline or ; to terminate the words. Print the set of words, each preceded by a number. If the in word is omitted, use the positional parameters. The PROMPT3 prompt is printed and a line is read from the line editor if the shell is interactive and that is active, or else standard input. If this line consists of the number of one of the listed words, then the parameter name is set to the word corresponding to this number. If this line is empty, the selection list is printed again. Otherwise, the value of the parameter name is set to null. The contents of the line read from standard input is saved in the parameter REPLY. list is executed for each selection until a break or end-of-file is encountered. \n( list ) \nExecute list in a subshell. Traps set by the trap builtin are reset to their default values while executing list; an exception is that ignored signals will continue to be ignored if the option POSIXTRAPS is set. \n{ list } \nExecute list. \n{ try-list } always { always-list } \nFirst execute try-list. Regardless of errors, or break or continue commands encountered within try-list, execute always-list. Execution then continues from the result of the execution of try-list; in other words, any error, or break or continue command is treated in the normal way, as if always-list were not present. The two chunks of code are referred to as the ‘try block’ and the ‘always block’. \nOptional newlines or semicolons may appear after the always; note, however, that they may not appear between the preceding closing brace and the always. \nAn ‘error’ in this context is a condition such as a syntax error which causes the shell to abort execution of the current function, script, or list. Syntax errors encountered while the shell is parsing the code do not cause the always-list to be executed. For example, an erroneously constructed if block in try-list would cause the shell to abort during parsing, so that always-list would not be executed, while an erroneous substitution such as ${*foo*} would cause a run-time error, after which always-list would be executed. \nAn error condition can be tested and reset with the special integer variable TRY_BLOCK_ERROR. Outside an always-list the value is irrelevant, but it is initialised to -1. Inside always-list, the value is 1 if an error occurred in the try-list, else 0. If TRY_BLOCK_ERROR is set to 0 during the always-list, the error condition caused by the try-list is reset, and shell execution continues normally after the end of always-list. Altering the value during the try-list is not useful (unless this forms part of an enclosing always block). \nRegardless of TRY_BLOCK_ERROR, after the end of always-list the normal shell status $? is the value returned from try-list. This will be non-zero if there was an error, even if TRY_BLOCK_ERROR was set to zero. \nThe following executes the given code, ignoring any errors it causes. This is an alternative to the usual convention of protecting code by executing it in a subshell. \n{\n    # code which may cause an error\n  } always {\n    # This code is executed regardless of the error.\n    (( TRY_BLOCK_ERROR = 0 ))\n}\n# The error condition has been reset.\nWhen a try block occurs outside of any function, a return or a exit encountered in try-list does not cause the execution of always-list. Instead, the shell exits immediately after any EXIT trap has been executed. Otherwise, a return command encountered in try-list will cause the execution of always-list, just like break and continue. \nfunction [ -T ] word ... [ () ] [ term ] { list } word ... () [ term ] { list } word ... () [ term ] command \nwhere term is one or more newline or ;. Define a function which is referenced by any one of word. Normally, only one word is provided; multiple words are usually only useful for setting traps. The body of the function is the list between the { and }. See Functions. \nThe options of function have the following meanings: \n-T \nEnable tracing for this function, as though with functions -T. See the documentation of the -f option to the typeset builtin, in Shell Builtin Commands. \nIf the option SH_GLOB is set for compatibility with other shells, then whitespace may appear between the left and right parentheses when there is a single word; otherwise, the parentheses will be treated as forming a globbing pattern in that case. \nIn any of the forms above, a redirection may appear outside the function body, for example \nThe redirection is stored with the function and applied whenever the function is executed. Any variables in the redirection are expanded at the point the function is executed, but outside the function scope. \ntime [ pipeline ] \nThe pipeline is executed, and timing statistics are reported on the standard error in the form specified by the TIMEFMT parameter. If pipeline is omitted, print statistics about the shell process and its children. \n[[ exp ]] \nEvaluates the conditional expression exp and return a zero exit status if it is true. See Conditional Expressions for a description of exp. \n6.4 Alternate Forms For Complex Commands\nMany of zsh’s complex commands have alternate forms. These are non-standard and are likely not to be obvious even to seasoned shell programmers; they should not be used anywhere that portability of shell code is a concern. \nThe short versions below only work if sublist is of the form ‘{ list }’ or if the SHORT_LOOPS option is set. For the if, while and until commands, in both these cases the test part of the loop must also be suitably delimited, such as by ‘[[ ... ]]’ or ‘(( ... ))’, else the end of the test will not be recognized. For the for, repeat, case and select commands no such special form for the arguments is necessary, but the other condition (the special form of sublist or use of the SHORT_LOOPS option) still applies. The SHORT_REPEAT option is available to enable the short version only for the repeat command. \nif list { list } [ elif list { list } ] ... [ else { list } ] \nAn alternate form of if. The rules mean that \nif [[ -o ignorebraces ]] {\n  print yes\n}\nworks, but \nif true {  # Does not work!\n  print yes\n}\ndoes not, since the test is not suitably delimited. \nif list sublist \nA short form of the alternate if. The same limitations on the form of list apply as for the previous form. \nfor name ... ( word ... ) sublist \nA short form of for. \nfor name ... [ in word ... ] term sublist \nwhere term is at least one newline or ;. Another short form of for. \nfor (( [expr1] ; [expr2] ; [expr3] )) sublist \nA short form of the arithmetic for command. \nforeach name ... ( word ... ) list end \nAnother form of for. \nwhile list { list } \nAn alternative form of while. Note the limitations on the form of list mentioned above. \nuntil list { list } \nAn alternative form of until. Note the limitations on the form of list mentioned above. \nrepeat word sublist \nThis is a short form of repeat. \ncase word { [ [(] pattern [ | pattern ] ... ) list (;;|;&|;|) ] ... } \nAn alternative form of case. \nselect name [ in word ... term ] sublist \nwhere term is at least one newline or ;. A short form of select. \nfunction word ... [ () ] [ term ] sublist \nThis is a short form of function. \n6.5 Reserved Words\nThe following words are recognized as reserved words when used as the first word of a command unless quoted or disabled using disable -r: \ndo done esac then elif else fi for case if while function repeat time until select coproc nocorrect foreach end ! [[ { } declare export float integer local readonly typeset \nAdditionally, ‘}’ is recognized in any position if neither the IGNORE_BRACES option nor the IGNORE_CLOSE_BRACES option is set. \n6.6 Errors\nCertain errors are treated as fatal by the shell: in an interactive shell, they cause control to return to the command line, and in a non-interactive shell they cause the shell to be aborted. In older versions of zsh, a non-interactive shell running a script would not abort completely, but would resume execution at the next command to be read from the script, skipping the remainder of any functions or shell constructs such as loops or conditions; this somewhat illogical behaviour can be recovered by setting the option CONTINUE_ON_ERROR. \nFatal errors found in non-interactive shells include: \nFailure to parse shell options passed when invoking the shell \nFailure to change options with the set builtin \nParse errors of all sorts, including failures to parse mathematical expressions \nFailures to set or modify variable behaviour with typeset, local, declare, export, integer, float \nExecution of incorrectly positioned loop control structures (continue, break) \nAttempts to use regular expression with no regular expression module available \nDisallowed operations when the RESTRICTED options is set \nFailure to create a pipe needed for a pipeline \nFailure to create a multio \nFailure to autoload a module needed for a declared shell feature \nErrors creating command or process substitutions \nSyntax errors in glob qualifiers \nFile generation errors where not caught by the option BAD_PATTERN \nAll bad patterns used for matching within case statements \nFile generation failures where not caused by NO_MATCH or similar options \nAll file generation errors where the pattern was used to create a multio \nMemory errors where detected by the shell \nInvalid subscripts to shell variables \nAttempts to assign read-only variables \nLogical errors with variables such as assignment to the wrong type \nUse of invalid variable names \nErrors in variable substitution syntax \nFailure to convert characters in $’...’ expressions \nIf the POSIX_BUILTINS option is set, more errors associated with shell builtin commands are treated as fatal, as specified by the POSIX standard. \n6.7 Comments\nIn non-interactive shells, or in interactive shells with the INTERACTIVE_COMMENTS option set, a word beginning with the third character of the histchars parameter (‘#’ by default) causes that word and all the following characters up to a newline to be ignored. \n6.8 Aliasing\nEvery eligible word in the shell input is checked to see if there is an alias defined for it. If so, it is replaced by the text of the alias if it is in command position (if it could be the first word of a simple command), or if the alias is global. If the replacement text ends with a space, the next word in the shell input is always eligible for purposes of alias expansion. \nIt is an error for the function name, word, in the sh-compatible function definition syntax ‘word () ...’ to be a word that resulted from alias expansion, unless the ALIAS_FUNC_DEF option is set. \nAn alias is defined using the alias builtin; global aliases may be defined using the -g option to that builtin. \nA word is defined as: \nAny plain string or glob pattern \nAny quoted string, using any quoting method (note that the quotes must be part of the alias definition for this to be eligible) \nAny parameter reference or command substitution \nAny series of the foregoing, concatenated without whitespace or other tokens between them \nAny reserved word (case, do, else, etc.) \nWith global aliasing, any command separator, any redirection operator, and ‘(’ or ‘)’ when not part of a glob pattern \nAlias expansion is done on the shell input before any other expansion except history expansion. Therefore, if an alias is defined for the word foo, alias expansion may be avoided by quoting part of the word, e.g. \\foo. Any form of quoting works, although there is nothing to prevent an alias being defined for the quoted form such as \\foo as well. \nIn particular, note that quoting must be used when using unalias to remove global aliases: \n% alias -g foo=bar\n% unalias foo\nunalias: no such hash table element: bar\n% unalias \\foo\n% \nWhen POSIX_ALIASES is set, only plain unquoted strings are eligible for aliasing. The alias builtin does not reject ineligible aliases, but they are not expanded. \nFor use with completion, which would remove an initial backslash followed by a character that isn’t special, it may be more convenient to quote the word by starting with a single quote, i.e. ’foo; completion will automatically add the trailing single quote. \n6.8.1 Alias difficulties\nAlthough aliases can be used in ways that bend normal shell syntax, not every string of non-white-space characters can be used as an alias. \nAny set of characters not listed as a word above is not a word, hence no attempt is made to expand it as an alias, no matter how it is defined (i.e. via the builtin or the special parameter aliases described in The zsh/parameter Module). However, as noted in the case of POSIX_ALIASES above, the shell does not attempt to deduce whether the string corresponds to a word at the time the alias is created. \nFor example, an expression containing an = at the start of a command line is an assignment and cannot be expanded as an alias; a lone = is not an assignment but can only be set as an alias using the parameter, as otherwise the = is taken part of the syntax of the builtin command. \nIt is not presently possible to alias the ‘((’ token that introduces arithmetic expressions, because until a full statement has been parsed, it cannot be distinguished from two consecutive ‘(’ tokens introducing nested subshells. Also, if a separator such as && is aliased, \\&& turns into the two tokens \\& and &, each of which may have been aliased separately. Similarly for \\<<, \\>|, etc. \nThere is a commonly encountered problem with aliases illustrated by the following code: \nalias echobar='echo bar'; echobar\nThis prints a message that the command echobar could not be found. This happens because aliases are expanded when the code is read in; the entire line is read in one go, so that when echobar is executed it is too late to expand the newly defined alias. This is often a problem in shell scripts, functions, and code executed with ‘source’ or ‘.’. Consequently, use of functions rather than aliases is recommended in non-interactive code. \n6.9 Quoting\nA character may be quoted (that is, made to stand for itself) by preceding it with a ‘\\’. ‘\\’ followed by a newline is ignored. \nA string enclosed between ‘$’’ and ‘’’ is processed the same way as the string arguments of the print builtin, and the resulting string is considered to be entirely quoted. A literal ‘’’ character can be included in the string by using the ‘\\’’ escape. \nAll characters enclosed between a pair of single quotes (’’) that is not preceded by a ‘$’ are quoted. A single quote cannot appear within single quotes unless the option RC_QUOTES is set, in which case a pair of single quotes are turned into a single quote. For example, \noutputs nothing apart from a newline if RC_QUOTES is not set, but one single quote if it is set. \nInside double quotes (\"\"), parameter and command substitution occur, and ‘\\’ quotes the characters ‘\\’, ‘‘’, ‘\"’, ‘$’, and the first character of $histchars (default ‘!’). \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Grammar-html-Shell-Grammar-var6l.html",
  "markdown": "# zsh: 6 Shell Grammar\n\n* * *\n\n## 6.1 Simple Commands & Pipelines\n\nA _simple command_ is a sequence of optional parameter assignments followed by blank-separated words, with optional redirections interspersed. For a description of assignment, see the beginning of [Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters).\n\nThe first word is the command to be executed, and the remaining words, if any, are arguments to the command. If a command name is given, the parameter assignments modify the environment of the command when it is executed. The value of a simple command is its exit status, or 128 plus the signal number if terminated by a signal. For example,\n\nis a simple command with arguments.\n\nA _pipeline_ is either a simple command, or a sequence of two or more simple commands where each command is separated from the next by ‘|’ or ‘|&’. Where commands are separated by ‘|’, the standard output of the first command is connected to the standard input of the next. ‘|&’ is shorthand for ‘2>&1 |’, which connects both the standard output and the standard error of the command to the standard input of the next. The value of a pipeline is the value of the last command, unless the pipeline is preceded by ‘!’ in which case the value is the logical inverse of the value of the last command. For example,\n\necho foo | sed 's/foo/bar/'\n\nis a pipeline, where the output (‘foo’ plus a newline) of the first command will be passed to the input of the second.\n\nIf a pipeline is preceded by ‘coproc’, it is executed as a coprocess; a two-way pipe is established between it and the parent shell. The shell can read from or write to the coprocess by means of the ‘\\>&p’ and ‘<&p’ redirection operators or with ‘print -p’ and ‘read -p’. A pipeline cannot be preceded by both ‘coproc’ and ‘!’. If job control is active, the coprocess can be treated in other than input and output as an ordinary background job.\n\nA _sublist_ is either a single pipeline, or a sequence of two or more pipelines separated by ‘&&’ or ‘||’. If two pipelines are separated by ‘&&’, the second pipeline is executed only if the first succeeds (returns a zero status). If two pipelines are separated by ‘||’, the second is executed only if the first fails (returns a nonzero status). Both operators have equal precedence and are left associative. The value of the sublist is the value of the last pipeline executed. For example,\n\ndmesg | grep panic && print yes\n\nis a sublist consisting of two pipelines, the second just a simple command which will be executed if and only if the grep command returns a zero status. If it does not, the value of the sublist is that return status, else it is the status returned by the print (almost certainly zero).\n\nA _list_ is a sequence of zero or more sublists, in which each sublist is terminated by ‘;’, ‘&’, ‘&|’, ‘&!’, or a newline. This terminator may optionally be omitted from the last sublist in the list when the list appears as a complex command inside ‘(...)’ or ‘{...}’. When a sublist is terminated by ‘;’ or newline, the shell waits for it to finish before executing the next sublist. If a sublist is terminated by a ‘&’, ‘&|’, or ‘&!’, the shell executes the last pipeline in it in the background, and does not wait for it to finish (note the difference from other shells which execute the whole sublist in the background). A backgrounded pipeline returns a status of zero.\n\nMore generally, a list can be seen as a set of any shell commands whatsoever, including the complex commands below; this is implied wherever the word ‘list’ appears in later descriptions. For example, the commands in a shell function form a special sort of list.\n\n* * *\n\n## 6.2 Precommand Modifiers\n\nA simple command may be preceded by a _precommand modifier_, which will alter how the command is interpreted. These modifiers are shell builtin commands with the exception of nocorrect which is a reserved word.\n\n\\-\n\nThe command is executed with a ‘\\-’ prepended to its argv\\[0\\] string.\n\nbuiltin\n\nThe command word is taken to be the name of a builtin command, rather than a shell function or external command.\n\ncommand \\[ \\-pvV \\]\n\nThe command word is taken to be the name of an external command, rather than a shell function or builtin. If the POSIX\\_BUILTINS option is set, builtins will also be executed but certain special properties of them are suppressed. The \\-p flag causes a default path to be searched instead of that in $path. With the \\-v flag, command is similar to whence and with \\-V, it is equivalent to whence -v.\n\nexec \\[ \\-cl \\] \\[ \\-a argv0 \\]\n\nThe following command together with any arguments is run in place of the current process, rather than as a sub-process. The shell does not fork and is replaced. The shell does not invoke TRAPEXIT, nor does it source zlogout files. The options are provided for compatibility with other shells.\n\nThe \\-c option clears the environment.\n\nThe \\-l option is equivalent to the \\- precommand modifier, to treat the replacement command as a login shell; the command is executed with a \\- prepended to its argv\\[0\\] string. This flag has no effect if used together with the \\-a option.\n\nThe \\-a option is used to specify explicitly the argv\\[0\\] string (the name of the command as seen by the process itself) to be used by the replacement command and is directly equivalent to setting a value for the ARGV0 environment variable.\n\nnocorrect\n\nSpelling correction is not done on any of the words. This must appear before any other precommand modifier, as it is interpreted immediately, before any parsing is done. It has no effect in non-interactive shells.\n\nnoglob\n\nFilename generation (globbing) is not performed on any of the words.\n\n* * *\n\n## 6.3 Complex Commands\n\nA _complex command_ in zsh is one of the following:\n\nif list then list \\[ elif list then list \\] ... \\[ else list \\] fi\n\nThe if list is executed, and if it returns a zero exit status, the then list is executed. Otherwise, the elif list is executed and if its status is zero, the then list is executed. If each elif list returns nonzero status, the else list is executed.\n\nfor name ... \\[ in word ... \\] term do list done\n\nExpand the list of words, and set the parameter name to each of them in turn, executing list each time. If the ‘in word’ is omitted, use the positional parameters instead of the words.\n\nThe term consists of one or more newline or ; which terminate the words, and are optional when the ‘in word’ is omitted.\n\nMore than one parameter name can appear before the list of words. If N names are given, then on each execution of the loop the next N words are assigned to the corresponding parameters. If there are more names than remaining words, the remaining parameters are each set to the empty string. Execution of the loop ends when there is no remaining word to assign to the first name. It is only possible for in to appear as the first name in the list, else it will be treated as marking the end of the list.\n\nfor (( \\[expr1\\] ; \\[expr2\\] ; \\[expr3\\] )) do list done\n\nThe arithmetic expression expr1 is evaluated first (see [Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation)). The arithmetic expression expr2 is repeatedly evaluated until it evaluates to zero and when non-zero, list is executed and the arithmetic expression expr3 evaluated. If any expression is omitted, then it behaves as if it evaluated to 1.\n\nwhile list do list done\n\nExecute the do list as long as the while list returns a zero exit status.\n\nuntil list do list done\n\nExecute the do list as long as until list returns a nonzero exit status.\n\nrepeat word do list done\n\nword is expanded and treated as an arithmetic expression, which must evaluate to a number n. list is then executed n times.\n\nThe repeat syntax is disabled by default when the shell starts in a mode emulating another shell. It can be enabled with the command ‘enable -r repeat’\n\ncase word in \\[ \\[(\\] pattern \\[ | pattern \\] ... ) list (;;|;&|;|) \\] ... esac\n\nExecute the list associated with the first pattern that matches word, if any. The form of the patterns is the same as that used for filename generation. See [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation).\n\nNote further that, unless the SH\\_GLOB option is set, the whole pattern with alternatives is treated by the shell as equivalent to a group of patterns within parentheses, although white space may appear about the parentheses and the vertical bar and will be stripped from the pattern at those points. White space may appear elsewhere in the pattern; this is not stripped. If the SH\\_GLOB option is set, so that an opening parenthesis can be unambiguously treated as part of the case syntax, the expression is parsed into separate words and these are treated as strict alternatives (as in other shells).\n\nIf the list that is executed is terminated with ;& rather than ;;, the following list is also executed. The rule for the terminator of the following list ;;, ;& or ;| is applied unless the esac is reached.\n\nIf the list that is executed is terminated with ;| the shell continues to scan the patterns looking for the next match, executing the corresponding list, and applying the rule for the corresponding terminator ;;, ;& or ;|. Note that word is not re-expanded; all applicable patterns are tested with the same word.\n\nselect name \\[ in word ... term \\] do list done\n\nwhere term is one or more newline or ; to terminate the words. Print the set of words, each preceded by a number. If the in word is omitted, use the positional parameters. The PROMPT3 prompt is printed and a line is read from the line editor if the shell is interactive and that is active, or else standard input. If this line consists of the number of one of the listed words, then the parameter name is set to the word corresponding to this number. If this line is empty, the selection list is printed again. Otherwise, the value of the parameter name is set to null. The contents of the line read from standard input is saved in the parameter REPLY. list is executed for each selection until a break or end-of-file is encountered.\n\n( list )\n\nExecute list in a subshell. Traps set by the trap builtin are reset to their default values while executing list; an exception is that ignored signals will continue to be ignored if the option POSIXTRAPS is set.\n\n{ list }\n\nExecute list.\n\n{ try-list } always { always-list }\n\nFirst execute try-list. Regardless of errors, or break or continue commands encountered within try-list, execute always-list. Execution then continues from the result of the execution of try-list; in other words, any error, or break or continue command is treated in the normal way, as if always-list were not present. The two chunks of code are referred to as the ‘try block’ and the ‘always block’.\n\nOptional newlines or semicolons may appear after the always; note, however, that they may _not_ appear between the preceding closing brace and the always.\n\nAn ‘error’ in this context is a condition such as a syntax error which causes the shell to abort execution of the current function, script, or list. Syntax errors encountered while the shell is parsing the code do not cause the always-list to be executed. For example, an erroneously constructed if block in try-list would cause the shell to abort during parsing, so that always-list would not be executed, while an erroneous substitution such as ${\\*foo\\*} would cause a run-time error, after which always-list would be executed.\n\nAn error condition can be tested and reset with the special integer variable TRY\\_BLOCK\\_ERROR. Outside an always-list the value is irrelevant, but it is initialised to \\-1. Inside always-list, the value is 1 if an error occurred in the try-list, else 0. If TRY\\_BLOCK\\_ERROR is set to 0 during the always-list, the error condition caused by the try-list is reset, and shell execution continues normally after the end of always-list. Altering the value during the try-list is not useful (unless this forms part of an enclosing always block).\n\nRegardless of TRY\\_BLOCK\\_ERROR, after the end of always-list the normal shell status $? is the value returned from try-list. This will be non-zero if there was an error, even if TRY\\_BLOCK\\_ERROR was set to zero.\n\nThe following executes the given code, ignoring any errors it causes. This is an alternative to the usual convention of protecting code by executing it in a subshell.\n\n{\n    # code which may cause an error\n  } always {\n    # This code is executed regardless of the error.\n    (( TRY\\_BLOCK\\_ERROR = 0 ))\n}\n# The error condition has been reset.\n\nWhen a try block occurs outside of any function, a return or a exit encountered in try-list does _not_ cause the execution of always-list. Instead, the shell exits immediately after any EXIT trap has been executed. Otherwise, a return command encountered in try-list will cause the execution of always-list, just like break and continue.\n\nfunction \\[ \\-T \\] word ... \\[ () \\] \\[ term \\] { list }\n\nword ... () \\[ term \\] { list }\n\nword ... () \\[ term \\] command\n\nwhere term is one or more newline or ;. Define a function which is referenced by any one of word. Normally, only one word is provided; multiple words are usually only useful for setting traps. The body of the function is the list between the { and }. See [Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions).\n\nThe options of function have the following meanings:\n\n\\-T\n\nEnable tracing for this function, as though with functions -T. See the documentation of the \\-f option to the typeset builtin, in [Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands).\n\nIf the option SH\\_GLOB is set for compatibility with other shells, then whitespace may appear between the left and right parentheses when there is a single word; otherwise, the parentheses will be treated as forming a globbing pattern in that case.\n\nIn any of the forms above, a redirection may appear outside the function body, for example\n\nThe redirection is stored with the function and applied whenever the function is executed. Any variables in the redirection are expanded at the point the function is executed, but outside the function scope.\n\ntime \\[ pipeline \\]\n\nThe pipeline is executed, and timing statistics are reported on the standard error in the form specified by the TIMEFMT parameter. If pipeline is omitted, print statistics about the shell process and its children.\n\n\\[\\[ exp \\]\\]\n\nEvaluates the conditional expression exp and return a zero exit status if it is true. See [Conditional Expressions](https://zsh.sourceforge.io/Doc/Release/Conditional-Expressions.html#Conditional-Expressions) for a description of exp.\n\n* * *\n\n## 6.4 Alternate Forms For Complex Commands\n\nMany of zsh’s complex commands have alternate forms. These are non-standard and are likely not to be obvious even to seasoned shell programmers; they should not be used anywhere that portability of shell code is a concern.\n\nThe short versions below only work if sublist is of the form ‘{ list }’ or if the SHORT\\_LOOPS option is set. For the if, while and until commands, in both these cases the test part of the loop must also be suitably delimited, such as by ‘\\[\\[ ... \\]\\]’ or ‘(( ... ))’, else the end of the test will not be recognized. For the for, repeat, case and select commands no such special form for the arguments is necessary, but the other condition (the special form of sublist or use of the SHORT\\_LOOPS option) still applies. The SHORT\\_REPEAT option is available to enable the short version only for the repeat command.\n\nif list { list } \\[ elif list { list } \\] ... \\[ else { list } \\]\n\nAn alternate form of if. The rules mean that\n\nif \\[\\[ -o ignorebraces \\]\\] {\n  print yes\n}\n\nworks, but\n\nif true {  # Does not work!\n  print yes\n}\n\ndoes _not_, since the test is not suitably delimited.\n\nif list sublist\n\nA short form of the alternate if. The same limitations on the form of list apply as for the previous form.\n\nfor name ... ( word ... ) sublist\n\nA short form of for.\n\nfor name ... \\[ in word ... \\] term sublist\n\nwhere term is at least one newline or ;. Another short form of for.\n\nfor (( \\[expr1\\] ; \\[expr2\\] ; \\[expr3\\] )) sublist\n\nA short form of the arithmetic for command.\n\nforeach name ... ( word ... ) list end\n\nAnother form of for.\n\nwhile list { list }\n\nAn alternative form of while. Note the limitations on the form of list mentioned above.\n\nuntil list { list }\n\nAn alternative form of until. Note the limitations on the form of list mentioned above.\n\nrepeat word sublist\n\nThis is a short form of repeat.\n\ncase word { \\[ \\[(\\] pattern \\[ | pattern \\] ... ) list (;;|;&|;|) \\] ... }\n\nAn alternative form of case.\n\nselect name \\[ in word ... term \\] sublist\n\nwhere term is at least one newline or ;. A short form of select.\n\nfunction word ... \\[ () \\] \\[ term \\] sublist\n\nThis is a short form of function.\n\n* * *\n\n## 6.5 Reserved Words\n\nThe following words are recognized as reserved words when used as the first word of a command unless quoted or disabled using disable -r:\n\ndo done esac then elif else fi for case if while function repeat time until select coproc nocorrect foreach end ! \\[\\[ { } declare export float integer local readonly typeset\n\nAdditionally, ‘}’ is recognized in any position if neither the IGNORE\\_BRACES option nor the IGNORE\\_CLOSE\\_BRACES option is set.\n\n* * *\n\n## 6.6 Errors\n\nCertain errors are treated as fatal by the shell: in an interactive shell, they cause control to return to the command line, and in a non-interactive shell they cause the shell to be aborted. In older versions of zsh, a non-interactive shell running a script would not abort completely, but would resume execution at the next command to be read from the script, skipping the remainder of any functions or shell constructs such as loops or conditions; this somewhat illogical behaviour can be recovered by setting the option CONTINUE\\_ON\\_ERROR.\n\nFatal errors found in non-interactive shells include:\n\n*   Failure to parse shell options passed when invoking the shell\n*   Failure to change options with the set builtin\n*   Parse errors of all sorts, including failures to parse mathematical expressions\n*   Failures to set or modify variable behaviour with typeset, local, declare, export, integer, float\n*   Execution of incorrectly positioned loop control structures (continue, break)\n*   Attempts to use regular expression with no regular expression module available\n*   Disallowed operations when the RESTRICTED options is set\n*   Failure to create a pipe needed for a pipeline\n*   Failure to create a multio\n*   Failure to autoload a module needed for a declared shell feature\n*   Errors creating command or process substitutions\n*   Syntax errors in glob qualifiers\n*   File generation errors where not caught by the option BAD\\_PATTERN\n*   All bad patterns used for matching within case statements\n*   File generation failures where not caused by NO\\_MATCH or similar options\n*   All file generation errors where the pattern was used to create a multio\n*   Memory errors where detected by the shell\n*   Invalid subscripts to shell variables\n*   Attempts to assign read-only variables\n*   Logical errors with variables such as assignment to the wrong type\n*   Use of invalid variable names\n*   Errors in variable substitution syntax\n*   Failure to convert characters in $’...’ expressions\n\nIf the POSIX\\_BUILTINS option is set, more errors associated with shell builtin commands are treated as fatal, as specified by the POSIX standard.\n\n* * *\n\n## 6.7 Comments\n\nIn non-interactive shells, or in interactive shells with the INTERACTIVE\\_COMMENTS option set, a word beginning with the third character of the histchars parameter (‘#’ by default) causes that word and all the following characters up to a newline to be ignored.\n\n* * *\n\n## 6.8 Aliasing\n\nEvery eligible _word_ in the shell input is checked to see if there is an alias defined for it. If so, it is replaced by the text of the alias if it is in command position (if it could be the first word of a simple command), or if the alias is global. If the replacement text ends with a space, the next word in the shell input is always eligible for purposes of alias expansion.\n\nIt is an error for the function name, word, in the sh-compatible function definition syntax ‘word () ...’ to be a word that resulted from alias expansion, unless the ALIAS\\_FUNC\\_DEF option is set.\n\nAn alias is defined using the alias builtin; global aliases may be defined using the \\-g option to that builtin.\n\nA _word_ is defined as:\n\n*   Any plain string or glob pattern\n*   Any quoted string, using any quoting method (note that the quotes must be part of the alias definition for this to be eligible)\n*   Any parameter reference or command substitution\n*   Any series of the foregoing, concatenated without whitespace or other tokens between them\n*   Any reserved word (case, do, else, etc.)\n*   With global aliasing, any command separator, any redirection operator, and ‘(’ or ‘)’ when not part of a glob pattern\n\nAlias expansion is done on the shell input before any other expansion except history expansion. Therefore, if an alias is defined for the word foo, alias expansion may be avoided by quoting part of the word, e.g. \\\\foo. Any form of quoting works, although there is nothing to prevent an alias being defined for the quoted form such as \\\\foo as well.\n\nIn particular, note that quoting must be used when using unalias to remove global aliases:\n\n% alias -g foo=bar\n% unalias foo\nunalias: no such hash table element: bar\n% unalias \\\\foo\n% \n\nWhen POSIX\\_ALIASES is set, only plain unquoted strings are eligible for aliasing. The alias builtin does not reject ineligible aliases, but they are not expanded.\n\nFor use with completion, which would remove an initial backslash followed by a character that isn’t special, it may be more convenient to quote the word by starting with a single quote, i.e. ’foo; completion will automatically add the trailing single quote.\n\n* * *\n\n### 6.8.1 Alias difficulties\n\nAlthough aliases can be used in ways that bend normal shell syntax, not every string of non-white-space characters can be used as an alias.\n\nAny set of characters not listed as a word above is not a word, hence no attempt is made to expand it as an alias, no matter how it is defined (i.e. via the builtin or the special parameter aliases described in [The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module)). However, as noted in the case of POSIX\\_ALIASES above, the shell does not attempt to deduce whether the string corresponds to a word at the time the alias is created.\n\nFor example, an expression containing an \\= at the start of a command line is an assignment and cannot be expanded as an alias; a lone \\= is not an assignment but can only be set as an alias using the parameter, as otherwise the \\= is taken part of the syntax of the builtin command.\n\nIt is not presently possible to alias the ‘((’ token that introduces arithmetic expressions, because until a full statement has been parsed, it cannot be distinguished from two consecutive ‘(’ tokens introducing nested subshells. Also, if a separator such as && is aliased, \\\\&& turns into the two tokens \\\\& and &, each of which may have been aliased separately. Similarly for \\\\<<, \\\\>|, etc.\n\nThere is a commonly encountered problem with aliases illustrated by the following code:\n\nalias echobar='echo bar'; echobar\n\nThis prints a message that the command echobar could not be found. This happens because aliases are expanded when the code is read in; the entire line is read in one go, so that when echobar is executed it is too late to expand the newly defined alias. This is often a problem in shell scripts, functions, and code executed with ‘source’ or ‘.’. Consequently, use of functions rather than aliases is recommended in non-interactive code.\n\n* * *\n\n## 6.9 Quoting\n\nA character may be _quoted_ (that is, made to stand for itself) by preceding it with a ‘\\\\’. ‘\\\\’ followed by a newline is ignored.\n\nA string enclosed between ‘$’’ and ‘’’ is processed the same way as the string arguments of the print builtin, and the resulting string is considered to be entirely quoted. A literal ‘’’ character can be included in the string by using the ‘\\\\’’ escape.\n\nAll characters enclosed between a pair of single quotes (’’) that is not preceded by a ‘$’ are quoted. A single quote cannot appear within single quotes unless the option RC\\_QUOTES is set, in which case a pair of single quotes are turned into a single quote. For example,\n\noutputs nothing apart from a newline if RC\\_QUOTES is not set, but one single quote if it is set.\n\nInside double quotes (\"\"), parameter and command substitution occur, and ‘\\\\’ quotes the characters ‘\\\\’, ‘‘’, ‘\"’, ‘$’, and the first character of $histchars (default ‘!’).\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 206,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Grammar-html-Shell-Grammar-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Grammar-html-Shell-Grammar-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Grammar-html-Shell-Grammar-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Grammar-html-Shell-Grammar-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Grammar-html-Shell-Grammar-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 27647,
      "readableText": 35333,
      "none": 52470,
      "readableTextIfPossible": 35333,
      "result": 35333,
      "markdown": 25147
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_abt.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_abt.html#SEC_About",
    "loadedTime": "2025-05-08T06:51:00.840Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_abt.html#SEC_About",
    "title": "zsh: About This Document",
    "description": "zsh: About This Document",
    "author": null,
    "keywords": "zsh: About This Document",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:00 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-15ed\"",
      "expires": "Thu, 08 May 2025 06:52:00 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706ae9fc94bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: About This Document\nThis document was generated on May 14, 2022 using texi2html 5.0. \nThe buttons in the navigation panels have the following meaning: \nButton Name Go to From 1.2.3 go to \n[ << ] \tFastBack\tBeginning of this chapter or previous chapter\t1\t\n[ < ] \tBack\tPrevious section in reading order\t1.2.2\t\n[ Up ] \tUp\tUp section\t1.2\t\n[ > ] \tForward\tNext section in reading order\t1.2.4\t\n[ >> ] \tFastForward\tNext chapter\t2\t\n[Top] \tTop\tCover (top) of document\t\t\n[Contents] \tContents\tTable of contents\t\t\n[Index] \tIndex\tIndex\t\t\n[ ? ] \tAbout\tAbout (help)\t\t\nwhere the Example assumes that the current position is at Subsubsection One-Two-Three of a document of the following structure: \n1. Section One \n1.1 Subsection One-One \n...\n1.2 Subsection One-Two \n1.2.1 Subsubsection One-Two-One\n1.2.2 Subsubsection One-Two-Two\n1.2.3 Subsubsection One-Two-Three <== Current Position \n1.2.4 Subsubsection One-Two-Four\n1.3 Subsection One-Three \n...\n1.4 Subsection One-Four\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-abt-html-SEC-About-v1upl.html",
  "markdown": "# zsh: About This Document\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).\n\nThe buttons in the navigation panels have the following meaning:\n\n| Button | Name | Go to | From 1.2.3 go to |\n| --- | --- | --- | --- |\n| \\[ << \\] | FastBack | Beginning of this chapter or previous chapter | 1   |\n| \\[ < \\] | Back | Previous section in reading order | 1.2.2 |\n| \\[ Up \\] | Up  | Up section | 1.2 |\n| \\[ > \\] | Forward | Next section in reading order | 1.2.4 |\n| \\[ >> \\] | FastForward | Next chapter | 2   |\n| \\[Top\\] | Top | Cover (top) of document |     |\n| \\[Contents\\] | Contents | Table of contents |     |\n| \\[Index\\] | Index | Index |     |\n| \\[ ? \\] | About | About (help) |     |\n\nwhere the **Example** assumes that the current position is at **Subsubsection One-Two-Three** of a document of the following structure:\n\n*   1\\. Section One\n    *   1.1 Subsection One-One\n        *   ...\n    *   1.2 Subsection One-Two\n        *   1.2.1 Subsubsection One-Two-One\n        *   1.2.2 Subsubsection One-Two-Two\n        *   1.2.3 Subsubsection One-Two-Three     **<== Current Position**\n        *   1.2.4 Subsubsection One-Two-Four\n    *   1.3 Subsection One-Three\n        *   ...\n    *   1.4 Subsection One-Four\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 11,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-abt-html-SEC-About-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-abt-html-SEC-About-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-abt-html-SEC-About-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-abt-html-SEC-About-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-abt-html-SEC-About-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 2419,
      "readableText": 2601,
      "none": 3971,
      "readableTextIfPossible": 3971,
      "result": 2601,
      "markdown": 1423
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_toc.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_toc.html#SEC_Contents",
    "loadedTime": "2025-05-08T06:51:00.417Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_toc.html#SEC_Contents",
    "title": "zsh: Table of Contents",
    "description": "zsh: Table of Contents",
    "author": null,
    "keywords": "zsh: Table of Contents",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:50:59 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-adc9\"",
      "expires": "Thu, 08 May 2025 06:51:59 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706a97e634bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Table of Contents\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-toc-html-SEC-Contents-ovtmd.html",
  "markdown": "# zsh: Table of Contents\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 335,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-toc-html-SEC-Contents-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-toc-html-SEC-Contents-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-toc-html-SEC-Contents-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-toc-html-SEC-Contents-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-toc-html-SEC-Contents-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 48407,
      "readableText": 415,
      "none": 42812,
      "readableTextIfPossible": 42812,
      "result": 415,
      "markdown": 182
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Invocation.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation",
    "loadedTime": "2025-05-08T06:51:01.810Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation",
    "title": "zsh: 4 Invocation",
    "description": "zsh: 4 Invocation",
    "author": null,
    "keywords": "zsh: 4 Invocation",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:00 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-57a3\"",
      "expires": "Thu, 08 May 2025 06:52:00 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706b1a8b34bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 4 Invocation\n4.1 Invocation\nThe following flags are interpreted by the shell when invoked to determine where the shell will read commands from: \n-c \nTake the first argument as a command to execute, rather than reading commands from a script or standard input. If any further arguments are given, the first one is assigned to $0, rather than being used as a positional parameter. \n-i \nForce shell to be interactive. It is still possible to specify a script to execute. \n-s \nForce shell to read commands from the standard input. If the -s flag is not present and an argument is given, the first argument is taken to be the pathname of a script to execute. \nIf there are any remaining arguments after option processing, and neither of the options -c or -s was supplied, the first argument is taken as the file name of a script containing shell commands to be executed. If the option PATH_SCRIPT is set, and the file name does not contain a directory path (i.e. there is no ‘/’ in the name), first the current directory and then the command path given by the variable PATH are searched for the script. If the option is not set or the file name contains a ‘/’ it is used directly. \nAfter the first one or two arguments have been appropriated as described above, the remaining arguments are assigned to the positional parameters. \nFor further options, which are common to invocation and the set builtin, see Options. \nThe long option ‘--emulate’ followed (in a separate word) by an emulation mode may be passed to the shell. The emulation modes are those described for the emulate builtin, see Shell Builtin Commands. The ‘--emulate’ option must precede any other options (which might otherwise be overridden), but following options are honoured, so may be used to modify the requested emulation mode. Note that certain extra steps are taken to ensure a smooth emulation when this option is used compared with the emulate command within the shell: for example, variables that conflict with POSIX usage such as path are not defined within the shell. \nOptions may be specified by name using the -o option. -o acts like a single-letter option, but takes a following string as the option name. For example, \nzsh -x -o shwordsplit scr\nruns the script scr, setting the XTRACE option by the corresponding letter ‘-x’ and the SH_WORD_SPLIT option by name. Options may be turned off by name by using +o instead of -o. -o can be stacked up with preceding single-letter options, so for example ‘-xo shwordsplit’ or ‘-xoshwordsplit’ is equivalent to ‘-x -o shwordsplit’. \nOptions may also be specified by name in GNU long option style, ‘--option-name’. When this is done, ‘-’ characters in the option name are permitted: they are translated into ‘_’, and thus ignored. So, for example, ‘zsh --sh-word-split’ invokes zsh with the SH_WORD_SPLIT option turned on. Like other option syntaxes, options can be turned off by replacing the initial ‘-’ with a ‘+’; thus ‘+-sh-word-split’ is equivalent to ‘--no-sh-word-split’. Unlike other option syntaxes, GNU-style long options cannot be stacked with any other options, so for example ‘-x-shwordsplit’ is an error, rather than being treated like ‘-x --shwordsplit’. \nThe special GNU-style option ‘--version’ is handled; it sends to standard output the shell’s version information, then exits successfully. ‘--help’ is also handled; it sends to standard output a list of options that can be used when invoking the shell, then exits successfully. \nOption processing may be finished, allowing following arguments that start with ‘-’ or ‘+’ to be treated as normal arguments, in two ways. Firstly, a lone ‘-’ (or ‘+’) as an argument by itself ends option processing. Secondly, a special option ‘--’ (or ‘+-’), which may be specified on its own (which is the standard POSIX usage) or may be stacked with preceding options (so ‘-x-’ is equivalent to ‘-x --’). Options are not permitted to be stacked after ‘--’ (so ‘-x-f’ is an error), but note the GNU-style option form discussed above, where ‘--shwordsplit’ is permitted and does not end option processing. \nExcept when the sh/ksh emulation single-letter options are in effect, the option ‘-b’ (or ‘+b’) ends option processing. ‘-b’ is like ‘--’, except that further single-letter options can be stacked after the ‘-b’ and will take effect as normal. \n4.2 Compatibility\nZsh tries to emulate sh or ksh when it is invoked as sh or ksh respectively; more precisely, it looks at the first letter of the name by which it was invoked, excluding any initial ‘r’ (assumed to stand for ‘restricted’), and if that is ‘b’, ‘s’ or ‘k’ it will emulate sh or ksh. Furthermore, if invoked as su (which happens on certain systems when the shell is executed by the su command), the shell will try to find an alternative name from the SHELL environment variable and perform emulation based on that. \nIn sh and ksh compatibility modes the following parameters are not special and not initialized by the shell: ARGC, argv, cdpath, fignore, fpath, HISTCHARS, mailpath, MANPATH, manpath, path, prompt, PROMPT, PROMPT2, PROMPT3, PROMPT4, psvar, status. \nThe usual zsh startup/shutdown scripts are not executed. Login shells source /etc/profile followed by $HOME/.profile. If the ENV environment variable is set on invocation, $ENV is sourced after the profile scripts. The value of ENV is subjected to parameter expansion, command substitution, and arithmetic expansion before being interpreted as a pathname. Note that the PRIVILEGED option also affects the execution of startup files. \nThe following options are set if the shell is invoked as sh or ksh: NO_BAD_PATTERN, NO_BANG_HIST, NO_BG_NICE, NO_EQUALS, NO_FUNCTION_ARGZERO, GLOB_SUBST, NO_GLOBAL_EXPORT, NO_HUP, INTERACTIVE_COMMENTS, KSH_ARRAYS, NO_MULTIOS, NO_NOMATCH, NO_NOTIFY, POSIX_BUILTINS, NO_PROMPT_PERCENT, RM_STAR_SILENT, SH_FILE_EXPANSION, SH_GLOB, SH_OPTION_LETTERS, SH_WORD_SPLIT. Additionally the BSD_ECHO and IGNORE_BRACES options are set if zsh is invoked as sh. Also, the KSH_OPTION_PRINT, LOCAL_OPTIONS, PROMPT_BANG, PROMPT_SUBST and SINGLE_LINE_ZLE options are set if zsh is invoked as ksh. \nPlease note that, whilst reasonable efforts are taken to address incompatibilities when they arise, zsh does not guarantee complete emulation of other shells, nor POSIX compliance. For more information on the differences between zsh and other shells, please refer to chapter 2 of the shell FAQ, https://www.zsh.org/FAQ/. \n4.3 Restricted Shell\nWhen the basename of the command used to invoke zsh starts with the letter ‘r’ or the ‘-r’ command line option is supplied at invocation, the shell becomes restricted. Emulation mode is determined after stripping the letter ‘r’ from the invocation name. The following are disabled in restricted mode: \nchanging directories with the cd builtin \nchanging or unsetting the EGID, EUID, GID, HISTFILE, HISTSIZE, IFS, LD_AOUT_LIBRARY_PATH, LD_AOUT_PRELOAD, LD_LIBRARY_PATH, LD_PRELOAD, MODULE_PATH, module_path, PATH, path, SHELL, UID and USERNAME parameters \nspecifying command names containing / \nspecifying command pathnames using hash \nredirecting output to files \nusing the exec builtin command to replace the shell with another command \nusing jobs -Z to overwrite the shell process’ argument and environment space \nusing the ARGV0 parameter to override argv[0] for external commands \nturning off restricted mode with set +r or unsetopt RESTRICTED \nThese restrictions are enforced after processing the startup files. The startup files should set up PATH to point to a directory of commands which can be safely invoked in the restricted environment. They may also add further restrictions by disabling selected builtins. \nRestricted mode can also be activated any time by setting the RESTRICTED option. This immediately enables all the restrictions described above even if the shell still has not processed all startup files. \nA shell Restricted Mode is an outdated way to restrict what users may do: modern systems have better, safer and more reliable ways to confine user actions, such as chroot jails, containers and zones. \nA restricted shell is very difficult to implement safely. The feature may be removed in a future version of zsh. \nIt is important to realise that the restrictions only apply to the shell, not to the commands it runs (except for some shell builtins). While a restricted shell can only run the restricted list of commands accessible via the predefined ‘PATH’ variable, it does not prevent those commands from running any other command. \nAs an example, if ‘env’ is among the list of allowed commands, then it allows the user to run any command as ‘env’ is not a shell builtin command and can run arbitrary executables. \nSo when implementing a restricted shell framework it is important to be fully aware of what actions each of the allowed commands or features (which may be regarded as modules) can perform. \nMany commands can have their behaviour affected by environment variables. Except for the few listed above, zsh does not restrict the setting of environment variables. \nIf a ‘perl’, ‘python’, ‘bash’, or other general purpose interpreted script it treated as a restricted command, the user can work around the restriction by setting specially crafted ‘PERL5LIB’, ‘PYTHONPATH’, ‘BASHENV’ (etc.) environment variables. On GNU systems, any command can be made to run arbitrary code when performing character set conversion (including zsh itself) by setting a ‘GCONV_PATH’ environment variable. Those are only a few examples. \nBear in mind that, contrary to some other shells, ‘readonly’ is not a security feature in zsh as it can be undone and so cannot be used to mitigate the above. \nA restricted shell only works if the allowed commands are few and carefully written so as not to grant more access to users than intended. It is also important to restrict what zsh module the user may load as some of them, such as ‘zsh/system’, ‘zsh/mapfile’ and ‘zsh/files’, allow bypassing most of the restrictions. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Invocation-html-Invocation-4mxb.html",
  "markdown": "# zsh: 4 Invocation\n\n* * *\n\n## 4.1 Invocation\n\nThe following flags are interpreted by the shell when invoked to determine where the shell will read commands from:\n\n\\-c\n\nTake the first argument as a command to execute, rather than reading commands from a script or standard input. If any further arguments are given, the first one is assigned to $0, rather than being used as a positional parameter.\n\n\\-i\n\nForce shell to be interactive. It is still possible to specify a script to execute.\n\n\\-s\n\nForce shell to read commands from the standard input. If the \\-s flag is not present and an argument is given, the first argument is taken to be the pathname of a script to execute.\n\nIf there are any remaining arguments after option processing, and neither of the options \\-c or \\-s was supplied, the first argument is taken as the file name of a script containing shell commands to be executed. If the option PATH\\_SCRIPT is set, and the file name does not contain a directory path (i.e. there is no ‘/’ in the name), first the current directory and then the command path given by the variable PATH are searched for the script. If the option is not set or the file name contains a ‘/’ it is used directly.\n\nAfter the first one or two arguments have been appropriated as described above, the remaining arguments are assigned to the positional parameters.\n\nFor further options, which are common to invocation and the set builtin, see [Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Options).\n\nThe long option ‘\\-\\-emulate’ followed (in a separate word) by an emulation mode may be passed to the shell. The emulation modes are those described for the emulate builtin, see [Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands). The ‘\\-\\-emulate’ option must precede any other options (which might otherwise be overridden), but following options are honoured, so may be used to modify the requested emulation mode. Note that certain extra steps are taken to ensure a smooth emulation when this option is used compared with the emulate command within the shell: for example, variables that conflict with POSIX usage such as path are not defined within the shell.\n\nOptions may be specified by name using the \\-o option. \\-o acts like a single-letter option, but takes a following string as the option name. For example,\n\nzsh -x -o shwordsplit scr\n\nruns the script scr, setting the XTRACE option by the corresponding letter ‘\\-x’ and the SH\\_WORD\\_SPLIT option by name. Options may be turned _off_ by name by using +o instead of \\-o. \\-o can be stacked up with preceding single-letter options, so for example ‘\\-xo shwordsplit’ or ‘\\-xoshwordsplit’ is equivalent to ‘\\-x -o shwordsplit’.\n\nOptions may also be specified by name in GNU long option style, ‘\\-\\-option-name’. When this is done, ‘\\-’ characters in the option name are permitted: they are translated into ‘\\_’, and thus ignored. So, for example, ‘zsh -\\-sh-word-split’ invokes zsh with the SH\\_WORD\\_SPLIT option turned on. Like other option syntaxes, options can be turned off by replacing the initial ‘\\-’ with a ‘+’; thus ‘+-sh-word-split’ is equivalent to ‘\\-\\-no-sh-word-split’. Unlike other option syntaxes, GNU-style long options cannot be stacked with any other options, so for example ‘\\-x-shwordsplit’ is an error, rather than being treated like ‘\\-x -\\-shwordsplit’.\n\nThe special GNU-style option ‘\\-\\-version’ is handled; it sends to standard output the shell’s version information, then exits successfully. ‘\\-\\-help’ is also handled; it sends to standard output a list of options that can be used when invoking the shell, then exits successfully.\n\nOption processing may be finished, allowing following arguments that start with ‘\\-’ or ‘+’ to be treated as normal arguments, in two ways. Firstly, a lone ‘\\-’ (or ‘+’) as an argument by itself ends option processing. Secondly, a special option ‘\\-\\-’ (or ‘+-’), which may be specified on its own (which is the standard POSIX usage) or may be stacked with preceding options (so ‘\\-x-’ is equivalent to ‘\\-x -\\-’). Options are not permitted to be stacked after ‘\\-\\-’ (so ‘\\-x-f’ is an error), but note the GNU-style option form discussed above, where ‘\\-\\-shwordsplit’ is permitted and does not end option processing.\n\nExcept when the sh/ksh emulation single-letter options are in effect, the option ‘\\-b’ (or ‘+b’) ends option processing. ‘\\-b’ is like ‘\\-\\-’, except that further single-letter options can be stacked after the ‘\\-b’ and will take effect as normal.\n\n* * *\n\n## 4.2 Compatibility\n\nZsh tries to emulate sh or ksh when it is invoked as sh or ksh respectively; more precisely, it looks at the first letter of the name by which it was invoked, excluding any initial ‘r’ (assumed to stand for ‘restricted’), and if that is ‘b’, ‘s’ or ‘k’ it will emulate sh or ksh. Furthermore, if invoked as su (which happens on certain systems when the shell is executed by the su command), the shell will try to find an alternative name from the SHELL environment variable and perform emulation based on that.\n\nIn sh and ksh compatibility modes the following parameters are not special and not initialized by the shell: ARGC, argv, cdpath, fignore, fpath, HISTCHARS, mailpath, MANPATH, manpath, path, prompt, PROMPT, PROMPT2, PROMPT3, PROMPT4, psvar, status.\n\nThe usual zsh startup/shutdown scripts are not executed. Login shells source /etc/profile followed by $HOME/.profile. If the ENV environment variable is set on invocation, $ENV is sourced after the profile scripts. The value of ENV is subjected to parameter expansion, command substitution, and arithmetic expansion before being interpreted as a pathname. Note that the PRIVILEGED option also affects the execution of startup files.\n\nThe following options are set if the shell is invoked as sh or ksh: NO\\_BAD\\_PATTERN, NO\\_BANG\\_HIST, NO\\_BG\\_NICE, NO\\_EQUALS, NO\\_FUNCTION\\_ARGZERO, GLOB\\_SUBST, NO\\_GLOBAL\\_EXPORT, NO\\_HUP, INTERACTIVE\\_COMMENTS, KSH\\_ARRAYS, NO\\_MULTIOS, NO\\_NOMATCH, NO\\_NOTIFY, POSIX\\_BUILTINS, NO\\_PROMPT\\_PERCENT, RM\\_STAR\\_SILENT, SH\\_FILE\\_EXPANSION, SH\\_GLOB, SH\\_OPTION\\_LETTERS, SH\\_WORD\\_SPLIT. Additionally the BSD\\_ECHO and IGNORE\\_BRACES options are set if zsh is invoked as sh. Also, the KSH\\_OPTION\\_PRINT, LOCAL\\_OPTIONS, PROMPT\\_BANG, PROMPT\\_SUBST and SINGLE\\_LINE\\_ZLE options are set if zsh is invoked as ksh.\n\nPlease note that, whilst reasonable efforts are taken to address incompatibilities when they arise, zsh does not guarantee complete emulation of other shells, nor POSIX compliance. For more information on the differences between zsh and other shells, please refer to chapter 2 of the shell FAQ, [https://www.zsh.org/FAQ/](https://www.zsh.org/FAQ/).\n\n* * *\n\n## 4.3 Restricted Shell\n\nWhen the basename of the command used to invoke zsh starts with the letter ‘r’ or the ‘\\-r’ command line option is supplied at invocation, the shell becomes restricted. Emulation mode is determined after stripping the letter ‘r’ from the invocation name. The following are disabled in restricted mode:\n\n*   changing directories with the cd builtin\n*   changing or unsetting the EGID, EUID, GID, HISTFILE, HISTSIZE, IFS, LD\\_AOUT\\_LIBRARY\\_PATH, LD\\_AOUT\\_PRELOAD, LD\\_LIBRARY\\_PATH, LD\\_PRELOAD, MODULE\\_PATH, module\\_path, PATH, path, SHELL, UID and USERNAME parameters\n*   specifying command names containing /\n*   specifying command pathnames using hash\n*   redirecting output to files\n*   using the exec builtin command to replace the shell with another command\n*   using jobs -Z to overwrite the shell process’ argument and environment space\n*   using the ARGV0 parameter to override argv\\[0\\] for external commands\n*   turning off restricted mode with set +r or unsetopt RESTRICTED\n\nThese restrictions are enforced after processing the startup files. The startup files should set up PATH to point to a directory of commands which can be safely invoked in the restricted environment. They may also add further restrictions by disabling selected builtins.\n\nRestricted mode can also be activated any time by setting the RESTRICTED option. This immediately enables all the restrictions described above even if the shell still has not processed all startup files.\n\nA shell _Restricted Mode_ is an outdated way to restrict what users may do: modern systems have better, safer and more reliable ways to confine user actions, such as _chroot jails_, _containers_ and _zones_.\n\nA restricted shell is very difficult to implement safely. The feature may be removed in a future version of zsh.\n\nIt is important to realise that the restrictions only apply to the shell, not to the commands it runs (except for some shell builtins). While a restricted shell can only run the restricted list of commands accessible via the predefined ‘PATH’ variable, it does not prevent those commands from running any other command.\n\nAs an example, if ‘env’ is among the list of _allowed_ commands, then it allows the user to run any command as ‘env’ is not a shell builtin command and can run arbitrary executables.\n\nSo when implementing a restricted shell framework it is important to be fully aware of what actions each of the _allowed_ commands or features (which may be regarded as _modules_) can perform.\n\nMany commands can have their behaviour affected by environment variables. Except for the few listed above, zsh does not restrict the setting of environment variables.\n\nIf a ‘perl’, ‘python’, ‘bash’, or other general purpose interpreted script it treated as a restricted command, the user can work around the restriction by setting specially crafted ‘PERL5LIB’, ‘PYTHONPATH’, ‘BASHENV’ (etc.) environment variables. On GNU systems, any command can be made to run arbitrary code when performing character set conversion (including zsh itself) by setting a ‘GCONV\\_PATH’ environment variable. Those are only a few examples.\n\nBear in mind that, contrary to some other shells, ‘readonly’ is not a security feature in zsh as it can be undone and so cannot be used to mitigate the above.\n\nA restricted shell only works if the allowed commands are few and carefully written so as not to grant more access to users than intended. It is also important to restrict what zsh module the user may load as some of them, such as ‘zsh/system’, ‘zsh/mapfile’ and ‘zsh/files’, allow bypassing most of the restrictions.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 69,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Invocation-html-Invocation-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Invocation-html-Invocation-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Invocation-html-Invocation-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Invocation-html-Invocation-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Invocation-html-Invocation-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 11175,
      "readableText": 13603,
      "none": 20148,
      "readableTextIfPossible": 13603,
      "result": 13603,
      "markdown": 10525
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/The-Z-Shell-Manual.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/The-Z-Shell-Manual.html#The-Z-Shell-Manual",
    "loadedTime": "2025-05-08T06:51:02.115Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/The-Z-Shell-Manual.html#The-Z-Shell-Manual",
    "title": "zsh: 1 The Z Shell Manual",
    "description": "zsh: 1 The Z Shell Manual",
    "author": null,
    "keywords": "zsh: 1 The Z Shell Manual",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:01 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-1dbc\"",
      "expires": "Thu, 08 May 2025 06:52:01 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706b3693b4bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "1 The Z Shell Manual\nThis document has been produced from the texinfo file zsh.texi, included in the Doc sub-directory of the Zsh distribution. \n1.1 Producing documentation from zsh.texi\nThe texinfo source may be converted into several formats: \nThe Info manual \nThe Info format allows searching for topics, commands, functions, etc. from the many Indices. The command ‘makeinfo zsh.texi’ is used to produce the Info documentation. \nThe printed manual \nThe command ‘texi2dvi zsh.texi’ will output zsh.dvi which can then be processed with dvips and optionally gs (Ghostscript) to produce a nicely formatted printed manual. \nThe HTML manual \nAn HTML version of this manual is available at the Zsh web site via: \nhttps://zsh.sourceforge.io/Doc/. \n(The HTML version is produced with texi2html, which may be obtained from http://www.nongnu.org/texi2html/. The command is ‘texi2html –output . –ifinfo –split=chapter –node-files zsh.texi’. If necessary, upgrade to version 1.78 of texi2html.) \nFor those who do not have the necessary tools to process texinfo, precompiled documentation (PostScript, dvi, PDF, info and HTML formats) is available from the zsh archive site or its mirrors, in the file zsh-doc.tar.gz. (See Availability for a list of sites.) \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-The-Z-Shell-Manual-html-The-Z-Shell-Manual-1vb52.html",
  "markdown": "# 1 The Z Shell Manual\n\nThis document has been produced from the texinfo file zsh.texi, included in the Doc sub-directory of the Zsh distribution.\n\n* * *\n\n## 1.1 Producing documentation from zsh.texi\n\nThe texinfo source may be converted into several formats:\n\nThe Info manual\n\nThe Info format allows searching for topics, commands, functions, etc. from the many Indices. The command ‘makeinfo zsh.texi’ is used to produce the Info documentation.\n\nThe printed manual\n\nThe command ‘texi2dvi zsh.texi’ will output zsh.dvi which can then be processed with dvips and optionally gs (Ghostscript) to produce a nicely formatted printed manual.\n\nThe HTML manual\n\nAn HTML version of this manual is available at the Zsh web site via:\n\n[https://zsh.sourceforge.io/Doc/](https://zsh.sourceforge.io/Doc/).\n\n(The HTML version is produced with texi2html, which may be obtained from [http://www.nongnu.org/texi2html/](http://www.nongnu.org/texi2html/). The command is ‘texi2html –output . –ifinfo –split=chapter –node-files zsh.texi’. If necessary, upgrade to version 1.78 of texi2html.)\n\nFor those who do not have the necessary tools to process texinfo, precompiled documentation (PostScript, dvi, PDF, info and HTML formats) is available from the zsh archive site or its mirrors, in the file zsh-doc.tar.gz. (See [Availability](https://zsh.sourceforge.io/Doc/Release/Introduction.html#Availability) for a list of sites.)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 31,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-The-Z-Shell-Manual-html-The-Z-Shell-Manual-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-The-Z-Shell-Manual-html-The-Z-Shell-Manual-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-The-Z-Shell-Manual-html-The-Z-Shell-Manual-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-The-Z-Shell-Manual-html-The-Z-Shell-Manual-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-The-Z-Shell-Manual-html-The-Z-Shell-Manual-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 1827,
      "readableText": 2191,
      "none": 5908,
      "readableTextIfPossible": 5908,
      "result": 2191,
      "markdown": 1563
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Variables-Index.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Variables-Index.html#Variables-Index",
    "loadedTime": "2025-05-08T06:51:03.442Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Variables-Index.html#Variables-Index",
    "title": "zsh: Variables Index",
    "description": "zsh: Variables Index",
    "author": null,
    "keywords": "zsh: Variables Index",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:02 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-965a\"",
      "expires": "Thu, 08 May 2025 06:52:02 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706bb0b584bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Variables Index\nIndex Entry Section ! ! 15.5 Parameters Set By The Shell # # 15.5 Parameters Set By The Shell $ $ 15.5 Parameters Set By The Shell * * 15.5 Parameters Set By The Shell - - 15.5 Parameters Set By The Shell 0 0 15.5 Parameters Set By The Shell ? ? 15.5 Parameters Set By The Shell @ @ 15.5 Parameters Set By The Shell _ _ 15.5 Parameters Set By The Shell A aliases 22.20 The zsh/parameter Module all_quotes, compstate 19.2 Completion Special Parameters ARGC 15.5 Parameters Set By The Shell argv 15.5 Parameters Set By The Shell ARGV0 15.6 Parameters Used By The Shell B BAUD 15.6 Parameters Used By The Shell BAUD, use of 18.1 Description BUFFER 18.5 User-Defined Widgets BUFFERLINES 18.5 User-Defined Widgets builtins 22.20 The zsh/parameter Module C cdpath 15.6 Parameters Used By The Shell CDPATH 15.6 Parameters Used By The Shell chpwd_functions 9.3.1 Hook Functions COLUMNS 15.6 Parameters Used By The Shell COLUMNS, use of 18.1 Description commands 22.20 The zsh/parameter Module comppostfuncs, use of 20.7 Completion System Variables compprefuncs, use of 20.7 Completion System Variables compstate 19.2 Completion Special Parameters CONTEXT 18.5 User-Defined Widgets context, compstate 19.2 Completion Special Parameters context, use of 20.6 Utility Functions CORRECT_IGNORE 15.6 Parameters Used By The Shell CORRECT_IGNORE_FILE 15.6 Parameters Used By The Shell CPUTYPE 15.5 Parameters Set By The Shell CURRENT 19.2 Completion Special Parameters CURSOR 18.5 User-Defined Widgets CUTBUFFER 18.5 User-Defined Widgets D dirstack 22.20 The zsh/parameter Module DIRSTACKSIZE 15.6 Parameters Used By The Shell dis_aliases 22.20 The zsh/parameter Module dis_builtins 22.20 The zsh/parameter Module dis_functions 22.20 The zsh/parameter Module dis_functions_source 22.20 The zsh/parameter Module dis_galiases 22.20 The zsh/parameter Module dis_patchars 22.20 The zsh/parameter Module dis_reswords 22.20 The zsh/parameter Module dis_saliases 22.20 The zsh/parameter Module E EDITOR 18.2 Keymaps EGID 15.5 Parameters Set By The Shell ENV 15.6 Parameters Used By The Shell ENV, use of 4.2 Compatibility EPOCHREALTIME 22.10 The zsh/datetime Module EPOCHSECONDS 22.10 The zsh/datetime Module epochtime 22.10 The zsh/datetime Module ERRNO 15.5 Parameters Set By The Shell errnos 22.27.3 Parameters EUID 15.5 Parameters Set By The Shell exact, compstate 19.2 Completion Special Parameters exact_string, compstate 19.2 Completion Special Parameters expl, use of 20.6 Utility Functions F FCEDIT 15.6 Parameters Used By The Shell fignore 15.6 Parameters Used By The Shell FIGNORE 15.6 Parameters Used By The Shell fpath 15.6 Parameters Used By The Shell FPATH 15.6 Parameters Used By The Shell fpath, searching 17 Shell Builtin Commands fpath, use of 9.1 Autoloading Functions fpath, with zcompile 17 Shell Builtin Commands funcfiletrace 22.20 The zsh/parameter Module FUNCNEST 15.5 Parameters Set By The Shell funcsourcetrace 22.20 The zsh/parameter Module funcstack 22.20 The zsh/parameter Module functions 22.20 The zsh/parameter Module functions_source 22.20 The zsh/parameter Module functrace 22.20 The zsh/parameter Module G galiases 22.20 The zsh/parameter Module GID 15.5 Parameters Set By The Shell H HELPDIR 26.2.1 Accessing On-Line Help histchars 15.6 Parameters Used By The Shell HISTCHARS 15.6 Parameters Used By The Shell histchars, use of 6.7 Comments histchars, use of 14.1.1 Overview HISTCMD 15.5 Parameters Set By The Shell HISTFILE 15.6 Parameters Used By The Shell HISTNO 18.5 User-Defined Widgets history 22.20 The zsh/parameter Module historywords 22.20 The zsh/parameter Module HISTORY_IGNORE 15.6 Parameters Used By The Shell HISTSIZE 15.6 Parameters Used By The Shell HISTSIZE, use of 14.1 History Expansion HOME 15.6 Parameters Used By The Shell HOME, use of 5.1 Startup/Shutdown Files HOST 15.5 Parameters Set By The Shell I IFS 15.6 Parameters Used By The Shell IFS, use of 14.3 Parameter Expansion IFS, use of 14.4 Command Substitution IFS, use of 17 Shell Builtin Commands ignored, compstate 19.2 Completion Special Parameters incarg, use of 26.7.1 Widgets insert, compstate 19.2 Completion Special Parameters insert_positions, compstate 19.2 Completion Special Parameters IPREFIX 19.2 Completion Special Parameters ISEARCHMATCH_ACTIVE 18.5 User-Defined Widgets ISEARCHMATCH_END 18.5 User-Defined Widgets ISEARCHMATCH_START 18.5 User-Defined Widgets ISUFFIX 19.2 Completion Special Parameters \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Variables-Index-html-Variables-Index-orvgb.html",
  "markdown": "# zsh: Variables Index\n\nIndex Entry  Section\n\n* * *\n\n! [`!`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-_0021) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\n# [`#`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-_0023) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\n$ [`$`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-_0024) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\n\\* [`*`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-_002a) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\n\\- [`-`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-_002d-1) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\n0 [`0`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-0) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\n? [`?`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-_003f) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\n@ [`@`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-_0040) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\n\\_ [`_`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-_005f) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\nA [`aliases`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-aliases) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`all_quotes, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-all_005fquotes_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`ARGC`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-ARGC) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`argv`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-argv) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`ARGV0`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-ARGV0) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell)\n\n* * *\n\nB [`BAUD`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-BAUD) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`BAUD, use of`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-BAUD_002c-use-of) [18.1 Description](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Description-6) [`BUFFER`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-BUFFER) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`BUFFERLINES`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-BUFFERLINES) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`builtins`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-builtins) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module)\n\n* * *\n\nC [`cdpath`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-cdpath) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`CDPATH`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-CDPATH) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`chpwd_functions`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-chpwd_005ffunctions) [9.3.1 Hook Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Hook-Functions) [`COLUMNS`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-COLUMNS) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`COLUMNS, use of`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-COLUMNS_002c-use-of) [18.1 Description](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Description-6) [`commands`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-commands) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`comppostfuncs, use of`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-comppostfuncs_002c-use-of) [20.7 Completion System Variables](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System-Variables) [`compprefuncs, use of`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-compprefuncs_002c-use-of) [20.7 Completion System Variables](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System-Variables) [`compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`CONTEXT`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-CONTEXT) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`context, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-context_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`context, use of`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-context_002c-use-of) [20.6 Utility Functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-Functions) [`CORRECT_IGNORE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-CORRECT_005fIGNORE) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`CORRECT_IGNORE_FILE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-CORRECT_005fIGNORE_005fFILE) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`CPUTYPE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-CPUTYPE) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`CURRENT`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-CURRENT) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`CURSOR`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-CURSOR) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`CUTBUFFER`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-CUTBUFFER) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets)\n\n* * *\n\nD [`dirstack`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-dirstack) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`DIRSTACKSIZE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-DIRSTACKSIZE) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`dis_aliases`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-dis_005faliases) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`dis_builtins`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-dis_005fbuiltins) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`dis_functions`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-dis_005ffunctions) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`dis_functions_source`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-dis_005ffunctions_005fsource) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`dis_galiases`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-dis_005fgaliases) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`dis_patchars`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-dis_005fpatchars) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`dis_reswords`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-dis_005freswords) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`dis_saliases`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-dis_005fsaliases) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module)\n\n* * *\n\nE [`EDITOR`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-EDITOR) [18.2 Keymaps](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Keymaps) [`EGID`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-EGID) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`ENV`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-ENV) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`ENV, use of`](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-ENV_002c-use-of) [4.2 Compatibility](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Compatibility) [`EPOCHREALTIME`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-EPOCHREALTIME) [22.10 The zsh/datetime Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fdatetime-Module) [`EPOCHSECONDS`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-EPOCHSECONDS) [22.10 The zsh/datetime Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fdatetime-Module) [`epochtime`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-epochtime) [22.10 The zsh/datetime Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fdatetime-Module) [`ERRNO`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-ERRNO) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`errnos`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-errnos) [22.27.3 Parameters](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Parameters-1) [`EUID`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-EUID) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`exact, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-exact_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`exact_string, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-exact_005fstring_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`expl, use of`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-expl_002c-use-of) [20.6 Utility Functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-Functions)\n\n* * *\n\nF [`FCEDIT`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-FCEDIT) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`fignore`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-fignore) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`FIGNORE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-FIGNORE) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`fpath`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-fpath) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`FPATH`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-FPATH) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`fpath, searching`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-fpath_002c-searching) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`fpath, use of`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-fpath_002c-use-of) [9.1 Autoloading Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Autoloading-Functions) [`fpath, with zcompile`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-fpath_002c-with-zcompile) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`funcfiletrace`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-funcfiletrace) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`FUNCNEST`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-FUNCNEST) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`funcsourcetrace`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-funcsourcetrace) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`funcstack`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-funcstack) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`functions`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-functions-2) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`functions_source`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-functions_005fsource) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`functrace`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-functrace) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module)\n\n* * *\n\nG [`galiases`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-galiases) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`GID`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-GID) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\nH [`HELPDIR`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-HELPDIR) [26.2.1 Accessing On-Line Help](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Accessing-On_002dLine-Help) [`histchars`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-histchars) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`HISTCHARS`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-HISTCHARS) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`histchars, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-histchars_002c-use-of) [6.7 Comments](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Comments) [`histchars, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-histchars_002c-use-of-1) [14.1.1 Overview](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Overview) [`HISTCMD`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-HISTCMD) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`HISTFILE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-HISTFILE) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`HISTNO`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-HISTNO) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`history`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-history-2) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`historywords`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-historywords) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`HISTORY_IGNORE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-HISTORY_005fIGNORE) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`HISTSIZE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-HISTSIZE) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`HISTSIZE, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-HISTSIZE_002c-use-of) [14.1 History Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#History-Expansion) [`HOME`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-HOME) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`HOME, use of`](https://zsh.sourceforge.io/Doc/Release/Files.html#index-HOME_002c-use-of) [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) [`HOST`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-HOST) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\nI [`IFS`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-IFS) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`IFS, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-IFS_002c-use-of) [14.3 Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) [`IFS, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-IFS_002c-use-of-1) [14.4 Command Substitution](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Command-Substitution) [`IFS, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-IFS_002c-use-of-2) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`ignored, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-ignored_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`incarg, use of`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-incarg_002c-use-of) [26.7.1 Widgets](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Widgets) [`insert, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-insert_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`insert_positions, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-insert_005fpositions_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`IPREFIX`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-IPREFIX) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`ISEARCHMATCH_ACTIVE`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-ISEARCHMATCH_005fACTIVE) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`ISEARCHMATCH_END`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-ISEARCHMATCH_005fEND) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`ISEARCHMATCH_START`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-ISEARCHMATCH_005fSTART) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`ISUFFIX`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-ISUFFIX) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 316,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Variables-Index-html-Variables-Index-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Variables-Index-html-Variables-Index-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Variables-Index-html-Variables-Index-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Variables-Index-html-Variables-Index-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Variables-Index-html-Variables-Index-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 35462,
      "readableText": 33576,
      "none": 36886,
      "readableTextIfPossible": 36886,
      "result": 33576,
      "markdown": 22557
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Editor-Functions-Index.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Editor-Functions-Index.html#Editor-Functions-Index",
    "loadedTime": "2025-05-08T06:51:06.105Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Editor-Functions-Index.html#Editor-Functions-Index",
    "title": "zsh: Editor Functions Index",
    "description": "zsh: Editor Functions Index",
    "author": null,
    "keywords": "zsh: Editor Functions Index",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:03 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-909b\"",
      "expires": "Thu, 08 May 2025 06:52:03 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706bfeccd4bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Editor Functions Index\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Editor-Functions-Index-html-Editor-Functions-Index-gb9uyf.html",
  "markdown": "# zsh: Editor Functions Index\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 290,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Editor-Functions-Index-html-Editor-Functions-Index-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Editor-Functions-Index-html-Editor-Functions-Index-removedElementsHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Editor-Functions-Index-html-Editor-Functions-Index-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Editor-Functions-Index-html-Editor-Functions-Index-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 0,
      "readableText": 355,
      "none": 35401,
      "readableTextIfPossible": 35401,
      "result": 355,
      "markdown": 180
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Concept-Index.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index",
    "loadedTime": "2025-05-08T06:51:10.327Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index",
    "title": "zsh: Concept Index",
    "description": "zsh: Concept Index",
    "author": null,
    "keywords": "zsh: Concept Index",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:05 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-be79\"",
      "expires": "Thu, 08 May 2025 06:52:05 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706cc78d94bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Concept Index\nIndex Entry Section $ $0, setting 16.2.9 Scripts and Functions $0, using 16.2.10 Shell Emulation - –help 4.1 Invocation –version 4.1 Invocation . .zwc files, creation 17 Shell Builtin Commands A acquiring zsh by FTP 2.2 Availability aliases, completion of 16.2.2 Completion aliases, defining 17 Shell Builtin Commands aliases, expanding in function definition 16.2.9 Scripts and Functions aliases, expansion 16.2.6 Input/Output aliases, global 6.8 Aliasing aliases, listing 17 Shell Builtin Commands aliases, removing 17 Shell Builtin Commands aliasing 6.8 Aliasing alternate forms for complex commands 6.4 Alternate Forms For Complex Commands always blocks 6.3 Complex Commands ambiguous completion 16.2.2 Completion annoying keyboard, sun 16.2.6 Input/Output anonymous functions 9.2 Anonymous Functions approximate matching 14.8.5 Approximate Matching argument splitting, in typeset etc. 16.2.10 Shell Emulation arithmetic base 11 Arithmetic Evaluation arithmetic evaluation 11 Arithmetic Evaluation arithmetic expansion 14.5 Arithmetic Expansion arithmetic operators 11 Arithmetic Evaluation array assignment 15.2 Array Parameters array expansion style, rc 14.3 Parameter Expansion array parameters, setting 17 Shell Builtin Commands array style, ksh 16.2.10 Shell Emulation arrays, behaviour of index zero 16.2.10 Shell Emulation arrays, ksh style 16.2.10 Shell Emulation assignment 15.1 Description asynchronous jobs, and exiting shell 10.2 Signals author 2.1 Author autocd, silencing 16.2.1 Changing Directories autoloading functions 9.1 Autoloading Functions autoloading functions 17 Shell Builtin Commands availability of zsh 2.2 Availability B background jobs, I/O 10.1 Jobs background jobs, notification 16.2.7 Job Control background jobs, priority of 16.2.7 Job Control bases, in arithmetic 11 Arithmetic Evaluation bases, output in C format 16.2.9 Scripts and Functions bash, BASH_REMATCH variable 16.2.10 Shell Emulation beep, ambiguous completion 16.2.2 Completion beep, enabling 16.2.12 Zle beep, history 16.2.4 History bg, output in POSIX format 16.2.7 Job Control binding keys 18.3 Zle Builtins binding widgets 18.3 Zle Builtins bindings, key 18.2 Keymaps brace expansion 14.6 Brace Expansion brace expansion, disabling 16.2.3 Expansion and Globbing brace expansion, extending 16.2.3 Expansion and Globbing bracketed paste 15.6 Parameters Used By The Shell break, inside function 16.2.9 Scripts and Functions builtin commands 17 Shell Builtin Commands builtins, utility 22.38 The zsh/zutil Module C calendar function system 23 Calendar Function System calling widgets 18.3 Zle Builtins capabilities, getting from files 22.3 The zsh/cap Module capabilities, setting 22.3 The zsh/cap Module capabilities, setting on files 22.3 The zsh/cap Module case selection 6.3 Complex Commands case-insensitive globbing, option 16.2.3 Expansion and Globbing case-insensitive regular expression matches, option 16.2.3 Expansion and Globbing case-sensitive globbing, option 16.2.3 Expansion and Globbing cd, automatic 16.2.1 Changing Directories cd, behaving like pushd 16.2.1 Changing Directories cd, silencing 16.2.1 Changing Directories cd, to parameter 16.2.1 Changing Directories cd, with .. in argument 16.2.1 Changing Directories CDPATH, order of checking 16.2.1 Changing Directories character classes 14.8.1 Glob Operators characters, (Unicode) combining 16.2.12 Zle characters, multibyte, in expansion and globbing 16.2.3 Expansion and Globbing clobbering, of empty files 16.2.6 Input/Output clobbering, of files 16.2.6 Input/Output clobbering, POSIX compatibility 16.2.10 Shell Emulation cloning the shell 22.4 The zsh/clone Module colon modifiers 14.1.4 Modifiers combining characters (Unicode) 16.2.12 Zle command execution 8 Command Execution command execution, enabling 16.2.9 Scripts and Functions command hashing 16.2.6 Input/Output command not found, handling of 8 Command Execution command substitution 14.4 Command Substitution commands, alternate forms for complex 6.4 Alternate Forms For Complex Commands commands, builtin 17 Shell Builtin Commands commands, complex 6.3 Complex Commands commands, disabling 17 Shell Builtin Commands commands, enabling 17 Shell Builtin Commands commands, simple 6.1 Simple Commands & Pipelines commands, tracing 16.2.9 Scripts and Functions comments 6.7 Comments comments, in interactive shells 16.2.6 Input/Output compatibility 4.2 Compatibility compatibility, csh 17 Shell Builtin Commands compatibility, ksh 17 Shell Builtin Commands compatibility, sh 17 Shell Builtin Commands compdef, use of by compinit 20.2.2 Autoloaded files compilation 17 Shell Builtin Commands completion removable suffix, highlighting 18.7 Character Highlighting completion system 20 Completion System completion system, adding definitions 20.2.3 Functions completion system, autoloaded functions 20.2.2 Autoloaded files completion system, bindable commands 20.5 Bindable Commands completion system, choosing completers 20.4 Control Functions completion system, completers 20.4 Control Functions completion system, configuration 20.3 Completion System Configuration completion system, directory structure 20.8 Completion Directories completion system, initializing 20.2.1 Use of compinit completion system, installing 20.2 Initialization completion system, styles 20.3.3 Standard Styles completion system, tags 20.3.2 Standard Tags completion system, utility functions 20.6 Utility Functions completion system, variables 20.7 Completion System Variables completion widgets, adding specified matches 19.3 Completion Builtin Commands completion widgets, condition codes 19.4 Completion Condition Codes completion widgets, creating 18.3 Zle Builtins completion widgets, examining and setting state in 19.2 Completion Special Parameters completion widgets, example 19.6 Completion Widget Example completion widgets, modifying special parameters 19.3 Completion Builtin Commands completion, ambiguous 16.2.2 Completion completion, beep on ambiguous 16.2.2 Completion completion, coloured listings 22.7 The zsh/complist Module completion, controlling 19 Completion Widgets completion, controlling 20 Completion System completion, controlling 21 Completion Using compctl completion, exact matches 16.2.2 Completion completion, listing 16.2.2 Completion completion, listing 22.7 The zsh/complist Module completion, listing choices 16.2.2 Completion completion, listing choices, bash style 16.2.2 Completion completion, listing order 16.2.2 Completion completion, menu 16.2.2 Completion completion, menu 16.2.2 Completion completion, programmable 19 Completion Widgets completion, programmable 20 Completion System completion, programmable 21 Completion Using compctl completion, scroll listings 22.7 The zsh/complist Module completion, selecting by cursor 22.7.3 Menu selection completion, utility 22.8 The zsh/computil Module completion, widgets 19 Completion Widgets complex commands 6.3 Complex Commands conditional expression 6.3 Complex Commands conditional expressions 12 Conditional Expressions continue, inside function 16.2.9 Scripts and Functions continuing jobs automatically 16.2.7 Job Control continuing loops 17 Shell Builtin Commands coprocess 6.1 Simple Commands & Pipelines correction, spelling 16.2.6 Input/Output csh, compatibility 17 Shell Builtin Commands csh, history style 16.2.10 Shell Emulation csh, loop style 16.2.10 Shell Emulation csh, null command style 15.6 Parameters Used By The Shell csh, null globbing style 16.2.3 Expansion and Globbing csh, quoting style 16.2.10 Shell Emulation csh, redirections with no command 16.2.10 Shell Emulation \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Concept-Index-html-Concept-Index-vcgoe.html",
  "markdown": "# zsh: Concept Index\n\nIndex Entry  Section\n\n* * *\n\n$ [$0, setting](https://zsh.sourceforge.io/Doc/Release/Options.html#index-_00240_002c-setting) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [$0, using](https://zsh.sourceforge.io/Doc/Release/Options.html#index-_00240_002c-using) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation)\n\n* * *\n\n\\- [–help](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-_002d_002dhelp) [4.1 Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation-1) [–version](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-_002d_002dversion) [4.1 Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation-1)\n\n* * *\n\n. [.zwc files, creation](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-_002ezwc-files_002c-creation) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nA [acquiring zsh by FTP](https://zsh.sourceforge.io/Doc/Release/Introduction.html#index-acquiring-zsh-by-FTP) [2.2 Availability](https://zsh.sourceforge.io/Doc/Release/Introduction.html#Availability) [aliases, completion of](https://zsh.sourceforge.io/Doc/Release/Options.html#index-aliases_002c-completion-of) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [aliases, defining](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-aliases_002c-defining) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [aliases, expanding in function definition](https://zsh.sourceforge.io/Doc/Release/Options.html#index-aliases_002c-expanding-in-function-definition) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [aliases, expansion](https://zsh.sourceforge.io/Doc/Release/Options.html#index-aliases_002c-expansion) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [aliases, global](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-aliases_002c-global) [6.8 Aliasing](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Aliasing) [aliases, listing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-aliases_002c-listing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [aliases, removing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-aliases_002c-removing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [aliasing](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-aliasing) [6.8 Aliasing](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Aliasing) [alternate forms for complex commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-alternate-forms-for-complex-commands) [6.4 Alternate Forms For Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Alternate-Forms-For-Complex-Commands) [always blocks](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-always-blocks) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [ambiguous completion](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ambiguous-completion) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [annoying keyboard, sun](https://zsh.sourceforge.io/Doc/Release/Options.html#index-annoying-keyboard_002c-sun) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [anonymous functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-anonymous-functions) [9.2 Anonymous Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Anonymous-Functions) [approximate matching](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-approximate-matching) [14.8.5 Approximate Matching](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Approximate-Matching) [argument splitting, in typeset etc.](https://zsh.sourceforge.io/Doc/Release/Options.html#index-argument-splitting_002c-in-typeset-etc_002e) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [arithmetic base](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-arithmetic-base) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [arithmetic evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-arithmetic-evaluation) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [arithmetic expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-arithmetic-expansion) [14.5 Arithmetic Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Arithmetic-Expansion) [arithmetic operators](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-arithmetic-operators) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [array assignment](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-array-assignment) [15.2 Array Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Array-Parameters) [array expansion style, rc](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-array-expansion-style_002c-rc) [14.3 Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) [array parameters, setting](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-array-parameters_002c-setting) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [array style, ksh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-array-style_002c-ksh) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [arrays, behaviour of index zero](https://zsh.sourceforge.io/Doc/Release/Options.html#index-arrays_002c-behaviour-of-index-zero) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [arrays, ksh style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-arrays_002c-ksh-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [assignment](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-assignment) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [asynchronous jobs, and exiting shell](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-asynchronous-jobs_002c-and-exiting-shell) [10.2 Signals](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Signals) [author](https://zsh.sourceforge.io/Doc/Release/Introduction.html#index-author) [2.1 Author](https://zsh.sourceforge.io/Doc/Release/Introduction.html#Author) [autocd, silencing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-autocd_002c-silencing) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [autoloading functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-autoloading-functions) [9.1 Autoloading Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Autoloading-Functions) [autoloading functions](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-autoloading-functions-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [availability of zsh](https://zsh.sourceforge.io/Doc/Release/Introduction.html#index-availability-of-zsh) [2.2 Availability](https://zsh.sourceforge.io/Doc/Release/Introduction.html#Availability)\n\n* * *\n\nB [background jobs, I/O](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-background-jobs_002c-I_002fO) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [background jobs, notification](https://zsh.sourceforge.io/Doc/Release/Options.html#index-background-jobs_002c-notification) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [background jobs, priority of](https://zsh.sourceforge.io/Doc/Release/Options.html#index-background-jobs_002c-priority-of) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [bases, in arithmetic](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-bases_002c-in-arithmetic) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [bases, output in C format](https://zsh.sourceforge.io/Doc/Release/Options.html#index-bases_002c-output-in-C-format) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [bash, BASH\\_REMATCH variable](https://zsh.sourceforge.io/Doc/Release/Options.html#index-bash_002c-BASH_005fREMATCH-variable) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [beep, ambiguous completion](https://zsh.sourceforge.io/Doc/Release/Options.html#index-beep_002c-ambiguous-completion) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [beep, enabling](https://zsh.sourceforge.io/Doc/Release/Options.html#index-beep_002c-enabling) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [beep, history](https://zsh.sourceforge.io/Doc/Release/Options.html#index-beep_002c-history) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [bg, output in POSIX format](https://zsh.sourceforge.io/Doc/Release/Options.html#index-bg_002c-output-in-POSIX-format) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [binding keys](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-binding-keys) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [binding widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-binding-widgets) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [bindings, key](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-bindings_002c-key) [18.2 Keymaps](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Keymaps) [brace expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-brace-expansion) [14.6 Brace Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Brace-Expansion) [brace expansion, disabling](https://zsh.sourceforge.io/Doc/Release/Options.html#index-brace-expansion_002c-disabling) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [brace expansion, extending](https://zsh.sourceforge.io/Doc/Release/Options.html#index-brace-expansion_002c-extending) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [bracketed paste](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-bracketed-paste) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [break, inside function](https://zsh.sourceforge.io/Doc/Release/Options.html#index-break_002c-inside-function) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [builtin commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-builtin-commands) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [builtins, utility](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-builtins_002c-utility) [22.38 The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module)\n\n* * *\n\nC [calendar function system](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar-function-system) [23 Calendar Function System](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Function-System) [calling widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-calling-widgets) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [capabilities, getting from files](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-capabilities_002c-getting-from-files) [22.3 The zsh/cap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcap-Module) [capabilities, setting](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-capabilities_002c-setting) [22.3 The zsh/cap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcap-Module) [capabilities, setting on files](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-capabilities_002c-setting-on-files) [22.3 The zsh/cap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcap-Module) [case selection](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-case-selection) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [case-insensitive globbing, option](https://zsh.sourceforge.io/Doc/Release/Options.html#index-case_002dinsensitive-globbing_002c-option) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [case-insensitive regular expression matches, option](https://zsh.sourceforge.io/Doc/Release/Options.html#index-case_002dinsensitive-regular-expression-matches_002c-option) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [case-sensitive globbing, option](https://zsh.sourceforge.io/Doc/Release/Options.html#index-case_002dsensitive-globbing_002c-option) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [cd, automatic](https://zsh.sourceforge.io/Doc/Release/Options.html#index-cd_002c-automatic) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [cd, behaving like pushd](https://zsh.sourceforge.io/Doc/Release/Options.html#index-cd_002c-behaving-like-pushd) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [cd, silencing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-cd_002c-silencing) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [cd, to parameter](https://zsh.sourceforge.io/Doc/Release/Options.html#index-cd_002c-to-parameter) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [cd, with .. in argument](https://zsh.sourceforge.io/Doc/Release/Options.html#index-cd_002c-with-_002e_002e-in-argument) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [CDPATH, order of checking](https://zsh.sourceforge.io/Doc/Release/Options.html#index-CDPATH_002c-order-of-checking) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [character classes](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-character-classes) [14.8.1 Glob Operators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Operators) [characters, (Unicode) combining](https://zsh.sourceforge.io/Doc/Release/Options.html#index-characters_002c-_0028Unicode_0029-combining) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [characters, multibyte, in expansion and globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-characters_002c-multibyte_002c-in-expansion-and-globbing) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [clobbering, of empty files](https://zsh.sourceforge.io/Doc/Release/Options.html#index-clobbering_002c-of-empty-files) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [clobbering, of files](https://zsh.sourceforge.io/Doc/Release/Options.html#index-clobbering_002c-of-files) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [clobbering, POSIX compatibility](https://zsh.sourceforge.io/Doc/Release/Options.html#index-clobbering_002c-POSIX-compatibility) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [cloning the shell](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-cloning-the-shell) [22.4 The zsh/clone Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fclone-Module) [colon modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-colon-modifiers) [14.1.4 Modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Modifiers) [combining characters (Unicode)](https://zsh.sourceforge.io/Doc/Release/Options.html#index-combining-characters-_0028Unicode_0029) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [command execution](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#index-command-execution) [8 Command Execution](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#Command-Execution) [command execution, enabling](https://zsh.sourceforge.io/Doc/Release/Options.html#index-command-execution_002c-enabling) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [command hashing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-command-hashing) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [command not found, handling of](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#index-command-not-found_002c-handling-of) [8 Command Execution](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#Command-Execution) [command substitution](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-command-substitution) [14.4 Command Substitution](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Command-Substitution) [commands, alternate forms for complex](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-commands_002c-alternate-forms-for-complex) [6.4 Alternate Forms For Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Alternate-Forms-For-Complex-Commands) [commands, builtin](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-commands_002c-builtin) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [commands, complex](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-commands_002c-complex) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [commands, disabling](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-commands_002c-disabling) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [commands, enabling](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-commands_002c-enabling) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [commands, simple](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-commands_002c-simple) [6.1 Simple Commands & Pipelines](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Simple-Commands-_0026-Pipelines) [commands, tracing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-commands_002c-tracing) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [comments](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-comments) [6.7 Comments](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Comments) [comments, in interactive shells](https://zsh.sourceforge.io/Doc/Release/Options.html#index-comments_002c-in-interactive-shells) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [compatibility](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-compatibility) [4.2 Compatibility](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Compatibility) [compatibility, csh](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-compatibility_002c-csh) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [compatibility, ksh](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-compatibility_002c-ksh) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [compatibility, sh](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-compatibility_002c-sh) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [compdef, use of by compinit](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-compdef_002c-use-of-by-compinit) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [compilation](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-compilation) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [completion removable suffix, highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-completion-removable-suffix_002c-highlighting) [18.7 Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting) [completion system](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system) [20 Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System) [completion system, adding definitions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-adding-definitions) [20.2.3 Functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Functions-3) [completion system, autoloaded functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-autoloaded-functions) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [completion system, bindable commands](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-bindable-commands) [20.5 Bindable Commands](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Bindable-Commands) [completion system, choosing completers](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-choosing-completers) [20.4 Control Functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Control-Functions) [completion system, completers](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-completers) [20.4 Control Functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Control-Functions) [completion system, configuration](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-configuration) [20.3 Completion System Configuration](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System-Configuration) [completion system, directory structure](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-directory-structure) [20.8 Completion Directories](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-Directories) [completion system, initializing](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-initializing) [20.2.1 Use of compinit](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Use-of-compinit) [completion system, installing](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-installing) [20.2 Initialization](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Initialization) [completion system, styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-styles) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [completion system, tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-tags) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [completion system, utility functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-utility-functions) [20.6 Utility Functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-Functions) [completion system, variables](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion-system_002c-variables) [20.7 Completion System Variables](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System-Variables) [completion widgets, adding specified matches](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-completion-widgets_002c-adding-specified-matches) [19.3 Completion Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Builtin-Commands) [completion widgets, condition codes](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-completion-widgets_002c-condition-codes) [19.4 Completion Condition Codes](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Condition-Codes) [completion widgets, creating](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-completion-widgets_002c-creating) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [completion widgets, examining and setting state in](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-completion-widgets_002c-examining-and-setting-state-in) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [completion widgets, example](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-completion-widgets_002c-example) [19.6 Completion Widget Example](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widget-Example) [completion widgets, modifying special parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-completion-widgets_002c-modifying-special-parameters) [19.3 Completion Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Builtin-Commands) [completion, ambiguous](https://zsh.sourceforge.io/Doc/Release/Options.html#index-completion_002c-ambiguous) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [completion, beep on ambiguous](https://zsh.sourceforge.io/Doc/Release/Options.html#index-completion_002c-beep-on-ambiguous) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [completion, coloured listings](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-completion_002c-coloured-listings) [22.7 The zsh/complist Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomplist-Module) [completion, controlling](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-completion_002c-controlling) [19 Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets) [completion, controlling](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion_002c-controlling-1) [20 Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System) [completion, controlling](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#index-completion_002c-controlling-2) [21 Completion Using compctl](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#Completion-Using-compctl) [completion, exact matches](https://zsh.sourceforge.io/Doc/Release/Options.html#index-completion_002c-exact-matches) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [completion, listing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-completion_002c-listing) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [completion, listing](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-completion_002c-listing-1) [22.7 The zsh/complist Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomplist-Module) [completion, listing choices](https://zsh.sourceforge.io/Doc/Release/Options.html#index-completion_002c-listing-choices) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [completion, listing choices, bash style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-completion_002c-listing-choices_002c-bash-style) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [completion, listing order](https://zsh.sourceforge.io/Doc/Release/Options.html#index-completion_002c-listing-order) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [completion, menu](https://zsh.sourceforge.io/Doc/Release/Options.html#index-completion_002c-menu) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [completion, menu](https://zsh.sourceforge.io/Doc/Release/Options.html#index-completion_002c-menu-1) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [completion, programmable](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-completion_002c-programmable) [19 Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets) [completion, programmable](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completion_002c-programmable-1) [20 Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System) [completion, programmable](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#index-completion_002c-programmable-2) [21 Completion Using compctl](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#Completion-Using-compctl) [completion, scroll listings](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-completion_002c-scroll-listings) [22.7 The zsh/complist Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomplist-Module) [completion, selecting by cursor](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-completion_002c-selecting-by-cursor) [22.7.3 Menu selection](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Menu-selection) [completion, utility](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-completion_002c-utility) [22.8 The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module) [completion, widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-completion_002c-widgets) [19 Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets) [complex commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-complex-commands) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [conditional expression](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-conditional-expression) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [conditional expressions](https://zsh.sourceforge.io/Doc/Release/Conditional-Expressions.html#index-conditional-expressions) [12 Conditional Expressions](https://zsh.sourceforge.io/Doc/Release/Conditional-Expressions.html#Conditional-Expressions) [continue, inside function](https://zsh.sourceforge.io/Doc/Release/Options.html#index-continue_002c-inside-function) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [continuing jobs automatically](https://zsh.sourceforge.io/Doc/Release/Options.html#index-continuing-jobs-automatically) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [continuing loops](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-continuing-loops) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [coprocess](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-coprocess) [6.1 Simple Commands & Pipelines](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Simple-Commands-_0026-Pipelines) [correction, spelling](https://zsh.sourceforge.io/Doc/Release/Options.html#index-correction_002c-spelling) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [csh, compatibility](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-csh_002c-compatibility) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [csh, history style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-csh_002c-history-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [csh, loop style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-csh_002c-loop-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [csh, null command style](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-csh_002c-null-command-style) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [csh, null globbing style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-csh_002c-null-globbing-style) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [csh, quoting style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-csh_002c-quoting-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [csh, redirections with no command](https://zsh.sourceforge.io/Doc/Release/Options.html#index-csh_002c-redirections-with-no-command) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 396,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Concept-Index-html-Concept-Index-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Concept-Index-html-Concept-Index-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Concept-Index-html-Concept-Index-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Concept-Index-html-Concept-Index-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Concept-Index-html-Concept-Index-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 51666,
      "readableText": 47771,
      "none": 47149,
      "readableTextIfPossible": 47149,
      "result": 47771,
      "markdown": 35401
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Introduction.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Introduction.html#Introduction",
    "loadedTime": "2025-05-08T06:51:12.007Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Introduction.html#Introduction",
    "title": "zsh: 2 Introduction",
    "description": "zsh: 2 Introduction",
    "author": null,
    "keywords": "zsh: 2 Introduction",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:08 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-4f0c\"",
      "expires": "Thu, 08 May 2025 06:52:08 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706e2feca4bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 2 Introduction\nZsh is a UNIX command interpreter (shell) usable as an interactive login shell and as a shell script command processor. Of the standard shells, zsh most closely resembles ksh but includes many enhancements. It does not provide compatibility with POSIX or other shells in its default operating mode: see the section Compatibility. \nZsh has command line editing, builtin spelling correction, programmable command completion, shell functions (with autoloading), a history mechanism, and a host of other features. \n2.1 Author\nZsh was originally written by Paul Falstad. Zsh is now maintained by the members of the zsh-workers mailing list <zsh-workers@zsh.org>. The development is currently coordinated by Peter Stephenson <pws@zsh.org>. The coordinator can be contacted at <coordinator@zsh.org>, but matters relating to the code should generally go to the mailing list. \n2.2 Availability\nZsh is available from the following HTTP and anonymous FTP site. \nftp://ftp.zsh.org/pub/\nhttps://www.zsh.org/pub/ \nThe up-to-date source code is available via Git from Sourceforge. See https://sourceforge.net/projects/zsh/ for details. A summary of instructions for the archive can be found at https://zsh.sourceforge.io/. \n2.3 Mailing Lists\nZsh has several mailing lists: \n<zsh-announce@zsh.org> \nAnnouncements about releases, major changes in the shell and the monthly posting of the Zsh FAQ. (moderated) \n<zsh-users@zsh.org> \nUser discussions. \n<zsh-workers@zsh.org> \nHacking, development, bug reports and patches. \n<zsh-security@zsh.org> \nPrivate mailing list (the general public cannot subscribe to it) for discussing bug reports with security implications, i.e., potential vulnerabilities. \nIf you find a security problem in zsh itself, please mail this address. \nTo subscribe or unsubscribe, send mail to the associated administrative address for the mailing list. \n<zsh-announce-subscribe@zsh.org> <zsh-users-subscribe@zsh.org> <zsh-workers-subscribe@zsh.org> <zsh-announce-unsubscribe@zsh.org> <zsh-users-unsubscribe@zsh.org> <zsh-workers-unsubscribe@zsh.org> \nYOU ONLY NEED TO JOIN ONE OF THE MAILING LISTS AS THEY ARE NESTED. All submissions to zsh-announce are automatically forwarded to zsh-users. All submissions to zsh-users are automatically forwarded to zsh-workers. \nIf you have problems subscribing/unsubscribing to any of the mailing lists, send mail to <listmaster@zsh.org>. \nThe mailing lists are archived; the archives can be accessed via the administrative addresses listed above. There is also a hypertext archive available at https://www.zsh.org/mla/. \n2.4 The Zsh FAQ\nZsh has a list of Frequently Asked Questions (FAQ), maintained by Peter Stephenson <pws@zsh.org>. It is regularly posted to the newsgroup comp.unix.shell and the zsh-announce mailing list. The latest version can be found at any of the Zsh FTP sites, or at https://www.zsh.org/FAQ/. The contact address for FAQ-related matters is <faqmaster@zsh.org>. \n2.5 The Zsh Web Page\nZsh has a web page which is located at https://www.zsh.org/. The contact address for web-related matters is <webmaster@zsh.org>. \n2.6 The Zsh Userguide\nA userguide is currently in preparation. It is intended to complement the manual, with explanations and hints on issues where the manual can be cabbalistic, hierographic, or downright mystifying (for example, the word ‘hierographic’ does not exist). It can be viewed in its current state at https://zsh.sourceforge.io/Guide/. At the time of writing, chapters dealing with startup files and their contents and the new completion system were essentially complete. \n2.7 See Also\nsh(1), csh(1), tcsh(1), rc(1), bash(1), ksh(1) \nIEEE Standard for information Technology - Portable Operating System Interface (POSIX) - Part 2: Shell and Utilities, IEEE Inc, 1993, ISBN 1-55937-255-9. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Introduction-html-Introduction-qa5jn.html",
  "markdown": "# zsh: 2 Introduction\n\nZsh is a UNIX command interpreter (shell) usable as an interactive login shell and as a shell script command processor. Of the standard shells, zsh most closely resembles ksh but includes many enhancements. It does not provide compatibility with POSIX or other shells in its default operating mode: see the section [Compatibility](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Compatibility).\n\nZsh has command line editing, builtin spelling correction, programmable command completion, shell functions (with autoloading), a history mechanism, and a host of other features.\n\n* * *\n\n## 2.1 Author\n\nZsh was originally written by Paul Falstad. Zsh is now maintained by the members of the zsh-workers mailing list <zsh-workers@zsh.org>. The development is currently coordinated by Peter Stephenson <pws@zsh.org>. The coordinator can be contacted at <coordinator@zsh.org>, but matters relating to the code should generally go to the mailing list.\n\n* * *\n\n## 2.2 Availability\n\nZsh is available from the following HTTP and anonymous FTP site.\n\n[ftp://ftp.zsh.org/pub/](ftp://ftp.zsh.org/pub/)  \n[https://www.zsh.org/pub/](https://www.zsh.org/pub/)\n\nThe up-to-date source code is available via Git from Sourceforge. See [https://sourceforge.net/projects/zsh/](https://sourceforge.net/projects/zsh/) for details. A summary of instructions for the archive can be found at [https://zsh.sourceforge.io/](https://zsh.sourceforge.io/).\n\n* * *\n\n## 2.3 Mailing Lists\n\nZsh has several mailing lists:\n\n<zsh-announce@zsh.org>\n\nAnnouncements about releases, major changes in the shell and the monthly posting of the Zsh FAQ. (moderated)\n\n<zsh-users@zsh.org>\n\nUser discussions.\n\n<zsh-workers@zsh.org>\n\nHacking, development, bug reports and patches.\n\n<zsh-security@zsh.org>\n\nPrivate mailing list (the general public cannot subscribe to it) for discussing bug reports with security implications, i.e., potential vulnerabilities.\n\nIf you find a security problem in zsh itself, please mail this address.\n\nTo subscribe or unsubscribe, send mail to the associated administrative address for the mailing list.\n\n<zsh-announce-subscribe@zsh.org>\n\n<zsh-users-subscribe@zsh.org>\n\n<zsh-workers-subscribe@zsh.org>\n\n<zsh-announce-unsubscribe@zsh.org>\n\n<zsh-users-unsubscribe@zsh.org>\n\n<zsh-workers-unsubscribe@zsh.org>\n\nYOU ONLY NEED TO JOIN ONE OF THE MAILING LISTS AS THEY ARE NESTED. All submissions to zsh-announce are automatically forwarded to zsh-users. All submissions to zsh-users are automatically forwarded to zsh-workers.\n\nIf you have problems subscribing/unsubscribing to any of the mailing lists, send mail to <listmaster@zsh.org>.\n\nThe mailing lists are archived; the archives can be accessed via the administrative addresses listed above. There is also a hypertext archive available at [https://www.zsh.org/mla/](https://www.zsh.org/mla/).\n\n* * *\n\n## 2.4 The Zsh FAQ\n\nZsh has a list of Frequently Asked Questions (FAQ), maintained by Peter Stephenson <pws@zsh.org>. It is regularly posted to the newsgroup comp.unix.shell and the zsh-announce mailing list. The latest version can be found at any of the Zsh FTP sites, or at [https://www.zsh.org/FAQ/](https://www.zsh.org/FAQ/). The contact address for FAQ-related matters is <faqmaster@zsh.org>.\n\n* * *\n\n## 2.5 The Zsh Web Page\n\nZsh has a web page which is located at [https://www.zsh.org/](https://www.zsh.org/). The contact address for web-related matters is <webmaster@zsh.org>.\n\n* * *\n\n## 2.6 The Zsh Userguide\n\nA userguide is currently in preparation. It is intended to complement the manual, with explanations and hints on issues where the manual can be cabbalistic, hierographic, or downright mystifying (for example, the word ‘hierographic’ does not exist). It can be viewed in its current state at [https://zsh.sourceforge.io/Guide/](https://zsh.sourceforge.io/Guide/). At the time of writing, chapters dealing with startup files and their contents and the new completion system were essentially complete.\n\n* * *\n\n## 2.7 See Also\n\nsh(1), csh(1), tcsh(1), rc(1), bash(1), ksh(1)\n\nIEEE Standard for information Technology - Portable Operating System Interface (POSIX) - Part 2: Shell and Utilities, IEEE Inc, 1993, ISBN 1-55937-255-9.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 117,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Introduction-html-Introduction-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Introduction-html-Introduction-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Introduction-html-Introduction-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Introduction-html-Introduction-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Introduction-html-Introduction-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 5190,
      "readableText": 6150,
      "none": 18697,
      "readableTextIfPossible": 18697,
      "result": 6150,
      "markdown": 4361
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Parameters.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters",
    "loadedTime": "2025-05-08T06:51:14.128Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters",
    "title": "zsh: 15 Parameters",
    "description": "zsh: 15 Parameters",
    "author": null,
    "keywords": "zsh: 15 Parameters",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:11 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-1a648\"",
      "expires": "Thu, 08 May 2025 06:52:11 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706f29b3e4bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 15 Parameters\n15.1 Description\nA parameter has a name, a value, and a number of attributes. A name may be any sequence of alphanumeric characters and underscores, or the single characters ‘*’, ‘@’, ‘#’, ‘?’, ‘-’, ‘$’, or ‘!’. A parameter whose name begins with an alphanumeric or underscore is also referred to as a variable. \nThe attributes of a parameter determine the type of its value, often referred to as the parameter type or variable type, and also control other processing that may be applied to the value when it is referenced. The value type may be a scalar (a string, an integer, or a floating point number), an array (indexed numerically), or an associative array (an unordered set of name-value pairs, indexed by name, also referred to as a hash). \nNamed scalar parameters may have the exported, -x, attribute, to copy them into the process environment, which is then passed from the shell to any new processes that it starts. Exported parameters are called environment variables. The shell also imports environment variables at startup time and automatically marks the corresponding parameters as exported. Some environment variables are not imported for reasons of security or because they would interfere with the correct operation of other shell features. \nParameters may also be special, that is, they have a predetermined meaning to the shell. Special parameters cannot have their type changed or their readonly attribute turned off, and if a special parameter is unset, then later recreated, the special properties will be retained. \nTo declare the type of a parameter, or to assign a string or numeric value to a scalar parameter, use the typeset builtin. \nThe value of a scalar parameter may also be assigned by writing: \nname=value \nIn scalar assignment, value is expanded as a single string, in which the elements of arrays are joined together; filename expansion is not performed unless the option GLOB_ASSIGN is set. \nWhen the integer attribute, -i, or a floating point attribute, -E or -F, is set for name, the value is subject to arithmetic evaluation. Furthermore, by replacing ‘=’ with ‘+=’, a parameter can be incremented or appended to. See Array Parameters and Arithmetic Evaluation for additional forms of assignment. \nNote that assignment may implicitly change the attributes of a parameter. For example, assigning a number to a variable in arithmetic evaluation may change its type to integer or float, and with GLOB_ASSIGN assigning a pattern to a variable may change its type to an array. \nTo reference the value of a parameter, write ‘$name’ or ‘${name}’. See Parameter Expansion for complete details. That section also explains the effect of the difference between scalar and array assignment on parameter expansion. \n15.2 Array Parameters\nTo assign an array value, write one of: \nset -A name value ... \nname=(value ...) \nname=([key]=value ...) \nIf no parameter name exists, an ordinary array parameter is created. If the parameter name exists and is a scalar, it is replaced by a new array. \nIn the third form, key is an expression that will be evaluated in arithmetic context (in its simplest form, an integer) that gives the index of the element to be assigned with value. In this form any elements not explicitly mentioned that come before the largest index to which a value is assigned are assigned an empty string. The indices may be in any order. Note that this syntax is strict: [ and ]= must not be quoted, and key may not consist of the unquoted string ]=, but is otherwise treated as a simple string. The enhanced forms of subscript expression that may be used when directly subscripting a variable name, described in the section ‘Array Subscripts’ below, are not available. \nThe syntaxes with and without the explicit key may be mixed. An implicit key is deduced by incrementing the index from the previously assigned element. Note that it is not treated as an error if latter assignments in this form overwrite earlier assignments. \nFor example, assuming the option KSH_ARRAYS is not set, the following: \narray=(one [3]=three four)\ncauses the array variable array to contain four elements one, an empty string, three and four, in that order. \nIn the forms where only value is specified, full command line expansion is performed. \nIn the [key]=value form, both key and value undergo all forms of expansion allowed for single word shell expansions (this does not include filename generation); these are as performed by the parameter expansion flag (e) as described in Parameter Expansion. Nested parentheses may surround value and are included as part of the value, which is joined into a plain string; this differs from ksh which allows the values themselves to be arrays. A future version of zsh may support that. To cause the brackets to be interpreted as a character class for filename generation, and therefore to treat the resulting list of files as a set of values, quote the equal sign using any form of quoting. Example: \nname=([a-z]’=’*) \nTo append to an array without changing the existing values, use one of the following: \nname+=(value ...) \nname+=([key]=value ...) \nIn the second form key may specify an existing index as well as an index off the end of the old array; any existing value is overwritten by value. Also, it is possible to use [key]+=value to append to the existing value at that index. \nWithin the parentheses on the right hand side of either form of the assignment, newlines and semicolons are treated the same as white space, separating individual values. Any consecutive sequence of such characters has the same effect. \nOrdinary array parameters may also be explicitly declared with: \ntypeset -a name \nAssociative arrays must be declared before assignment, by using: \ntypeset -A name \nWhen name refers to an associative array, the list in an assignment is interpreted as alternating keys and values: \nset -A name key value ... \nname=(key value ...) \nname=([key]=value ...) \nNote that only one of the two syntaxes above may be used in any given assignment; the forms may not be mixed. This is unlike the case of numerically indexed arrays. \nEvery key must have a value in this case. Note that this assigns to the entire array, deleting any elements that do not appear in the list. The append syntax may also be used with an associative array: \nname+=(key value ...) \nname+=([key]=value ...) \nThis adds a new key/value pair if the key is not already present, and replaces the value for the existing key if it is. In the second form it is also possible to use [key]+=value to append to the existing value at that key. Expansion is performed identically to the corresponding forms for normal arrays, as described above. \nTo create an empty array (including associative arrays), use one of: \nset -A name \nname=() \n15.2.1 Array Subscripts\nIndividual elements of an array may be selected using a subscript. A subscript of the form ‘[exp]’ selects the single element exp, where exp is an arithmetic expression which will be subject to arithmetic expansion as if it were surrounded by ‘$((...))’. The elements are numbered beginning with 1, unless the KSH_ARRAYS option is set in which case they are numbered from zero. \nSubscripts may be used inside braces used to delimit a parameter name, thus ‘${foo[2]}’ is equivalent to ‘$foo[2]’. If the KSH_ARRAYS option is set, the braced form is the only one that works, as bracketed expressions otherwise are not treated as subscripts. \nIf the KSH_ARRAYS option is not set, then by default accesses to an array element with a subscript that evaluates to zero return an empty string, while an attempt to write such an element is treated as an error. For backward compatibility the KSH_ZERO_SUBSCRIPT option can be set to cause subscript values 0 and 1 to be equivalent; see the description of the option in Description of Options. \nThe same subscripting syntax is used for associative arrays, except that no arithmetic expansion is applied to exp. However, the parsing rules for arithmetic expressions still apply, which affects the way that certain special characters must be protected from interpretation. See Subscript Parsing below for details. \nA subscript of the form ‘[*]’ or ‘[@]’ evaluates to all elements of an array; there is no difference between the two except when they appear within double quotes. ‘\"$foo[*]\"’ evaluates to ‘\"$foo[1] $foo[2] ...\"’, whereas ‘\"$foo[@]\"’ evaluates to ‘\"$foo[1]\" \"$foo[2]\" ...’. For associative arrays, ‘[*]’ or ‘[@]’ evaluate to all the values, in no particular order. Note that this does not substitute the keys; see the documentation for the ‘k’ flag under Parameter Expansion for complete details. When an array parameter is referenced as ‘$name’ (with no subscript) it evaluates to ‘$name[*]’, unless the KSH_ARRAYS option is set in which case it evaluates to ‘${name[0]}’ (for an associative array, this means the value of the key ‘0’, which may not exist even if there are values for other keys). \nA subscript of the form ‘[exp1,exp2]’ selects all elements in the range exp1 to exp2, inclusive. (Associative arrays are unordered, and so do not support ranges.) If one of the subscripts evaluates to a negative number, say -n, then the nth element from the end of the array is used. Thus ‘$foo[-3]’ is the third element from the end of the array foo, and ‘$foo[1,-1]’ is the same as ‘$foo[*]’. \nSubscripting may also be performed on non-array values, in which case the subscripts specify a substring to be extracted. For example, if FOO is set to ‘foobar’, then ‘echo $FOO[2,5]’ prints ‘ooba’. Note that some forms of subscripting described below perform pattern matching, and in that case the substring extends from the start of the match of the first subscript to the end of the match of the second subscript. For example, \nstring=\"abcdefghijklm\"\nprint ${string[(r)d?,(r)h?]}\nprints ‘defghi’. This is an obvious generalisation of the rule for single-character matches. For a single subscript, only a single character is referenced (not the range of characters covered by the match). \nNote that in substring operations the second subscript is handled differently by the r and R subscript flags: the former takes the shortest match as the length and the latter the longest match. Hence in the former case a * at the end is redundant while in the latter case it matches the whole remainder of the string. This does not affect the result of the single subscript case as here the length of the match is irrelevant. \n15.2.2 Array Element Assignment\nA subscript may be used on the left side of an assignment like so: \nname[exp]=value \nIn this form of assignment the element or range specified by exp is replaced by the expression on the right side. An array (but not an associative array) may be created by assignment to a range or element. Arrays do not nest, so assigning a parenthesized list of values to an element or range changes the number of elements in the array, shifting the other elements to accommodate the new values. (This is not supported for associative arrays.) \nThis syntax also works as an argument to the typeset command: \ntypeset \"name[exp]\"=value \nThe value may not be a parenthesized list in this case; only single-element assignments may be made with typeset. Note that quotes are necessary in this case to prevent the brackets from being interpreted as filename generation operators. The noglob precommand modifier could be used instead. \nTo delete an element of an ordinary array, assign ‘()’ to that element. To delete an element of an associative array, use the unset command: \nunset \"name[exp]\" \n15.2.3 Subscript Flags\nIf the opening bracket, or the comma in a range, in any subscript expression is directly followed by an opening parenthesis, the string up to the matching closing one is considered to be a list of flags, as in ‘name[(flags)exp]’. \nThe flags s, n and b take an argument; the delimiter is shown below as ‘:’, but any character, or the matching pairs ‘(...)’, ‘{...}’, ‘[...]’, or ‘<...>’, may be used, but note that ‘<...>’ can only be used if the subscript is inside a double quoted expression or a parameter substitution enclosed in braces as otherwise the expression is interpreted as a redirection. \nThe flags currently understood are: \nw \nIf the parameter subscripted is a scalar then this flag makes subscripting work on words instead of characters. The default word separator is whitespace. When combined with the i or I flag, the effect is to produce the index of the first character of the first/last word which matches the given pattern; note that a failed match in this case always yields 0. \ns:string: \nThis gives the string that separates words (for use with the w flag). The delimiter character : is arbitrary; see above. \np \nRecognize the same escape sequences as the print builtin in the string argument of a subsequent ‘s’ flag. \nf \nIf the parameter subscripted is a scalar then this flag makes subscripting work on lines instead of characters, i.e. with elements separated by newlines. This is a shorthand for ‘pws:\\n:’. \nr \nReverse subscripting: if this flag is given, the exp is taken as a pattern and the result is the first matching array element, substring or word (if the parameter is an array, if it is a scalar, or if it is a scalar and the ‘w’ flag is given, respectively). The subscript used is the number of the matching element, so that pairs of subscripts such as ‘$foo[(r)??,3]’ and ‘$foo[(r)??,(r)f*]’ are possible if the parameter is not an associative array. If the parameter is an associative array, only the value part of each pair is compared to the pattern, and the result is that value. \nIf a search through an ordinary array failed, the search sets the subscript to one past the end of the array, and hence ${array[(r)pattern]} will substitute the empty string. Thus the success of a search can be tested by using the (i) flag, for example (assuming the option KSH_ARRAYS is not in effect): \n[[ ${array[(i)pattern]} -le ${#array} ]]\nIf KSH_ARRAYS is in effect, the -le should be replaced by -lt. \nR \nLike ‘r’, but gives the last match. For associative arrays, gives all possible matches. May be used for assigning to ordinary array elements, but not for assigning to associative arrays. On failure, for normal arrays this has the effect of returning the element corresponding to subscript 0; this is empty unless one of the options KSH_ARRAYS or KSH_ZERO_SUBSCRIPT is in effect. \nNote that in subscripts with both ‘r’ and ‘R’ pattern characters are active even if they were substituted for a parameter (regardless of the setting of GLOB_SUBST which controls this feature in normal pattern matching). The flag ‘e’ can be added to inhibit pattern matching. As this flag does not inhibit other forms of substitution, care is still required; using a parameter to hold the key has the desired effect: \nkey2='original key'\nprint ${array[(Re)$key2]}\ni \nLike ‘r’, but gives the index of the match instead; this may not be combined with a second argument. On the left side of an assignment, behaves like ‘r’. For associative arrays, the key part of each pair is compared to the pattern, and the first matching key found is the result. On failure substitutes the length of the array plus one, as discussed under the description of ‘r’, or the empty string for an associative array. \nNote: Although ‘i’ may be applied to a scalar substitution to find the offset of a substring, the results are likely to be misleading when searching within substitutions that yield an empty string, or when searching for the empty substring. \nI \nLike ‘i’, but gives the index of the last match, or all possible matching keys in an associative array. On failure substitutes 0, or the empty string for an associative array. This flag is best when testing for values or keys that do not exist. \nNote: If the option KSH_ARRAYS is in effect and no match is found, the result is indistinguishable from the case when the first element of the array matches. \nk \nIf used in a subscript on an associative array, this flag causes the keys to be interpreted as patterns, and returns the value for the first key found where exp is matched by the key. Note this could be any such key as no ordering of associative arrays is defined. This flag does not work on the left side of an assignment to an associative array element. If used on another type of parameter, this behaves like ‘r’. \nK \nOn an associative array this is like ‘k’ but returns all values where exp is matched by the keys. On other types of parameters this has the same effect as ‘R’. \nn:expr: \nIf combined with ‘r’, ‘R’, ‘i’ or ‘I’, makes them give the nth or nth last match (if expr evaluates to n). This flag is ignored when the array is associative. The delimiter character : is arbitrary; see above. \nb:expr: \nIf combined with ‘r’, ‘R’, ‘i’ or ‘I’, makes them begin at the nth or nth last element, word, or character (if expr evaluates to n). This flag is ignored when the array is associative. The delimiter character : is arbitrary; see above. \ne \nThis flag causes any pattern matching that would be performed on the subscript to use plain string matching instead. Hence ‘${array[(re)*]}’ matches only the array element whose value is *. Note that other forms of substitution such as parameter substitution are not inhibited. \nThis flag can also be used to force * or @ to be interpreted as a single key rather than as a reference to all values. It may be used for either purpose on the left side of an assignment. \nSee Parameter Expansion Flags (Parameter Expansion) for additional ways to manipulate the results of array subscripting. \n15.2.4 Subscript Parsing\nThis discussion applies mainly to associative array key strings and to patterns used for reverse subscripting (the ‘r’, ‘R’, ‘i’, etc. flags), but it may also affect parameter substitutions that appear as part of an arithmetic expression in an ordinary subscript. \nTo avoid subscript parsing limitations in assignments to associative array elements, use the append syntax: \naa+=('key with \"*strange*\" characters' 'value string')\nThe basic rule to remember when writing a subscript expression is that all text between the opening ‘[’ and the closing ‘]’ is interpreted as if it were in double quotes (Quoting). However, unlike double quotes which normally cannot nest, subscript expressions may appear inside double-quoted strings or inside other subscript expressions (or both!), so the rules have two important differences. \nThe first difference is that brackets (‘[’ and ‘]’) must appear as balanced pairs in a subscript expression unless they are preceded by a backslash (‘\\’). Therefore, within a subscript expression (and unlike true double-quoting) the sequence ‘\\[’ becomes ‘[’, and similarly ‘\\]’ becomes ‘]’. This applies even in cases where a backslash is not normally required; for example, the pattern ‘[^[]’ (to match any character other than an open bracket) should be written ‘[^\\[]’ in a reverse-subscript pattern. However, note that ‘\\[^\\[\\]’ and even ‘\\[^[]’ mean the same thing, because backslashes are always stripped when they appear before brackets! \nThe same rule applies to parentheses (‘(’ and ‘)’) and braces (‘{’ and ‘}’): they must appear either in balanced pairs or preceded by a backslash, and backslashes that protect parentheses or braces are removed during parsing. This is because parameter expansions may be surrounded by balanced braces, and subscript flags are introduced by balanced parentheses. \nThe second difference is that a double-quote (‘\"’) may appear as part of a subscript expression without being preceded by a backslash, and therefore that the two characters ‘\\\"’ remain as two characters in the subscript (in true double-quoting, ‘\\\"’ becomes ‘\"’). However, because of the standard shell quoting rules, any double-quotes that appear must occur in balanced pairs unless preceded by a backslash. This makes it more difficult to write a subscript expression that contains an odd number of double-quote characters, but the reason for this difference is so that when a subscript expression appears inside true double-quotes, one can still write ‘\\\"’ (rather than ‘\\\\\\\"’) for ‘\"’. \nTo use an odd number of double quotes as a key in an assignment, use the typeset builtin and an enclosing pair of double quotes; to refer to the value of that key, again use double quotes: \ntypeset -A aa\ntypeset \"aa[one\\\"two\\\"three\\\"quotes]\"=QQQ\nprint \"$aa[one\\\"two\\\"three\\\"quotes]\"\nIt is important to note that the quoting rules do not change when a parameter expansion with a subscript is nested inside another subscript expression. That is, it is not necessary to use additional backslashes within the inner subscript expression; they are removed only once, from the innermost subscript outwards. Parameters are also expanded from the innermost subscript first, as each expansion is encountered left to right in the outer expression. \nA further complication arises from a way in which subscript parsing is not different from double quote parsing. As in true double-quoting, the sequences ‘\\*’, and ‘\\@’ remain as two characters when they appear in a subscript expression. To use a literal ‘*’ or ‘@’ as an associative array key, the ‘e’ flag must be used: \ntypeset -A aa\naa[(e)*]=star\nprint $aa[(e)*]\nA last detail must be considered when reverse subscripting is performed. Parameters appearing in the subscript expression are first expanded and then the complete expression is interpreted as a pattern. This has two effects: first, parameters behave as if GLOB_SUBST were on (and it cannot be turned off); second, backslashes are interpreted twice, once when parsing the array subscript and again when parsing the pattern. In a reverse subscript, it’s necessary to use four backslashes to cause a single backslash to match literally in the pattern. For complex patterns, it is often easiest to assign the desired pattern to a parameter and then refer to that parameter in the subscript, because then the backslashes, brackets, parentheses, etc., are seen only when the complete expression is converted to a pattern. To match the value of a parameter literally in a reverse subscript, rather than as a pattern, use ‘${(q)name}’ (Parameter Expansion) to quote the expanded value. \nNote that the ‘k’ and ‘K’ flags are reverse subscripting for an ordinary array, but are not reverse subscripting for an associative array! (For an associative array, the keys in the array itself are interpreted as patterns by those flags; the subscript is a plain string in that case.) \nOne final note, not directly related to subscripting: the numeric names of positional parameters (Positional Parameters) are parsed specially, so for example ‘$2foo’ is equivalent to ‘${2}foo’. Therefore, to use subscript syntax to extract a substring from a positional parameter, the expansion must be surrounded by braces; for example, ‘${2[3,5]}’ evaluates to the third through fifth characters of the second positional parameter, but ‘$2[3,5]’ is the entire second parameter concatenated with the filename generation pattern ‘[3,5]’. \n15.3 Positional Parameters\nThe positional parameters provide access to the command-line arguments of a shell function, shell script, or the shell itself; see Invocation, and also Functions. The parameter n, where n is a number, is the nth positional parameter. The parameter ‘$0’ is a special case, see Parameters Set By The Shell. \nThe parameters *, @ and argv are arrays containing all the positional parameters; thus ‘$argv[n]’, etc., is equivalent to simply ‘$n’. Note that the options KSH_ARRAYS or KSH_ZERO_SUBSCRIPT apply to these arrays as well, so with either of those options set, ‘${argv[0]}’ is equivalent to ‘$1’ and so on. \nPositional parameters may be changed after the shell or function starts by using the set builtin, by assigning to the argv array, or by direct assignment of the form ‘n=value’ where n is the number of the positional parameter to be changed. This also creates (with empty values) any of the positions from 1 to n that do not already have values. Note that, because the positional parameters form an array, an array assignment of the form ‘n=(value ...)’ is allowed, and has the effect of shifting all the values at positions greater than n by as many positions as necessary to accommodate the new values. \n15.4 Local Parameters\nShell function executions delimit scopes for shell parameters. (Parameters are dynamically scoped.) The typeset builtin, and its alternative forms declare, integer, local and readonly (but not export), can be used to declare a parameter as being local to the innermost scope. \nWhen a parameter is read or assigned to, the innermost existing parameter of that name is used. (That is, the local parameter hides any less-local parameter.) However, assigning to a non-existent parameter, or declaring a new parameter with export, causes it to be created in the outermost scope. \nLocal parameters disappear when their scope ends. unset can be used to delete a parameter while it is still in scope; any outer parameter of the same name remains hidden. \nSpecial parameters may also be made local; they retain their special attributes unless either the existing or the newly-created parameter has the -h (hide) attribute. This may have unexpected effects: there is no default value, so if there is no assignment at the point the variable is made local, it will be set to an empty value (or zero in the case of integers). The following: \ntypeset PATH=/new/directory:$PATH\nis valid for temporarily allowing the shell or programmes called from it to find the programs in /new/directory inside a function. \nNote that the restriction in older versions of zsh that local parameters were never exported has been removed. \n15.5 Parameters Set By The Shell\nIn the parameter lists that follow, the mark ‘<S>’ indicates that the parameter is special. ‘<Z>’ indicates that the parameter does not exist when the shell initializes in sh or ksh emulation mode. \nThe parameters ‘!’, ‘#’, ‘*’, ‘-’, ‘?’, ‘@’, ‘$’, ‘ARGC’, ‘HISTCMD’, ‘LINENO’, ‘PPID’, ‘status’, ‘TTYIDLE’, ‘zsh_eval_context’, ‘ZSH_EVAL_CONTEXT’, and ‘ZSH_SUBSHELL’ are read-only and thus cannot be restored by the user, so they are not output by ‘typeset -p’. This also applies to many read-only parameters loaded from modules. \nThe following parameters are automatically set by the shell: \n! <S> \nThe process ID of the last command started in the background with &, put into the background with the bg builtin, or spawned with coproc. \n# <S> \nThe number of positional parameters in decimal. Note that some confusion may occur with the syntax $#param which substitutes the length of param. Use ${#} to resolve ambiguities. In particular, the sequence ‘$#-...’ in an arithmetic expression is interpreted as the length of the parameter -, q.v. \nARGC <S> <Z> \nSame as #. \n$ <S> \nThe process ID of this shell, set when the shell initializes. Processes forked from the shell without executing a new program, such as command substitutions and commands grouped with (...), are subshells that duplicate the current shell, and thus substitute the same value for $$ as their parent shell. \n- <S> \nFlags supplied to the shell on invocation or by the set or setopt commands. \n* <S> \nAn array containing the positional parameters. \nargv <S> <Z> \nSame as *. Assigning to argv changes the local positional parameters, but argv is not itself a local parameter. Deleting argv with unset in any function deletes it everywhere, although only the innermost positional parameter array is deleted (so * and @ in other scopes are not affected). \n@ <S> \nSame as argv[@], even when argv is not set. \n? <S> \nThe exit status returned by the last command. \n0 <S> \nThe name used to invoke the current shell, or as set by the -c command line option upon invocation. If the FUNCTION_ARGZERO option is set, $0 is set upon entry to a shell function to the name of the function, and upon entry to a sourced script to the name of the script, and reset to its previous value when the function or script returns. \nstatus <S> <Z> \nSame as ?. \npipestatus <S> <Z> \nAn array containing the exit statuses returned by all commands in the last pipeline. \n_ <S> \nThe last argument of the previous command. Also, this parameter is set in the environment of every command executed to the full pathname of the command. \nCPUTYPE \nThe machine type (microprocessor class or machine model), as determined at run time. \nEGID <S> \nThe effective group ID of the shell process. If you have sufficient privileges, you may change the effective group ID of the shell process by assigning to this parameter. Also (assuming sufficient privileges), you may start a single command with a different effective group ID by ‘(EGID=gid; command)’ \nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally. \nEUID <S> \nThe effective user ID of the shell process. If you have sufficient privileges, you may change the effective user ID of the shell process by assigning to this parameter. Also (assuming sufficient privileges), you may start a single command with a different effective user ID by ‘(EUID=uid; command)’ \nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally. \nERRNO <S> \nThe value of errno (see errno(3)) as set by the most recently failed system call. This value is system dependent and is intended for debugging purposes. It is also useful with the zsh/system module which allows the number to be turned into a name or message. \nTo use this parameter, it must first be assigned a value (typically 0 (zero)). It is initially unset for scripting compatibility. \nFUNCNEST <S> \nInteger. If greater than or equal to zero, the maximum nesting depth of shell functions. When it is exceeded, an error is raised at the point where a function is called. The default value is determined when the shell is configured, but is typically 500. Increasing the value increases the danger of a runaway function recursion causing the shell to crash. Setting a negative value turns off the check. \nGID <S> \nThe real group ID of the shell process. If you have sufficient privileges, you may change the group ID of the shell process by assigning to this parameter. Also (assuming sufficient privileges), you may start a single command under a different group ID by ‘(GID=gid; command)’ \nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally. \nHISTCMD \nThe current history event number in an interactive shell, in other words the event number for the command that caused $HISTCMD to be read. If the current history event modifies the history, HISTCMD changes to the new maximum history event number. \nHOST \nThe current hostname. \nLINENO <S> \nThe line number of the current line within the current script, sourced file, or shell function being executed, whichever was started most recently. Note that in the case of shell functions the line number refers to the function as it appeared in the original definition, not necessarily as displayed by the functions builtin. \nLOGNAME \nIf the corresponding variable is not set in the environment of the shell, it is initialized to the login name corresponding to the current login session. This parameter is exported by default but this can be disabled using the typeset builtin. The value is set to the string returned by the getlogin(3) system call if that is available. \nMACHTYPE \nThe machine type (microprocessor class or machine model), as determined at compile time. \nOLDPWD \nThe previous working directory. This is set when the shell initializes and whenever the directory changes. \nOPTARG <S> \nThe value of the last option argument processed by the getopts command. \nOPTIND <S> \nThe index of the last option argument processed by the getopts command. \nOSTYPE \nThe operating system, as determined at compile time. \nPPID <S> \nThe process ID of the parent of the shell, set when the shell initializes. As with $$, the value does not change in subshells created as a duplicate of the current shell. \nPWD \nThe present working directory. This is set when the shell initializes and whenever the directory changes. \nRANDOM <S> \nA pseudo-random integer from 0 to 32767, newly generated each time this parameter is referenced. The random number generator can be seeded by assigning a numeric value to RANDOM. \nThe values of RANDOM form an intentionally-repeatable pseudo-random sequence; subshells that reference RANDOM will result in identical pseudo-random values unless the value of RANDOM is referenced or seeded in the parent shell in between subshell invocations. \nSECONDS <S> \nThe number of seconds since shell invocation. If this parameter is assigned a value, then the value returned upon reference will be the value that was assigned plus the number of seconds since the assignment. \nUnlike other special parameters, the type of the SECONDS parameter can be changed using the typeset command. The type may be changed only to one of the floating point types or back to integer. For example, ‘typeset -F SECONDS’ causes the value to be reported as a floating point number. The value is available to microsecond accuracy, although the shell may show more or fewer digits depending on the use of typeset. See the documentation for the builtin typeset in Shell Builtin Commands for more details. \nSHLVL <S> \nIncremented by one each time a new shell is started. \nsignals \nAn array containing the names of the signals. Note that with the standard zsh numbering of array indices, where the first element has index 1, the signals are offset by 1 from the signal number used by the operating system. For example, on typical Unix-like systems HUP is signal number 1, but is referred to as $signals[2]. This is because of EXIT at position 1 in the array, which is used internally by zsh but is not known to the operating system. \nTRY_BLOCK_ERROR <S> \nIn an always block, indicates whether the preceding list of code caused an error. The value is 1 to indicate an error, 0 otherwise. It may be reset, clearing the error condition. See Complex Commands \nTRY_BLOCK_INTERRUPT <S> \nThis variable works in a similar way to TRY_BLOCK_ERROR, but represents the status of an interrupt from the signal SIGINT, which typically comes from the keyboard when the user types ^C. If set to 0, any such interrupt will be reset; otherwise, the interrupt is propagated after the always block. \nNote that it is possible that an interrupt arrives during the execution of the always block; this interrupt is also propagated. \nTTY \nThe name of the tty associated with the shell, if any. \nTTYIDLE <S> \nThe idle time of the tty associated with the shell in seconds or -1 if there is no such tty. \nUID <S> \nThe real user ID of the shell process. If you have sufficient privileges, you may change the user ID of the shell by assigning to this parameter. Also (assuming sufficient privileges), you may start a single command under a different user ID by ‘(UID=uid; command)’ \nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally. \nUSERNAME <S> \nThe username corresponding to the real user ID of the shell process. If you have sufficient privileges, you may change the username (and also the user ID and group ID) of the shell by assigning to this parameter. Also (assuming sufficient privileges), you may start a single command under a different username (and user ID and group ID) by ‘(USERNAME=username; command)’ \nVENDOR \nThe vendor, as determined at compile time. \nzsh_eval_context <S> <Z> (ZSH_EVAL_CONTEXT <S>) \nAn array (colon-separated list) indicating the context of shell code that is being run. Each time a piece of shell code that is stored within the shell is executed a string is temporarily appended to the array to indicate the type of operation that is being performed. Read in order the array gives an indication of the stack of operations being performed with the most immediate context last. \nNote that the variable does not give information on syntactic context such as pipelines or subshells. Use $ZSH_SUBSHELL to detect subshells. \nThe context is one of the following: \ncmdarg \nCode specified by the -c option to the command line that invoked the shell. \ncmdsubst \nCommand substitution using the ‘...‘ or $(...) construct. \nequalsubst \nFile substitution using the =(...) construct. \neval \nCode executed by the eval builtin. \nevalautofunc \nCode executed with the KSH_AUTOLOAD mechanism in order to define an autoloaded function. \nfc \nCode from the shell history executed by the -e option to the fc builtin. \nfile \nLines of code being read directly from a file, for example by the source builtin. \nfilecode \nLines of code being read from a .zwc file instead of directly from the source file. \nglobqual \nCode executed by the e or + glob qualifier. \nglobsort \nCode executed to order files by the o glob qualifier. \ninsubst \nFile substitution using the <(...) construct. \nloadautofunc \nCode read directly from a file to define an autoloaded function. \noutsubst \nFile substitution using the >(...) construct. \nsched \nCode executed by the sched builtin. \nshfunc \nA shell function. \nstty \nCode passed to stty by the STTY environment variable. Normally this is passed directly to the system’s stty command, so this value is unlikely to be seen in practice. \nstyle \nCode executed as part of a style retrieved by the zstyle builtin from the zsh/zutil module. \ntoplevel \nThe highest execution level of a script or interactive shell. \ntrap \nCode executed as a trap defined by the trap builtin. Traps defined as functions have the context shfunc. As traps are asynchronous they may have a different hierarchy from other code. \nzpty \nCode executed by the zpty builtin from the zsh/zpty module. \nzregexparse-guard \nCode executed as a guard by the zregexparse command from the zsh/zutil module. \nzregexparse-action \nCode executed as an action by the zregexparse command from the zsh/zutil module. \nZSH_ARGZERO \nIf zsh was invoked to run a script, this is the name of the script. Otherwise, it is the name used to invoke the current shell. This is the same as the value of $0 when the POSIX_ARGZERO option is set, but is always available. \nZSH_EXECUTION_STRING \nIf the shell was started with the option -c, this contains the argument passed to the option. Otherwise it is not set. \nZSH_NAME \nExpands to the basename of the command used to invoke this instance of zsh. \nZSH_PATCHLEVEL \nThe output of ‘git describe –tags –long’ for the zsh repository used to build the shell. This is most useful in order to keep track of versions of the shell during development between releases; hence most users should not use it and should instead rely on $ZSH_VERSION. \nzsh_scheduled_events \nSee The zsh/sched Module. \nZSH_SCRIPT \nIf zsh was invoked to run a script, this is the name of the script, otherwise it is unset. \nZSH_SUBSHELL \nReadonly integer. Initially zero, incremented each time the shell forks to create a subshell for executing code. Hence ‘(print $ZSH_SUBSHELL)’ and ‘print $(print $ZSH_SUBSHELL)’ output 1, while ‘( (print $ZSH_SUBSHELL) )’ outputs 2. \nZSH_VERSION \nThe version number of the release of zsh. \n15.6 Parameters Used By The Shell\nThe following parameters are used by the shell. Again, ‘<S>’ indicates that the parameter is special and ‘<Z>’ indicates that the parameter does not exist when the shell initializes in sh or ksh emulation mode. \nIn cases where there are two parameters with an upper- and lowercase form of the same name, such as path and PATH, the lowercase form is an array and the uppercase form is a scalar with the elements of the array joined together by colons. These are similar to tied parameters created via ‘typeset -T’. The normal use for the colon-separated form is for exporting to the environment, while the array form is easier to manipulate within the shell. Note that unsetting either of the pair will unset the other; they retain their special properties when recreated, and recreating one of the pair will recreate the other. \nARGV0 \nIf exported, its value is used as the argv[0] of external commands. Usually used in constructs like ‘ARGV0=emacs nethack’. \nBAUD \nThe rate in bits per second at which data reaches the terminal. The line editor will use this value in order to compensate for a slow terminal by delaying updates to the display until necessary. If the parameter is unset or the value is zero the compensation mechanism is turned off. The parameter is not set by default. \nThis parameter may be profitably set in some circumstances, e.g. for slow modems dialing into a communications server, or on a slow wide area network. It should be set to the baud rate of the slowest part of the link for best performance. \ncdpath <S> <Z> (CDPATH <S>) \nAn array (colon-separated list) of directories specifying the search path for the cd command. \nCOLUMNS <S> \nThe number of columns for this terminal session. Used for printing select lists and for the line editor. \nCORRECT_IGNORE \nIf set, is treated as a pattern during spelling correction. Any potential correction that matches the pattern is ignored. For example, if the value is ‘_*’ then completion functions (which, by convention, have names beginning with ‘_’) will never be offered as spelling corrections. The pattern does not apply to the correction of file names, as applied by the CORRECT_ALL option (so with the example just given files beginning with ‘_’ in the current directory would still be completed). \nCORRECT_IGNORE_FILE \nIf set, is treated as a pattern during spelling correction of file names. Any file name that matches the pattern is never offered as a correction. For example, if the value is ‘.*’ then dot file names will never be offered as spelling corrections. This is useful with the CORRECT_ALL option. \nDIRSTACKSIZE \nThe maximum size of the directory stack, by default there is no limit. If the stack gets larger than this, it will be truncated automatically. This is useful with the AUTO_PUSHD option. \nENV \nIf the ENV environment variable is set when zsh is invoked as sh or ksh, $ENV is sourced after the profile scripts. The value of ENV is subjected to parameter expansion, command substitution, and arithmetic expansion before being interpreted as a pathname. Note that ENV is not used unless the shell is interactive and zsh is emulating sh or ksh. \nFCEDIT \nThe default editor for the fc builtin. If FCEDIT is not set, the parameter EDITOR is used; if that is not set either, a builtin default, usually vi, is used. \nfignore <S> <Z> (FIGNORE <S>) \nAn array (colon separated list) containing the suffixes of files to be ignored during filename completion. However, if completion only generates files with suffixes in this list, then these files are completed anyway. \nfpath <S> <Z> (FPATH <S>) \nAn array (colon separated list) of directories specifying the search path for function definitions. This path is searched when a function with the -u attribute is referenced. If an executable file is found, then it is read and executed in the current environment. \nhistchars <S> \nThree characters used by the shell’s history and lexical analysis mechanism. The first character signals the start of a history expansion (default ‘!’). The second character signals the start of a quick history substitution (default ‘^’). The third character is the comment character (default ‘#’). \nThe characters must be in the ASCII character set; any attempt to set histchars to characters with a locale-dependent meaning will be rejected with an error message. \nHISTCHARS <S> <Z> \nSame as histchars. (Deprecated.) \nHISTFILE \nThe file to save the history in when an interactive shell exits. If unset, the history is not saved. \nHISTORY_IGNORE \nIf set, is treated as a pattern at the time history files are written. Any potential history entry that matches the pattern is skipped. For example, if the value is ‘fc *’ then commands that invoke the interactive history editor are never written to the history file. \nNote that HISTORY_IGNORE defines a single pattern: to specify alternatives use the ‘(first|second|...)’ syntax. \nCompare the HIST_NO_STORE option or the zshaddhistory hook, either of which would prevent such commands from being added to the interactive history at all. If you wish to use HISTORY_IGNORE to stop history being added in the first place, you can define the following hook: \nzshaddhistory() {\n  emulate -L zsh\n  ## uncomment if HISTORY_IGNORE\n  ## should use EXTENDED_GLOB syntax\n  # setopt extendedglob\n  [[ $1 != ${~HISTORY_IGNORE} ]]\n}\nHISTSIZE <S> \nThe maximum number of events stored in the internal history list. If you use the HIST_EXPIRE_DUPS_FIRST option, setting this value larger than the SAVEHIST size will give you the difference as a cushion for saving duplicated history events. \nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally. \nHOME <S> \nThe default argument for the cd command. This is not set automatically by the shell in sh, ksh or csh emulation, but it is typically present in the environment anyway, and if it becomes set it has its usual special behaviour. \nIFS <S> \nInternal field separators (by default space, tab, newline and NUL), that are used to separate words which result from command or parameter expansion and words read by the read builtin. Any characters from the set space, tab and newline that appear in the IFS are called IFS white space. One or more IFS white space characters or one non-IFS white space character together with any adjacent IFS white space character delimit a field. If an IFS white space character appears twice consecutively in the IFS, this character is treated as if it were not an IFS white space character. \nIf the parameter is unset, the default is used. Note this has a different effect from setting the parameter to an empty string. \nKEYBOARD_HACK \nThis variable defines a character to be removed from the end of the command line before interpreting it (interactive shells only). It is intended to fix the problem with keys placed annoyingly close to return and replaces the SUNKEYBOARDHACK option which did this for backquotes only. Should the chosen character be one of singlequote, doublequote or backquote, there must also be an odd number of them on the command line for the last one to be removed. \nFor backward compatibility, if the SUNKEYBOARDHACK option is explicitly set, the value of KEYBOARD_HACK reverts to backquote. If the option is explicitly unset, this variable is set to empty. \nKEYTIMEOUT \nThe time the shell waits, in hundredths of seconds, for another key to be pressed when reading bound multi-character sequences. \nLANG <S> \nThis variable determines the locale category for any category not specifically selected via a variable starting with ‘LC_’. \nLC_ALL <S> \nThis variable overrides the value of the ‘LANG’ variable and the value of any of the other variables starting with ‘LC_’. \nLC_COLLATE <S> \nThis variable determines the locale category for character collation information within ranges in glob brackets and for sorting. \nLC_CTYPE <S> \nThis variable determines the locale category for character handling functions. If the MULTIBYTE option is in effect this variable or LANG should contain a value that reflects the character set in use, even if it is a single-byte character set, unless only the 7-bit subset (ASCII) is used. For example, if the character set is ISO-8859-1, a suitable value might be en_US.iso88591 (certain Linux distributions) or en_US.ISO8859-1 (MacOS). \nLC_MESSAGES <S> \nThis variable determines the language in which messages should be written. Note that zsh does not use message catalogs. \nLC_NUMERIC <S> \nThis variable affects the decimal point character and thousands separator character for the formatted input/output functions and string conversion functions. Note that zsh ignores this setting when parsing floating point mathematical expressions. \nLC_TIME <S> \nThis variable determines the locale category for date and time formatting in prompt escape sequences. \nLINES <S> \nThe number of lines for this terminal session. Used for printing select lists and for the line editor. \nLISTMAX \nIn the line editor, the number of matches to list without asking first. If the value is negative, the list will be shown if it spans at most as many lines as given by the absolute value. If set to zero, the shell asks only if the top of the listing would scroll off the screen. \nMAIL \nIf this parameter is set and mailpath is not set, the shell looks for mail in the specified file. \nMAILCHECK \nThe interval in seconds between checks for new mail. \nmailpath <S> <Z> (MAILPATH <S>) \nAn array (colon-separated list) of filenames to check for new mail. Each filename can be followed by a ‘?’ and a message that will be printed. The message will undergo parameter expansion, command substitution and arithmetic expansion with the variable $_ defined as the name of the file that has changed. The default message is ‘You have new mail’. If an element is a directory instead of a file the shell will recursively check every file in every subdirectory of the element. \nmanpath <S> <Z> (MANPATH <S> <Z>) \nAn array (colon-separated list) whose value is not used by the shell. The manpath array can be useful, however, since setting it also sets MANPATH, and vice versa. \nmatch mbegin mend \nArrays set by the shell when the b globbing flag is used in pattern matches. See the subsection Globbing flags in Filename Generation. \nMATCH MBEGIN MEND \nSet by the shell when the m globbing flag is used in pattern matches. See the subsection Globbing flags in Filename Generation. \nmodule_path <S> <Z> (MODULE_PATH <S>) \nAn array (colon-separated list) of directories that zmodload searches for dynamically loadable modules. This is initialized to a standard pathname, usually ‘/usr/local/lib/zsh/$ZSH_VERSION’. (The ‘/usr/local/lib’ part varies from installation to installation.) For security reasons, any value set in the environment when the shell is started will be ignored. \nThese parameters only exist if the installation supports dynamic module loading. \nNULLCMD <S> \nThe command name to assume if a redirection is specified with no command. Defaults to cat. For sh/ksh behavior, change this to :. For csh-like behavior, unset this parameter; the shell will print an error message if null commands are entered. \npath <S> <Z> (PATH <S>) \nAn array (colon-separated list) of directories to search for commands. When this parameter is set, each directory is scanned and all files found are put in a hash table. \nPOSTEDIT <S> \nThis string is output whenever the line editor exits. It usually contains termcap strings to reset the terminal. \nPROMPT <S> <Z> PROMPT2 <S> <Z> PROMPT3 <S> <Z> PROMPT4 <S> <Z> \nSame as PS1, PS2, PS3 and PS4, respectively. \nprompt <S> <Z> \nSame as PS1. \nPROMPT_EOL_MARK \nWhen the PROMPT_CR and PROMPT_SP options are set, the PROMPT_EOL_MARK parameter can be used to customize how the end of partial lines are shown. This parameter undergoes prompt expansion, with the PROMPT_PERCENT option set. If not set, the default behavior is equivalent to the value ‘%B%S%#%s%b’. \nPS1 <S> \nThe primary prompt string, printed before a command is read. It undergoes a special form of expansion before being displayed; see Prompt Expansion. The default is ‘%m%# ’. \nPS2 <S> \nThe secondary prompt, printed when the shell needs more information to complete a command. It is expanded in the same way as PS1. The default is ‘%_> ’, which displays any shell constructs or quotation marks which are currently being processed. \nPS3 <S> \nSelection prompt used within a select loop. It is expanded in the same way as PS1. The default is ‘?# ’. \nPS4 <S> \nThe execution trace prompt. Default is ‘+%N:%i> ’, which displays the name of the current shell structure and the line number within it. In sh or ksh emulation, the default is ‘+ ’. \npsvar <S> <Z> (PSVAR <S>) \nAn array (colon-separated list) whose elements can be used in PROMPT strings. Setting psvar also sets PSVAR, and vice versa. \nREADNULLCMD <S> \nThe command name to assume if a single input redirection is specified with no command. Defaults to more. \nREPORTMEMORY \nIf nonnegative, commands whose maximum resident set size (roughly speaking, main memory usage) in kilobytes is greater than this value have timing statistics reported. The format used to output statistics is the value of the TIMEFMT parameter, which is the same as for the REPORTTIME variable and the time builtin; note that by default this does not output memory usage. Appending \" max RSS %M\" to the value of TIMEFMT causes it to output the value that triggered the report. If REPORTTIME is also in use, at most a single report is printed for both triggers. This feature requires the getrusage() system call, commonly supported by modern Unix-like systems. \nREPORTTIME \nIf nonnegative, commands whose combined user and system execution times (measured in seconds) are greater than this value have timing statistics printed for them. Output is suppressed for commands executed within the line editor, including completion; commands explicitly marked with the time keyword still cause the summary to be printed in this case. \nREPLY \nThis parameter is reserved by convention to pass string values between shell scripts and shell builtins in situations where a function call or redirection are impossible or undesirable. The read builtin and the select complex command may set REPLY, and filename generation both sets and examines its value when evaluating certain expressions. Some modules also employ REPLY for similar purposes. \nreply \nAs REPLY, but for array values rather than strings. \nRPROMPT <S> RPS1 <S> \nThis prompt is displayed on the right-hand side of the screen when the primary prompt is being displayed on the left. This does not work if the SINGLE_LINE_ZLE option is set. It is expanded in the same way as PS1. \nRPROMPT2 <S> RPS2 <S> \nThis prompt is displayed on the right-hand side of the screen when the secondary prompt is being displayed on the left. This does not work if the SINGLE_LINE_ZLE option is set. It is expanded in the same way as PS2. \nSAVEHIST \nThe maximum number of history events to save in the history file. \nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally. \nSPROMPT <S> \nThe prompt used for spelling correction. The sequence ‘%R’ expands to the string which presumably needs spelling correction, and ‘%r’ expands to the proposed correction. All other prompt escapes are also allowed. \nThe actions available at the prompt are [nyae]: \nn (‘no’) (default) \nDiscard the correction and run the command. \ny (‘yes’) \nMake the correction and run the command. \na (‘abort’) \nDiscard the entire command line without running it. \ne (‘edit’) \nResume editing the command line. \nSTTY \nIf this parameter is set in a command’s environment, the shell runs the stty command with the value of this parameter as arguments in order to set up the terminal before executing the command. The modes apply only to the command, and are reset when it finishes or is suspended. If the command is suspended and continued later with the fg or wait builtins it will see the modes specified by STTY, as if it were not suspended. This (intentionally) does not apply if the command is continued via ‘kill -CONT’. STTY is ignored if the command is run in the background, or if it is in the environment of the shell but not explicitly assigned to in the input line. This avoids running stty at every external command by accidentally exporting it. Also note that STTY should not be used for window size specifications; these will not be local to the command. \nIf the parameter is set and empty, all of the above applies except that stty is not run. This can be useful as a way to freeze the tty around a single command, blocking its changes to tty settings, similar to the ttyctl builtin. \nTERM <S> \nThe type of terminal in use. This is used when looking up termcap sequences. An assignment to TERM causes zsh to re-initialize the terminal, even if the value does not change (e.g., ‘TERM=$TERM’). It is necessary to make such an assignment upon any change to the terminal definition database or terminal type in order for the new settings to take effect. \nTERMINFO <S> \nA reference to your terminfo database, used by the ‘terminfo’ library when the system has it; see terminfo(5). If set, this causes the shell to reinitialise the terminal, making the workaround ‘TERM=$TERM’ unnecessary. \nTERMINFO_DIRS <S> \nA colon-seprarated list of terminfo databases, used by the ‘terminfo’ library when the system has it; see terminfo(5). This variable is only used by certain terminal libraries, in particular ncurses; see terminfo(5) to check support on your system. If set, this causes the shell to reinitialise the terminal, making the workaround ‘TERM=$TERM’ unnecessary. Note that unlike other colon-separated arrays this is not tied to a zsh array. \nTIMEFMT \nThe format of process time reports with the time keyword. The default is ‘%J %U user %S system %P cpu %*E total’. Recognizes the following escape sequences, although not all may be available on all systems, and some that are available may not be useful: \n%% \nA ‘%’. \n%U \nCPU seconds spent in user mode. \n%S \nCPU seconds spent in kernel mode. \n%E \nElapsed time in seconds. \n%P \nThe CPU percentage, computed as 100*(%U+%S)/%E. \n%W \nNumber of times the process was swapped. \n%X \nThe average amount in (shared) text space used in kilobytes. \n%D \nThe average amount in (unshared) data/stack space used in kilobytes. \n%K \nThe total space used (%X+%D) in kilobytes. \n%M \nThe maximum memory the process had in use at any time in kilobytes. \n%F \nThe number of major page faults (page needed to be brought from disk). \n%R \nThe number of minor page faults. \n%I \nThe number of input operations. \n%O \nThe number of output operations. \n%r \nThe number of socket messages received. \n%s \nThe number of socket messages sent. \n%k \nThe number of signals received. \n%w \nNumber of voluntary context switches (waits). \n%c \nNumber of involuntary context switches. \n%J \nThe name of this job. \nA star may be inserted between the percent sign and flags printing time (e.g., ‘%*E’); this causes the time to be printed in ‘hh:mm:ss.ttt’ format (hours and minutes are only printed if they are not zero). Alternatively, ‘m’ or ‘u’ may be used (e.g., ‘%mE’) to produce time output in milliseconds or microseconds, respectively. \nTMOUT \nIf this parameter is nonzero, the shell will receive an ALRM signal if a command is not entered within the specified number of seconds after issuing a prompt. If there is a trap on SIGALRM, it will be executed and a new alarm is scheduled using the value of the TMOUT parameter after executing the trap. If no trap is set, and the idle time of the terminal is not less than the value of the TMOUT parameter, zsh terminates. Otherwise a new alarm is scheduled to TMOUT seconds after the last keypress. \nTMPPREFIX \nA pathname prefix which the shell will use for all temporary files. Note that this should include an initial part for the file name as well as any directory names. The default is ‘/tmp/zsh’. \nTMPSUFFIX \nA filename suffix which the shell will use for temporary files created by process substitutions (e.g., ‘=(list)’). Note that the value should include a leading dot ‘.’ if intended to be interpreted as a file extension. The default is not to append any suffix, thus this parameter should be assigned only when needed and then unset again. \nWORDCHARS <S> \nA list of non-alphanumeric characters considered part of a word by the line editor. \nZBEEP \nIf set, this gives a string of characters, which can use all the same codes as the bindkey command as described in The zsh/zle Module, that will be output to the terminal instead of beeping. This may have a visible instead of an audible effect; for example, the string ‘\\e[?5h\\e[?5l’ on a vt100 or xterm will have the effect of flashing reverse video on and off (if you usually use reverse video, you should use the string ‘\\e[?5l\\e[?5h’ instead). This takes precedence over the NOBEEP option. \nZDOTDIR \nThe directory to search for shell startup files (.zshrc, etc), if not $HOME. \nzle_bracketed_paste \nMany terminal emulators have a feature that allows applications to identify when text is pasted into the terminal rather than being typed normally. For ZLE, this means that special characters such as tabs and newlines can be inserted instead of invoking editor commands. Furthermore, pasted text forms a single undo event and if the region is active, pasted text will replace the region. \nThis two-element array contains the terminal escape sequences for enabling and disabling the feature. These escape sequences are used to enable bracketed paste when ZLE is active and disable it at other times. Unsetting the parameter has the effect of ensuring that bracketed paste remains disabled. \nzle_highlight \nAn array describing contexts in which ZLE should highlight the input text. See Character Highlighting. \nZLE_LINE_ABORTED \nThis parameter is set by the line editor when an error occurs. It contains the line that was being edited at the point of the error. ‘print -zr – $ZLE_LINE_ABORTED’ can be used to recover the line. Only the most recent line of this kind is remembered. \nZLE_REMOVE_SUFFIX_CHARS ZLE_SPACE_SUFFIX_CHARS \nThese parameters are used by the line editor. In certain circumstances suffixes (typically space or slash) added by the completion system will be removed automatically, either because the next editing command was not an insertable character, or because the character was marked as requiring the suffix to be removed. \nThese variables can contain the sets of characters that will cause the suffix to be removed. If ZLE_REMOVE_SUFFIX_CHARS is set, those characters will cause the suffix to be removed; if ZLE_SPACE_SUFFIX_CHARS is set, those characters will cause the suffix to be removed and replaced by a space. \nIf ZLE_REMOVE_SUFFIX_CHARS is not set, the default behaviour is equivalent to: \nZLE_REMOVE_SUFFIX_CHARS=$' \\t\\n;&|'\nIf ZLE_REMOVE_SUFFIX_CHARS is set but is empty, no characters have this behaviour. ZLE_SPACE_SUFFIX_CHARS takes precedence, so that the following: \nZLE_SPACE_SUFFIX_CHARS=$'&|'\ncauses the characters ‘&’ and ‘|’ to remove the suffix but to replace it with a space. \nTo illustrate the difference, suppose that the option AUTO_REMOVE_SLASH is in effect and the directory DIR has just been completed, with an appended /, following which the user types ‘&’. The default result is ‘DIR&’. With ZLE_REMOVE_SUFFIX_CHARS set but without including ‘&’ the result is ‘DIR/&’. With ZLE_SPACE_SUFFIX_CHARS set to include ‘&’ the result is ‘DIR &’. \nNote that certain completions may provide their own suffix removal or replacement behaviour which overrides the values described here. See the completion system documentation in Completion System. \nZLE_RPROMPT_INDENT <S> \nIf set, used to give the indentation between the right hand side of the right prompt in the line editor as given by RPS1 or RPROMPT and the right hand side of the screen. If not set, the value 1 is used. \nTypically this will be used to set the value to 0 so that the prompt appears flush with the right hand side of the screen. This is not the default as many terminals do not handle this correctly, in particular when the prompt appears at the extreme bottom right of the screen. Recent virtual terminals are more likely to handle this case correctly. Some experimentation is necessary. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Parameters-html-Parameters-f3pxul.html",
  "markdown": "# zsh: 15 Parameters\n\n* * *\n\n## 15.1 Description\n\nA parameter has a name, a value, and a number of attributes. A name may be any sequence of alphanumeric characters and underscores, or the single characters ‘\\*’, ‘@’, ‘#’, ‘?’, ‘\\-’, ‘$’, or ‘!’. A parameter whose name begins with an alphanumeric or underscore is also referred to as a _variable_.\n\nThe attributes of a parameter determine the _type_ of its value, often referred to as the parameter type or variable type, and also control other processing that may be applied to the value when it is referenced. The value type may be a _scalar_ (a string, an integer, or a floating point number), an array (indexed numerically), or an _associative_ array (an unordered set of name-value pairs, indexed by name, also referred to as a _hash_).\n\nNamed scalar parameters may have the _exported_, \\-x, attribute, to copy them into the process environment, which is then passed from the shell to any new processes that it starts. Exported parameters are called _environment variables_. The shell also _imports_ environment variables at startup time and automatically marks the corresponding parameters as exported. Some environment variables are not imported for reasons of security or because they would interfere with the correct operation of other shell features.\n\nParameters may also be _special_, that is, they have a predetermined meaning to the shell. Special parameters cannot have their type changed or their readonly attribute turned off, and if a special parameter is unset, then later recreated, the special properties will be retained.\n\nTo declare the type of a parameter, or to assign a string or numeric value to a scalar parameter, use the typeset builtin.\n\nThe value of a scalar parameter may also be assigned by writing:\n\n> name\\=value\n\nIn scalar assignment, value is expanded as a single string, in which the elements of arrays are joined together; filename expansion is not performed unless the option GLOB\\_ASSIGN is set.\n\nWhen the integer attribute, \\-i, or a floating point attribute, \\-E or \\-F, is set for name, the value is subject to arithmetic evaluation. Furthermore, by replacing ‘\\=’ with ‘+=’, a parameter can be incremented or appended to. See [Array Parameters](#Array-Parameters) and [Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) for additional forms of assignment.\n\nNote that assignment may implicitly change the attributes of a parameter. For example, assigning a number to a variable in arithmetic evaluation may change its type to integer or float, and with GLOB\\_ASSIGN assigning a pattern to a variable may change its type to an array.\n\nTo reference the value of a parameter, write ‘$name’ or ‘${name}’. See [Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) for complete details. That section also explains the effect of the difference between scalar and array assignment on parameter expansion.\n\n* * *\n\n## 15.2 Array Parameters\n\nTo assign an array value, write one of:\n\n> set -A name value ...\n\n> name\\=(value ...)\n\n> name\\=(\\[key\\]=value ...)\n\nIf no parameter name exists, an ordinary array parameter is created. If the parameter name exists and is a scalar, it is replaced by a new array.\n\nIn the third form, key is an expression that will be evaluated in arithmetic context (in its simplest form, an integer) that gives the index of the element to be assigned with value. In this form any elements not explicitly mentioned that come before the largest index to which a value is assigned are assigned an empty string. The indices may be in any order. Note that this syntax is strict: \\[ and \\]= must not be quoted, and key may not consist of the unquoted string \\]=, but is otherwise treated as a simple string. The enhanced forms of subscript expression that may be used when directly subscripting a variable name, described in the section ‘Array Subscripts’ below, are not available.\n\nThe syntaxes with and without the explicit key may be mixed. An implicit key is deduced by incrementing the index from the previously assigned element. Note that it is not treated as an error if latter assignments in this form overwrite earlier assignments.\n\nFor example, assuming the option KSH\\_ARRAYS is not set, the following:\n\narray=(one \\[3\\]=three four)\n\ncauses the array variable array to contain four elements one, an empty string, three and four, in that order.\n\nIn the forms where only value is specified, full command line expansion is performed.\n\nIn the \\[key\\]=value form, both key and value undergo all forms of expansion allowed for single word shell expansions (this does not include filename generation); these are as performed by the parameter expansion flag (e) as described in [Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion). Nested parentheses may surround value and are included as part of the value, which is joined into a plain string; this differs from ksh which allows the values themselves to be arrays. A future version of zsh may support that. To cause the brackets to be interpreted as a character class for filename generation, and therefore to treat the resulting list of files as a set of values, quote the equal sign using any form of quoting. Example:\n\n> name\\=(\\[a-z\\]’=’\\*)\n\nTo append to an array without changing the existing values, use one of the following:\n\n> name+=(value ...)\n\n> name+=(\\[key\\]=value ...)\n\nIn the second form key may specify an existing index as well as an index off the end of the old array; any existing value is overwritten by value. Also, it is possible to use \\[key\\]+=value to append to the existing value at that index.\n\nWithin the parentheses on the right hand side of either form of the assignment, newlines and semicolons are treated the same as white space, separating individual values. Any consecutive sequence of such characters has the same effect.\n\nOrdinary array parameters may also be explicitly declared with:\n\n> typeset -a name\n\nAssociative arrays _must_ be declared before assignment, by using:\n\n> typeset -A name\n\nWhen name refers to an associative array, the list in an assignment is interpreted as alternating keys and values:\n\n> set -A name key value ...\n\n> name\\=(key value ...)\n\n> name\\=(\\[key\\]=value ...)\n\nNote that only one of the two syntaxes above may be used in any given assignment; the forms may not be mixed. This is unlike the case of numerically indexed arrays.\n\nEvery key must have a value in this case. Note that this assigns to the entire array, deleting any elements that do not appear in the list. The append syntax may also be used with an associative array:\n\n> name+=(key value ...)\n\n> name+=(\\[key\\]=value ...)\n\nThis adds a new key/value pair if the key is not already present, and replaces the value for the existing key if it is. In the second form it is also possible to use \\[key\\]+=value to append to the existing value at that key. Expansion is performed identically to the corresponding forms for normal arrays, as described above.\n\nTo create an empty array (including associative arrays), use one of:\n\n> set -A name\n\n> name\\=()\n\n* * *\n\n### 15.2.1 Array Subscripts\n\nIndividual elements of an array may be selected using a subscript. A subscript of the form ‘\\[exp\\]’ selects the single element exp, where exp is an arithmetic expression which will be subject to arithmetic expansion as if it were surrounded by ‘$((...))’. The elements are numbered beginning with 1, unless the KSH\\_ARRAYS option is set in which case they are numbered from zero.\n\nSubscripts may be used inside braces used to delimit a parameter name, thus ‘${foo\\[2\\]}’ is equivalent to ‘$foo\\[2\\]’. If the KSH\\_ARRAYS option is set, the braced form is the only one that works, as bracketed expressions otherwise are not treated as subscripts.\n\nIf the KSH\\_ARRAYS option is not set, then by default accesses to an array element with a subscript that evaluates to zero return an empty string, while an attempt to write such an element is treated as an error. For backward compatibility the KSH\\_ZERO\\_SUBSCRIPT option can be set to cause subscript values 0 and 1 to be equivalent; see the description of the option in [Description of Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Description-of-Options).\n\nThe same subscripting syntax is used for associative arrays, except that no arithmetic expansion is applied to exp. However, the parsing rules for arithmetic expressions still apply, which affects the way that certain special characters must be protected from interpretation. See _Subscript Parsing_ below for details.\n\nA subscript of the form ‘\\[\\*\\]’ or ‘\\[@\\]’ evaluates to all elements of an array; there is no difference between the two except when they appear within double quotes. ‘\"$foo\\[\\*\\]\"’ evaluates to ‘\"$foo\\[1\\] $foo\\[2\\] ...\"’, whereas ‘\"$foo\\[@\\]\"’ evaluates to ‘\"$foo\\[1\\]\" \"$foo\\[2\\]\" ...’. For associative arrays, ‘\\[\\*\\]’ or ‘\\[@\\]’ evaluate to all the values, in no particular order. Note that this does not substitute the keys; see the documentation for the ‘k’ flag under [Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) for complete details. When an array parameter is referenced as ‘$name’ (with no subscript) it evaluates to ‘$name\\[\\*\\]’, unless the KSH\\_ARRAYS option is set in which case it evaluates to ‘${name\\[0\\]}’ (for an associative array, this means the value of the key ‘0’, which may not exist even if there are values for other keys).\n\nA subscript of the form ‘\\[exp1,exp2\\]’ selects all elements in the range exp1 to exp2, inclusive. (Associative arrays are unordered, and so do not support ranges.) If one of the subscripts evaluates to a negative number, say \\-n, then the nth element from the end of the array is used. Thus ‘$foo\\[-3\\]’ is the third element from the end of the array foo, and ‘$foo\\[1,-1\\]’ is the same as ‘$foo\\[\\*\\]’.\n\nSubscripting may also be performed on non-array values, in which case the subscripts specify a substring to be extracted. For example, if FOO is set to ‘foobar’, then ‘echo $FOO\\[2,5\\]’ prints ‘ooba’. Note that some forms of subscripting described below perform pattern matching, and in that case the substring extends from the start of the match of the first subscript to the end of the match of the second subscript. For example,\n\nstring=\"abcdefghijklm\"\nprint ${string\\[(r)d?,(r)h?\\]}\n\nprints ‘defghi’. This is an obvious generalisation of the rule for single-character matches. For a single subscript, only a single character is referenced (not the range of characters covered by the match).\n\nNote that in substring operations the second subscript is handled differently by the r and R subscript flags: the former takes the shortest match as the length and the latter the longest match. Hence in the former case a \\* at the end is redundant while in the latter case it matches the whole remainder of the string. This does not affect the result of the single subscript case as here the length of the match is irrelevant.\n\n* * *\n\n### 15.2.2 Array Element Assignment\n\nA subscript may be used on the left side of an assignment like so:\n\n> name\\[exp\\]=value\n\nIn this form of assignment the element or range specified by exp is replaced by the expression on the right side. An array (but not an associative array) may be created by assignment to a range or element. Arrays do not nest, so assigning a parenthesized list of values to an element or range changes the number of elements in the array, shifting the other elements to accommodate the new values. (This is not supported for associative arrays.)\n\nThis syntax also works as an argument to the typeset command:\n\n> typeset \"name\\[exp\\]\"=value\n\nThe value may _not_ be a parenthesized list in this case; only single-element assignments may be made with typeset. Note that quotes are necessary in this case to prevent the brackets from being interpreted as filename generation operators. The noglob precommand modifier could be used instead.\n\nTo delete an element of an ordinary array, assign ‘()’ to that element. To delete an element of an associative array, use the unset command:\n\n> unset \"name\\[exp\\]\"\n\n* * *\n\n### 15.2.3 Subscript Flags\n\nIf the opening bracket, or the comma in a range, in any subscript expression is directly followed by an opening parenthesis, the string up to the matching closing one is considered to be a list of flags, as in ‘name\\[(flags)exp\\]’.\n\nThe flags s, n and b take an argument; the delimiter is shown below as ‘:’, but any character, or the matching pairs ‘(...)’, ‘{...}’, ‘\\[...\\]’, or ‘<...\\>’, may be used, but note that ‘<...\\>’ can only be used if the subscript is inside a double quoted expression or a parameter substitution enclosed in braces as otherwise the expression is interpreted as a redirection.\n\nThe flags currently understood are:\n\nw\n\nIf the parameter subscripted is a scalar then this flag makes subscripting work on words instead of characters. The default word separator is whitespace. When combined with the i or I flag, the effect is to produce the index of the first character of the first/last word which matches the given pattern; note that a failed match in this case always yields 0.\n\ns:string:\n\nThis gives the string that separates words (for use with the w flag). The delimiter character : is arbitrary; see above.\n\np\n\nRecognize the same escape sequences as the print builtin in the string argument of a subsequent ‘s’ flag.\n\nf\n\nIf the parameter subscripted is a scalar then this flag makes subscripting work on lines instead of characters, i.e. with elements separated by newlines. This is a shorthand for ‘pws:\\\\n:’.\n\nr\n\nReverse subscripting: if this flag is given, the exp is taken as a pattern and the result is the first matching array element, substring or word (if the parameter is an array, if it is a scalar, or if it is a scalar and the ‘w’ flag is given, respectively). The subscript used is the number of the matching element, so that pairs of subscripts such as ‘$foo\\[(r)??,3\\]’ and ‘$foo\\[(r)??,(r)f\\*\\]’ are possible if the parameter is not an associative array. If the parameter is an associative array, only the value part of each pair is compared to the pattern, and the result is that value.\n\nIf a search through an ordinary array failed, the search sets the subscript to one past the end of the array, and hence ${array\\[(r)pattern\\]} will substitute the empty string. Thus the success of a search can be tested by using the (i) flag, for example (assuming the option KSH\\_ARRAYS is not in effect):\n\n\\[\\[ ${array\\[(i)pattern\\]} -le ${#array} \\]\\]\n\nIf KSH\\_ARRAYS is in effect, the \\-le should be replaced by \\-lt.\n\nR\n\nLike ‘r’, but gives the last match. For associative arrays, gives all possible matches. May be used for assigning to ordinary array elements, but not for assigning to associative arrays. On failure, for normal arrays this has the effect of returning the element corresponding to subscript 0; this is empty unless one of the options KSH\\_ARRAYS or KSH\\_ZERO\\_SUBSCRIPT is in effect.\n\nNote that in subscripts with both ‘r’ and ‘R’ pattern characters are active even if they were substituted for a parameter (regardless of the setting of GLOB\\_SUBST which controls this feature in normal pattern matching). The flag ‘e’ can be added to inhibit pattern matching. As this flag does not inhibit other forms of substitution, care is still required; using a parameter to hold the key has the desired effect:\n\nkey2='original key'\nprint ${array\\[(Re)$key2\\]}\n\ni\n\nLike ‘r’, but gives the index of the match instead; this may not be combined with a second argument. On the left side of an assignment, behaves like ‘r’. For associative arrays, the key part of each pair is compared to the pattern, and the first matching key found is the result. On failure substitutes the length of the array plus one, as discussed under the description of ‘r’, or the empty string for an associative array.\n\nNote: Although ‘i’ may be applied to a scalar substitution to find the offset of a substring, the results are likely to be misleading when searching within substitutions that yield an empty string, or when searching for the empty substring.\n\nI\n\nLike ‘i’, but gives the index of the last match, or all possible matching keys in an associative array. On failure substitutes 0, or the empty string for an associative array. This flag is best when testing for values or keys that do not exist.\n\nNote: If the option KSH\\_ARRAYS is in effect and no match is found, the result is indistinguishable from the case when the first element of the array matches.\n\nk\n\nIf used in a subscript on an associative array, this flag causes the keys to be interpreted as patterns, and returns the value for the first key found where exp is matched by the key. Note this could be any such key as no ordering of associative arrays is defined. This flag does not work on the left side of an assignment to an associative array element. If used on another type of parameter, this behaves like ‘r’.\n\nK\n\nOn an associative array this is like ‘k’ but returns all values where exp is matched by the keys. On other types of parameters this has the same effect as ‘R’.\n\nn:expr:\n\nIf combined with ‘r’, ‘R’, ‘i’ or ‘I’, makes them give the nth or nth last match (if expr evaluates to n). This flag is ignored when the array is associative. The delimiter character : is arbitrary; see above.\n\nb:expr:\n\nIf combined with ‘r’, ‘R’, ‘i’ or ‘I’, makes them begin at the nth or nth last element, word, or character (if expr evaluates to n). This flag is ignored when the array is associative. The delimiter character : is arbitrary; see above.\n\ne\n\nThis flag causes any pattern matching that would be performed on the subscript to use plain string matching instead. Hence ‘${array\\[(re)\\*\\]}’ matches only the array element whose value is \\*. Note that other forms of substitution such as parameter substitution are not inhibited.\n\nThis flag can also be used to force \\* or @ to be interpreted as a single key rather than as a reference to all values. It may be used for either purpose on the left side of an assignment.\n\nSee _Parameter Expansion Flags_ ([Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion)) for additional ways to manipulate the results of array subscripting.\n\n* * *\n\n### 15.2.4 Subscript Parsing\n\nThis discussion applies mainly to associative array key strings and to patterns used for reverse subscripting (the ‘r’, ‘R’, ‘i’, etc. flags), but it may also affect parameter substitutions that appear as part of an arithmetic expression in an ordinary subscript.\n\nTo avoid subscript parsing limitations in assignments to associative array elements, use the append syntax:\n\naa+=('key with \"\\*strange\\*\" characters' 'value string')\n\nThe basic rule to remember when writing a subscript expression is that all text between the opening ‘\\[’ and the closing ‘\\]’ is interpreted _as if_ it were in double quotes ([Quoting](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Quoting)). However, unlike double quotes which normally cannot nest, subscript expressions may appear inside double-quoted strings or inside other subscript expressions (or both!), so the rules have two important differences.\n\nThe first difference is that brackets (‘\\[’ and ‘\\]’) must appear as balanced pairs in a subscript expression unless they are preceded by a backslash (‘\\\\’). Therefore, within a subscript expression (and unlike true double-quoting) the sequence ‘\\\\\\[’ becomes ‘\\[’, and similarly ‘\\\\\\]’ becomes ‘\\]’. This applies even in cases where a backslash is not normally required; for example, the pattern ‘\\[^\\[\\]’ (to match any character other than an open bracket) should be written ‘\\[^\\\\\\[\\]’ in a reverse-subscript pattern. However, note that ‘\\\\\\[^\\\\\\[\\\\\\]’ and even ‘\\\\\\[^\\[\\]’ mean the _same_ thing, because backslashes are always stripped when they appear before brackets!\n\nThe same rule applies to parentheses (‘(’ and ‘)’) and braces (‘{’ and ‘}’): they must appear either in balanced pairs or preceded by a backslash, and backslashes that protect parentheses or braces are removed during parsing. This is because parameter expansions may be surrounded by balanced braces, and subscript flags are introduced by balanced parentheses.\n\nThe second difference is that a double-quote (‘\"’) may appear as part of a subscript expression without being preceded by a backslash, and therefore that the two characters ‘\\\\\"’ remain as two characters in the subscript (in true double-quoting, ‘\\\\\"’ becomes ‘\"’). However, because of the standard shell quoting rules, any double-quotes that appear must occur in balanced pairs unless preceded by a backslash. This makes it more difficult to write a subscript expression that contains an odd number of double-quote characters, but the reason for this difference is so that when a subscript expression appears inside true double-quotes, one can still write ‘\\\\\"’ (rather than ‘\\\\\\\\\\\\\"’) for ‘\"’.\n\nTo use an odd number of double quotes as a key in an assignment, use the typeset builtin and an enclosing pair of double quotes; to refer to the value of that key, again use double quotes:\n\ntypeset -A aa\ntypeset \"aa\\[one\\\\\"two\\\\\"three\\\\\"quotes\\]\"=QQQ\nprint \"$aa\\[one\\\\\"two\\\\\"three\\\\\"quotes\\]\"\n\nIt is important to note that the quoting rules do not change when a parameter expansion with a subscript is nested inside another subscript expression. That is, it is not necessary to use additional backslashes within the inner subscript expression; they are removed only once, from the innermost subscript outwards. Parameters are also expanded from the innermost subscript first, as each expansion is encountered left to right in the outer expression.\n\nA further complication arises from a way in which subscript parsing is _not_ different from double quote parsing. As in true double-quoting, the sequences ‘\\\\\\*’, and ‘\\\\@’ remain as two characters when they appear in a subscript expression. To use a literal ‘\\*’ or ‘@’ as an associative array key, the ‘e’ flag must be used:\n\ntypeset -A aa\naa\\[(e)\\*\\]=star\nprint $aa\\[(e)\\*\\]\n\nA last detail must be considered when reverse subscripting is performed. Parameters appearing in the subscript expression are first expanded and then the complete expression is interpreted as a pattern. This has two effects: first, parameters behave as if GLOB\\_SUBST were on (and it cannot be turned off); second, backslashes are interpreted twice, once when parsing the array subscript and again when parsing the pattern. In a reverse subscript, it’s necessary to use _four_ backslashes to cause a single backslash to match literally in the pattern. For complex patterns, it is often easiest to assign the desired pattern to a parameter and then refer to that parameter in the subscript, because then the backslashes, brackets, parentheses, etc., are seen only when the complete expression is converted to a pattern. To match the value of a parameter literally in a reverse subscript, rather than as a pattern, use ‘${(q)name}’ ([Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion)) to quote the expanded value.\n\nNote that the ‘k’ and ‘K’ flags are reverse subscripting for an ordinary array, but are _not_ reverse subscripting for an associative array! (For an associative array, the keys in the array itself are interpreted as patterns by those flags; the subscript is a plain string in that case.)\n\nOne final note, not directly related to subscripting: the numeric names of positional parameters ([Positional Parameters](#Positional-Parameters)) are parsed specially, so for example ‘$2foo’ is equivalent to ‘${2}foo’. Therefore, to use subscript syntax to extract a substring from a positional parameter, the expansion must be surrounded by braces; for example, ‘${2\\[3,5\\]}’ evaluates to the third through fifth characters of the second positional parameter, but ‘$2\\[3,5\\]’ is the entire second parameter concatenated with the filename generation pattern ‘\\[3,5\\]’.\n\n* * *\n\n## 15.3 Positional Parameters\n\nThe positional parameters provide access to the command-line arguments of a shell function, shell script, or the shell itself; see [Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation), and also [Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions). The parameter n, where n is a number, is the nth positional parameter. The parameter ‘$0’ is a special case, see [Parameters Set By The Shell](#Parameters-Set-By-The-Shell).\n\nThe parameters \\*, @ and argv are arrays containing all the positional parameters; thus ‘$argv\\[n\\]’, etc., is equivalent to simply ‘$n’. Note that the options KSH\\_ARRAYS or KSH\\_ZERO\\_SUBSCRIPT apply to these arrays as well, so with either of those options set, ‘${argv\\[0\\]}’ is equivalent to ‘$1’ and so on.\n\nPositional parameters may be changed after the shell or function starts by using the set builtin, by assigning to the argv array, or by direct assignment of the form ‘n\\=value’ where n is the number of the positional parameter to be changed. This also creates (with empty values) any of the positions from 1 to n that do not already have values. Note that, because the positional parameters form an array, an array assignment of the form ‘n\\=(value ...)’ is allowed, and has the effect of shifting all the values at positions greater than n by as many positions as necessary to accommodate the new values.\n\n* * *\n\n## 15.4 Local Parameters\n\nShell function executions delimit scopes for shell parameters. (Parameters are dynamically scoped.) The typeset builtin, and its alternative forms declare, integer, local and readonly (but not export), can be used to declare a parameter as being local to the innermost scope.\n\nWhen a parameter is read or assigned to, the innermost existing parameter of that name is used. (That is, the local parameter hides any less-local parameter.) However, assigning to a non-existent parameter, or declaring a new parameter with export, causes it to be created in the _outer_most scope.\n\nLocal parameters disappear when their scope ends. unset can be used to delete a parameter while it is still in scope; any outer parameter of the same name remains hidden.\n\nSpecial parameters may also be made local; they retain their special attributes unless either the existing or the newly-created parameter has the \\-h (hide) attribute. This may have unexpected effects: there is no default value, so if there is no assignment at the point the variable is made local, it will be set to an empty value (or zero in the case of integers). The following:\n\ntypeset PATH=/new/directory:$PATH\n\nis valid for temporarily allowing the shell or programmes called from it to find the programs in /new/directory inside a function.\n\nNote that the restriction in older versions of zsh that local parameters were never exported has been removed.\n\n* * *\n\n## 15.5 Parameters Set By The Shell\n\nIn the parameter lists that follow, the mark ‘<S>’ indicates that the parameter is special. ‘<Z>’ indicates that the parameter does not exist when the shell initializes in sh or ksh emulation mode.\n\nThe parameters ‘!’, ‘#’, ‘\\*’, ‘\\-’, ‘?’, ‘@’, ‘$’, ‘ARGC’, ‘HISTCMD’, ‘LINENO’, ‘PPID’, ‘status’, ‘TTYIDLE’, ‘zsh\\_eval\\_context’, ‘ZSH\\_EVAL\\_CONTEXT’, and ‘ZSH\\_SUBSHELL’ are read-only and thus cannot be restored by the user, so they are not output by ‘typeset -p’. This also applies to many read-only parameters loaded from modules.\n\nThe following parameters are automatically set by the shell:\n\n! <S>\n\nThe process ID of the last command started in the background with &, put into the background with the bg builtin, or spawned with coproc.\n\n# <S>\n\nThe number of positional parameters in decimal. Note that some confusion may occur with the syntax $#param which substitutes the length of param. Use ${#} to resolve ambiguities. In particular, the sequence ‘$#-...’ in an arithmetic expression is interpreted as the length of the parameter \\-, q.v.\n\nARGC <S> <Z>\n\nSame as #.\n\n$ <S>\n\nThe process ID of this shell, set when the shell initializes. Processes forked from the shell without executing a new program, such as command substitutions and commands grouped with (...), are subshells that duplicate the current shell, and thus substitute the same value for $$ as their parent shell.\n\n\\- <S>\n\nFlags supplied to the shell on invocation or by the set or setopt commands.\n\n\\* <S>\n\nAn array containing the positional parameters.\n\nargv <S> <Z>\n\nSame as \\*. Assigning to argv changes the local positional parameters, but argv is _not_ itself a local parameter. Deleting argv with unset in any function deletes it everywhere, although only the innermost positional parameter array is deleted (so \\* and @ in other scopes are not affected).\n\n@ <S>\n\nSame as argv\\[@\\], even when argv is not set.\n\n? <S>\n\nThe exit status returned by the last command.\n\n0 <S>\n\nThe name used to invoke the current shell, or as set by the \\-c command line option upon invocation. If the FUNCTION\\_ARGZERO option is set, $0 is set upon entry to a shell function to the name of the function, and upon entry to a sourced script to the name of the script, and reset to its previous value when the function or script returns.\n\nstatus <S> <Z>\n\nSame as ?.\n\npipestatus <S> <Z>\n\nAn array containing the exit statuses returned by all commands in the last pipeline.\n\n\\_ <S>\n\nThe last argument of the previous command. Also, this parameter is set in the environment of every command executed to the full pathname of the command.\n\nCPUTYPE\n\nThe machine type (microprocessor class or machine model), as determined at run time.\n\nEGID <S>\n\nThe effective group ID of the shell process. If you have sufficient privileges, you may change the effective group ID of the shell process by assigning to this parameter. Also (assuming sufficient privileges), you may start a single command with a different effective group ID by ‘(EGID=gid; command)’\n\nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally.\n\nEUID <S>\n\nThe effective user ID of the shell process. If you have sufficient privileges, you may change the effective user ID of the shell process by assigning to this parameter. Also (assuming sufficient privileges), you may start a single command with a different effective user ID by ‘(EUID=uid; command)’\n\nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally.\n\nERRNO <S>\n\nThe value of errno (see errno(3)) as set by the most recently failed system call. This value is system dependent and is intended for debugging purposes. It is also useful with the zsh/system module which allows the number to be turned into a name or message.\n\nTo use this parameter, it must first be assigned a value (typically 0 (zero)). It is initially unset for scripting compatibility.\n\nFUNCNEST <S>\n\nInteger. If greater than or equal to zero, the maximum nesting depth of shell functions. When it is exceeded, an error is raised at the point where a function is called. The default value is determined when the shell is configured, but is typically 500. Increasing the value increases the danger of a runaway function recursion causing the shell to crash. Setting a negative value turns off the check.\n\nGID <S>\n\nThe real group ID of the shell process. If you have sufficient privileges, you may change the group ID of the shell process by assigning to this parameter. Also (assuming sufficient privileges), you may start a single command under a different group ID by ‘(GID=gid; command)’\n\nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally.\n\nHISTCMD\n\nThe current history event number in an interactive shell, in other words the event number for the command that caused $HISTCMD to be read. If the current history event modifies the history, HISTCMD changes to the new maximum history event number.\n\nHOST\n\nThe current hostname.\n\nLINENO <S>\n\nThe line number of the current line within the current script, sourced file, or shell function being executed, whichever was started most recently. Note that in the case of shell functions the line number refers to the function as it appeared in the original definition, not necessarily as displayed by the functions builtin.\n\nLOGNAME\n\nIf the corresponding variable is not set in the environment of the shell, it is initialized to the login name corresponding to the current login session. This parameter is exported by default but this can be disabled using the typeset builtin. The value is set to the string returned by the getlogin(3) system call if that is available.\n\nMACHTYPE\n\nThe machine type (microprocessor class or machine model), as determined at compile time.\n\nOLDPWD\n\nThe previous working directory. This is set when the shell initializes and whenever the directory changes.\n\nOPTARG <S>\n\nThe value of the last option argument processed by the getopts command.\n\nOPTIND <S>\n\nThe index of the last option argument processed by the getopts command.\n\nOSTYPE\n\nThe operating system, as determined at compile time.\n\nPPID <S>\n\nThe process ID of the parent of the shell, set when the shell initializes. As with $$, the value does not change in subshells created as a duplicate of the current shell.\n\nPWD\n\nThe present working directory. This is set when the shell initializes and whenever the directory changes.\n\nRANDOM <S>\n\nA pseudo-random integer from 0 to 32767, newly generated each time this parameter is referenced. The random number generator can be seeded by assigning a numeric value to RANDOM.\n\nThe values of RANDOM form an intentionally-repeatable pseudo-random sequence; subshells that reference RANDOM will result in identical pseudo-random values unless the value of RANDOM is referenced or seeded in the parent shell in between subshell invocations.\n\nSECONDS <S>\n\nThe number of seconds since shell invocation. If this parameter is assigned a value, then the value returned upon reference will be the value that was assigned plus the number of seconds since the assignment.\n\nUnlike other special parameters, the type of the SECONDS parameter can be changed using the typeset command. The type may be changed only to one of the floating point types or back to integer. For example, ‘typeset -F SECONDS’ causes the value to be reported as a floating point number. The value is available to microsecond accuracy, although the shell may show more or fewer digits depending on the use of typeset. See the documentation for the builtin typeset in [Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) for more details.\n\nSHLVL <S>\n\nIncremented by one each time a new shell is started.\n\nsignals\n\nAn array containing the names of the signals. Note that with the standard zsh numbering of array indices, where the first element has index 1, the signals are offset by 1 from the signal number used by the operating system. For example, on typical Unix-like systems HUP is signal number 1, but is referred to as $signals\\[2\\]. This is because of EXIT at position 1 in the array, which is used internally by zsh but is not known to the operating system.\n\nTRY\\_BLOCK\\_ERROR <S>\n\nIn an always block, indicates whether the preceding list of code caused an error. The value is 1 to indicate an error, 0 otherwise. It may be reset, clearing the error condition. See [Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands)\n\nTRY\\_BLOCK\\_INTERRUPT <S>\n\nThis variable works in a similar way to TRY\\_BLOCK\\_ERROR, but represents the status of an interrupt from the signal SIGINT, which typically comes from the keyboard when the user types ^C. If set to 0, any such interrupt will be reset; otherwise, the interrupt is propagated after the always block.\n\nNote that it is possible that an interrupt arrives during the execution of the always block; this interrupt is also propagated.\n\nTTY\n\nThe name of the tty associated with the shell, if any.\n\nTTYIDLE <S>\n\nThe idle time of the tty associated with the shell in seconds or -1 if there is no such tty.\n\nUID <S>\n\nThe real user ID of the shell process. If you have sufficient privileges, you may change the user ID of the shell by assigning to this parameter. Also (assuming sufficient privileges), you may start a single command under a different user ID by ‘(UID=uid; command)’\n\nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally.\n\nUSERNAME <S>\n\nThe username corresponding to the real user ID of the shell process. If you have sufficient privileges, you may change the username (and also the user ID and group ID) of the shell by assigning to this parameter. Also (assuming sufficient privileges), you may start a single command under a different username (and user ID and group ID) by ‘(USERNAME=username; command)’\n\nVENDOR\n\nThe vendor, as determined at compile time.\n\nzsh\\_eval\\_context <S> <Z> (ZSH\\_EVAL\\_CONTEXT <S>)\n\nAn array (colon-separated list) indicating the context of shell code that is being run. Each time a piece of shell code that is stored within the shell is executed a string is temporarily appended to the array to indicate the type of operation that is being performed. Read in order the array gives an indication of the stack of operations being performed with the most immediate context last.\n\nNote that the variable does not give information on syntactic context such as pipelines or subshells. Use $ZSH\\_SUBSHELL to detect subshells.\n\nThe context is one of the following:\n\ncmdarg\n\nCode specified by the \\-c option to the command line that invoked the shell.\n\ncmdsubst\n\nCommand substitution using the ‘...‘ or $(...) construct.\n\nequalsubst\n\nFile substitution using the \\=(...) construct.\n\neval\n\nCode executed by the eval builtin.\n\nevalautofunc\n\nCode executed with the KSH\\_AUTOLOAD mechanism in order to define an autoloaded function.\n\nfc\n\nCode from the shell history executed by the \\-e option to the fc builtin.\n\nfile\n\nLines of code being read directly from a file, for example by the source builtin.\n\nfilecode\n\nLines of code being read from a .zwc file instead of directly from the source file.\n\nglobqual\n\nCode executed by the e or + glob qualifier.\n\nglobsort\n\nCode executed to order files by the o glob qualifier.\n\ninsubst\n\nFile substitution using the <(...) construct.\n\nloadautofunc\n\nCode read directly from a file to define an autoloaded function.\n\noutsubst\n\nFile substitution using the \\>(...) construct.\n\nsched\n\nCode executed by the sched builtin.\n\nshfunc\n\nA shell function.\n\nstty\n\nCode passed to stty by the STTY environment variable. Normally this is passed directly to the system’s stty command, so this value is unlikely to be seen in practice.\n\nstyle\n\nCode executed as part of a style retrieved by the zstyle builtin from the zsh/zutil module.\n\ntoplevel\n\nThe highest execution level of a script or interactive shell.\n\ntrap\n\nCode executed as a trap defined by the trap builtin. Traps defined as functions have the context shfunc. As traps are asynchronous they may have a different hierarchy from other code.\n\nzpty\n\nCode executed by the zpty builtin from the zsh/zpty module.\n\nzregexparse-guard\n\nCode executed as a guard by the zregexparse command from the zsh/zutil module.\n\nzregexparse-action\n\nCode executed as an action by the zregexparse command from the zsh/zutil module.\n\nZSH\\_ARGZERO\n\nIf zsh was invoked to run a script, this is the name of the script. Otherwise, it is the name used to invoke the current shell. This is the same as the value of $0 when the POSIX\\_ARGZERO option is set, but is always available.\n\nZSH\\_EXECUTION\\_STRING\n\nIf the shell was started with the option \\-c, this contains the argument passed to the option. Otherwise it is not set.\n\nZSH\\_NAME\n\nExpands to the basename of the command used to invoke this instance of zsh.\n\nZSH\\_PATCHLEVEL\n\nThe output of ‘git describe –tags –long’ for the zsh repository used to build the shell. This is most useful in order to keep track of versions of the shell during development between releases; hence most users should not use it and should instead rely on $ZSH\\_VERSION.\n\nzsh\\_scheduled\\_events\n\nSee [The zsh/sched Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fsched-Module).\n\nZSH\\_SCRIPT\n\nIf zsh was invoked to run a script, this is the name of the script, otherwise it is unset.\n\nZSH\\_SUBSHELL\n\nReadonly integer. Initially zero, incremented each time the shell forks to create a subshell for executing code. Hence ‘(print $ZSH\\_SUBSHELL)’ and ‘print $(print $ZSH\\_SUBSHELL)’ output 1, while ‘( (print $ZSH\\_SUBSHELL) )’ outputs 2.\n\nZSH\\_VERSION\n\nThe version number of the release of zsh.\n\n* * *\n\n## 15.6 Parameters Used By The Shell\n\nThe following parameters are used by the shell. Again, ‘<S>’ indicates that the parameter is special and ‘<Z>’ indicates that the parameter does not exist when the shell initializes in sh or ksh emulation mode.\n\nIn cases where there are two parameters with an upper- and lowercase form of the same name, such as path and PATH, the lowercase form is an array and the uppercase form is a scalar with the elements of the array joined together by colons. These are similar to tied parameters created via ‘typeset -T’. The normal use for the colon-separated form is for exporting to the environment, while the array form is easier to manipulate within the shell. Note that unsetting either of the pair will unset the other; they retain their special properties when recreated, and recreating one of the pair will recreate the other.\n\nARGV0\n\nIf exported, its value is used as the argv\\[0\\] of external commands. Usually used in constructs like ‘ARGV0=emacs nethack’.\n\nBAUD\n\nThe rate in bits per second at which data reaches the terminal. The line editor will use this value in order to compensate for a slow terminal by delaying updates to the display until necessary. If the parameter is unset or the value is zero the compensation mechanism is turned off. The parameter is not set by default.\n\nThis parameter may be profitably set in some circumstances, e.g. for slow modems dialing into a communications server, or on a slow wide area network. It should be set to the baud rate of the slowest part of the link for best performance.\n\ncdpath <S> <Z> (CDPATH <S>)\n\nAn array (colon-separated list) of directories specifying the search path for the cd command.\n\nCOLUMNS <S>\n\nThe number of columns for this terminal session. Used for printing select lists and for the line editor.\n\nCORRECT\\_IGNORE\n\nIf set, is treated as a pattern during spelling correction. Any potential correction that matches the pattern is ignored. For example, if the value is ‘\\_\\*’ then completion functions (which, by convention, have names beginning with ‘\\_’) will never be offered as spelling corrections. The pattern does not apply to the correction of file names, as applied by the CORRECT\\_ALL option (so with the example just given files beginning with ‘\\_’ in the current directory would still be completed).\n\nCORRECT\\_IGNORE\\_FILE\n\nIf set, is treated as a pattern during spelling correction of file names. Any file name that matches the pattern is never offered as a correction. For example, if the value is ‘.\\*’ then dot file names will never be offered as spelling corrections. This is useful with the CORRECT\\_ALL option.\n\nDIRSTACKSIZE\n\nThe maximum size of the directory stack, by default there is no limit. If the stack gets larger than this, it will be truncated automatically. This is useful with the AUTO\\_PUSHD option.\n\nENV\n\nIf the ENV environment variable is set when zsh is invoked as sh or ksh, $ENV is sourced after the profile scripts. The value of ENV is subjected to parameter expansion, command substitution, and arithmetic expansion before being interpreted as a pathname. Note that ENV is _not_ used unless the shell is interactive and zsh is emulating sh or ksh.\n\nFCEDIT\n\nThe default editor for the fc builtin. If FCEDIT is not set, the parameter EDITOR is used; if that is not set either, a builtin default, usually vi, is used.\n\nfignore <S> <Z> (FIGNORE <S>)\n\nAn array (colon separated list) containing the suffixes of files to be ignored during filename completion. However, if completion only generates files with suffixes in this list, then these files are completed anyway.\n\nfpath <S> <Z> (FPATH <S>)\n\nAn array (colon separated list) of directories specifying the search path for function definitions. This path is searched when a function with the \\-u attribute is referenced. If an executable file is found, then it is read and executed in the current environment.\n\nhistchars <S>\n\nThree characters used by the shell’s history and lexical analysis mechanism. The first character signals the start of a history expansion (default ‘!’). The second character signals the start of a quick history substitution (default ‘^’). The third character is the comment character (default ‘#’).\n\nThe characters must be in the ASCII character set; any attempt to set histchars to characters with a locale-dependent meaning will be rejected with an error message.\n\nHISTCHARS <S> <Z>\n\nSame as histchars. (Deprecated.)\n\nHISTFILE\n\nThe file to save the history in when an interactive shell exits. If unset, the history is not saved.\n\nHISTORY\\_IGNORE\n\nIf set, is treated as a pattern at the time history files are written. Any potential history entry that matches the pattern is skipped. For example, if the value is ‘fc \\*’ then commands that invoke the interactive history editor are never written to the history file.\n\nNote that HISTORY\\_IGNORE defines a single pattern: to specify alternatives use the ‘(first|second|...)’ syntax.\n\nCompare the HIST\\_NO\\_STORE option or the zshaddhistory hook, either of which would prevent such commands from being added to the interactive history at all. If you wish to use HISTORY\\_IGNORE to stop history being added in the first place, you can define the following hook:\n\nzshaddhistory() {\n  emulate -L zsh\n  ## uncomment if HISTORY\\_IGNORE\n  ## should use EXTENDED\\_GLOB syntax\n  # setopt extendedglob\n  \\[\\[ $1 != ${~HISTORY\\_IGNORE} \\]\\]\n}\n\nHISTSIZE <S>\n\nThe maximum number of events stored in the internal history list. If you use the HIST\\_EXPIRE\\_DUPS\\_FIRST option, setting this value larger than the SAVEHIST size will give you the difference as a cushion for saving duplicated history events.\n\nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally.\n\nHOME <S>\n\nThe default argument for the cd command. This is not set automatically by the shell in sh, ksh or csh emulation, but it is typically present in the environment anyway, and if it becomes set it has its usual special behaviour.\n\nIFS <S>\n\nInternal field separators (by default space, tab, newline and NUL), that are used to separate words which result from command or parameter expansion and words read by the read builtin. Any characters from the set space, tab and newline that appear in the IFS are called _IFS white space_. One or more IFS white space characters or one non-IFS white space character together with any adjacent IFS white space character delimit a field. If an IFS white space character appears twice consecutively in the IFS, this character is treated as if it were not an IFS white space character.\n\nIf the parameter is unset, the default is used. Note this has a different effect from setting the parameter to an empty string.\n\nKEYBOARD\\_HACK\n\nThis variable defines a character to be removed from the end of the command line before interpreting it (interactive shells only). It is intended to fix the problem with keys placed annoyingly close to return and replaces the SUNKEYBOARDHACK option which did this for backquotes only. Should the chosen character be one of singlequote, doublequote or backquote, there must also be an odd number of them on the command line for the last one to be removed.\n\nFor backward compatibility, if the SUNKEYBOARDHACK option is explicitly set, the value of KEYBOARD\\_HACK reverts to backquote. If the option is explicitly unset, this variable is set to empty.\n\nKEYTIMEOUT\n\nThe time the shell waits, in hundredths of seconds, for another key to be pressed when reading bound multi-character sequences.\n\nLANG <S>\n\nThis variable determines the locale category for any category not specifically selected via a variable starting with ‘LC\\_’.\n\nLC\\_ALL <S>\n\nThis variable overrides the value of the ‘LANG’ variable and the value of any of the other variables starting with ‘LC\\_’.\n\nLC\\_COLLATE <S>\n\nThis variable determines the locale category for character collation information within ranges in glob brackets and for sorting.\n\nLC\\_CTYPE <S>\n\nThis variable determines the locale category for character handling functions. If the MULTIBYTE option is in effect this variable or LANG should contain a value that reflects the character set in use, even if it is a single-byte character set, unless only the 7-bit subset (ASCII) is used. For example, if the character set is ISO-8859-1, a suitable value might be en\\_US.iso88591 (certain Linux distributions) or en\\_US.ISO8859-1 (MacOS).\n\nLC\\_MESSAGES <S>\n\nThis variable determines the language in which messages should be written. Note that zsh does not use message catalogs.\n\nLC\\_NUMERIC <S>\n\nThis variable affects the decimal point character and thousands separator character for the formatted input/output functions and string conversion functions. Note that zsh ignores this setting when parsing floating point mathematical expressions.\n\nLC\\_TIME <S>\n\nThis variable determines the locale category for date and time formatting in prompt escape sequences.\n\nLINES <S>\n\nThe number of lines for this terminal session. Used for printing select lists and for the line editor.\n\nLISTMAX\n\nIn the line editor, the number of matches to list without asking first. If the value is negative, the list will be shown if it spans at most as many lines as given by the absolute value. If set to zero, the shell asks only if the top of the listing would scroll off the screen.\n\nMAIL\n\nIf this parameter is set and mailpath is not set, the shell looks for mail in the specified file.\n\nMAILCHECK\n\nThe interval in seconds between checks for new mail.\n\nmailpath <S> <Z> (MAILPATH <S>)\n\nAn array (colon-separated list) of filenames to check for new mail. Each filename can be followed by a ‘?’ and a message that will be printed. The message will undergo parameter expansion, command substitution and arithmetic expansion with the variable $\\_ defined as the name of the file that has changed. The default message is ‘You have new mail’. If an element is a directory instead of a file the shell will recursively check every file in every subdirectory of the element.\n\nmanpath <S> <Z> (MANPATH <S> <Z>)\n\nAn array (colon-separated list) whose value is not used by the shell. The manpath array can be useful, however, since setting it also sets MANPATH, and vice versa.\n\nmatch\n\nmbegin\n\nmend\n\nArrays set by the shell when the b globbing flag is used in pattern matches. See the subsection _Globbing flags_ in [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation).\n\nMATCH\n\nMBEGIN\n\nMEND\n\nSet by the shell when the m globbing flag is used in pattern matches. See the subsection _Globbing flags_ in [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation).\n\nmodule\\_path <S> <Z> (MODULE\\_PATH <S>)\n\nAn array (colon-separated list) of directories that zmodload searches for dynamically loadable modules. This is initialized to a standard pathname, usually ‘/usr/local/lib/zsh/$ZSH\\_VERSION’. (The ‘/usr/local/lib’ part varies from installation to installation.) For security reasons, any value set in the environment when the shell is started will be ignored.\n\nThese parameters only exist if the installation supports dynamic module loading.\n\nNULLCMD <S>\n\nThe command name to assume if a redirection is specified with no command. Defaults to cat. For sh/ksh behavior, change this to :. For csh\\-like behavior, unset this parameter; the shell will print an error message if null commands are entered.\n\npath <S> <Z> (PATH <S>)\n\nAn array (colon-separated list) of directories to search for commands. When this parameter is set, each directory is scanned and all files found are put in a hash table.\n\nPOSTEDIT <S>\n\nThis string is output whenever the line editor exits. It usually contains termcap strings to reset the terminal.\n\nPROMPT <S> <Z>\n\nPROMPT2 <S> <Z>\n\nPROMPT3 <S> <Z>\n\nPROMPT4 <S> <Z>\n\nSame as PS1, PS2, PS3 and PS4, respectively.\n\nprompt <S> <Z>\n\nSame as PS1.\n\nPROMPT\\_EOL\\_MARK\n\nWhen the PROMPT\\_CR and PROMPT\\_SP options are set, the PROMPT\\_EOL\\_MARK parameter can be used to customize how the end of partial lines are shown. This parameter undergoes prompt expansion, with the PROMPT\\_PERCENT option set. If not set, the default behavior is equivalent to the value ‘%B%S%#%s%b’.\n\nPS1 <S>\n\nThe primary prompt string, printed before a command is read. It undergoes a special form of expansion before being displayed; see [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion). The default is ‘%m%# ’.\n\nPS2 <S>\n\nThe secondary prompt, printed when the shell needs more information to complete a command. It is expanded in the same way as PS1. The default is ‘%\\_> ’, which displays any shell constructs or quotation marks which are currently being processed.\n\nPS3 <S>\n\nSelection prompt used within a select loop. It is expanded in the same way as PS1. The default is ‘?# ’.\n\nPS4 <S>\n\nThe execution trace prompt. Default is ‘+%N:%i> ’, which displays the name of the current shell structure and the line number within it. In sh or ksh emulation, the default is ‘\\+ ’.\n\npsvar <S> <Z> (PSVAR <S>)\n\nAn array (colon-separated list) whose elements can be used in PROMPT strings. Setting psvar also sets PSVAR, and vice versa.\n\nREADNULLCMD <S>\n\nThe command name to assume if a single input redirection is specified with no command. Defaults to more.\n\nREPORTMEMORY\n\nIf nonnegative, commands whose maximum resident set size (roughly speaking, main memory usage) in kilobytes is greater than this value have timing statistics reported. The format used to output statistics is the value of the TIMEFMT parameter, which is the same as for the REPORTTIME variable and the time builtin; note that by default this does not output memory usage. Appending \" max RSS %M\" to the value of TIMEFMT causes it to output the value that triggered the report. If REPORTTIME is also in use, at most a single report is printed for both triggers. This feature requires the getrusage() system call, commonly supported by modern Unix-like systems.\n\nREPORTTIME\n\nIf nonnegative, commands whose combined user and system execution times (measured in seconds) are greater than this value have timing statistics printed for them. Output is suppressed for commands executed within the line editor, including completion; commands explicitly marked with the time keyword still cause the summary to be printed in this case.\n\nREPLY\n\nThis parameter is reserved by convention to pass string values between shell scripts and shell builtins in situations where a function call or redirection are impossible or undesirable. The read builtin and the select complex command may set REPLY, and filename generation both sets and examines its value when evaluating certain expressions. Some modules also employ REPLY for similar purposes.\n\nreply\n\nAs REPLY, but for array values rather than strings.\n\nRPROMPT <S>\n\nRPS1 <S>\n\nThis prompt is displayed on the right-hand side of the screen when the primary prompt is being displayed on the left. This does not work if the SINGLE\\_LINE\\_ZLE option is set. It is expanded in the same way as PS1.\n\nRPROMPT2 <S>\n\nRPS2 <S>\n\nThis prompt is displayed on the right-hand side of the screen when the secondary prompt is being displayed on the left. This does not work if the SINGLE\\_LINE\\_ZLE option is set. It is expanded in the same way as PS2.\n\nSAVEHIST\n\nThe maximum number of history events to save in the history file.\n\nIf this is made local, it is not implicitly set to 0, but may be explicitly set locally.\n\nSPROMPT <S>\n\nThe prompt used for spelling correction. The sequence ‘%R’ expands to the string which presumably needs spelling correction, and ‘%r’ expands to the proposed correction. All other prompt escapes are also allowed.\n\nThe actions available at the prompt are \\[nyae\\]:\n\nn (‘no’) (default)\n\nDiscard the correction and run the command.\n\ny (‘yes’)\n\nMake the correction and run the command.\n\na (‘abort’)\n\nDiscard the entire command line without running it.\n\ne (‘edit’)\n\nResume editing the command line.\n\nSTTY\n\nIf this parameter is set in a command’s environment, the shell runs the stty command with the value of this parameter as arguments in order to set up the terminal before executing the command. The modes apply only to the command, and are reset when it finishes or is suspended. If the command is suspended and continued later with the fg or wait builtins it will see the modes specified by STTY, as if it were not suspended. This (intentionally) does not apply if the command is continued via ‘kill -CONT’. STTY is ignored if the command is run in the background, or if it is in the environment of the shell but not explicitly assigned to in the input line. This avoids running stty at every external command by accidentally exporting it. Also note that STTY should not be used for window size specifications; these will not be local to the command.\n\nIf the parameter is set and empty, all of the above applies except that stty is not run. This can be useful as a way to freeze the tty around a single command, blocking its changes to tty settings, similar to the ttyctl builtin.\n\nTERM <S>\n\nThe type of terminal in use. This is used when looking up termcap sequences. An assignment to TERM causes zsh to re-initialize the terminal, even if the value does not change (e.g., ‘TERM=$TERM’). It is necessary to make such an assignment upon any change to the terminal definition database or terminal type in order for the new settings to take effect.\n\nTERMINFO <S>\n\nA reference to your terminfo database, used by the ‘terminfo’ library when the system has it; see terminfo(5). If set, this causes the shell to reinitialise the terminal, making the workaround ‘TERM=$TERM’ unnecessary.\n\nTERMINFO\\_DIRS <S>\n\nA colon-seprarated list of terminfo databases, used by the ‘terminfo’ library when the system has it; see terminfo(5). This variable is only used by certain terminal libraries, in particular ncurses; see terminfo(5) to check support on your system. If set, this causes the shell to reinitialise the terminal, making the workaround ‘TERM=$TERM’ unnecessary. Note that unlike other colon-separated arrays this is not tied to a zsh array.\n\nTIMEFMT\n\nThe format of process time reports with the time keyword. The default is ‘%J %U user %S system %P cpu %\\*E total’. Recognizes the following escape sequences, although not all may be available on all systems, and some that are available may not be useful:\n\n%%\n\nA ‘%’.\n\n%U\n\nCPU seconds spent in user mode.\n\n%S\n\nCPU seconds spent in kernel mode.\n\n%E\n\nElapsed time in seconds.\n\n%P\n\nThe CPU percentage, computed as 100\\*(%U+%S)/%E.\n\n%W\n\nNumber of times the process was swapped.\n\n%X\n\nThe average amount in (shared) text space used in kilobytes.\n\n%D\n\nThe average amount in (unshared) data/stack space used in kilobytes.\n\n%K\n\nThe total space used (%X+%D) in kilobytes.\n\n%M\n\nThe maximum memory the process had in use at any time in kilobytes.\n\n%F\n\nThe number of major page faults (page needed to be brought from disk).\n\n%R\n\nThe number of minor page faults.\n\n%I\n\nThe number of input operations.\n\n%O\n\nThe number of output operations.\n\n%r\n\nThe number of socket messages received.\n\n%s\n\nThe number of socket messages sent.\n\n%k\n\nThe number of signals received.\n\n%w\n\nNumber of voluntary context switches (waits).\n\n%c\n\nNumber of involuntary context switches.\n\n%J\n\nThe name of this job.\n\nA star may be inserted between the percent sign and flags printing time (e.g., ‘%\\*E’); this causes the time to be printed in ‘hh:mm:ss.ttt’ format (hours and minutes are only printed if they are not zero). Alternatively, ‘m’ or ‘u’ may be used (e.g., ‘%mE’) to produce time output in milliseconds or microseconds, respectively.\n\nTMOUT\n\nIf this parameter is nonzero, the shell will receive an ALRM signal if a command is not entered within the specified number of seconds after issuing a prompt. If there is a trap on SIGALRM, it will be executed and a new alarm is scheduled using the value of the TMOUT parameter after executing the trap. If no trap is set, and the idle time of the terminal is not less than the value of the TMOUT parameter, zsh terminates. Otherwise a new alarm is scheduled to TMOUT seconds after the last keypress.\n\nTMPPREFIX\n\nA pathname prefix which the shell will use for all temporary files. Note that this should include an initial part for the file name as well as any directory names. The default is ‘/tmp/zsh’.\n\nTMPSUFFIX\n\nA filename suffix which the shell will use for temporary files created by process substitutions (e.g., ‘\\=(list)’). Note that the value should include a leading dot ‘.’ if intended to be interpreted as a file extension. The default is not to append any suffix, thus this parameter should be assigned only when needed and then unset again.\n\nWORDCHARS <S>\n\nA list of non-alphanumeric characters considered part of a word by the line editor.\n\nZBEEP\n\nIf set, this gives a string of characters, which can use all the same codes as the bindkey command as described in [The zsh/zle Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzle-Module), that will be output to the terminal instead of beeping. This may have a visible instead of an audible effect; for example, the string ‘\\\\e\\[?5h\\\\e\\[?5l’ on a vt100 or xterm will have the effect of flashing reverse video on and off (if you usually use reverse video, you should use the string ‘\\\\e\\[?5l\\\\e\\[?5h’ instead). This takes precedence over the NOBEEP option.\n\nZDOTDIR\n\nThe directory to search for shell startup files (.zshrc, etc), if not $HOME.\n\nzle\\_bracketed\\_paste\n\nMany terminal emulators have a feature that allows applications to identify when text is pasted into the terminal rather than being typed normally. For ZLE, this means that special characters such as tabs and newlines can be inserted instead of invoking editor commands. Furthermore, pasted text forms a single undo event and if the region is active, pasted text will replace the region.\n\nThis two-element array contains the terminal escape sequences for enabling and disabling the feature. These escape sequences are used to enable bracketed paste when ZLE is active and disable it at other times. Unsetting the parameter has the effect of ensuring that bracketed paste remains disabled.\n\nzle\\_highlight\n\nAn array describing contexts in which ZLE should highlight the input text. See [Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting).\n\nZLE\\_LINE\\_ABORTED\n\nThis parameter is set by the line editor when an error occurs. It contains the line that was being edited at the point of the error. ‘print -zr – $ZLE\\_LINE\\_ABORTED’ can be used to recover the line. Only the most recent line of this kind is remembered.\n\nZLE\\_REMOVE\\_SUFFIX\\_CHARS\n\nZLE\\_SPACE\\_SUFFIX\\_CHARS\n\nThese parameters are used by the line editor. In certain circumstances suffixes (typically space or slash) added by the completion system will be removed automatically, either because the next editing command was not an insertable character, or because the character was marked as requiring the suffix to be removed.\n\nThese variables can contain the sets of characters that will cause the suffix to be removed. If ZLE\\_REMOVE\\_SUFFIX\\_CHARS is set, those characters will cause the suffix to be removed; if ZLE\\_SPACE\\_SUFFIX\\_CHARS is set, those characters will cause the suffix to be removed and replaced by a space.\n\nIf ZLE\\_REMOVE\\_SUFFIX\\_CHARS is not set, the default behaviour is equivalent to:\n\nZLE\\_REMOVE\\_SUFFIX\\_CHARS=$' \\\\t\\\\n;&|'\n\nIf ZLE\\_REMOVE\\_SUFFIX\\_CHARS is set but is empty, no characters have this behaviour. ZLE\\_SPACE\\_SUFFIX\\_CHARS takes precedence, so that the following:\n\nZLE\\_SPACE\\_SUFFIX\\_CHARS=$'&|'\n\ncauses the characters ‘&’ and ‘|’ to remove the suffix but to replace it with a space.\n\nTo illustrate the difference, suppose that the option AUTO\\_REMOVE\\_SLASH is in effect and the directory DIR has just been completed, with an appended /, following which the user types ‘&’. The default result is ‘DIR&’. With ZLE\\_REMOVE\\_SUFFIX\\_CHARS set but without including ‘&’ the result is ‘DIR/&’. With ZLE\\_SPACE\\_SUFFIX\\_CHARS set to include ‘&’ the result is ‘DIR &’.\n\nNote that certain completions may provide their own suffix removal or replacement behaviour which overrides the values described here. See the completion system documentation in [Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System).\n\nZLE\\_RPROMPT\\_INDENT <S>\n\nIf set, used to give the indentation between the right hand side of the right prompt in the line editor as given by RPS1 or RPROMPT and the right hand side of the screen. If not set, the value 1 is used.\n\nTypically this will be used to set the value to 0 so that the prompt appears flush with the right hand side of the screen. This is not the default as many terminals do not handle this correctly, in particular when the prompt appears at the extreme bottom right of the screen. Recent virtual terminals are more likely to handle this case correctly. Some experimentation is necessary.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 313,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Parameters-html-Parameters-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Parameters-html-Parameters-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Parameters-html-Parameters-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Parameters-html-Parameters-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Parameters-html-Parameters-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 73503,
      "readableText": 87940,
      "none": 103889,
      "readableTextIfPossible": 87940,
      "result": 87940,
      "markdown": 65886
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Functions.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions",
    "loadedTime": "2025-05-08T06:51:15.127Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions",
    "title": "zsh: 9 Functions",
    "description": "zsh: 9 Functions",
    "author": null,
    "keywords": "zsh: 9 Functions",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:12 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-7580\"",
      "expires": "Thu, 08 May 2025 06:51:42 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "HIT",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c706fc9e284bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 9 Functions\nShell functions are defined with the function reserved word or the special syntax ‘funcname ()’. Shell functions are read in and stored internally. Alias names are resolved when the function is read. Functions are executed like commands with the arguments passed as positional parameters. (See Command Execution.) \nFunctions execute in the same process as the caller and share all files and present working directory with the caller. A trap on EXIT set inside a function is executed after the function completes in the environment of the caller. \nThe return builtin is used to return from function calls. \nFunction identifiers can be listed with the functions builtin. Functions can be undefined with the unfunction builtin. \n9.1 Autoloading Functions\nA function can be marked as undefined using the autoload builtin (or ‘functions -u’ or ‘typeset -fu’). Such a function has no body. When the function is first executed, the shell searches for its definition using the elements of the fpath variable. Thus to define functions for autoloading, a typical sequence is: \nfpath=(~/myfuncs $fpath)\nautoload myfunc1 myfunc2 ...\nThe usual alias expansion during reading will be suppressed if the autoload builtin or its equivalent is given the option -U. This is recommended for the use of functions supplied with the zsh distribution. Note that for functions precompiled with the zcompile builtin command the flag -U must be provided when the .zwc file is created, as the corresponding information is compiled into the latter. \nFor each element in fpath, the shell looks for three possible files, the newest of which is used to load the definition for the function: \nelement.zwc \nA file created with the zcompile builtin command, which is expected to contain the definitions for all functions in the directory named element. The file is treated in the same manner as a directory containing files for functions and is searched for the definition of the function. If the definition is not found, the search for a definition proceeds with the other two possibilities described below. \nIf element already includes a .zwc extension (i.e. the extension was explicitly given by the user), element is searched for the definition of the function without comparing its age to that of other files; in fact, there does not need to be any directory named element without the suffix. Thus including an element such as ‘/usr/local/funcs.zwc’ in fpath will speed up the search for functions, with the disadvantage that functions included must be explicitly recompiled by hand before the shell notices any changes. \nelement/function.zwc \nA file created with zcompile, which is expected to contain the definition for function. It may include other function definitions as well, but those are neither loaded nor executed; a file found in this way is searched only for the definition of function. \nelement/function \nA file of zsh command text, taken to be the definition for function. \nIn summary, the order of searching is, first, in the parents of directories in fpath for the newer of either a compiled directory or a directory in fpath; second, if more than one of these contains a definition for the function that is sought, the leftmost in the fpath is chosen; and third, within a directory, the newer of either a compiled function or an ordinary function definition is used. \nIf the KSH_AUTOLOAD option is set, or the file contains only a simple definition of the function, the file’s contents will be executed. This will normally define the function in question, but may also perform initialization, which is executed in the context of the function execution, and may therefore define local parameters. It is an error if the function is not defined by loading the file. \nOtherwise, the function body (with no surrounding ‘funcname() {...}’) is taken to be the complete contents of the file. This form allows the file to be used directly as an executable shell script. If processing of the file results in the function being re-defined, the function itself is not re-executed. To force the shell to perform initialization and then call the function defined, the file should contain initialization code (which will be executed then discarded) in addition to a complete function definition (which will be retained for subsequent calls to the function), and a call to the shell function, including any arguments, at the end. \nFor example, suppose the autoload file func contains \nfunc() { print This is func; }\nprint func is initialized\nthen ‘func; func’ with KSH_AUTOLOAD set will produce both messages on the first call, but only the message ‘This is func’ on the second and subsequent calls. Without KSH_AUTOLOAD set, it will produce the initialization message on the first call, and the other message on the second and subsequent calls. \nIt is also possible to create a function that is not marked as autoloaded, but which loads its own definition by searching fpath, by using ‘autoload -X’ within a shell function. For example, the following are equivalent: \nmyfunc() {\n  autoload -X\n}\nmyfunc args...\nand \nunfunction myfunc   # if myfunc was defined\nautoload myfunc\nmyfunc args...\nIn fact, the functions command outputs ‘builtin autoload -X’ as the body of an autoloaded function. This is done so that \nproduces a reasonable result. A true autoloaded function can be identified by the presence of the comment ‘# undefined’ in the body, because all comments are discarded from defined functions. \nTo load the definition of an autoloaded function myfunc without executing myfunc, use: \n9.2 Anonymous Functions\nIf no name is given for a function, it is ‘anonymous’ and is handled specially. Either form of function definition may be used: a ‘()’ with no preceding name, or a ‘function’ with an immediately following open brace. The function is executed immediately at the point of definition and is not stored for future use. The function name is set to ‘(anon)’. \nArguments to the function may be specified as words following the closing brace defining the function, hence if there are none no arguments (other than $0) are set. This is a difference from the way other functions are parsed: normal function definitions may be followed by certain keywords such as ‘else’ or ‘fi’, which will be treated as arguments to anonymous functions, so that a newline or semicolon is needed to force keyword interpretation. \nNote also that the argument list of any enclosing script or function is hidden (as would be the case for any other function called at this point). \nRedirections may be applied to the anonymous function in the same manner as to a current-shell structure enclosed in braces. The main use of anonymous functions is to provide a scope for local variables. This is particularly convenient in start-up files as these do not provide their own local variable scope. \nFor example, \nvariable=outside\nfunction {\n  local variable=inside\n  print \"I am $variable with arguments $*\"\n} this and that\nprint \"I am $variable\"\noutputs the following: \nI am inside with arguments this and that\nI am outside\nNote that function definitions with arguments that expand to nothing, for example ‘name=; function $name { ... }’, are not treated as anonymous functions. Instead, they are treated as normal function definitions where the definition is silently discarded. \n9.3 Special Functions\nCertain functions, if defined, have special meaning to the shell. \n9.3.1 Hook Functions\nFor the functions below, it is possible to define an array that has the same name as the function with ‘_functions’ appended. Any element in such an array is taken as the name of a function to execute; it is executed in the same context and with the same arguments and same initial value of $? as the basic function. For example, if $chpwd_functions is an array containing the values ‘mychpwd’, ‘chpwd_save_dirstack’, then the shell attempts to execute the functions ‘chpwd’, ‘mychpwd’ and ‘chpwd_save_dirstack’, in that order. Any function that does not exist is silently ignored. A function found by this mechanism is referred to elsewhere as a hook function. An error in any function causes subsequent functions not to be run. Note further that an error in a precmd hook causes an immediately following periodic function not to run (though it may run at the next opportunity). \nchpwd \nExecuted whenever the current working directory is changed. \nperiodic \nIf the parameter PERIOD is set, this function is executed every $PERIOD seconds, just before a prompt. Note that if multiple functions are defined using the array periodic_functions only one period is applied to the complete set of functions, and the scheduled time is not reset if the list of functions is altered. Hence the set of functions is always called together. \nprecmd \nExecuted before each prompt. Note that precommand functions are not re-executed simply because the command line is redrawn, as happens, for example, when a notification about an exiting job is displayed. \npreexec \nExecuted just after a command has been read and is about to be executed. If the history mechanism is active (regardless of whether the line was discarded from the history buffer), the string that the user typed is passed as the first argument, otherwise it is an empty string. The actual command that will be executed (including expanded aliases) is passed in two different forms: the second argument is a single-line, size-limited version of the command (with things like function bodies elided); the third argument contains the full text that is being executed. \nzshaddhistory \nExecuted when a history line has been read interactively, but before it is executed. The sole argument is the complete history line (so that any terminating newline will still be present). \nIf any of the hook functions returns status 1 (or any non-zero value other than 2, though this is not guaranteed for future versions of the shell) the history line will not be saved, although it lingers in the history until the next line is executed, allowing you to reuse or edit it immediately. \nIf any of the hook functions returns status 2 the history line will be saved on the internal history list, but not written to the history file. In case of a conflict, the first non-zero status value is taken. \nA hook function may call ‘fc -p ...’ to switch the history context so that the history is saved in a different file from that in the global HISTFILE parameter. This is handled specially: the history context is automatically restored after the processing of the history line is finished. \nThe following example function works with one of the options INC_APPEND_HISTORY or SHARE_HISTORY set, in order that the line is written out immediately after the history entry is added. It first adds the history line to the normal history with the newline stripped, which is usually the correct behaviour. Then it switches the history context so that the line will be written to a history file in the current directory. \nzshaddhistory() {\n  print -sr -- ${1%%$'\\n'}\n  fc -p .zsh_local_history\n}\nzshexit \nExecuted at the point where the main shell is about to exit normally. This is not called by exiting subshells, nor when the exec precommand modifier is used before an external command. Also, unlike TRAPEXIT, it is not called when functions exit. \n9.3.2 Trap Functions\nThe functions below are treated specially but do not have corresponding hook arrays. \nTRAPNAL \nIf defined and non-null, this function will be executed whenever the shell catches a signal SIGNAL, where NAL is a signal name as specified for the kill builtin. The signal number will be passed as the first parameter to the function. \nIf a function of this form is defined and null, the shell and processes spawned by it will ignore SIGNAL. \nThe return status from the function is handled specially. If it is zero, the signal is assumed to have been handled, and execution continues normally. Otherwise, the shell will behave as interrupted except that the return status of the trap is retained. \nPrograms terminated by uncaught signals typically return the status 128 plus the signal number. Hence the following causes the handler for SIGINT to print a message, then mimic the usual effect of the signal. \nTRAPINT() {\n  print \"Caught SIGINT, aborting.\"\n  return $(( 128 + $1 ))\n}\nThe functions TRAPZERR, TRAPDEBUG and TRAPEXIT are never executed inside other traps. \nTRAPDEBUG \nIf the option DEBUG_BEFORE_CMD is set (as it is by default), executed before each command; otherwise executed after each command. See the description of the trap builtin in Shell Builtin Commands for details of additional features provided in debug traps. \nTRAPEXIT \nExecuted when the shell exits, or when the current function exits if defined inside a function. The value of $? at the start of execution is the exit status of the shell or the return status of the function exiting. \nTRAPZERR \nExecuted whenever a command has a non-zero exit status. However, the function is not executed if the command occurred in a sublist followed by ‘&&’ or ‘||’; only the final command in a sublist of this type causes the trap to be executed. The function TRAPERR acts the same as TRAPZERR on systems where there is no SIGERR (this is the usual case). \nThe functions beginning ‘TRAP’ may alternatively be defined with the trap builtin: this may be preferable for some uses. Setting a trap with one form removes any trap of the other form for the same signal; removing a trap in either form removes all traps for the same signal. The forms \n(’function traps’) and \n(’list traps’) are equivalent in most ways, the exceptions being the following: \nFunction traps have all the properties of normal functions, appearing in the list of functions and being called with their own function context rather than the context where the trap was triggered. \nThe return status from function traps is special, whereas a return from a list trap causes the surrounding context to return with the given status. \nFunction traps are not reset within subshells, in accordance with zsh behaviour; list traps are reset, in accordance with POSIX behaviour. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-html-Functions-45pva.html",
  "markdown": "# zsh: 9 Functions\n\nShell functions are defined with the function reserved word or the special syntax ‘funcname ()’. Shell functions are read in and stored internally. Alias names are resolved when the function is read. Functions are executed like commands with the arguments passed as positional parameters. (See [Command Execution](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#Command-Execution).)\n\nFunctions execute in the same process as the caller and share all files and present working directory with the caller. A trap on EXIT set inside a function is executed after the function completes in the environment of the caller.\n\nThe return builtin is used to return from function calls.\n\nFunction identifiers can be listed with the functions builtin. Functions can be undefined with the unfunction builtin.\n\n* * *\n\n## 9.1 Autoloading Functions\n\nA function can be marked as _undefined_ using the autoload builtin (or ‘functions -u’ or ‘typeset -fu’). Such a function has no body. When the function is first executed, the shell searches for its definition using the elements of the fpath variable. Thus to define functions for autoloading, a typical sequence is:\n\nfpath=(~/myfuncs $fpath)\nautoload myfunc1 myfunc2 ...\n\nThe usual alias expansion during reading will be suppressed if the autoload builtin or its equivalent is given the option \\-U. This is recommended for the use of functions supplied with the zsh distribution. Note that for functions precompiled with the zcompile builtin command the flag \\-U must be provided when the .zwc file is created, as the corresponding information is compiled into the latter.\n\nFor each element in fpath, the shell looks for three possible files, the newest of which is used to load the definition for the function:\n\nelement.zwc\n\nA file created with the zcompile builtin command, which is expected to contain the definitions for all functions in the directory named element. The file is treated in the same manner as a directory containing files for functions and is searched for the definition of the function. If the definition is not found, the search for a definition proceeds with the other two possibilities described below.\n\nIf element already includes a .zwc extension (i.e. the extension was explicitly given by the user), element is searched for the definition of the function without comparing its age to that of other files; in fact, there does not need to be any directory named element without the suffix. Thus including an element such as ‘/usr/local/funcs.zwc’ in fpath will speed up the search for functions, with the disadvantage that functions included must be explicitly recompiled by hand before the shell notices any changes.\n\nelement/function.zwc\n\nA file created with zcompile, which is expected to contain the definition for function. It may include other function definitions as well, but those are neither loaded nor executed; a file found in this way is searched _only_ for the definition of function.\n\nelement/function\n\nA file of zsh command text, taken to be the definition for function.\n\nIn summary, the order of searching is, first, in the _parents of_ directories in fpath for the newer of either a compiled directory or a directory in fpath; second, if more than one of these contains a definition for the function that is sought, the leftmost in the fpath is chosen; and third, within a directory, the newer of either a compiled function or an ordinary function definition is used.\n\nIf the KSH\\_AUTOLOAD option is set, or the file contains only a simple definition of the function, the file’s contents will be executed. This will normally define the function in question, but may also perform initialization, which is executed in the context of the function execution, and may therefore define local parameters. It is an error if the function is not defined by loading the file.\n\nOtherwise, the function body (with no surrounding ‘funcname() {...}’) is taken to be the complete contents of the file. This form allows the file to be used directly as an executable shell script. If processing of the file results in the function being re-defined, the function itself is not re-executed. To force the shell to perform initialization and then call the function defined, the file should contain initialization code (which will be executed then discarded) in addition to a complete function definition (which will be retained for subsequent calls to the function), and a call to the shell function, including any arguments, at the end.\n\nFor example, suppose the autoload file func contains\n\nfunc() { print This is func; }\nprint func is initialized\n\nthen ‘func; func’ with KSH\\_AUTOLOAD set will produce both messages on the first call, but only the message ‘This is func’ on the second and subsequent calls. Without KSH\\_AUTOLOAD set, it will produce the initialization message on the first call, and the other message on the second and subsequent calls.\n\nIt is also possible to create a function that is not marked as autoloaded, but which loads its own definition by searching fpath, by using ‘autoload -X’ within a shell function. For example, the following are equivalent:\n\nmyfunc() {\n  autoload -X\n}\nmyfunc args...\n\nand\n\nunfunction myfunc   # if myfunc was defined\nautoload myfunc\nmyfunc args...\n\nIn fact, the functions command outputs ‘builtin autoload -X’ as the body of an autoloaded function. This is done so that\n\nproduces a reasonable result. A true autoloaded function can be identified by the presence of the comment ‘\\# undefined’ in the body, because all comments are discarded from defined functions.\n\nTo load the definition of an autoloaded function myfunc without executing myfunc, use:\n\n* * *\n\n## 9.2 Anonymous Functions\n\nIf no name is given for a function, it is ‘anonymous’ and is handled specially. Either form of function definition may be used: a ‘()’ with no preceding name, or a ‘function’ with an immediately following open brace. The function is executed immediately at the point of definition and is not stored for future use. The function name is set to ‘(anon)’.\n\nArguments to the function may be specified as words following the closing brace defining the function, hence if there are none no arguments (other than $0) are set. This is a difference from the way other functions are parsed: normal function definitions may be followed by certain keywords such as ‘else’ or ‘fi’, which will be treated as arguments to anonymous functions, so that a newline or semicolon is needed to force keyword interpretation.\n\nNote also that the argument list of any enclosing script or function is hidden (as would be the case for any other function called at this point).\n\nRedirections may be applied to the anonymous function in the same manner as to a current-shell structure enclosed in braces. The main use of anonymous functions is to provide a scope for local variables. This is particularly convenient in start-up files as these do not provide their own local variable scope.\n\nFor example,\n\nvariable=outside\nfunction {\n  local variable=inside\n  print \"I am $variable with arguments $\\*\"\n} this and that\nprint \"I am $variable\"\n\noutputs the following:\n\nI am inside with arguments this and that\nI am outside\n\nNote that function definitions with arguments that expand to nothing, for example ‘name=; function $name { ... }’, are not treated as anonymous functions. Instead, they are treated as normal function definitions where the definition is silently discarded.\n\n* * *\n\n## 9.3 Special Functions\n\nCertain functions, if defined, have special meaning to the shell.\n\n* * *\n\n### 9.3.1 Hook Functions\n\nFor the functions below, it is possible to define an array that has the same name as the function with ‘\\_functions’ appended. Any element in such an array is taken as the name of a function to execute; it is executed in the same context and with the same arguments and same initial value of $? as the basic function. For example, if $chpwd\\_functions is an array containing the values ‘mychpwd’, ‘chpwd\\_save\\_dirstack’, then the shell attempts to execute the functions ‘chpwd’, ‘mychpwd’ and ‘chpwd\\_save\\_dirstack’, in that order. Any function that does not exist is silently ignored. A function found by this mechanism is referred to elsewhere as a _hook function_. An error in any function causes subsequent functions not to be run. Note further that an error in a precmd hook causes an immediately following periodic function not to run (though it may run at the next opportunity).\n\nchpwd\n\nExecuted whenever the current working directory is changed.\n\nperiodic\n\nIf the parameter PERIOD is set, this function is executed every $PERIOD seconds, just before a prompt. Note that if multiple functions are defined using the array periodic\\_functions only one period is applied to the complete set of functions, and the scheduled time is not reset if the list of functions is altered. Hence the set of functions is always called together.\n\nprecmd\n\nExecuted before each prompt. Note that precommand functions are not re-executed simply because the command line is redrawn, as happens, for example, when a notification about an exiting job is displayed.\n\npreexec\n\nExecuted just after a command has been read and is about to be executed. If the history mechanism is active (regardless of whether the line was discarded from the history buffer), the string that the user typed is passed as the first argument, otherwise it is an empty string. The actual command that will be executed (including expanded aliases) is passed in two different forms: the second argument is a single-line, size-limited version of the command (with things like function bodies elided); the third argument contains the full text that is being executed.\n\nzshaddhistory\n\nExecuted when a history line has been read interactively, but before it is executed. The sole argument is the complete history line (so that any terminating newline will still be present).\n\nIf any of the hook functions returns status 1 (or any non-zero value other than 2, though this is not guaranteed for future versions of the shell) the history line will not be saved, although it lingers in the history until the next line is executed, allowing you to reuse or edit it immediately.\n\nIf any of the hook functions returns status 2 the history line will be saved on the internal history list, but not written to the history file. In case of a conflict, the first non-zero status value is taken.\n\nA hook function may call ‘fc -p ...’ to switch the history context so that the history is saved in a different file from that in the global HISTFILE parameter. This is handled specially: the history context is automatically restored after the processing of the history line is finished.\n\nThe following example function works with one of the options INC\\_APPEND\\_HISTORY or SHARE\\_HISTORY set, in order that the line is written out immediately after the history entry is added. It first adds the history line to the normal history with the newline stripped, which is usually the correct behaviour. Then it switches the history context so that the line will be written to a history file in the current directory.\n\nzshaddhistory() {\n  print -sr -- ${1%%$'\\\\n'}\n  fc -p .zsh\\_local\\_history\n}\n\nzshexit\n\nExecuted at the point where the main shell is about to exit normally. This is not called by exiting subshells, nor when the exec precommand modifier is used before an external command. Also, unlike TRAPEXIT, it is not called when functions exit.\n\n* * *\n\n### 9.3.2 Trap Functions\n\nThe functions below are treated specially but do not have corresponding hook arrays.\n\nTRAPNAL\n\nIf defined and non-null, this function will be executed whenever the shell catches a signal SIGNAL, where NAL is a signal name as specified for the kill builtin. The signal number will be passed as the first parameter to the function.\n\nIf a function of this form is defined and null, the shell and processes spawned by it will ignore SIGNAL.\n\nThe return status from the function is handled specially. If it is zero, the signal is assumed to have been handled, and execution continues normally. Otherwise, the shell will behave as interrupted except that the return status of the trap is retained.\n\nPrograms terminated by uncaught signals typically return the status 128 plus the signal number. Hence the following causes the handler for SIGINT to print a message, then mimic the usual effect of the signal.\n\nTRAPINT() {\n  print \"Caught SIGINT, aborting.\"\n  return $(( 128 + $1 ))\n}\n\nThe functions TRAPZERR, TRAPDEBUG and TRAPEXIT are never executed inside other traps.\n\nTRAPDEBUG\n\nIf the option DEBUG\\_BEFORE\\_CMD is set (as it is by default), executed before each command; otherwise executed after each command. See the description of the trap builtin in [Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) for details of additional features provided in debug traps.\n\nTRAPEXIT\n\nExecuted when the shell exits, or when the current function exits if defined inside a function. The value of $? at the start of execution is the exit status of the shell or the return status of the function exiting.\n\nTRAPZERR\n\nExecuted whenever a command has a non-zero exit status. However, the function is not executed if the command occurred in a sublist followed by ‘&&’ or ‘||’; only the final command in a sublist of this type causes the trap to be executed. The function TRAPERR acts the same as TRAPZERR on systems where there is no SIGERR (this is the usual case).\n\nThe functions beginning ‘TRAP’ may alternatively be defined with the trap builtin: this may be preferable for some uses. Setting a trap with one form removes any trap of the other form for the same signal; removing a trap in either form removes all traps for the same signal. The forms\n\n(’function traps’) and\n\n(’list traps’) are equivalent in most ways, the exceptions being the following:\n\n*   Function traps have all the properties of normal functions, appearing in the list of functions and being called with their own function context rather than the context where the trap was triggered.\n*   The return status from function traps is special, whereas a return from a list trap causes the surrounding context to return with the given status.\n*   Function traps are not reset within subshells, in accordance with zsh behaviour; list traps are reset, in accordance with POSIX behaviour.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 106,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-html-Functions-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-html-Functions-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-html-Functions-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-html-Functions-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Functions-html-Functions-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 15874,
      "readableText": 18556,
      "none": 28120,
      "readableTextIfPossible": 18556,
      "result": 18556,
      "markdown": 14589
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation",
    "loadedTime": "2025-05-08T06:51:16.831Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation",
    "title": "zsh: 11 Arithmetic Evaluation",
    "description": "zsh: 11 Arithmetic Evaluation",
    "author": null,
    "keywords": "zsh: 11 Arithmetic Evaluation",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:15 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-4ba3\"",
      "expires": "Thu, 08 May 2025 06:52:15 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7070afa244bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 11 Arithmetic Evaluation\nThe shell can perform integer and floating point arithmetic, either using the builtin let, or via a substitution of the form $((...)). For integers, the shell is usually compiled to use 8-byte precision where this is available, otherwise precision is 4 bytes. This can be tested, for example, by giving the command ‘print - $(( 12345678901 ))’; if the number appears unchanged, the precision is at least 8 bytes. Floating point arithmetic always uses the ‘double’ type with whatever corresponding precision is provided by the compiler and the library. \nThe let builtin command takes arithmetic expressions as arguments; each is evaluated separately. Since many of the arithmetic operators, as well as spaces, require quoting, an alternative form is provided: for any command which begins with a ‘((’, all the characters until a matching ‘))’ are treated as a double-quoted expression and arithmetic expansion performed as for an argument of let. More precisely, ‘((...))’ is equivalent to ‘let \"...\"’. The return status is 0 if the arithmetic value of the expression is non-zero, 1 if it is zero, and 2 if an error occurred. \nFor example, the following statement \nis equivalent to \nboth assigning the value 3 to the shell variable val and returning a zero status. \nIntegers can be in bases other than 10. A leading ‘0x’ or ‘0X’ denotes hexadecimal and a leading ‘0b’ or ‘0B’ binary. Integers may also be of the form ‘base#n’, where base is a decimal number between two and thirty-six representing the arithmetic base and n is a number in that base (for example, ‘16#ff’ is 255 in hexadecimal). The base# may also be omitted, in which case base 10 is used. For backwards compatibility the form ‘[base]n’ is also accepted. \nAn integer expression or a base given in the form ‘base#n’ may contain underscores (‘_’) after the leading digit for visual guidance; these are ignored in computation. Examples are 1_000_000 or 0xffff_ffff which are equivalent to 1000000 and 0xffffffff respectively. \nIt is also possible to specify a base to be used for output in the form ‘[#base]’, for example ‘[#16]’. This is used when outputting arithmetical substitutions or when assigning to scalar parameters, but an explicitly defined integer or floating point parameter will not be affected. If an integer variable is implicitly defined by an arithmetic expression, any base specified in this way will be set as the variable’s output arithmetic base as if the option ‘-i base’ to the typeset builtin had been used. The expression has no precedence and if it occurs more than once in a mathematical expression, the last encountered is used. For clarity it is recommended that it appear at the beginning of an expression. As an example: \ntypeset -i 16 y\nprint $(( [#8] x = 32, y = 32 ))\nprint $x $y\noutputs first ‘8#40’, the rightmost value in the given output base, and then ‘8#40 16#20’, because y has been explicitly declared to have output base 16, while x (assuming it does not already exist) is implicitly typed by the arithmetic evaluation, where it acquires the output base 8. \nThe base may be replaced or followed by an underscore, which may itself be followed by a positive integer (if it is missing the value 3 is used). This indicates that underscores should be inserted into the output string, grouping the number for visual clarity. The following integer specifies the number of digits to group together. For example: \nsetopt cbases\nprint $(( [#16_4] 65536 ** 2 ))\noutputs ‘0x1_0000_0000’. \nThe feature can be used with floating point numbers, in which case the base must be omitted; grouping is away from the decimal point. For example, \nzmodload zsh/mathfunc\nprint $(( [#_] sqrt(1e7) ))\noutputs ‘3_162.277_660_168_379_5’ (the number of decimal places shown may vary). \nIf the C_BASES option is set, hexadecimal numbers are output in the standard C format, for example ‘0xFF’ instead of the usual ‘16#FF’. If the option OCTAL_ZEROES is also set (it is not by default), octal numbers will be treated similarly and hence appear as ‘077’ instead of ‘8#77’. This option has no effect on the output of bases other than hexadecimal and octal, and these formats are always understood on input. \nWhen an output base is specified using the ‘[#base]’ syntax, an appropriate base prefix will be output if necessary, so that the value output is valid syntax for input. If the # is doubled, for example ‘[##16]’, then no base prefix is output. \nFloating point constants are recognized by the presence of a decimal point or an exponent. The decimal point may be the first character of the constant, but the exponent character e or E may not, as it will be taken for a parameter name. All numeric parts (before and after the decimal point and in the exponent) may contain underscores after the leading digit for visual guidance; these are ignored in computation. \nAn arithmetic expression uses nearly the same syntax and associativity of expressions as in C. \nIn the native mode of operation, the following operators are supported (listed in decreasing order of precedence): \n+ - ! ~ ++ – \nunary plus/minus, logical NOT, complement, {pre,post}{in,de}crement \n<< >> \nbitwise shift left, right \n& \nbitwise AND \n^ \nbitwise XOR \n| \nbitwise OR \n** \nexponentiation \n* / % \nmultiplication, division, modulus (remainder) \n+ - \naddition, subtraction \n< > <= >= \ncomparison \n== != \nequality and inequality \n&& \nlogical AND \n|| ^^ \nlogical OR, XOR \n? : \nternary operator \n= += -= *= /= %= &= ^= |= <<= >>= &&= ||= ^^= **= \nassignment \n, \ncomma operator \nThe operators ‘&&’, ‘||’, ‘&&=’, and ‘||=’ are short-circuiting, and only one of the latter two expressions in a ternary operator is evaluated. Note the precedence of the bitwise AND, OR, and XOR operators. \nWith the option C_PRECEDENCES the precedences (but no other properties) of the operators are altered to be the same as those in most other languages that support the relevant operators: \n+ - ! ~ ++ – \nunary plus/minus, logical NOT, complement, {pre,post}{in,de}crement \n** \nexponentiation \n* / % \nmultiplication, division, modulus (remainder) \n+ - \naddition, subtraction \n<< >> \nbitwise shift left, right \n< > <= >= \ncomparison \n== != \nequality and inequality \n& \nbitwise AND \n^ \nbitwise XOR \n| \nbitwise OR \n&& \nlogical AND \n^^ \nlogical XOR \n|| \nlogical OR \n? : \nternary operator \n= += -= *= /= %= &= ^= |= <<= >>= &&= ||= ^^= **= \nassignment \n, \ncomma operator \nNote the precedence of exponentiation in both cases is below that of unary operators, hence ‘-3**2’ evaluates as ‘9’, not ‘-9’. Use parentheses where necessary: ‘-(3**2)’. This is for compatibility with other shells. \nMathematical functions can be called with the syntax ‘func(args)’, where the function decides if the args is used as a string or a comma-separated list of arithmetic expressions. The shell currently defines no mathematical functions by default, but the module zsh/mathfunc may be loaded with the zmodload builtin to provide standard floating point mathematical functions. \nAn expression of the form ‘##x’ where x is any character sequence such as ‘a’, ‘^A’, or ‘\\M-\\C-x’ gives the value of this character and an expression of the form ‘#name’ gives the value of the first character of the contents of the parameter name. Character values are according to the character set used in the current locale; for multibyte character handling the option MULTIBYTE must be set. Note that this form is different from ‘$#name’, a standard parameter substitution which gives the length of the parameter name. ‘#\\’ is accepted instead of ‘##’, but its use is deprecated. \nNamed parameters and subscripted arrays can be referenced by name within an arithmetic expression without using the parameter expansion syntax. For example, \nassigns twice the value of $val1 to the parameter named val2. \nAn internal integer representation of a named parameter can be specified with the integer builtin. Arithmetic evaluation is performed on the value of each assignment to a named parameter declared integer in this manner. Assigning a floating point number to an integer results in rounding towards zero. \nLikewise, floating point numbers can be declared with the float builtin; there are two types, differing only in their output format, as described for the typeset builtin. The output format can be bypassed by using arithmetic substitution instead of the parameter substitution, i.e. ‘${float}’ uses the defined format, but ‘$((float))’ uses a generic floating point format. \nPromotion of integer to floating point values is performed where necessary. In addition, if any operator which requires an integer (‘&’, ‘|’, ‘^’, ‘<<’, ‘>>’ and their equivalents with assignment) is given a floating point argument, it will be silently rounded towards zero except for ‘~’ which rounds down. \nUsers should beware that, in common with many other programming languages but not software designed for calculation, the evaluation of an expression in zsh is taken a term at a time and promotion of integers to floating point does not occur in terms only containing integers. A typical result of this is that a division such as 6/8 is truncated, in this being rounded towards 0. The FORCE_FLOAT shell option can be used in scripts or functions where floating point evaluation is required throughout. \nScalar variables can hold integer or floating point values at different times; there is no memory of the numeric type in this case. \nIf a variable is first assigned in a numeric context without previously being declared, it will be implicitly typed as integer or float and retain that type either until the type is explicitly changed or until the end of the scope. This can have unforeseen consequences. For example, in the loop \nfor (( f = 0; f < 1; f += 0.1 )); do\n# use $f\ndone\nif f has not already been declared, the first assignment will cause it to be created as an integer, and consequently the operation ‘f += 0.1’ will always cause the result to be truncated to zero, so that the loop will fail. A simple fix would be to turn the initialization into ‘f = 0.0’. It is therefore best to declare numeric variables with explicit types. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Arithmetic-Evaluation-html-Arithmetic-Evaluation-2w1sz.html",
  "markdown": "# zsh: 11 Arithmetic Evaluation\n\nThe shell can perform integer and floating point arithmetic, either using the builtin let, or via a substitution of the form $((...)). For integers, the shell is usually compiled to use 8-byte precision where this is available, otherwise precision is 4 bytes. This can be tested, for example, by giving the command ‘print - $(( 12345678901 ))’; if the number appears unchanged, the precision is at least 8 bytes. Floating point arithmetic always uses the ‘double’ type with whatever corresponding precision is provided by the compiler and the library.\n\nThe let builtin command takes arithmetic expressions as arguments; each is evaluated separately. Since many of the arithmetic operators, as well as spaces, require quoting, an alternative form is provided: for any command which begins with a ‘((’, all the characters until a matching ‘))’ are treated as a double-quoted expression and arithmetic expansion performed as for an argument of let. More precisely, ‘((...))’ is equivalent to ‘let \"...\"’. The return status is 0 if the arithmetic value of the expression is non-zero, 1 if it is zero, and 2 if an error occurred.\n\nFor example, the following statement\n\nis equivalent to\n\nboth assigning the value 3 to the shell variable val and returning a zero status.\n\nIntegers can be in bases other than 10. A leading ‘0x’ or ‘0X’ denotes hexadecimal and a leading ‘0b’ or ‘0B’ binary. Integers may also be of the form ‘base#n’, where base is a decimal number between two and thirty-six representing the arithmetic base and n is a number in that base (for example, ‘16#ff’ is 255 in hexadecimal). The base# may also be omitted, in which case base 10 is used. For backwards compatibility the form ‘\\[base\\]n’ is also accepted.\n\nAn integer expression or a base given in the form ‘base#n’ may contain underscores (‘\\_’) after the leading digit for visual guidance; these are ignored in computation. Examples are 1\\_000\\_000 or 0xffff\\_ffff which are equivalent to 1000000 and 0xffffffff respectively.\n\nIt is also possible to specify a base to be used for output in the form ‘\\[#base\\]’, for example ‘\\[#16\\]’. This is used when outputting arithmetical substitutions or when assigning to scalar parameters, but an explicitly defined integer or floating point parameter will not be affected. If an integer variable is implicitly defined by an arithmetic expression, any base specified in this way will be set as the variable’s output arithmetic base as if the option ‘\\-i base’ to the typeset builtin had been used. The expression has no precedence and if it occurs more than once in a mathematical expression, the last encountered is used. For clarity it is recommended that it appear at the beginning of an expression. As an example:\n\ntypeset -i 16 y\nprint $(( \\[#8\\] x = 32, y = 32 ))\nprint $x $y\n\noutputs first ‘8#40’, the rightmost value in the given output base, and then ‘8#40 16#20’, because y has been explicitly declared to have output base 16, while x (assuming it does not already exist) is implicitly typed by the arithmetic evaluation, where it acquires the output base 8.\n\nThe base may be replaced or followed by an underscore, which may itself be followed by a positive integer (if it is missing the value 3 is used). This indicates that underscores should be inserted into the output string, grouping the number for visual clarity. The following integer specifies the number of digits to group together. For example:\n\nsetopt cbases\nprint $(( \\[#16\\_4\\] 65536 \\*\\* 2 ))\n\noutputs ‘0x1\\_0000\\_0000’.\n\nThe feature can be used with floating point numbers, in which case the base must be omitted; grouping is away from the decimal point. For example,\n\nzmodload zsh/mathfunc\nprint $(( \\[#\\_\\] sqrt(1e7) ))\n\noutputs ‘3\\_162.277\\_660\\_168\\_379\\_5’ (the number of decimal places shown may vary).\n\nIf the C\\_BASES option is set, hexadecimal numbers are output in the standard C format, for example ‘0xFF’ instead of the usual ‘16#FF’. If the option OCTAL\\_ZEROES is also set (it is not by default), octal numbers will be treated similarly and hence appear as ‘077’ instead of ‘8#77’. This option has no effect on the output of bases other than hexadecimal and octal, and these formats are always understood on input.\n\nWhen an output base is specified using the ‘\\[#base\\]’ syntax, an appropriate base prefix will be output if necessary, so that the value output is valid syntax for input. If the # is doubled, for example ‘\\[##16\\]’, then no base prefix is output.\n\nFloating point constants are recognized by the presence of a decimal point or an exponent. The decimal point may be the first character of the constant, but the exponent character e or E may not, as it will be taken for a parameter name. All numeric parts (before and after the decimal point and in the exponent) may contain underscores after the leading digit for visual guidance; these are ignored in computation.\n\nAn arithmetic expression uses nearly the same syntax and associativity of expressions as in C.\n\nIn the native mode of operation, the following operators are supported (listed in decreasing order of precedence):\n\n\\+ - ! ~ ++ –\n\nunary plus/minus, logical NOT, complement, {pre,post}{in,de}crement\n\n<< >>\n\nbitwise shift left, right\n\n&\n\nbitwise AND\n\n^\n\nbitwise XOR\n\n|\n\nbitwise OR\n\n\\*\\*\n\nexponentiation\n\n\\* / %\n\nmultiplication, division, modulus (remainder)\n\n\\+ -\n\naddition, subtraction\n\n< > <= >=\n\ncomparison\n\n\\== !=\n\nequality and inequality\n\n&&\n\nlogical AND\n\n|| ^^\n\nlogical OR, XOR\n\n? :\n\nternary operator\n\n\\= += -= \\*= /= %= &= ^= |= <<= >>= &&= ||= ^^= \\*\\*=\n\nassignment\n\n,\n\ncomma operator\n\nThe operators ‘&&’, ‘||’, ‘&&=’, and ‘||=’ are short-circuiting, and only one of the latter two expressions in a ternary operator is evaluated. Note the precedence of the bitwise AND, OR, and XOR operators.\n\nWith the option C\\_PRECEDENCES the precedences (but no other properties) of the operators are altered to be the same as those in most other languages that support the relevant operators:\n\n\\+ - ! ~ ++ –\n\nunary plus/minus, logical NOT, complement, {pre,post}{in,de}crement\n\n\\*\\*\n\nexponentiation\n\n\\* / %\n\nmultiplication, division, modulus (remainder)\n\n\\+ -\n\naddition, subtraction\n\n<< >>\n\nbitwise shift left, right\n\n< > <= >=\n\ncomparison\n\n\\== !=\n\nequality and inequality\n\n&\n\nbitwise AND\n\n^\n\nbitwise XOR\n\n|\n\nbitwise OR\n\n&&\n\nlogical AND\n\n^^\n\nlogical XOR\n\n||\n\nlogical OR\n\n? :\n\nternary operator\n\n\\= += -= \\*= /= %= &= ^= |= <<= >>= &&= ||= ^^= \\*\\*=\n\nassignment\n\n,\n\ncomma operator\n\nNote the precedence of exponentiation in both cases is below that of unary operators, hence ‘\\-3\\*\\*2’ evaluates as ‘9’, not ‘\\-9’. Use parentheses where necessary: ‘\\-(3\\*\\*2)’. This is for compatibility with other shells.\n\nMathematical functions can be called with the syntax ‘func(args)’, where the function decides if the args is used as a string or a comma-separated list of arithmetic expressions. The shell currently defines no mathematical functions by default, but the module zsh/mathfunc may be loaded with the zmodload builtin to provide standard floating point mathematical functions.\n\nAn expression of the form ‘##x’ where x is any character sequence such as ‘a’, ‘^A’, or ‘\\\\M-\\\\C-x’ gives the value of this character and an expression of the form ‘#name’ gives the value of the first character of the contents of the parameter name. Character values are according to the character set used in the current locale; for multibyte character handling the option MULTIBYTE must be set. Note that this form is different from ‘$#name’, a standard parameter substitution which gives the length of the parameter name. ‘#\\\\’ is accepted instead of ‘##’, but its use is deprecated.\n\nNamed parameters and subscripted arrays can be referenced by name within an arithmetic expression without using the parameter expansion syntax. For example,\n\nassigns twice the value of $val1 to the parameter named val2.\n\nAn internal integer representation of a named parameter can be specified with the integer builtin. Arithmetic evaluation is performed on the value of each assignment to a named parameter declared integer in this manner. Assigning a floating point number to an integer results in rounding towards zero.\n\nLikewise, floating point numbers can be declared with the float builtin; there are two types, differing only in their output format, as described for the typeset builtin. The output format can be bypassed by using arithmetic substitution instead of the parameter substitution, i.e. ‘${float}’ uses the defined format, but ‘$((float))’ uses a generic floating point format.\n\nPromotion of integer to floating point values is performed where necessary. In addition, if any operator which requires an integer (‘&’, ‘|’, ‘^’, ‘<<’, ‘\\>>’ and their equivalents with assignment) is given a floating point argument, it will be silently rounded towards zero except for ‘~’ which rounds down.\n\nUsers should beware that, in common with many other programming languages but not software designed for calculation, the evaluation of an expression in zsh is taken a term at a time and promotion of integers to floating point does not occur in terms only containing integers. A typical result of this is that a division such as 6/8 is truncated, in this being rounded towards 0. The FORCE\\_FLOAT shell option can be used in scripts or functions where floating point evaluation is required throughout.\n\nScalar variables can hold integer or floating point values at different times; there is no memory of the numeric type in this case.\n\nIf a variable is first assigned in a numeric context without previously being declared, it will be implicitly typed as integer or float and retain that type either until the type is explicitly changed or until the end of the scope. This can have unforeseen consequences. For example, in the loop\n\nfor (( f = 0; f < 1; f += 0.1 )); do\n# use $f\ndone\n\nif f has not already been declared, the first assignment will cause it to be created as an integer, and consequently the operation ‘f += 0.1’ will always cause the result to be truncated to zero, so that the loop will fail. A simple fix would be to turn the initialization into ‘f = 0.0’. It is therefore best to declare numeric variables with explicit types.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 35,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Arithmetic-Evaluation-html-Arithmetic-Evaluation-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Arithmetic-Evaluation-html-Arithmetic-Evaluation-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Arithmetic-Evaluation-html-Arithmetic-Evaluation-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Arithmetic-Evaluation-html-Arithmetic-Evaluation-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Arithmetic-Evaluation-html-Arithmetic-Evaluation-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 11507,
      "readableText": 14110,
      "none": 16998,
      "readableTextIfPossible": 14110,
      "result": 14110,
      "markdown": 10380
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Roadmap.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Roadmap.html#Roadmap",
    "loadedTime": "2025-05-08T06:51:17.148Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Roadmap.html#Roadmap",
    "title": "zsh: 3 Roadmap",
    "description": "zsh: 3 Roadmap",
    "author": null,
    "keywords": "zsh: 3 Roadmap",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:15 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-5e09\"",
      "expires": "Thu, 08 May 2025 06:52:15 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7070dfaff4bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 3 Roadmap\nThe Zsh Manual, like the shell itself, is large and often complicated. This section of the manual provides some pointers to areas of the shell that are likely to be of particular interest to new users, and indicates where in the rest of the manual the documentation is to be found. \n3.1 When the shell starts\nWhen it starts, the shell reads commands from various files. These can be created or edited to customize the shell. See Files. \nIf no personal initialization files exist for the current user, a function is run to help you change some of the most common settings. It won’t appear if your administrator has disabled the zsh/newuser module. The function is designed to be self-explanatory. You can run it by hand with ‘autoload -Uz zsh-newuser-install; zsh-newuser-install -f’. See also User Configuration Functions. \n3.2 Interactive Use\nInteraction with the shell uses the builtin Zsh Line Editor, ZLE. This is described in detail in Zsh Line Editor. \nThe first decision a user must make is whether to use the Emacs or Vi editing mode as the keys for editing are substantially different. Emacs editing mode is probably more natural for beginners and can be selected explicitly with the command bindkey -e. \nA history mechanism for retrieving previously typed lines (most simply with the Up or Down arrow keys) is available; note that, unlike other shells, zsh will not save these lines when the shell exits unless you set appropriate variables, and the number of history lines retained by default is quite small (30 lines). See the description of the shell variables (referred to in the documentation as parameters) HISTFILE, HISTSIZE and SAVEHIST in Parameters Used By The Shell. Note that it’s currently only possible to read and write files saving history when the shell is interactive, i.e. it does not work from scripts. \nThe shell now supports the UTF-8 character set (and also others if supported by the operating system). This is (mostly) handled transparently by the shell, but the degree of support in terminal emulators is variable. There is some discussion of this in the shell FAQ, https://www.zsh.org/FAQ/. Note in particular that for combining characters to be handled the option COMBINING_CHARS needs to be set. Because the shell is now more sensitive to the definition of the character set, note that if you are upgrading from an older version of the shell you should ensure that the appropriate variable, either LANG (to affect all aspects of the shell’s operation) or LC_CTYPE (to affect only the handling of character sets) is set to an appropriate value. This is true even if you are using a single-byte character set including extensions of ASCII such as ISO-8859-1 or ISO-8859-15. See the description of LC_CTYPE in Parameters. \n3.2.1 Completion\nCompletion is a feature present in many shells. It allows the user to type only a part (usually the prefix) of a word and have the shell fill in the rest. The completion system in zsh is programmable. For example, the shell can be set to complete email addresses in arguments to the mail command from your ~/.abook/addressbook; usernames, hostnames, and even remote paths in arguments to scp, and so on. Anything that can be written in or glued together with zsh can be the source of what the line editor offers as possible completions. \nZsh has two completion systems, an old, so called compctl completion (named after the builtin command that serves as its complete and only user interface), and a new one, referred to as compsys, organized as library of builtin and user-defined functions. The two systems differ in their interface for specifying the completion behavior. The new system is more customizable and is supplied with completions for many commonly used commands; it is therefore to be preferred. \nThe completion system must be enabled explicitly when the shell starts. For more information see Completion System. \n3.2.2 Extending the line editor\nApart from completion, the line editor is highly extensible by means of shell functions. Some useful functions are provided with the shell; they provide facilities such as: \ninsert-composed-char \ncomposing characters not found on the keyboard \nmatch-words-by-style \nconfiguring what the line editor considers a word when moving or deleting by word \nhistory-beginning-search-backward-end, etc. \nalternative ways of searching the shell history \nreplace-string, replace-pattern \nfunctions for replacing strings or patterns globally in the command line \nedit-command-line \nedit the command line with an external editor. \nSee ZLE Functions for descriptions of these. \n3.3 Options\nThe shell has a large number of options for changing its behaviour. These cover all aspects of the shell; browsing the full documentation is the only good way to become acquainted with the many possibilities. See Options. \n3.4 Pattern Matching\nThe shell has a rich set of patterns which are available for file matching (described in the documentation as ‘filename generation’ and also known for historical reasons as ‘globbing’) and for use when programming. These are described in Filename Generation. \nOf particular interest are the following patterns that are not commonly supported by other systems of pattern matching: \n** \nfor matching over multiple directories \n| \nfor matching either of two alternatives \n~, ^ \nthe ability to exclude patterns from matching when the EXTENDED_GLOB option is set \n(...) \nglob qualifiers, included in parentheses at the end of the pattern, which select files by type (such as directories) or attribute (such as size). \n3.5 General Comments on Syntax\nAlthough the syntax of zsh is in ways similar to the Korn shell, and therefore more remotely to the original UNIX shell, the Bourne shell, its default behaviour does not entirely correspond to those shells. General shell syntax is introduced in Shell Grammar. \nOne commonly encountered difference is that variables substituted onto the command line are not split into words. See the description of the shell option SH_WORD_SPLIT in Parameter Expansion. In zsh, you can either explicitly request the splitting (e.g. ${=foo}) or use an array when you want a variable to expand to more than one word. See Array Parameters. \n3.6 Programming\nThe most convenient way of adding enhancements to the shell is typically by writing a shell function and arranging for it to be autoloaded. Functions are described in Functions. Users changing from the C shell and its relatives should notice that aliases are less used in zsh as they don’t perform argument substitution, only simple text replacement. \nA few general functions, other than those for the line editor described above, are provided with the shell and are described in User Contributions. Features include: \npromptinit \na prompt theme system for changing prompts easily, see Prompt Themes \nzsh-mime-setup \na MIME-handling system which dispatches commands according to the suffix of a file as done by graphical file managers \nzcalc \na calculator \nzargs \na version of xargs that makes the find command redundant \nzmv \na command for renaming files by means of shell patterns. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Roadmap-html-Roadmap-xpriu.html",
  "markdown": "# zsh: 3 Roadmap\n\nThe Zsh Manual, like the shell itself, is large and often complicated. This section of the manual provides some pointers to areas of the shell that are likely to be of particular interest to new users, and indicates where in the rest of the manual the documentation is to be found.\n\n* * *\n\n## 3.1 When the shell starts\n\nWhen it starts, the shell reads commands from various files. These can be created or edited to customize the shell. See [Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Files).\n\nIf no personal initialization files exist for the current user, a function is run to help you change some of the most common settings. It won’t appear if your administrator has disabled the zsh/newuser module. The function is designed to be self-explanatory. You can run it by hand with ‘autoload -Uz zsh-newuser-install; zsh-newuser-install -f’. See also [User Configuration Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#User-Configuration-Functions).\n\n* * *\n\n## 3.2 Interactive Use\n\nInteraction with the shell uses the builtin Zsh Line Editor, ZLE. This is described in detail in [Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor).\n\nThe first decision a user must make is whether to use the Emacs or Vi editing mode as the keys for editing are substantially different. Emacs editing mode is probably more natural for beginners and can be selected explicitly with the command bindkey -e.\n\nA history mechanism for retrieving previously typed lines (most simply with the Up or Down arrow keys) is available; note that, unlike other shells, zsh will not save these lines when the shell exits unless you set appropriate variables, and the number of history lines retained by default is quite small (30 lines). See the description of the shell variables (referred to in the documentation as parameters) HISTFILE, HISTSIZE and SAVEHIST in [Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell). Note that it’s currently only possible to read and write files saving history when the shell is interactive, i.e. it does not work from scripts.\n\nThe shell now supports the UTF-8 character set (and also others if supported by the operating system). This is (mostly) handled transparently by the shell, but the degree of support in terminal emulators is variable. There is some discussion of this in the shell FAQ, [https://www.zsh.org/FAQ/](https://www.zsh.org/FAQ/). Note in particular that for combining characters to be handled the option COMBINING\\_CHARS needs to be set. Because the shell is now more sensitive to the definition of the character set, note that if you are upgrading from an older version of the shell you should ensure that the appropriate variable, either LANG (to affect all aspects of the shell’s operation) or LC\\_CTYPE (to affect only the handling of character sets) is set to an appropriate value. This is true even if you are using a single-byte character set including extensions of ASCII such as ISO-8859-1 or ISO-8859-15. See the description of LC\\_CTYPE in [Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters).\n\n* * *\n\n### 3.2.1 Completion\n\nCompletion is a feature present in many shells. It allows the user to type only a part (usually the prefix) of a word and have the shell fill in the rest. The completion system in zsh is programmable. For example, the shell can be set to complete email addresses in arguments to the mail command from your ~/.abook/addressbook; usernames, hostnames, and even remote paths in arguments to scp, and so on. Anything that can be written in or glued together with zsh can be the source of what the line editor offers as possible completions.\n\nZsh has two completion systems, an old, so called compctl completion (named after the builtin command that serves as its complete and only user interface), and a new one, referred to as compsys, organized as library of builtin and user-defined functions. The two systems differ in their interface for specifying the completion behavior. The new system is more customizable and is supplied with completions for many commonly used commands; it is therefore to be preferred.\n\nThe completion system must be enabled explicitly when the shell starts. For more information see [Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System).\n\n* * *\n\n### 3.2.2 Extending the line editor\n\nApart from completion, the line editor is highly extensible by means of shell functions. Some useful functions are provided with the shell; they provide facilities such as:\n\ninsert-composed-char\n\ncomposing characters not found on the keyboard\n\nmatch-words-by-style\n\nconfiguring what the line editor considers a word when moving or deleting by word\n\nhistory-beginning-search-backward-end, etc.\n\nalternative ways of searching the shell history\n\nreplace-string, replace-pattern\n\nfunctions for replacing strings or patterns globally in the command line\n\nedit-command-line\n\nedit the command line with an external editor.\n\nSee [ZLE Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#ZLE-Functions) for descriptions of these.\n\n* * *\n\n## 3.3 Options\n\nThe shell has a large number of options for changing its behaviour. These cover all aspects of the shell; browsing the full documentation is the only good way to become acquainted with the many possibilities. See [Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Options).\n\n* * *\n\n## 3.4 Pattern Matching\n\nThe shell has a rich set of patterns which are available for file matching (described in the documentation as ‘filename generation’ and also known for historical reasons as ‘globbing’) and for use when programming. These are described in [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation).\n\nOf particular interest are the following patterns that are not commonly supported by other systems of pattern matching:\n\n\\*\\*\n\nfor matching over multiple directories\n\n|\n\nfor matching either of two alternatives\n\n~, ^\n\nthe ability to exclude patterns from matching when the EXTENDED\\_GLOB option is set\n\n(...)\n\nglob qualifiers, included in parentheses at the end of the pattern, which select files by type (such as directories) or attribute (such as size).\n\n* * *\n\n## 3.5 General Comments on Syntax\n\nAlthough the syntax of zsh is in ways similar to the Korn shell, and therefore more remotely to the original UNIX shell, the Bourne shell, its default behaviour does not entirely correspond to those shells. General shell syntax is introduced in [Shell Grammar](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Shell-Grammar).\n\nOne commonly encountered difference is that variables substituted onto the command line are not split into words. See the description of the shell option SH\\_WORD\\_SPLIT in [Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion). In zsh, you can either explicitly request the splitting (e.g. ${=foo}) or use an array when you want a variable to expand to more than one word. See [Array Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Array-Parameters).\n\n* * *\n\n## 3.6 Programming\n\nThe most convenient way of adding enhancements to the shell is typically by writing a shell function and arranging for it to be autoloaded. Functions are described in [Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions). Users changing from the C shell and its relatives should notice that aliases are less used in zsh as they don’t perform argument substitution, only simple text replacement.\n\nA few general functions, other than those for the line editor described above, are provided with the shell and are described in [User Contributions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#User-Contributions). Features include:\n\npromptinit\n\na prompt theme system for changing prompts easily, see [Prompt Themes](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Prompt-Themes)\n\nzsh-mime-setup\n\na MIME-handling system which dispatches commands according to the suffix of a file as done by graphical file managers\n\nzcalc\n\na calculator\n\nzargs\n\na version of xargs that makes the find command redundant\n\nzmv\n\na command for renaming files by means of shell patterns.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 115,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Roadmap-html-Roadmap-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Roadmap-html-Roadmap-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Roadmap-html-Roadmap-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Roadmap-html-Roadmap-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Roadmap-html-Roadmap-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 9601,
      "readableText": 10278,
      "none": 22496,
      "readableTextIfPossible": 10278,
      "result": 10278,
      "markdown": 8572
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Style-and-Tag-Index.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Style-and-Tag-Index.html#Style-and-Tag-Index",
    "loadedTime": "2025-05-08T06:51:19.714Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Style-and-Tag-Index.html#Style-and-Tag-Index",
    "title": "zsh: Style and Tag Index",
    "description": "zsh: Style and Tag Index",
    "author": null,
    "keywords": "zsh: Style and Tag Index",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:18 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-9249\"",
      "expires": "Thu, 08 May 2025 06:52:18 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "MISS",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7071d9f9b4bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Style and Tag Index\nIndex Entry Section - -array-value-, completion context 20.2.2 Autoloaded files -assign-parameter-, completion context 20.2.2 Autoloaded files -brace-parameter-, completion context 20.2.2 Autoloaded files -command-, completion context 20.2.2 Autoloaded files -condition-, completion context 20.2.2 Autoloaded files -default-, completion context 20.2.2 Autoloaded files -equal-, completion context 20.2.2 Autoloaded files -first-, completion context 20.2.2 Autoloaded files -math-, completion context 20.2.2 Autoloaded files -parameter-, completion context 20.2.2 Autoloaded files -redirect-, completion context 20.2.2 Autoloaded files -subscript-, completion context 20.2.2 Autoloaded files -tilde-, completion context 20.2.2 Autoloaded files -value-, completion context 20.2.2 Autoloaded files A accept-exact, completion style 20.3.3 Standard Styles accept-exact-dirs, completion style 20.3.3 Standard Styles accounts, completion tag 20.3.2 Standard Tags actionformats 26.5.2 Configuration add-space, completion style 20.3.3 Standard Styles all-expansions, completion tag 20.3.2 Standard Tags all-files, completion tag 20.3.2 Standard Tags ambiguous, completion style 20.3.3 Standard Styles arguments, completion tag 20.3.2 Standard Tags arrays, completion tag 20.3.2 Standard Tags assign-list, completion style 20.3.3 Standard Styles association-keys, completion tag 20.3.2 Standard Tags auto-description, completion style 20.3.3 Standard Styles avoid-completer, completion style 20.3.3 Standard Styles B bookmarks, completion tag 20.3.2 Standard Tags branchformat 26.5.2 Configuration break-keys, widget style 26.7.3 Styles builtins, completion tag 20.3.2 Standard Tags C cache-path, completion style 20.3.3 Standard Styles cache-policy, completion style 20.3.3 Standard Styles calendar-file 23.4 Styles call-command, completion style 20.3.3 Standard Styles characters, completion tag 20.3.2 Standard Tags check-for-changes 26.5.2 Configuration check-for-staged-changes 26.5.2 Configuration chpwd, zftp style 25.4.1 Configuration colormapids, completion tag 20.3.2 Standard Tags colors, completion tag 20.3.2 Standard Tags command 26.5.2 Configuration command, completion style 20.3.3 Standard Styles command-path, completion style 20.3.3 Standard Styles commands, completion style 20.3.3 Standard Styles commands, completion tag 20.3.2 Standard Tags complete, completion style 20.3.3 Standard Styles complete-options, completion style 20.3.3 Standard Styles completer, completion style 20.3.3 Standard Styles completer, completion style 26.7.3 Styles condition, completion style 20.3.3 Standard Styles contexts, completion tag 20.3.2 Standard Tags corrections, completion tag 20.3.2 Standard Tags current-shell, MIME style 26.9 MIME Functions cursor, completion style 26.7.3 Styles cursors, completion tag 20.3.2 Standard Tags D date-format 23.4 Styles debug 26.5.2 Configuration default, completion tag 20.3.2 Standard Tags delimiters, completion style 20.3.3 Standard Styles descriptions, completion tag 20.3.2 Standard Tags devices, completion tag 20.3.2 Standard Tags directories, completion tag 20.3.2 Standard Tags directory-stack, completion tag 20.3.2 Standard Tags disable 26.5.2 Configuration disable-patterns 26.5.2 Configuration disabled, completion style 20.3.3 Standard Styles disown, MIME style 26.9 MIME Functions displays, completion tag 20.3.2 Standard Tags domains, completion style 20.3.3 Standard Styles domains, completion tag 20.3.2 Standard Tags done-file 23.4 Styles E email-*, completion tag 20.3.2 Standard Tags enable 26.5.2 Configuration environ, completion style 20.3.3 Standard Styles execute-as-is, MIME style 26.9 MIME Functions execute-never, MIME style 26.9 MIME Functions expand, completion style 20.3.3 Standard Styles expansions, completion tag 20.3.2 Standard Tags extensions, completion tag 20.3.2 Standard Tags extra-verbose, completion style 20.3.3 Standard Styles F fake, completion style 20.3.3 Standard Styles fake-always, completion style 20.3.3 Standard Styles fake-files, completion style 20.3.3 Standard Styles fake-parameters, completion style 20.3.3 Standard Styles file-descriptors, completion tag 20.3.2 Standard Tags file-list, completion style 20.3.3 Standard Styles file-path, MIME style 26.9 MIME Functions file-patterns, completion style 20.3.3 Standard Styles file-sort, completion style 20.3.3 Standard Styles file-split-chars, completion style 20.3.3 Standard Styles files, completion tag 20.3.2 Standard Tags filter, completion style 20.3.3 Standard Styles find-file-in-path, MIME style 26.9 MIME Functions flags, MIME style 26.9 MIME Functions fonts, completion tag 20.3.2 Standard Tags force-list, completion style 20.3.3 Standard Styles format, completion style 20.3.3 Standard Styles formats 26.5.2 Configuration fstypes, completion tag 20.3.2 Standard Tags functions, completion tag 20.3.2 Standard Tags \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Style-and-Tag-Index-html-Style-and-Tag-Index-x7yt5.html",
  "markdown": "# zsh: Style and Tag Index\n\nIndex Entry  Section\n\n* * *\n\n\\- [`-array-value-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002darray_002dvalue_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-assign-parameter-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dassign_002dparameter_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-brace-parameter-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dbrace_002dparameter_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-command-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dcommand_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-condition-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dcondition_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-default-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002ddefault_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-equal-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dequal_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-first-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dfirst_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-math-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dmath_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-parameter-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dparameter_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-redirect-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dredirect_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-subscript-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dsubscript_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-tilde-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dtilde_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files) [`-value-, completion context`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-_002dvalue_002d_002c-completion-context) [20.2.2 Autoloaded files](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Autoloaded-files)\n\n* * *\n\nA [`accept-exact, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-accept_002dexact_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`accept-exact-dirs, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-accept_002dexact_002ddirs_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`accounts, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-accounts_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`actionformats`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-actionformats) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`add-space, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-add_002dspace_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`all-expansions, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-all_002dexpansions_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`all-files, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-all_002dfiles_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`ambiguous, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-ambiguous_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`arguments, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-arguments_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`arrays, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-arrays_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`assign-list, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-assign_002dlist_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`association-keys, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-association_002dkeys_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`auto-description, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-auto_002ddescription_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`avoid-completer, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-avoid_002dcompleter_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles)\n\n* * *\n\nB [`bookmarks, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-bookmarks_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`branchformat`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-branchformat) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`break-keys, widget style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-break_002dkeys_002c-widget-style) [26.7.3 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles-2) [`builtins, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-builtins_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nC [`cache-path, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-cache_002dpath_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`cache-policy, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-cache_002dpolicy_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`calendar-file`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar_002dfile) [23.4 Styles](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Styles) [`call-command, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-call_002dcommand_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`characters, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-characters_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`check-for-changes`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-check_002dfor_002dchanges) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`check-for-staged-changes`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-check_002dfor_002dstaged_002dchanges) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`chpwd, zftp style`](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-chpwd_002c-zftp-style) [25.4.1 Configuration](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Configuration-2) [`colormapids, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-colormapids_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`colors, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-colors_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`command`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-command-2) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`command, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-command_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`command-path, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-command_002dpath_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`commands, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-commands_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`commands, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-commands_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`complete, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-complete_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`complete-options, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-complete_002doptions_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`completer, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-completer_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`completer, completion style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-completer_002c-completion-style-1) [26.7.3 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles-2) [`condition, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-condition_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`contexts, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-contexts_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`corrections, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-corrections_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`current-shell, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-current_002dshell_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`cursor, completion style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-cursor_002c-completion-style) [26.7.3 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles-2) [`cursors, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-cursors_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nD [`date-format`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-date_002dformat) [23.4 Styles](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Styles) [`debug`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-debug) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`default, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-default_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`delimiters, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-delimiters_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`descriptions, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-descriptions_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`devices, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-devices_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`directories, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-directories_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`directory-stack, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-directory_002dstack_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`disable`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-disable-1) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`disable-patterns`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-disable_002dpatterns) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`disabled, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-disabled_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`disown, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-disown_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`displays, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-displays_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`domains, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-domains_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`domains, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-domains_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`done-file`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-done_002dfile) [23.4 Styles](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Styles)\n\n* * *\n\nE [`email-*, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-email_002d_002a_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`enable`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-enable-1) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`environ, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-environ_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`execute-as-is, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-execute_002das_002dis_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`execute-never, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-execute_002dnever_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`expand, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-expand_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`expansions, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-expansions_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`extensions, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-extensions_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`extra-verbose, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-extra_002dverbose_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles)\n\n* * *\n\nF [`fake, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-fake_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`fake-always, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-fake_002dalways_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`fake-files, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-fake_002dfiles_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`fake-parameters, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-fake_002dparameters_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`file-descriptors, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-file_002ddescriptors_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`file-list, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-file_002dlist_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`file-path, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-file_002dpath_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`file-patterns, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-file_002dpatterns_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`file-sort, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-file_002dsort_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`file-split-chars, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-file_002dsplit_002dchars_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`files, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-files_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`filter, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-filter_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`find-file-in-path, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-find_002dfile_002din_002dpath_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`flags, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-flags_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`fonts, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-fonts_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`force-list, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-force_002dlist_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`format, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-format_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`formats`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-formats) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`fstypes, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-fstypes_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`functions, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-functions_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 277,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Style-and-Tag-Index-html-Style-and-Tag-Index-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Style-and-Tag-Index-html-Style-and-Tag-Index-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Style-and-Tag-Index-html-Style-and-Tag-Index-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Style-and-Tag-Index-html-Style-and-Tag-Index-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Style-and-Tag-Index-html-Style-and-Tag-Index-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 36062,
      "readableText": 33799,
      "none": 35837,
      "readableTextIfPossible": 35837,
      "result": 33799,
      "markdown": 24270
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion",
    "loadedTime": "2025-05-08T06:51:20.309Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion",
    "title": "zsh: 13 Prompt Expansion",
    "description": "zsh: 13 Prompt Expansion",
    "author": null,
    "keywords": "zsh: 13 Prompt Expansion",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:18 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-8784\"",
      "expires": "Thu, 08 May 2025 06:52:18 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7071ee80a4bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 13 Prompt Expansion\n13.1 Expansion of Prompt Sequences\nPrompt sequences undergo a special form of expansion. This type of expansion is also available using the -P option to the print builtin. \nIf the PROMPT_SUBST option is set, the prompt string is first subjected to parameter expansion, command substitution and arithmetic expansion. See Expansion. \nCertain escape sequences may be recognised in the prompt string. \nIf the PROMPT_BANG option is set, a ‘!’ in the prompt is replaced by the current history event number. A literal ‘!’ may then be represented as ‘!!’. \nIf the PROMPT_PERCENT option is set, certain escape sequences that start with ‘%’ are expanded. Many escapes are followed by a single character, although some of these take an optional integer argument that should appear between the ‘%’ and the next character of the sequence. More complicated escape sequences are available to provide conditional expansion. \n13.2 Simple Prompt Escapes\n13.2.1 Special characters\n%% \nA ‘%’. \n%) \nA ‘)’. \n13.2.2 Login information\n%l \nThe line (tty) the user is logged in on, without ‘/dev/’ prefix. If the name starts with ‘/dev/tty’, that prefix is stripped. \n%M \nThe full machine hostname. \n%m \nThe hostname up to the first ‘.’. An integer may follow the ‘%’ to specify how many components of the hostname are desired. With a negative integer, trailing components of the hostname are shown. \n%n \n$USERNAME. \n%y \nThe line (tty) the user is logged in on, without ‘/dev/’ prefix. This does not treat ‘/dev/tty’ names specially. \n13.2.3 Shell state\n%# \nA ‘#’ if the shell is running with privileges, a ‘%’ if not. Equivalent to ‘%(!.#.%%)’. The definition of ‘privileged’, for these purposes, is that either the effective user ID is zero, or, if POSIX.1e capabilities are supported, that at least one capability is raised in either the Effective or Inheritable capability vectors. \n%? \nThe return status of the last command executed just before the prompt. \n%_ \nThe status of the parser, i.e. the shell constructs (like ‘if’ and ‘for’) that have been started on the command line. If given an integer number that many strings will be printed; zero or negative or no integer means print as many as there are. This is most useful in prompts PS2 for continuation lines and PS4 for debugging with the XTRACE option; in the latter case it will also work non-interactively. \n%^ \nThe status of the parser in reverse. This is the same as ‘%_’ other than the order of strings. It is often used in RPS2. \n%d %/ \nCurrent working directory. If an integer follows the ‘%’, it specifies a number of trailing components of the current working directory to show; zero means the whole path. A negative integer specifies leading components, i.e. %-1d specifies the first component. \n%~ \nAs %d and %/, but if the current working directory starts with $HOME, that part is replaced by a ‘~’. Furthermore, if it has a named directory as its prefix, that part is replaced by a ‘~’ followed by the name of the directory, but only if the result is shorter than the full path; Filename Expansion. \n%e \nEvaluation depth of the current sourced file, shell function, or eval. This is incremented or decremented every time the value of %N is set or reverted to a previous value, respectively. This is most useful for debugging as part of $PS4. \n%h %! \nCurrent history event number. \n%i \nThe line number currently being executed in the script, sourced file, or shell function given by %N. This is most useful for debugging as part of $PS4. \n%I \nThe line number currently being executed in the file %x. This is similar to %i, but the line number is always a line number in the file where the code was defined, even if the code is a shell function. \n%j \nThe number of jobs. \n%L \nThe current value of $SHLVL. \n%N \nThe name of the script, sourced file, or shell function that zsh is currently executing, whichever was started most recently. If there is none, this is equivalent to the parameter $0. An integer may follow the ‘%’ to specify a number of trailing path components to show; zero means the full path. A negative integer specifies leading components. \n%x \nThe name of the file containing the source code currently being executed. This behaves as %N except that function and eval command names are not shown, instead the file where they were defined. \n%c %. %C \nTrailing component of the current working directory. An integer may follow the ‘%’ to get more than one component. Unless ‘%C’ is used, tilde contraction is performed first. These are deprecated as %c and %C are equivalent to %1~ and %1/, respectively, while explicit positive integers have the same effect as for the latter two sequences. \n13.2.4 Date and time\n%D \nThe date in yy-mm-dd format. \n%T \nCurrent time of day, in 24-hour format. \n%t %@ \nCurrent time of day, in 12-hour, am/pm format. \n%* \nCurrent time of day in 24-hour format, with seconds. \n%w \nThe date in day-dd format. \n%W \nThe date in mm/dd/yy format. \n%D{string} \nstring is formatted using the strftime function. See strftime(3) for more details. Various zsh extensions provide numbers with no leading zero or space if the number is a single digit: \n%f \na day of the month \n%K \nthe hour of the day on the 24-hour clock \n%L \nthe hour of the day on the 12-hour clock \nIn addition, if the system supports the POSIX gettimeofday system call, %. provides decimal fractions of a second since the epoch with leading zeroes. By default three decimal places are provided, but a number of digits up to 9 may be given following the %; hence %6. outputs microseconds, and %9. outputs nanoseconds. (The latter requires a nanosecond-precision clock_gettime; systems lacking this will return a value multiplied by the appropriate power of 10.) A typical example of this is the format ‘%D{%H:%M:%S.%.}’. \nThe GNU extension %N is handled as a synonym for %9.. \nAdditionally, the GNU extension that a ‘-’ between the % and the format character causes a leading zero or space to be stripped is handled directly by the shell for the format characters d, f, H, k, l, m, M, S and y; any other format characters are provided to the system’s strftime(3) with any leading ‘-’ present, so the handling is system dependent. Further GNU (or other) extensions are also passed to strftime(3) and may work if the system supports them. \n13.2.5 Visual effects\n%B (%b) \nStart (stop) boldface mode. \n%E \nClear to end of line. \n%U (%u) \nStart (stop) underline mode. \n%S (%s) \nStart (stop) standout mode. \n%F (%f) \nStart (stop) using a different foreground colour, if supported by the terminal. The colour may be specified two ways: either as a numeric argument, as normal, or by a sequence in braces following the %F, for example %F{red}. In the latter case the values allowed are as described for the fg zle_highlight attribute; Character Highlighting. This means that numeric colours are allowed in the second format also. \n%K (%k) \nStart (stop) using a different bacKground colour. The syntax is identical to that for %F and %f. \n%{...%} \nInclude a string as a literal escape sequence. The string within the braces should not change the cursor position. Brace pairs can nest. \nA positive numeric argument between the % and the { is treated as described for %G below. \n%G \nWithin a %{...%} sequence, include a ‘glitch’: that is, assume that a single character width will be output. This is useful when outputting characters that otherwise cannot be correctly handled by the shell, such as the alternate character set on some terminals. The characters in question can be included within a %{...%} sequence together with the appropriate number of %G sequences to indicate the correct width. An integer between the ‘%’ and ‘G’ indicates a character width other than one. Hence %{seq%2G%} outputs seq and assumes it takes up the width of two standard characters. \nMultiple uses of %G accumulate in the obvious fashion; the position of the %G is unimportant. Negative integers are not handled. \nNote that when prompt truncation is in use it is advisable to divide up output into single characters within each %{...%} group so that the correct truncation point can be found. \n13.3 Conditional Substrings in Prompts\n%v \nThe value of the first element of the psvar array parameter. Following the ‘%’ with an integer gives that element of the array. Negative integers count from the end of the array. \n%(x.true-text.false-text) \nSpecifies a ternary expression. The character following the x is arbitrary; the same character is used to separate the text for the ‘true’ result from that for the ‘false’ result. This separator may not appear in the true-text, except as part of a %-escape sequence. A ‘)’ may appear in the false-text as ‘%)’. true-text and false-text may both contain arbitrarily-nested escape sequences, including further ternary expressions. \nThe left parenthesis may be preceded or followed by a positive integer n, which defaults to zero. A negative integer will be multiplied by -1, except as noted below for ‘l’. The test character x may be any of the following: \n! \nTrue if the shell is running with privileges. \n# \nTrue if the effective uid of the current process is n. \n? \nTrue if the exit status of the last command was n. \n_ \nTrue if at least n shell constructs were started. \nC / \nTrue if the current absolute path has at least n elements relative to the root directory, hence / is counted as 0 elements. \nc . ~ \nTrue if the current path, with prefix replacement, has at least n elements relative to the root directory, hence / is counted as 0 elements. \nD \nTrue if the month is equal to n (January = 0). \nd \nTrue if the day of the month is equal to n. \ne \nTrue if the evaluation depth is at least n. \ng \nTrue if the effective gid of the current process is n. \nj \nTrue if the number of jobs is at least n. \nL \nTrue if the SHLVL parameter is at least n. \nl \nTrue if at least n characters have already been printed on the current line. When n is negative, true if at least abs(n) characters remain before the opposite margin (thus the left margin for RPROMPT). \nS \nTrue if the SECONDS parameter is at least n. \nT \nTrue if the time in hours is equal to n. \nt \nTrue if the time in minutes is equal to n. \nv \nTrue if the array psvar has at least n elements. \nV \nTrue if element n of the array psvar is set and non-empty. \nw \nTrue if the day of the week is equal to n (Sunday = 0). \n%<string< %>string> %[xstring] \nSpecifies truncation behaviour for the remainder of the prompt string. The third, deprecated, form is equivalent to ‘%xstringx’, i.e. x may be ‘<’ or ‘>’. The string will be displayed in place of the truncated portion of any string; note this does not undergo prompt expansion. \nThe numeric argument, which in the third form may appear immediately after the ‘[’, specifies the maximum permitted length of the various strings that can be displayed in the prompt. In the first two forms, this numeric argument may be negative, in which case the truncation length is determined by subtracting the absolute value of the numeric argument from the number of character positions remaining on the current prompt line. If this results in a zero or negative length, a length of 1 is used. In other words, a negative argument arranges that after truncation at least n characters remain before the right margin (left margin for RPROMPT). \nThe forms with ‘<’ truncate at the left of the string, and the forms with ‘>’ truncate at the right of the string. For example, if the current directory is ‘/home/pike’, the prompt ‘%8<..<%/’ will expand to ‘..e/pike’. In this string, the terminating character (‘<’, ‘>’ or ‘]’), or in fact any character, may be quoted by a preceding ‘\\’; note when using print -P, however, that this must be doubled as the string is also subject to standard print processing, in addition to any backslashes removed by a double quoted string: the worst case is therefore ‘print -P \"%<\\\\\\\\<<...\"’. \nIf the string is longer than the specified truncation length, it will appear in full, completely replacing the truncated string. \nThe part of the prompt string to be truncated runs to the end of the string, or to the end of the next enclosing group of the ‘%(’ construct, or to the next truncation encountered at the same grouping level (i.e. truncations inside a ‘%(’ are separate), which ever comes first. In particular, a truncation with argument zero (e.g., ‘%<<’) marks the end of the range of the string to be truncated while turning off truncation from there on. For example, the prompt ‘%10<...<%~%<<%# ’ will print a truncated representation of the current directory, followed by a ‘%’ or ‘#’, followed by a space. Without the ‘%<<’, those two characters would be included in the string to be truncated. Note that ‘%-0<<’ is not equivalent to ‘%<<’ but specifies that the prompt is truncated at the right margin. \nTruncation applies only within each individual line of the prompt, as delimited by embedded newlines (if any). If the total length of any line of the prompt after truncation is greater than the terminal width, or if the part to be truncated contains embedded newlines, truncation behavior is undefined and may change in a future version of the shell. Use ‘%-n(l.true-text.false-text)’ to remove parts of the prompt when the available space is less than n. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Prompt-Expansion-html-Prompt-Expansion-pkt0r.html",
  "markdown": "# zsh: 13 Prompt Expansion\n\n* * *\n\n## 13.1 Expansion of Prompt Sequences\n\nPrompt sequences undergo a special form of expansion. This type of expansion is also available using the \\-P option to the print builtin.\n\nIf the PROMPT\\_SUBST option is set, the prompt string is first subjected to _parameter expansion_, _command substitution_ and _arithmetic expansion_. See [Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Expansion).\n\nCertain escape sequences may be recognised in the prompt string.\n\nIf the PROMPT\\_BANG option is set, a ‘!’ in the prompt is replaced by the current history event number. A literal ‘!’ may then be represented as ‘!!’.\n\nIf the PROMPT\\_PERCENT option is set, certain escape sequences that start with ‘%’ are expanded. Many escapes are followed by a single character, although some of these take an optional integer argument that should appear between the ‘%’ and the next character of the sequence. More complicated escape sequences are available to provide conditional expansion.\n\n* * *\n\n## 13.2 Simple Prompt Escapes\n\n* * *\n\n### 13.2.1 Special characters\n\n%%\n\nA ‘%’.\n\n%)\n\nA ‘)’.\n\n* * *\n\n### 13.2.2 Login information\n\n%l\n\nThe line (tty) the user is logged in on, without ‘/dev/’ prefix. If the name starts with ‘/dev/tty’, that prefix is stripped.\n\n%M\n\nThe full machine hostname.\n\n%m\n\nThe hostname up to the first ‘.’. An integer may follow the ‘%’ to specify how many components of the hostname are desired. With a negative integer, trailing components of the hostname are shown.\n\n%n\n\n$USERNAME.\n\n%y\n\nThe line (tty) the user is logged in on, without ‘/dev/’ prefix. This does not treat ‘/dev/tty’ names specially.\n\n* * *\n\n### 13.2.3 Shell state\n\n%#\n\nA ‘#’ if the shell is running with privileges, a ‘%’ if not. Equivalent to ‘%(!.#.%%)’. The definition of ‘privileged’, for these purposes, is that either the effective user ID is zero, or, if POSIX.1e capabilities are supported, that at least one capability is raised in either the Effective or Inheritable capability vectors.\n\n%?\n\nThe return status of the last command executed just before the prompt.\n\n%\\_\n\nThe status of the parser, i.e. the shell constructs (like ‘if’ and ‘for’) that have been started on the command line. If given an integer number that many strings will be printed; zero or negative or no integer means print as many as there are. This is most useful in prompts PS2 for continuation lines and PS4 for debugging with the XTRACE option; in the latter case it will also work non-interactively.\n\n%^\n\nThe status of the parser in reverse. This is the same as ‘%\\_’ other than the order of strings. It is often used in RPS2.\n\n%d\n\n%/\n\nCurrent working directory. If an integer follows the ‘%’, it specifies a number of trailing components of the current working directory to show; zero means the whole path. A negative integer specifies leading components, i.e. %-1d specifies the first component.\n\n%~\n\nAs %d and %/, but if the current working directory starts with $HOME, that part is replaced by a ‘~’. Furthermore, if it has a named directory as its prefix, that part is replaced by a ‘~’ followed by the name of the directory, but only if the result is shorter than the full path; [Filename Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Expansion).\n\n%e\n\nEvaluation depth of the current sourced file, shell function, or eval. This is incremented or decremented every time the value of %N is set or reverted to a previous value, respectively. This is most useful for debugging as part of $PS4.\n\n%h\n\n%!\n\nCurrent history event number.\n\n%i\n\nThe line number currently being executed in the script, sourced file, or shell function given by %N. This is most useful for debugging as part of $PS4.\n\n%I\n\nThe line number currently being executed in the file %x. This is similar to %i, but the line number is always a line number in the file where the code was defined, even if the code is a shell function.\n\n%j\n\nThe number of jobs.\n\n%L\n\nThe current value of $SHLVL.\n\n%N\n\nThe name of the script, sourced file, or shell function that zsh is currently executing, whichever was started most recently. If there is none, this is equivalent to the parameter $0. An integer may follow the ‘%’ to specify a number of trailing path components to show; zero means the full path. A negative integer specifies leading components.\n\n%x\n\nThe name of the file containing the source code currently being executed. This behaves as %N except that function and eval command names are not shown, instead the file where they were defined.\n\n%c\n\n%.\n\n%C\n\nTrailing component of the current working directory. An integer may follow the ‘%’ to get more than one component. Unless ‘%C’ is used, tilde contraction is performed first. These are deprecated as %c and %C are equivalent to %1~ and %1/, respectively, while explicit positive integers have the same effect as for the latter two sequences.\n\n* * *\n\n### 13.2.4 Date and time\n\n%D\n\nThe date in yy\\-mm\\-dd format.\n\n%T\n\nCurrent time of day, in 24-hour format.\n\n%t\n\n%@\n\nCurrent time of day, in 12-hour, am/pm format.\n\n%\\*\n\nCurrent time of day in 24-hour format, with seconds.\n\n%w\n\nThe date in day\\-dd format.\n\n%W\n\nThe date in mm/dd/yy format.\n\n%D{string}\n\nstring is formatted using the strftime function. See strftime(3) for more details. Various zsh extensions provide numbers with no leading zero or space if the number is a single digit:\n\n%f\n\na day of the month\n\n%K\n\nthe hour of the day on the 24-hour clock\n\n%L\n\nthe hour of the day on the 12-hour clock\n\nIn addition, if the system supports the POSIX gettimeofday system call, %. provides decimal fractions of a second since the epoch with leading zeroes. By default three decimal places are provided, but a number of digits up to 9 may be given following the %; hence %6. outputs microseconds, and %9. outputs nanoseconds. (The latter requires a nanosecond-precision clock\\_gettime; systems lacking this will return a value multiplied by the appropriate power of 10.) A typical example of this is the format ‘%D{%H:%M:%S.%.}’.\n\nThe GNU extension %N is handled as a synonym for %9..\n\nAdditionally, the GNU extension that a ‘\\-’ between the % and the format character causes a leading zero or space to be stripped is handled directly by the shell for the format characters d, f, H, k, l, m, M, S and y; any other format characters are provided to the system’s strftime(3) with any leading ‘\\-’ present, so the handling is system dependent. Further GNU (or other) extensions are also passed to strftime(3) and may work if the system supports them.\n\n* * *\n\n### 13.2.5 Visual effects\n\n%B (%b)\n\nStart (stop) boldface mode.\n\n%E\n\nClear to end of line.\n\n%U (%u)\n\nStart (stop) underline mode.\n\n%S (%s)\n\nStart (stop) standout mode.\n\n%F (%f)\n\nStart (stop) using a different foreground colour, if supported by the terminal. The colour may be specified two ways: either as a numeric argument, as normal, or by a sequence in braces following the %F, for example %F{red}. In the latter case the values allowed are as described for the fg zle\\_highlight attribute; [Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting). This means that numeric colours are allowed in the second format also.\n\n%K (%k)\n\nStart (stop) using a different bacKground colour. The syntax is identical to that for %F and %f.\n\n%{...%}\n\nInclude a string as a literal escape sequence. The string within the braces should not change the cursor position. Brace pairs can nest.\n\nA positive numeric argument between the % and the { is treated as described for %G below.\n\n%G\n\nWithin a %{...%} sequence, include a ‘glitch’: that is, assume that a single character width will be output. This is useful when outputting characters that otherwise cannot be correctly handled by the shell, such as the alternate character set on some terminals. The characters in question can be included within a %{...%} sequence together with the appropriate number of %G sequences to indicate the correct width. An integer between the ‘%’ and ‘G’ indicates a character width other than one. Hence %{seq%2G%} outputs seq and assumes it takes up the width of two standard characters.\n\nMultiple uses of %G accumulate in the obvious fashion; the position of the %G is unimportant. Negative integers are not handled.\n\nNote that when prompt truncation is in use it is advisable to divide up output into single characters within each %{...%} group so that the correct truncation point can be found.\n\n* * *\n\n## 13.3 Conditional Substrings in Prompts\n\n%v\n\nThe value of the first element of the psvar array parameter. Following the ‘%’ with an integer gives that element of the array. Negative integers count from the end of the array.\n\n%(x.true-text.false-text)\n\nSpecifies a ternary expression. The character following the x is arbitrary; the same character is used to separate the text for the ‘true’ result from that for the ‘false’ result. This separator may not appear in the true-text, except as part of a %-escape sequence. A ‘)’ may appear in the false-text as ‘%)’. true-text and false-text may both contain arbitrarily-nested escape sequences, including further ternary expressions.\n\nThe left parenthesis may be preceded or followed by a positive integer n, which defaults to zero. A negative integer will be multiplied by -1, except as noted below for ‘l’. The test character x may be any of the following:\n\n!\n\nTrue if the shell is running with privileges.\n\n#\n\nTrue if the effective uid of the current process is n.\n\n?\n\nTrue if the exit status of the last command was n.\n\n\\_\n\nTrue if at least n shell constructs were started.\n\nC\n\n/\n\nTrue if the current absolute path has at least n elements relative to the root directory, hence / is counted as 0 elements.\n\nc\n\n.\n\n~\n\nTrue if the current path, with prefix replacement, has at least n elements relative to the root directory, hence / is counted as 0 elements.\n\nD\n\nTrue if the month is equal to n (January = 0).\n\nd\n\nTrue if the day of the month is equal to n.\n\ne\n\nTrue if the evaluation depth is at least n.\n\ng\n\nTrue if the effective gid of the current process is n.\n\nj\n\nTrue if the number of jobs is at least n.\n\nL\n\nTrue if the SHLVL parameter is at least n.\n\nl\n\nTrue if at least n characters have already been printed on the current line. When n is negative, true if at least abs(n) characters remain before the opposite margin (thus the left margin for RPROMPT).\n\nS\n\nTrue if the SECONDS parameter is at least n.\n\nT\n\nTrue if the time in hours is equal to n.\n\nt\n\nTrue if the time in minutes is equal to n.\n\nv\n\nTrue if the array psvar has at least n elements.\n\nV\n\nTrue if element n of the array psvar is set and non-empty.\n\nw\n\nTrue if the day of the week is equal to n (Sunday = 0).\n\n%<string<\n\n%>string\\>\n\n%\\[xstring\\]\n\nSpecifies truncation behaviour for the remainder of the prompt string. The third, deprecated, form is equivalent to ‘%xstringx’, i.e. x may be ‘<’ or ‘\\>’. The string will be displayed in place of the truncated portion of any string; note this does not undergo prompt expansion.\n\nThe numeric argument, which in the third form may appear immediately after the ‘\\[’, specifies the maximum permitted length of the various strings that can be displayed in the prompt. In the first two forms, this numeric argument may be negative, in which case the truncation length is determined by subtracting the absolute value of the numeric argument from the number of character positions remaining on the current prompt line. If this results in a zero or negative length, a length of 1 is used. In other words, a negative argument arranges that after truncation at least n characters remain before the right margin (left margin for RPROMPT).\n\nThe forms with ‘<’ truncate at the left of the string, and the forms with ‘\\>’ truncate at the right of the string. For example, if the current directory is ‘/home/pike’, the prompt ‘%8<..<%/’ will expand to ‘..e/pike’. In this string, the terminating character (‘<’, ‘\\>’ or ‘\\]’), or in fact any character, may be quoted by a preceding ‘\\\\’; note when using print -P, however, that this must be doubled as the string is also subject to standard print processing, in addition to any backslashes removed by a double quoted string: the worst case is therefore ‘print -P \"%<\\\\\\\\\\\\\\\\<<...\"’.\n\nIf the string is longer than the specified truncation length, it will appear in full, completely replacing the truncated string.\n\nThe part of the prompt string to be truncated runs to the end of the string, or to the end of the next enclosing group of the ‘%(’ construct, or to the next truncation encountered at the same grouping level (i.e. truncations inside a ‘%(’ are separate), which ever comes first. In particular, a truncation with argument zero (e.g., ‘%<<’) marks the end of the range of the string to be truncated while turning off truncation from there on. For example, the prompt ‘%10<...<%~%<<%# ’ will print a truncated representation of the current directory, followed by a ‘%’ or ‘#’, followed by a space. Without the ‘%<<’, those two characters would be included in the string to be truncated. Note that ‘%-0<<’ is not equivalent to ‘%<<’ but specifies that the prompt is truncated at the right margin.\n\nTruncation applies only within each individual line of the prompt, as delimited by embedded newlines (if any). If the total length of any line of the prompt after truncation is greater than the terminal width, or if the part to be truncated contains embedded newlines, truncation behavior is undefined and may change in a future version of the shell. Use ‘%-n(l.true-text.false-text)’ to remove parts of the prompt when the available space is less than n.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 107,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Prompt-Expansion-html-Prompt-Expansion-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Prompt-Expansion-html-Prompt-Expansion-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Prompt-Expansion-html-Prompt-Expansion-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Prompt-Expansion-html-Prompt-Expansion-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Prompt-Expansion-html-Prompt-Expansion-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 15398,
      "readableText": 19473,
      "none": 32395,
      "readableTextIfPossible": 19473,
      "result": 19473,
      "markdown": 13813
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Files.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Files.html#Files",
    "loadedTime": "2025-05-08T06:51:18.121Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Files.html#Files",
    "title": "zsh: 5 Files",
    "description": "zsh: 5 Files",
    "author": null,
    "keywords": "zsh: 5 Files",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:17 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-2a1f\"",
      "expires": "Thu, 08 May 2025 06:52:17 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70716dd794bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 5 Files\n5.1 Startup/Shutdown Files\nCommands are first read from /etc/zshenv; this cannot be overridden. Subsequent behaviour is modified by the RCS and GLOBAL_RCS options; the former affects all startup files, while the second only affects global startup files (those shown here with an path starting with a /). If one of the options is unset at any point, any subsequent startup file(s) of the corresponding type will not be read. It is also possible for a file in $ZDOTDIR to re-enable GLOBAL_RCS. Both RCS and GLOBAL_RCS are set by default. \nCommands are then read from $ZDOTDIR/.zshenv. If the shell is a login shell, commands are read from /etc/zprofile and then $ZDOTDIR/.zprofile. Then, if the shell is interactive, commands are read from /etc/zshrc and then $ZDOTDIR/.zshrc. Finally, if the shell is a login shell, /etc/zlogin and $ZDOTDIR/.zlogin are read. \nWhen a login shell exits, the files $ZDOTDIR/.zlogout and then /etc/zlogout are read. This happens with either an explicit exit via the exit or logout commands, or an implicit exit by reading end-of-file from the terminal. However, if the shell terminates due to exec’ing another process, the logout files are not read. These are also affected by the RCS and GLOBAL_RCS options. Note also that the RCS option affects the saving of history files, i.e. if RCS is unset when the shell exits, no history file will be saved. \nIf ZDOTDIR is unset, HOME is used instead. Files listed above as being in /etc may be in another directory, depending on the installation. \nAs /etc/zshenv is run for all instances of zsh, it is important that it be kept as small as possible. In particular, it is a good idea to put code that does not need to be run for every single shell behind a test of the form ‘if [[ -o rcs ]]; then ...’ so that it will not be executed when zsh is invoked with the ‘-f’ option. \n5.2 Files\n$ZDOTDIR/.zshenv $ZDOTDIR/.zprofile $ZDOTDIR/.zshrc $ZDOTDIR/.zlogin $ZDOTDIR/.zlogout ${TMPPREFIX}* (default is /tmp/zsh*) /etc/zshenv /etc/zprofile /etc/zshrc /etc/zlogin /etc/zlogout (installation-specific - /etc is the default) \nAny of these files may be pre-compiled with the zcompile builtin command (Shell Builtin Commands). If a compiled file exists (named for the original file plus the .zwc extension) and it is newer than the original file, the compiled file will be used instead. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Files-html-Files-bu6t8.html",
  "markdown": "# zsh: 5 Files\n\n* * *\n\n## 5.1 Startup/Shutdown Files\n\nCommands are first read from /etc/zshenv; this cannot be overridden. Subsequent behaviour is modified by the RCS and GLOBAL\\_RCS options; the former affects all startup files, while the second only affects global startup files (those shown here with an path starting with a /). If one of the options is unset at any point, any subsequent startup file(s) of the corresponding type will not be read. It is also possible for a file in $ZDOTDIR to re-enable GLOBAL\\_RCS. Both RCS and GLOBAL\\_RCS are set by default.\n\nCommands are then read from $ZDOTDIR/.zshenv. If the shell is a login shell, commands are read from /etc/zprofile and then $ZDOTDIR/.zprofile. Then, if the shell is interactive, commands are read from /etc/zshrc and then $ZDOTDIR/.zshrc. Finally, if the shell is a login shell, /etc/zlogin and $ZDOTDIR/.zlogin are read.\n\nWhen a login shell exits, the files $ZDOTDIR/.zlogout and then /etc/zlogout are read. This happens with either an explicit exit via the exit or logout commands, or an implicit exit by reading end-of-file from the terminal. However, if the shell terminates due to exec’ing another process, the logout files are not read. These are also affected by the RCS and GLOBAL\\_RCS options. Note also that the RCS option affects the saving of history files, i.e. if RCS is unset when the shell exits, no history file will be saved.\n\nIf ZDOTDIR is unset, HOME is used instead. Files listed above as being in /etc may be in another directory, depending on the installation.\n\nAs /etc/zshenv is run for all instances of zsh, it is important that it be kept as small as possible. In particular, it is a good idea to put code that does not need to be run for every single shell behind a test of the form ‘if \\[\\[ -o rcs \\]\\]; then ...’ so that it will not be executed when zsh is invoked with the ‘\\-f’ option.\n\n* * *\n\n## 5.2 Files\n\n$ZDOTDIR/.zshenv\n\n$ZDOTDIR/.zprofile\n\n$ZDOTDIR/.zshrc\n\n$ZDOTDIR/.zlogin\n\n$ZDOTDIR/.zlogout\n\n${TMPPREFIX}\\* (default is /tmp/zsh\\*)\n\n/etc/zshenv\n\n/etc/zprofile\n\n/etc/zshrc\n\n/etc/zlogin\n\n/etc/zlogout (installation-specific - /etc is the default)\n\nAny of these files may be pre-compiled with the zcompile builtin command ([Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)). If a compiled file exists (named for the original file plus the .zwc extension) and it is newer than the original file, the compiled file will be used instead.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 56,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Files-html-Files-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Files-html-Files-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Files-html-Files-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Files-html-Files-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Files-html-Files-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 2973,
      "readableText": 4176,
      "none": 9150,
      "readableTextIfPossible": 9150,
      "result": 4176,
      "markdown": 2659
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Options.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Options.html#Options",
    "loadedTime": "2025-05-08T06:51:22.809Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Options.html#Options",
    "title": "zsh: 16 Options",
    "description": "zsh: 16 Options",
    "author": null,
    "keywords": "zsh: 16 Options",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:20 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-279a2\"",
      "expires": "Thu, 08 May 2025 06:52:20 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7072c9bb44bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 16 Options\n16.1 Specifying Options\nOptions are primarily referred to by name. These names are case insensitive and underscores are ignored. For example, ‘allexport’ is equivalent to ‘A__lleXP_ort’. \nThe sense of an option name may be inverted by preceding it with ‘no’, so ‘setopt No_Beep’ is equivalent to ‘unsetopt beep’. This inversion can only be done once, so ‘nonobeep’ is not a synonym for ‘beep’. Similarly, ‘tify’ is not a synonym for ‘nonotify’ (the inversion of ‘notify’). \nSome options also have one or more single letter names. There are two sets of single letter options: one used by default, and another used to emulate sh/ksh (used when the SH_OPTION_LETTERS option is set). The single letter options can be used on the shell command line, or with the set, setopt and unsetopt builtins, as normal Unix options preceded by ‘-’. \nThe sense of the single letter options may be inverted by using ‘+’ instead of ‘-’. Some of the single letter option names refer to an option being off, in which case the inversion of that name refers to the option being on. For example, ‘+n’ is the short name of ‘exec’, and ‘-n’ is the short name of its inversion, ‘noexec’. \nIn strings of single letter options supplied to the shell at startup, trailing whitespace will be ignored; for example the string ‘-f ’ will be treated just as ‘-f’, but the string ‘-f i’ is an error. This is because many systems which implement the ‘#!’ mechanism for calling scripts do not strip trailing whitespace. \nIt is possible for options to be set within a function scope. See the description of the option LOCAL_OPTIONS below. \n16.2 Description of Options\nIn the following list, options set by default in all emulations are marked <D>; those set by default only in csh, ksh, sh, or zsh emulations are marked <C>, <K>, <S>, <Z> as appropriate. When listing options (by ‘setopt’, ‘unsetopt’, ‘set -o’ or ‘set +o’), those turned on by default appear in the list prefixed with ‘no’. Hence (unless KSH_OPTION_PRINT is set), ‘setopt’ shows all options whose settings are changed from the default. \n16.2.1 Changing Directories\nAUTO_CD (-J) \nIf a command is issued that can’t be executed as a normal command, and the command is the name of a directory, perform the cd command to that directory. This option is only applicable if the option SHIN_STDIN is set, i.e. if commands are being read from standard input. The option is designed for interactive use; it is recommended that cd be used explicitly in scripts to avoid ambiguity. \nAUTO_PUSHD (-N) \nMake cd push the old directory onto the directory stack. \nCDABLE_VARS (-T) \nIf the argument to a cd command (or an implied cd with the AUTO_CD option set) is not a directory, and does not begin with a slash, try to expand the expression as if it were preceded by a ‘~’ (see Filename Expansion). \nCD_SILENT \nNever print the working directory after a cd (whether explicit or implied with the AUTO_CD option set). cd normally prints the working directory when the argument given to it was -, a stack entry, or the name of a directory found under CDPATH. Note that this is distinct from pushd’s stack-printing behaviour, which is controlled by PUSHD_SILENT. This option overrides the printing-related effects of POSIX_CD. \nCHASE_DOTS \nWhen changing to a directory containing a path segment ‘..’ which would otherwise be treated as canceling the previous segment in the path (in other words, ‘foo/..’ would be removed from the path, or if ‘..’ is the first part of the path, the last part of the current working directory would be removed), instead resolve the path to the physical directory. This option is overridden by CHASE_LINKS. \nFor example, suppose /foo/bar is a link to the directory /alt/rod. Without this option set, ‘cd /foo/bar/..’ changes to /foo; with it set, it changes to /alt. The same applies if the current directory is /foo/bar and ‘cd ..’ is used. Note that all other symbolic links in the path will also be resolved. \nCHASE_LINKS (-w) \nResolve symbolic links to their true values when changing directory. This also has the effect of CHASE_DOTS, i.e. a ‘..’ path segment will be treated as referring to the physical parent, even if the preceding path segment is a symbolic link. \nPOSIX_CD <K> <S> \nModifies the behaviour of cd, chdir and pushd commands to make them more compatible with the POSIX standard. The behaviour with the option unset is described in the documentation for the cd builtin in Shell Builtin Commands. If the option is set, the shell does not test for directories beneath the local directory (‘.’) until after all directories in cdpath have been tested, and the cd and chdir commands do not recognise arguments of the form ‘{+|-}n’ as directory stack entries. \nAlso, if the option is set, the conditions under which the shell prints the new directory after changing to it are modified. It is no longer restricted to interactive shells (although printing of the directory stack with pushd is still limited to interactive shells); and any use of a component of CDPATH, including a ‘.’ but excluding an empty component that is otherwise treated as ‘.’, causes the directory to be printed. \nPUSHD_IGNORE_DUPS \nDon’t push multiple copies of the same directory onto the directory stack. \nPUSHD_MINUS \nExchanges the meanings of ‘+’ and ‘-’ when used with a number to specify a directory in the stack. \nPUSHD_SILENT (-E) \nDo not print the directory stack after pushd or popd. \nPUSHD_TO_HOME (-D) \nHave pushd with no arguments act like ‘pushd $HOME’. \n16.2.2 Completion\nALWAYS_LAST_PROMPT <D> \nIf unset, key functions that list completions try to return to the last prompt if given a numeric argument. If set these functions try to return to the last prompt if given no numeric argument. \nALWAYS_TO_END \nIf a completion is performed with the cursor within a word, and a full completion is inserted, the cursor is moved to the end of the word. That is, the cursor is moved to the end of the word if either a single match is inserted or menu completion is performed. \nAUTO_LIST (-9) <D> \nAutomatically list choices on an ambiguous completion. \nAUTO_MENU <D> \nAutomatically use menu completion after the second consecutive request for completion, for example by pressing the tab key repeatedly. This option is overridden by MENU_COMPLETE. \nAUTO_NAME_DIRS \nAny parameter that is set to the absolute name of a directory immediately becomes a name for that directory, that will be used by the ‘%~’ and related prompt sequences, and will be available when completion is performed on a word starting with ‘~’. (Otherwise, the parameter must be used in the form ‘~param’ first.) \nAUTO_PARAM_KEYS <D> \nIf a parameter name was completed and a following character (normally a space) automatically inserted, and the next character typed is one of those that have to come directly after the name (like ‘}’, ‘:’, etc.), the automatically added character is deleted, so that the character typed comes immediately after the parameter name. Completion in a brace expansion is affected similarly: the added character is a ‘,’, which will be removed if ‘}’ is typed next. \nAUTO_PARAM_SLASH <D> \nIf a parameter is completed whose content is the name of a directory, then add a trailing slash instead of a space. \nAUTO_REMOVE_SLASH <D> \nWhen the last character resulting from a completion is a slash and the next character typed is a word delimiter, a slash, or a character that ends a command (such as a semicolon or an ampersand), remove the slash. \nBASH_AUTO_LIST \nOn an ambiguous completion, automatically list choices when the completion function is called twice in succession. This takes precedence over AUTO_LIST. The setting of LIST_AMBIGUOUS is respected. If AUTO_MENU is set, the menu behaviour will then start with the third press. Note that this will not work with MENU_COMPLETE, since repeated completion calls immediately cycle through the list in that case. \nCOMPLETE_ALIASES \nPrevents aliases on the command line from being internally substituted before completion is attempted. The effect is to make the alias a distinct command for completion purposes. \nCOMPLETE_IN_WORD \nIf unset, the cursor is set to the end of the word if completion is started. Otherwise it stays there and completion is done from both ends. \nGLOB_COMPLETE \nWhen the current word has a glob pattern, do not insert all the words resulting from the expansion but generate matches as for completion and cycle through them like MENU_COMPLETE. The matches are generated as if a ‘*’ was added to the end of the word, or inserted at the cursor when COMPLETE_IN_WORD is set. This actually uses pattern matching, not globbing, so it works not only for files but for any completion, such as options, user names, etc. \nNote that when the pattern matcher is used, matching control (for example, case-insensitive or anchored matching) cannot be used. This limitation only applies when the current word contains a pattern; simply turning on the GLOB_COMPLETE option does not have this effect. \nHASH_LIST_ALL <D> \nWhenever a command completion or spelling correction is attempted, make sure the entire command path is hashed first. This makes the first completion slower but avoids false reports of spelling errors. \nLIST_AMBIGUOUS <D> \nThis option works when AUTO_LIST or BASH_AUTO_LIST is also set. If there is an unambiguous prefix to insert on the command line, that is done without a completion list being displayed; in other words, auto-listing behaviour only takes place when nothing would be inserted. In the case of BASH_AUTO_LIST, this means that the list will be delayed to the third call of the function. \nLIST_BEEP <D> \nBeep on an ambiguous completion. More accurately, this forces the completion widgets to return status 1 on an ambiguous completion, which causes the shell to beep if the option BEEP is also set; this may be modified if completion is called from a user-defined widget. \nLIST_PACKED \nTry to make the completion list smaller (occupying less lines) by printing the matches in columns with different widths. \nLIST_ROWS_FIRST \nLay out the matches in completion lists sorted horizontally, that is, the second match is to the right of the first one, not under it as usual. \nLIST_TYPES (-X) <D> \nWhen listing files that are possible completions, show the type of each file with a trailing identifying mark. \nMENU_COMPLETE (-Y) \nOn an ambiguous completion, instead of listing possibilities or beeping, insert the first match immediately. Then when completion is requested again, remove the first match and insert the second match, etc. When there are no more matches, go back to the first one again. reverse-menu-complete may be used to loop through the list in the other direction. This option overrides AUTO_MENU. \nREC_EXACT (-S) \nIf the string on the command line exactly matches one of the possible completions, it is accepted, even if there is another completion (i.e. that string with something else added) that also matches. \n16.2.3 Expansion and Globbing\nBAD_PATTERN (+2) <C> <Z> \nIf a pattern for filename generation is badly formed, print an error message. (If this option is unset, the pattern will be left unchanged.) \nBARE_GLOB_QUAL <Z> \nIn a glob pattern, treat a trailing set of parentheses as a qualifier list, if it contains no ‘|’, ‘(’ or (if special) ‘~’ characters. See Filename Generation. \nBRACE_CCL \nExpand expressions in braces which would not otherwise undergo brace expansion to a lexically ordered list of all the characters. See Brace Expansion. \nCASE_GLOB <D> \nMake globbing (filename generation) sensitive to case. Note that other uses of patterns are always sensitive to case. If the option is unset, the presence of any character which is special to filename generation will cause case-insensitive matching. For example, cvs(/) can match the directory CVS owing to the presence of the globbing flag (unless the option BARE_GLOB_QUAL is unset). \nCASE_MATCH <D> \nMake regular expressions using the zsh/regex module (including matches with =~) sensitive to case. \nCASE_PATHS \nIf CASE_PATHS is not set (the default), CASE_GLOB affects the interpretation of every path component, whenever a special character appears in any component. When CASE_PATHS is set, file path components that do not contain special filename generation characters are always sensitive to case, thus restricting NO_CASE_GLOB to components that contain globbing characters. \nNote that if the filesystem itself is not sensitive to case, then CASE_PATHS has no effect. \nCSH_NULL_GLOB <C> \nIf a pattern for filename generation has no matches, delete the pattern from the argument list; do not report an error unless all the patterns in a command have no matches. Overrides NOMATCH. \nEQUALS <Z> \nPerform = filename expansion. (See Filename Expansion.) \nEXTENDED_GLOB \nTreat the ‘#’, ‘~’ and ‘^’ characters as part of patterns for filename generation, etc. (An initial unquoted ‘~’ always produces named directory expansion.) \nFORCE_FLOAT \nConstants in arithmetic evaluation will be treated as floating point even without the use of a decimal point; the values of integer variables will be converted to floating point when used in arithmetic expressions. Integers in any base will be converted. \nGLOB (+F, ksh: +f) <D> \nPerform filename generation (globbing). (See Filename Generation.) \nGLOB_ASSIGN <C> \nIf this option is set, filename generation (globbing) is performed on the right hand side of scalar parameter assignments of the form ‘name=pattern (e.g. ‘foo=*’). If the result has more than one word the parameter will become an array with those words as arguments. This option is provided for backwards compatibility only: globbing is always performed on the right hand side of array assignments of the form ‘name=(value)’ (e.g. ‘foo=(*)’) and this form is recommended for clarity; with this option set, it is not possible to predict whether the result will be an array or a scalar. \nGLOB_DOTS (-4) \nDo not require a leading ‘.’ in a filename to be matched explicitly. \nGLOB_STAR_SHORT \nWhen this option is set and the default zsh-style globbing is in effect, the pattern ‘**/*’ can be abbreviated to ‘**’ and the pattern ‘***/*’ can be abbreviated to ***. Hence ‘**.c’ finds a file ending in .c in any subdirectory, and ‘***.c’ does the same while also following symbolic links. A / immediately after the ‘**’ or ‘***’ forces the pattern to be treated as the unabbreviated form. \nGLOB_SUBST <C> <K> <S> \nTreat any characters resulting from parameter expansion as being eligible for filename expansion and filename generation, and any characters resulting from command substitution as being eligible for filename generation. Braces (and commas in between) do not become eligible for expansion. \nHIST_SUBST_PATTERN \nSubstitutions using the :s and :& history modifiers are performed with pattern matching instead of string matching. This occurs wherever history modifiers are valid, including glob qualifiers and parameters. See Modifiers. \nIGNORE_BRACES (-I) <S> \nDo not perform brace expansion. For historical reasons this also includes the effect of the IGNORE_CLOSE_BRACES option. \nIGNORE_CLOSE_BRACES \nWhen neither this option nor IGNORE_BRACES is set, a sole close brace character ‘}’ is syntactically significant at any point on a command line. This has the effect that no semicolon or newline is necessary before the brace terminating a function or current shell construct. When either option is set, a closing brace is syntactically significant only in command position. Unlike IGNORE_BRACES, this option does not disable brace expansion. \nFor example, with both options unset a function may be defined in the following fashion: \nwhile if either option is set, this does not work and something equivalent to the following is required: \nKSH_GLOB <K> \nIn pattern matching, the interpretation of parentheses is affected by a preceding ‘@’, ‘*’, ‘+’, ‘?’ or ‘!’. See Filename Generation. \nMAGIC_EQUAL_SUBST \nAll unquoted arguments of the form ‘anything=expression’ appearing after the command name have filename expansion (that is, where expression has a leading ‘~’ or ‘=’) performed on expression as if it were a parameter assignment. The argument is not otherwise treated specially; it is passed to the command as a single argument, and not used as an actual parameter assignment. For example, in echo foo=~/bar:~/rod, both occurrences of ~ would be replaced. Note that this happens anyway with typeset and similar statements. \nThis option respects the setting of the KSH_TYPESET option. In other words, if both options are in effect, arguments looking like assignments will not undergo word splitting. \nMARK_DIRS (-8, ksh: -X) \nAppend a trailing ‘/’ to all directory names resulting from filename generation (globbing). \nMULTIBYTE <D> \nRespect multibyte characters when found in strings. When this option is set, strings are examined using the system library to determine how many bytes form a character, depending on the current locale. This affects the way characters are counted in pattern matching, parameter values and various delimiters. \nThe option is on by default if the shell was compiled with MULTIBYTE_SUPPORT; otherwise it is off by default and has no effect if turned on. \nIf the option is off a single byte is always treated as a single character. This setting is designed purely for examining strings known to contain raw bytes or other values that may not be characters in the current locale. It is not necessary to unset the option merely because the character set for the current locale does not contain multibyte characters. \nThe option does not affect the shell’s editor, which always uses the locale to determine multibyte characters. This is because the character set displayed by the terminal emulator is independent of shell settings. \nNOMATCH (+3) <C> <Z> \nIf a pattern for filename generation has no matches, print an error, instead of leaving it unchanged in the argument list. This also applies to file expansion of an initial ‘~’ or ‘=’. \nNULL_GLOB (-G) \nIf a pattern for filename generation has no matches, delete the pattern from the argument list instead of reporting an error. Overrides NOMATCH. \nNUMERIC_GLOB_SORT \nIf numeric filenames are matched by a filename generation pattern, sort the filenames numerically rather than lexicographically. \nRC_EXPAND_PARAM (-P) \nArray expansions of the form ‘foo${xx}bar’, where the parameter xx is set to (a b c), are substituted with ‘fooabar foobbar foocbar’ instead of the default ‘fooa b cbar’. Note that an empty array will therefore cause all arguments to be removed. \nREMATCH_PCRE \nIf set, regular expression matching with the =~ operator will use Perl-Compatible Regular Expressions from the PCRE library. (The zsh/pcre module must be available.) If not set, regular expressions will use the extended regexp syntax provided by the system libraries. \nSH_GLOB <K> <S> \nDisables the special meaning of ‘(’, ‘|’, ‘)’ and ’<’ for globbing the result of parameter and command substitutions, and in some other places where the shell accepts patterns. If SH_GLOB is set but KSH_GLOB is not, the shell allows the interpretation of subshell expressions enclosed in parentheses in some cases where there is no space before the opening parenthesis, e.g. !(true) is interpreted as if there were a space after the !. This option is set by default if zsh is invoked as sh or ksh. \nUNSET (+u, ksh: +u) <K> <S> <Z> \nTreat unset parameters as if they were empty when substituting, and as if they were zero when reading their values in arithmetic expansion and arithmetic commands. Otherwise they are treated as an error. \nWARN_CREATE_GLOBAL \nPrint a warning message when a global parameter is created in a function by an assignment or in math context. This often indicates that a parameter has not been declared local when it should have been. Parameters explicitly declared global from within a function using typeset -g do not cause a warning. Note that there is no warning when a local parameter is assigned to in a nested function, which may also indicate an error. \nWARN_NESTED_VAR \nPrint a warning message when an existing parameter from an enclosing function scope, or global, is set in a function by an assignment or in math context. Assignment to shell special parameters does not cause a warning. This is the companion to WARN_CREATE_GLOBAL as in this case the warning is only printed when a parameter is not created. Where possible, use of typeset -g to set the parameter suppresses the error, but note that this needs to be used every time the parameter is set. To restrict the effect of this option to a single function scope, use ‘functions -W’. \nFor example, the following code produces a warning for the assignment inside the function nested as that overrides the value within toplevel \ntoplevel() {\n  local foo=\"in fn\"\n  nested\n}\nnested() {\n     foo=\"in nested\"\n}\nsetopt warn_nested_var\ntoplevel\n16.2.4 History\nAPPEND_HISTORY <D> \nIf this is set, zsh sessions will append their history list to the history file, rather than replace it. Thus, multiple parallel zsh sessions will all have the new entries from their history lists added to the history file, in the order that they exit. The file will still be periodically re-written to trim it when the number of lines grows 20% beyond the value specified by $SAVEHIST (see also the HIST_SAVE_BY_COPY option). \nBANG_HIST (+K) <C> <Z> \nPerform textual history expansion, csh-style, treating the character ‘!’ specially. \nEXTENDED_HISTORY <C> \nSave each command’s beginning timestamp (in seconds since the epoch) and the duration (in seconds) to the history file. The format of this prefixed data is: \n‘: <beginning time>:<elapsed seconds>;<command>’. \nHIST_ALLOW_CLOBBER \nAdd ‘|’ to output redirections in the history. This allows history references to clobber files even when CLOBBER is unset. \nHIST_BEEP <D> \nBeep in ZLE when a widget attempts to access a history entry which isn’t there. \nHIST_EXPIRE_DUPS_FIRST \nIf the internal history needs to be trimmed to add the current command line, setting this option will cause the oldest history event that has a duplicate to be lost before losing a unique event from the list. You should be sure to set the value of HISTSIZE to a larger number than SAVEHIST in order to give you some room for the duplicated events, otherwise this option will behave just like HIST_IGNORE_ALL_DUPS once the history fills up with unique events. \nHIST_FCNTL_LOCK \nWhen writing out the history file, by default zsh uses ad-hoc file locking to avoid known problems with locking on some operating systems. With this option locking is done by means of the system’s fcntl call, where this method is available. On recent operating systems this may provide better performance, in particular avoiding history corruption when files are stored on NFS. \nHIST_FIND_NO_DUPS \nWhen searching for history entries in the line editor, do not display duplicates of a line previously found, even if the duplicates are not contiguous. \nHIST_IGNORE_ALL_DUPS \nIf a new command line being added to the history list duplicates an older one, the older command is removed from the list (even if it is not the previous event). \nHIST_IGNORE_DUPS (-h) \nDo not enter command lines into the history list if they are duplicates of the previous event. \nHIST_IGNORE_SPACE (-g) \nRemove command lines from the history list when the first character on the line is a space, or when one of the expanded aliases contains a leading space. Only normal aliases (not global or suffix aliases) have this behaviour. Note that the command lingers in the internal history until the next command is entered before it vanishes, allowing you to briefly reuse or edit the line. If you want to make it vanish right away without entering another command, type a space and press return. \nHIST_LEX_WORDS \nBy default, shell history that is read in from files is split into words on all white space. This means that arguments with quoted whitespace are not correctly handled, with the consequence that references to words in history lines that have been read from a file may be inaccurate. When this option is set, words read in from a history file are divided up in a similar fashion to normal shell command line handling. Although this produces more accurately delimited words, if the size of the history file is large this can be slow. Trial and error is necessary to decide. \nHIST_NO_FUNCTIONS \nRemove function definitions from the history list. Note that the function lingers in the internal history until the next command is entered before it vanishes, allowing you to briefly reuse or edit the definition. \nHIST_NO_STORE \nRemove the history (fc -l) command from the history list when invoked. Note that the command lingers in the internal history until the next command is entered before it vanishes, allowing you to briefly reuse or edit the line. \nHIST_REDUCE_BLANKS \nRemove superfluous blanks from each command line being added to the history list. \nHIST_SAVE_BY_COPY <D> \nWhen the history file is re-written, we normally write out a copy of the file named $HISTFILE.new and then rename it over the old one. However, if this option is unset, we instead truncate the old history file and write out the new version in-place. If one of the history-appending options is enabled, this option only has an effect when the enlarged history file needs to be re-written to trim it down to size. Disable this only if you have special needs, as doing so makes it possible to lose history entries if zsh gets interrupted during the save. \nWhen writing out a copy of the history file, zsh preserves the old file’s permissions and group information, but will refuse to write out a new file if it would change the history file’s owner. \nHIST_SAVE_NO_DUPS \nWhen writing out the history file, older commands that duplicate newer ones are omitted. \nHIST_VERIFY \nWhenever the user enters a line with history expansion, don’t execute the line directly; instead, perform history expansion and reload the line into the editing buffer. \nINC_APPEND_HISTORY \nThis option works like APPEND_HISTORY except that new history lines are added to the $HISTFILE incrementally (as soon as they are entered), rather than waiting until the shell exits. The file will still be periodically re-written to trim it when the number of lines grows 20% beyond the value specified by $SAVEHIST (see also the HIST_SAVE_BY_COPY option). \nINC_APPEND_HISTORY_TIME \nThis option is a variant of INC_APPEND_HISTORY in which, where possible, the history entry is written out to the file after the command is finished, so that the time taken by the command is recorded correctly in the history file in EXTENDED_HISTORY format. This means that the history entry will not be available immediately from other instances of the shell that are using the same history file. \nThis option is only useful if INC_APPEND_HISTORY and SHARE_HISTORY are turned off. The three options should be considered mutually exclusive. \nSHARE_HISTORY <K> \nThis option both imports new commands from the history file, and also causes your typed commands to be appended to the history file (the latter is like specifying INC_APPEND_HISTORY, which should be turned off if this option is in effect). The history lines are also output with timestamps ala EXTENDED_HISTORY (which makes it easier to find the spot where we left off reading the file after it gets re-written). \nBy default, history movement commands visit the imported lines as well as the local lines, but you can toggle this on and off with the set-local-history zle binding. It is also possible to create a zle widget that will make some commands ignore imported commands, and some include them. \nIf you find that you want more control over when commands get imported, you may wish to turn SHARE_HISTORY off, INC_APPEND_HISTORY or INC_APPEND_HISTORY_TIME (see above) on, and then manually import commands whenever you need them using ‘fc -RI’. \n16.2.5 Initialisation\nALL_EXPORT (-a, ksh: -a) \nAll parameters subsequently defined are automatically exported. \nGLOBAL_EXPORT <Z> \nIf this option is set, passing the -x flag to the builtins declare, float, integer, readonly and typeset (but not local) will also set the -g flag; hence parameters exported to the environment will not be made local to the enclosing function, unless they were already or the flag +g is given explicitly. If the option is unset, exported parameters will be made local in just the same way as any other parameter. \nThis option is set by default for backward compatibility; it is not recommended that its behaviour be relied upon. Note that the builtin export always sets both the -x and -g flags, and hence its effect extends beyond the scope of the enclosing function; this is the most portable way to achieve this behaviour. \nGLOBAL_RCS (+d) <D> \nIf this option is unset, the startup files /etc/zprofile, /etc/zshrc, /etc/zlogin and /etc/zlogout will not be run. It can be disabled and re-enabled at any time, including inside local startup files (.zshrc, etc.). \nRCS (+f) <D> \nAfter /etc/zshenv is sourced on startup, source the .zshenv, /etc/zprofile, .zprofile, /etc/zshrc, .zshrc, /etc/zlogin, .zlogin, and .zlogout files, as described in Files. If this option is unset, the /etc/zshenv file is still sourced, but any of the others will not be; it can be set at any time to prevent the remaining startup files after the currently executing one from being sourced. \n16.2.6 Input/Output\nALIASES <D> \nExpand aliases. \nCLOBBER (+C, ksh: +C) <D> \nAllows ‘>’ redirection to truncate existing files. Otherwise ‘>!’ or ‘>|’ must be used to truncate a file. \nIf the option is not set, and the option APPEND_CREATE is also not set, ‘>>!’ or ‘>>|’ must be used to create a file. If either option is set, ‘>>’ may be used. \nCLOBBER_EMPTY \nThis option is only used if the option CLOBBER is not set: note that it is set by default. \nIf this option is set, then regular files of zero length may be ovewritten (‘clobbered’). Note that it is possible another process has written to the file between this test and use of the file by the current process. This option should therefore not be used in cases where files to be clobbered may be written to asynchronously. \nCORRECT (-0) \nTry to correct the spelling of commands. Note that, when the HASH_LIST_ALL option is not set or when some directories in the path are not readable, this may falsely report spelling errors the first time some commands are used. \nThe shell variable CORRECT_IGNORE may be set to a pattern to match words that will never be offered as corrections. \nCORRECT_ALL (-O) \nTry to correct the spelling of all arguments in a line. \nThe shell variable CORRECT_IGNORE_FILE may be set to a pattern to match file names that will never be offered as corrections. \nDVORAK \nUse the Dvorak keyboard instead of the standard qwerty keyboard as a basis for examining spelling mistakes for the CORRECT and CORRECT_ALL options and the spell-word editor command. \nFLOW_CONTROL <D> \nIf this option is unset, output flow control via start/stop characters (usually assigned to ^S/^Q) is disabled in the shell’s editor. \nIGNORE_EOF (-7) \nDo not exit on end-of-file. Require the use of exit or logout instead. However, ten consecutive EOFs will cause the shell to exit anyway, to avoid the shell hanging if its tty goes away. \nAlso, if this option is set and the Zsh Line Editor is used, widgets implemented by shell functions can be bound to EOF (normally Control-D) without printing the normal warning message. This works only for normal widgets, not for completion widgets. \nINTERACTIVE_COMMENTS (-k) <K> <S> \nAllow comments even in interactive shells. \nHASH_CMDS <D> \nNote the location of each command the first time it is executed. Subsequent invocations of the same command will use the saved location, avoiding a path search. If this option is unset, no path hashing is done at all. However, when CORRECT is set, commands whose names do not appear in the functions or aliases hash tables are hashed in order to avoid reporting them as spelling errors. \nHASH_DIRS <D> \nWhenever a command name is hashed, hash the directory containing it, as well as all directories that occur earlier in the path. Has no effect if neither HASH_CMDS nor CORRECT is set. \nHASH_EXECUTABLES_ONLY \nWhen hashing commands because of HASH_CMDS, check that the file to be hashed is actually an executable. This option is unset by default as if the path contains a large number of commands, or consists of many remote files, the additional tests can take a long time. Trial and error is needed to show if this option is beneficial. \nMAIL_WARNING (-U) \nPrint a warning message if a mail file has been accessed since the shell last checked. \nPATH_DIRS (-Q) \nPerform a path search even on command names with slashes in them. Thus if ‘/usr/local/bin’ is in the user’s path, and he or she types ‘X11/xinit’, the command ‘/usr/local/bin/X11/xinit’ will be executed (assuming it exists). Commands explicitly beginning with ‘/’, ‘./’ or ‘../’ are not subject to the path search. This also applies to the ‘.’ and source builtins. \nNote that subdirectories of the current directory are always searched for executables specified in this form. This takes place before any search indicated by this option, and regardless of whether ‘.’ or the current directory appear in the command search path. \nPATH_SCRIPT <K> <S> \nIf this option is not set, a script passed as the first non-option argument to the shell must contain the name of the file to open. If this option is set, and the script does not specify a directory path, the script is looked for first in the current directory, then in the command path. See Invocation. \nPRINT_EIGHT_BIT \nPrint eight bit characters literally in completion lists, etc. This option is not necessary if your system correctly returns the printability of eight bit characters (see ctype(3)). \nPRINT_EXIT_VALUE (-1) \nPrint the exit value of programs with non-zero exit status. This is only available at the command line in interactive shells. \nRC_QUOTES \nAllow the character sequence ‘’’’ to signify a single quote within singly quoted strings. Note this does not apply in quoted strings using the format $’...’, where a backslashed single quote can be used. \nRM_STAR_SILENT (-H) <K> <S> \nDo not query the user before executing ‘rm *’ or ‘rm path/*’. \nRM_STAR_WAIT \nIf querying the user before executing ‘rm *’ or ‘rm path/*’, first wait ten seconds and ignore anything typed in that time. This avoids the problem of reflexively answering ‘yes’ to the query when one didn’t really mean it. The wait and query can always be avoided by expanding the ‘*’ in ZLE (with tab). \nSHORT_LOOPS <C> <Z> \nAllow the short forms of for, repeat, select, if, and function constructs. \nSHORT_REPEAT \nAllow the short form repeat as SHORT_LOOPS but without enabling it for the other constructs. \nSUN_KEYBOARD_HACK (-L) \nIf a line ends with a backquote, and there are an odd number of backquotes on the line, ignore the trailing backquote. This is useful on some keyboards where the return key is too small, and the backquote key lies annoyingly close to it. As an alternative the variable KEYBOARD_HACK lets you choose the character to be removed. \n16.2.7 Job Control\nAUTO_CONTINUE \nWith this option set, stopped jobs that are removed from the job table with the disown builtin command are automatically sent a CONT signal to make them running. \nAUTO_RESUME (-W) \nTreat single word simple commands without redirection as candidates for resumption of an existing job. \nBG_NICE (-6) <C> <Z> \nRun all background jobs at a lower priority. This option is set by default. \nCHECK_JOBS <Z> \nReport the status of background and suspended jobs before exiting a shell with job control; a second attempt to exit the shell will succeed. NO_CHECK_JOBS is best used only in combination with NO_HUP, else such jobs will be killed automatically. \nThe check is omitted if the commands run from the previous command line included a ‘jobs’ command, since it is assumed the user is aware that there are background or suspended jobs. A ‘jobs’ command run from one of the hook functions defined in the section ‘Special Functions’ in Functions is not counted for this purpose. \nCHECK_RUNNING_JOBS <Z> \nCheck for both running and suspended jobs when CHECK_JOBS is enabled. When this option is disabled, zsh checks only for suspended jobs, which matches the default behavior of bash. \nThis option has no effect unless CHECK_JOBS is set. \nHUP <Z> \nSend the HUP signal to running jobs when the shell exits. \nLONG_LIST_JOBS (-R) \nPrint job notifications in the long format by default. \nMONITOR (-m, ksh: -m) \nAllow job control. Set by default in interactive shells. \nNOTIFY (-5, ksh: -b) <Z> \nReport the status of background jobs immediately, rather than waiting until just before printing a prompt. \nPOSIX_JOBS <K> <S> \nThis option makes job control more compliant with the POSIX standard. \nWhen the option is not set, the MONITOR option is unset on entry to subshells, so that job control is no longer active. When the option is set, the MONITOR option and job control remain active in the subshell, but note that the subshell has no access to jobs in the parent shell. \nWhen the option is not set, jobs put in the background or foreground with bg or fg are displayed with the same information that would be reported by jobs. When the option is set, only the text is printed. The output from jobs itself is not affected by the option. \nWhen the option is not set, job information from the parent shell is saved for output within a subshell (for example, within a pipeline). When the option is set, the output of jobs is empty until a job is started within the subshell. \nIn previous versions of the shell, it was necessary to enable POSIX_JOBS in order for the builtin command wait to return the status of background jobs that had already exited. This is no longer the case. \n16.2.8 Prompting\nPROMPT_BANG <K> \nIf set, ‘!’ is treated specially in prompt expansion. See Prompt Expansion. \nPROMPT_CR (+V) <D> \nPrint a carriage return just before printing a prompt in the line editor. This is on by default as multi-line editing is only possible if the editor knows where the start of the line appears. \nPROMPT_SP <D> \nAttempt to preserve a partial line (i.e. a line that did not end with a newline) that would otherwise be covered up by the command prompt due to the PROMPT_CR option. This works by outputting some cursor-control characters, including a series of spaces, that should make the terminal wrap to the next line when a partial line is present (note that this is only successful if your terminal has automatic margins, which is typical). \nWhen a partial line is preserved, by default you will see an inverse+bold character at the end of the partial line: a ‘%’ for a normal user or a ‘#’ for root. If set, the shell parameter PROMPT_EOL_MARK can be used to customize how the end of partial lines are shown. \nNOTE: if the PROMPT_CR option is not set, enabling this option will have no effect. This option is on by default. \nPROMPT_PERCENT <C> <Z> \nIf set, ‘%’ is treated specially in prompt expansion. See Prompt Expansion. \nPROMPT_SUBST <K> <S> \nIf set, parameter expansion, command substitution and arithmetic expansion are performed in prompts. Substitutions within prompts do not affect the command status. \nTRANSIENT_RPROMPT \nRemove any right prompt from display when accepting a command line. This may be useful with terminals with other cut/paste methods. \n16.2.9 Scripts and Functions\nALIAS_FUNC_DEF <S> \nBy default, zsh does not allow the definition of functions using the ‘name ()’ syntax if name was expanded as an alias: this causes an error. This is usually the desired behaviour, as otherwise the combination of an alias and a function based on the same definition can easily cause problems. \nWhen this option is set, aliases can be used for defining functions. \nFor example, consider the following definitions as they might occur in a startup file. \nalias foo=bar\nfoo() {\n  print This probably does not do what you expect.\n}\nHere, foo is expanded as an alias to bar before the () is encountered, so the function defined would be named bar. By default this is instead an error in native mode. Note that quoting any part of the function name, or using the keyword function, avoids the problem, so is recommended when the function name can also be an alias. \nC_BASES \nOutput hexadecimal numbers in the standard C format, for example ‘0xFF’ instead of the usual ‘16#FF’. If the option OCTAL_ZEROES is also set (it is not by default), octal numbers will be treated similarly and hence appear as ‘077’ instead of ‘8#77’. This option has no effect on the choice of the output base, nor on the output of bases other than hexadecimal and octal. Note that these formats will be understood on input irrespective of the setting of C_BASES. \nC_PRECEDENCES \nThis alters the precedence of arithmetic operators to be more like C and other programming languages; Arithmetic Evaluation has an explicit list. \nDEBUG_BEFORE_CMD <D> \nRun the DEBUG trap before each command; otherwise it is run after each command. Setting this option mimics the behaviour of ksh 93; with the option unset the behaviour is that of ksh 88. \nERR_EXIT (-e, ksh: -e) \nIf a command has a non-zero exit status, execute the ZERR trap, if set, and exit. This is disabled while running initialization scripts. \nThe behaviour is also disabled inside DEBUG traps. In this case the option is handled specially: it is unset on entry to the trap. If the option DEBUG_BEFORE_CMD is set, as it is by default, and the option ERR_EXIT is found to have been set on exit, then the command for which the DEBUG trap is being executed is skipped. The option is restored after the trap exits. \nNon-zero status in a command list containing && or || is ignored for commands not at the end of the list. Hence \ndoes not trigger exit. \nExiting due to ERR_EXIT has certain interactions with asynchronous jobs noted in Jobs & Signals. \nERR_RETURN \nIf a command has a non-zero exit status, return immediately from the enclosing function. The logic is similar to that for ERR_EXIT, except that an implicit return statement is executed instead of an exit. This will trigger an exit at the outermost level of a non-interactive script. \nNormally this option inherits the behaviour of ERR_EXIT that code followed by ‘&&’ ‘||’ does not trigger a return. Hence in the following: \nno return is forced as the combined effect always has a zero return status. \nNote. however, that if summit in the above example is itself a function, code inside it is considered separately: it may force a return from summit (assuming the option remains set within summit), but not from the enclosing context. This behaviour is different from ERR_EXIT which is unaffected by function scope. \nEVAL_LINENO <Z> \nIf set, line numbers of expressions evaluated using the builtin eval are tracked separately of the enclosing environment. This applies both to the parameter LINENO and the line number output by the prompt escape %i. If the option is set, the prompt escape %N will output the string ‘(eval)’ instead of the script or function name as an indication. (The two prompt escapes are typically used in the parameter PS4 to be output when the option XTRACE is set.) If EVAL_LINENO is unset, the line number of the surrounding script or function is retained during the evaluation. \nEXEC (+n, ksh: +n) <D> \nDo execute commands. Without this option, commands are read and checked for syntax errors, but not executed. This option cannot be turned off in an interactive shell, except when ‘-n’ is supplied to the shell at startup. \nFUNCTION_ARGZERO <C> <Z> \nWhen executing a shell function or sourcing a script, set $0 temporarily to the name of the function/script. Note that toggling FUNCTION_ARGZERO from on to off (or off to on) does not change the current value of $0. Only the state upon entry to the function or script has an effect. Compare POSIX_ARGZERO. \nLOCAL_LOOPS \nWhen this option is not set, the effect of break and continue commands may propagate outside function scope, affecting loops in calling functions. When the option is set in a calling function, a break or a continue that is not caught within a called function (regardless of the setting of the option within that function) produces a warning and the effect is cancelled. \nLOCAL_OPTIONS <K> \nIf this option is set at the point of return from a shell function, most options (including this one) which were in force upon entry to the function are restored; options that are not restored are PRIVILEGED and RESTRICTED. Otherwise, only this option, and the LOCAL_LOOPS, XTRACE and PRINT_EXIT_VALUE options are restored. Hence if this is explicitly unset by a shell function the other options in force at the point of return will remain so. A shell function can also guarantee itself a known shell configuration with a formulation like ‘emulate -L zsh’; the -L activates LOCAL_OPTIONS. \nLOCAL_PATTERNS \nIf this option is set at the point of return from a shell function, the state of pattern disables, as set with the builtin command ‘disable -p’, is restored to what it was when the function was entered. The behaviour of this option is similar to the effect of LOCAL_OPTIONS on options; hence ‘emulate -L sh’ (or indeed any other emulation with the -L option) activates LOCAL_PATTERNS. \nLOCAL_TRAPS <K> \nIf this option is set when a signal trap is set inside a function, then the previous status of the trap for that signal will be restored when the function exits. Note that this option must be set prior to altering the trap behaviour in a function; unlike LOCAL_OPTIONS, the value on exit from the function is irrelevant. However, it does not need to be set before any global trap for that to be correctly restored by a function. For example, \nunsetopt localtraps\ntrap - INT\nfn() { setopt localtraps; trap '' INT; sleep 3; }\nwill restore normal handling of SIGINT after the function exits. \nMULTI_FUNC_DEF <Z> \nAllow definitions of multiple functions at once in the form ‘fn1 fn2...()’; if the option is not set, this causes a parse error. Definition of multiple functions with the function keyword is always allowed. Multiple function definitions are not often used and can cause obscure errors. \nMULTIOS <Z> \nPerform implicit tees or cats when multiple redirections are attempted (see Redirection). \nOCTAL_ZEROES <S> \nInterpret any integer constant beginning with a 0 as octal, per IEEE Std 1003.2-1992 (ISO 9945-2:1993). This is not enabled by default as it causes problems with parsing of, for example, date and time strings with leading zeroes. \nSequences of digits indicating a numeric base such as the ‘08’ component in ‘08#77’ are always interpreted as decimal, regardless of leading zeroes. \nPIPE_FAIL \nBy default, when a pipeline exits the exit status recorded by the shell and returned by the shell variable $? reflects that of the rightmost element of a pipeline. If this option is set, the exit status instead reflects the status of the rightmost element of the pipeline that was non-zero, or zero if all elements exited with zero status. \nSOURCE_TRACE \nIf set, zsh will print an informational message announcing the name of each file it loads. The format of the output is similar to that for the XTRACE option, with the message <sourcetrace>. A file may be loaded by the shell itself when it starts up and shuts down (Startup/Shutdown Files) or by the use of the ‘source’ and ‘dot’ builtin commands. \nTYPESET_SILENT \nIf this is unset, executing any of the ‘typeset’ family of commands with no options and a list of parameters that have no values to be assigned but already exist will display the value of the parameter. If the option is set, they will only be shown when parameters are selected with the ‘-m’ option. The option ‘-p’ is available whether or not the option is set. \nTYPESET_TO_UNSET <K> <S> \nWhen declaring a new parameter with any of the ‘typeset’ family of related commands, the parameter remains unset unless and until a value is explicity assigned to it, either in the ‘typeset’ command itself or as a later assignment statement. \nVERBOSE (-v, ksh: -v) \nPrint shell input lines as they are read. \nXTRACE (-x, ksh: -x) \nPrint commands and their arguments as they are executed. The output is preceded by the value of $PS4, formatted as described in Prompt Expansion. \n16.2.10 Shell Emulation\nAPPEND_CREATE <K> <S> \nThis option only applies when NO_CLOBBER (-C) is in effect. \nIf this option is not set, the shell will report an error when a append redirection (>>) is used on a file that does not already exists (the traditional zsh behaviour of NO_CLOBBER). If the option is set, no error is reported (POSIX behaviour). \nBASH_REMATCH \nWhen set, matches performed with the =~ operator will set the BASH_REMATCH array variable, instead of the default MATCH and match variables. The first element of the BASH_REMATCH array will contain the entire matched text and subsequent elements will contain extracted substrings. This option makes more sense when KSH_ARRAYS is also set, so that the entire matched portion is stored at index 0 and the first substring is at index 1. Without this option, the MATCH variable contains the entire matched text and the match array variable contains substrings. \nBSD_ECHO <S> \nMake the echo builtin compatible with the BSD echo(1) command. This disables backslashed escape sequences in echo strings unless the -e option is specified. \nCONTINUE_ON_ERROR \nIf a fatal error is encountered (see Errors), and the code is running in a script, the shell will resume execution at the next statement in the script at the top level, in other words outside all functions or shell constructs such as loops and conditions. This mimics the behaviour of interactive shells, where the shell returns to the line editor to read a new command; it was the normal behaviour in versions of zsh before 5.0.1. \nCSH_JUNKIE_HISTORY <C> \nA history reference without an event specifier will always refer to the previous command. Without this option, such a history reference refers to the same event as the previous history reference on the current command line, defaulting to the previous command. \nCSH_JUNKIE_LOOPS <C> \nAllow loop bodies to take the form ‘list; end’ instead of ‘do list; done’. \nCSH_JUNKIE_QUOTES <C> \nChanges the rules for single- and double-quoted text to match that of csh. These require that embedded newlines be preceded by a backslash; unescaped newlines will cause an error message. In double-quoted strings, it is made impossible to escape ‘$’, ‘‘’ or ‘\"’ (and ‘\\’ itself no longer needs escaping). Command substitutions are only expanded once, and cannot be nested. \nCSH_NULLCMD <C> \nDo not use the values of NULLCMD and READNULLCMD when running redirections with no command. This make such redirections fail (see Redirection). \nKSH_ARRAYS <K> <S> \nEmulate ksh array handling as closely as possible. If this option is set, array elements are numbered from zero, an array parameter without subscript refers to the first element instead of the whole array, and braces are required to delimit a subscript (‘${path[2]}’ rather than just ‘$path[2]’) or to apply modifiers to any parameter (‘${PWD:h}’ rather than ‘$PWD:h’). \nKSH_AUTOLOAD <K> <S> \nEmulate ksh function autoloading. This means that when a function is autoloaded, the corresponding file is merely executed, and must define the function itself. (By default, the function is defined to the contents of the file. However, the most common ksh-style case - of the file containing only a simple definition of the function - is always handled in the ksh-compatible manner.) \nKSH_OPTION_PRINT <K> \nAlters the way options settings are printed: instead of separate lists of set and unset options, all options are shown, marked ‘on’ if they are in the non-default state, ‘off’ otherwise. \nKSH_TYPESET \nThis option is now obsolete: a better appropximation to the behaviour of other shells is obtained with the reserved word interface to declare, export, float, integer, local, readonly and typeset. Note that the option is only applied when the reserved word interface is not in use. \nAlters the way arguments to the typeset family of commands, including declare, export, float, integer, local and readonly, are processed. Without this option, zsh will perform normal word splitting after command and parameter expansion in arguments of an assignment; with it, word splitting does not take place in those cases. \nKSH_ZERO_SUBSCRIPT \nTreat use of a subscript of value zero in array or string expressions as a reference to the first element, i.e. the element that usually has the subscript 1. Ignored if KSH_ARRAYS is also set. \nIf neither this option nor KSH_ARRAYS is set, accesses to an element of an array or string with subscript zero return an empty element or string, while attempts to set element zero of an array or string are treated as an error. However, attempts to set an otherwise valid subscript range that includes zero will succeed. For example, if KSH_ZERO_SUBSCRIPT is not set, \nis an error, while \nis not and will replace the first element of the array. \nThis option is for compatibility with older versions of the shell and is not recommended in new code. \nPOSIX_ALIASES <K> <S> \nWhen this option is set, reserved words are not candidates for alias expansion: it is still possible to declare any of them as an alias, but the alias will never be expanded. Reserved words are described in Reserved Words. \nAlias expansion takes place while text is being read; hence when this option is set it does not take effect until the end of any function or other piece of shell code parsed as one unit. Note this may cause differences from other shells even when the option is in effect. For example, when running a command with ‘zsh -c’, or even ‘zsh -o posixaliases -c’, the entire command argument is parsed as one unit, so aliases defined within the argument are not available even in later lines. If in doubt, avoid use of aliases in non-interactive code. \nPOSIX_ARGZERO \nThis option may be used to temporarily disable FUNCTION_ARGZERO and thereby restore the value of $0 to the name used to invoke the shell (or as set by the -c command line option). For compatibility with previous versions of the shell, emulations use NO_FUNCTION_ARGZERO instead of POSIX_ARGZERO, which may result in unexpected scoping of $0 if the emulation mode is changed inside a function or script. To avoid this, explicitly enable POSIX_ARGZERO in the emulate command: \nemulate sh -o POSIX_ARGZERO\nNote that NO_POSIX_ARGZERO has no effect unless FUNCTION_ARGZERO was already enabled upon entry to the function or script. \nPOSIX_BUILTINS <K> <S> \nWhen this option is set the command builtin can be used to execute shell builtin commands. Parameter assignments specified before shell functions and special builtins are kept after the command completes unless the special builtin is prefixed with the command builtin. Special builtins are ., :, break, continue, declare, eval, exit, export, integer, local, readonly, return, set, shift, source, times, trap and unset. \nIn addition, various error conditions associated with the above builtins or exec cause a non-interactive shell to exit and an interactive shell to return to its top-level processing. \nFurthermore, functions and shell builtins are not executed after an exec prefix; the command to be executed must be an external command found in the path. \nFurthermore, the getopts builtin behaves in a POSIX-compatible fashion in that the associated variable OPTIND is not made local to functions, and its value is calculated differently to match other shells. \nMoreover, the warning and special exit code from [[ -o non_existent_option ]] are suppressed. \nPOSIX_IDENTIFIERS <K> <S> \nWhen this option is set, only the ASCII characters a to z, A to Z, 0 to 9 and _ may be used in identifiers (names of shell parameters and modules). \nIn addition, setting this option limits the effect of parameter substitution with no braces, so that the expression $# is treated as the parameter $# even if followed by a valid parameter name. When it is unset, zsh allows expressions of the form $#name to refer to the length of $name, even for special variables, for example in expressions such as $#- and $#*. \nAnother difference is that with the option set assignment to an unset variable in arithmetic context causes the variable to be created as a scalar rather than a numeric type. So after ‘unset t; (( t = 3 ))’. without POSIX_IDENTIFIERS set t has integer type, while with it set it has scalar type. \nWhen the option is unset and multibyte character support is enabled (i.e. it is compiled in and the option MULTIBYTE is set), then additionally any alphanumeric characters in the local character set may be used in identifiers. Note that scripts and functions written with this feature are not portable, and also that both options must be set before the script or function is parsed; setting them during execution is not sufficient as the syntax variable=value has already been parsed as a command rather than an assignment. \nIf multibyte character support is not compiled into the shell this option is ignored; all octets with the top bit set may be used in identifiers. This is non-standard but is the traditional zsh behaviour. \nPOSIX_STRINGS <K> <S> \nThis option affects processing of quoted strings. Currently it only affects the behaviour of null characters, i.e. character 0 in the portable character set corresponding to US ASCII. \nWhen this option is not set, null characters embedded within strings of the form $’...’ are treated as ordinary characters. The entire string is maintained within the shell and output to files where necessary, although owing to restrictions of the library interface the string is truncated at the null character in file names, environment variables, or in arguments to external programs. \nWhen this option is set, the $’...’ expression is truncated at the null character. Note that remaining parts of the same string beyond the termination of the quotes are not truncated. \nFor example, the command line argument a$’b\\0c’d is treated with the option off as the characters a, b, null, c, d, and with the option on as the characters a, b, d. \nPOSIX_TRAPS <K> <S> \nWhen this option is set, the usual zsh behaviour of executing traps for EXIT on exit from shell functions is suppressed. In that case, manipulating EXIT traps always alters the global trap for exiting the shell; the LOCAL_TRAPS option is ignored for the EXIT trap. \nAlso, a return statement executed in a trap with no argument passes back from the function the value from the surrounding context, not from code executed within the trap. \nFurthermore, if a trap is set to be ignored, this state persists when a subshell is entered. Without the option, the trap would be reset to its default state at this point. \nSH_FILE_EXPANSION <K> <S> \nPerform filename expansion (e.g., ~ expansion) before parameter expansion, command substitution, arithmetic expansion and brace expansion. If this option is unset, it is performed after brace expansion, so things like ‘~$USERNAME’ and ‘~{pfalstad,rc}’ will work. \nSH_NULLCMD <K> <S> \nDo not use the values of NULLCMD and READNULLCMD when doing redirections, use ‘:’ instead (see Redirection). \nSH_OPTION_LETTERS <K> <S> \nIf this option is set the shell tries to interpret single letter options (which are used with set and setopt) like ksh does. This also affects the value of the - special parameter. \nSH_WORD_SPLIT (-y) <K> <S> \nCauses field splitting to be performed on unquoted parameter expansions. Note that this option has nothing to do with word splitting. (See Parameter Expansion.) \nTRAPS_ASYNC \nWhile waiting for a program to exit, handle signals and run traps immediately. Otherwise the trap is run after a child process has exited. Note this does not affect the point at which traps are run for any case other than when the shell is waiting for a child process. \n16.2.11 Shell State\nINTERACTIVE (-i, ksh: -i) \nThis is an interactive shell. This option is set upon initialisation if the standard input is a tty and commands are being read from standard input. (See the discussion of SHIN_STDIN.) This heuristic may be overridden by specifying a state for this option on the command line. The value of this option can only be changed via flags supplied at invocation of the shell. It cannot be changed once zsh is running. \nLOGIN (-l, ksh: -l) \nThis is a login shell. If this option is not explicitly set, the shell becomes a login shell if the first character of the argv[0] passed to the shell is a ‘-’. \nPRIVILEGED (-p, ksh: -p) \nTurn on privileged mode. Typically this is used when script is to be run with elevated privileges. This should be done as follows directly with the -p option to zsh so that it takes effect during startup. \nThe option is enabled automatically on startup if the effective user (group) ID is not equal to the real user (group) ID. In this case, turning the option off causes the effective user and group IDs to be set to the real user and group IDs. Be aware that if that fails the shell may be running with different IDs than was intended so a script should check for failure and act accordingly, for example: \nunsetopt privileged || exit\nThe PRIVILEGED option disables sourcing user startup files. If zsh is invoked as ‘sh’ or ‘ksh’ with this option set, /etc/suid_profile is sourced (after /etc/profile on interactive shells). Sourcing ~/.profile is disabled and the contents of the ENV variable is ignored. This option cannot be changed using the -m option of setopt and unsetopt, and changing it inside a function always changes it globally regardless of the LOCAL_OPTIONS option. \nRESTRICTED (-r) \nEnables restricted mode. This option cannot be changed using unsetopt, and setting it inside a function always changes it globally regardless of the LOCAL_OPTIONS option. See Restricted Shell. \nSHIN_STDIN (-s, ksh: -s) \nCommands are being read from the standard input. Commands are read from standard input if no command is specified with -c and no file of commands is specified. If SHIN_STDIN is set explicitly on the command line, any argument that would otherwise have been taken as a file to run will instead be treated as a normal positional parameter. Note that setting or unsetting this option on the command line does not necessarily affect the state the option will have while the shell is running - that is purely an indicator of whether or not commands are actually being read from standard input. The value of this option can only be changed via flags supplied at invocation of the shell. It cannot be changed once zsh is running. \nSINGLE_COMMAND (-t, ksh: -t) \nIf the shell is reading from standard input, it exits after a single command has been executed. This also makes the shell non-interactive, unless the INTERACTIVE option is explicitly set on the command line. The value of this option can only be changed via flags supplied at invocation of the shell. It cannot be changed once zsh is running. \n16.2.12 Zle\nBEEP (+B) <D> \nBeep on error in ZLE. \nCOMBINING_CHARS \nAssume that the terminal displays combining characters correctly. Specifically, if a base alphanumeric character is followed by one or more zero-width punctuation characters, assume that the zero-width characters will be displayed as modifications to the base character within the same width. Not all terminals handle this. If this option is not set, zero-width characters are displayed separately with special mark-up. \nIf this option is set, the pattern test [[:WORD:]] matches a zero-width punctuation character on the assumption that it will be used as part of a word in combination with a word character. Otherwise the base shell does not handle combining characters specially. \nEMACS \nIf ZLE is loaded, turning on this option has the equivalent effect of ‘bindkey -e’. In addition, the VI option is unset. Turning it off has no effect. The option setting is not guaranteed to reflect the current keymap. This option is provided for compatibility; bindkey is the recommended interface. \nOVERSTRIKE \nStart up the line editor in overstrike mode. \nSINGLE_LINE_ZLE (-M) <K> \nUse single-line command line editing instead of multi-line. \nNote that although this is on by default in ksh emulation it only provides superficial compatibility with the ksh line editor and reduces the effectiveness of the zsh line editor. As it has no effect on shell syntax, many users may wish to disable this option when using ksh emulation interactively. \nVI \nIf ZLE is loaded, turning on this option has the equivalent effect of ‘bindkey -v’. In addition, the EMACS option is unset. Turning it off has no effect. The option setting is not guaranteed to reflect the current keymap. This option is provided for compatibility; bindkey is the recommended interface. \nZLE (-Z) \nUse the zsh line editor. Set by default in interactive shells connected to a terminal. \n16.3 Option Aliases\nSome options have alternative names. These aliases are never used for output, but can be used just like normal option names when specifying options to the shell. \nBRACE_EXPAND \nNO_IGNORE_BRACES (ksh and bash compatibility) \nDOT_GLOB \nGLOB_DOTS (bash compatibility) \nHASH_ALL \nHASH_CMDS (bash compatibility) \nHIST_APPEND \nAPPEND_HISTORY (bash compatibility) \nHIST_EXPAND \nBANG_HIST (bash compatibility) \nLOG \nNO_HIST_NO_FUNCTIONS (ksh compatibility) \nMAIL_WARN \nMAIL_WARNING (bash compatibility) \nONE_CMD \nSINGLE_COMMAND (bash compatibility) \nPHYSICAL \nCHASE_LINKS (ksh and bash compatibility) \nPROMPT_VARS \nPROMPT_SUBST (bash compatibility) \nSTDIN \nSHIN_STDIN (ksh compatibility) \nTRACK_ALL \nHASH_CMDS (ksh compatibility) \n16.4 Single Letter Options\n16.4.1 Default set\n-0 \nCORRECT \n-1 \nPRINT_EXIT_VALUE \n-2 \nNO_BAD_PATTERN \n-3 \nNO_NOMATCH \n-4 \nGLOB_DOTS \n-5 \nNOTIFY \n-6 \nBG_NICE \n-7 \nIGNORE_EOF \n-8 \nMARK_DIRS \n-9 \nAUTO_LIST \n-B \nNO_BEEP \n-C \nNO_CLOBBER \n-D \nPUSHD_TO_HOME \n-E \nPUSHD_SILENT \n-F \nNO_GLOB \n-G \nNULL_GLOB \n-H \nRM_STAR_SILENT \n-I \nIGNORE_BRACES \n-J \nAUTO_CD \n-K \nNO_BANG_HIST \n-L \nSUN_KEYBOARD_HACK \n-M \nSINGLE_LINE_ZLE \n-N \nAUTO_PUSHD \n-O \nCORRECT_ALL \n-P \nRC_EXPAND_PARAM \n-Q \nPATH_DIRS \n-R \nLONG_LIST_JOBS \n-S \nREC_EXACT \n-T \nCDABLE_VARS \n-U \nMAIL_WARNING \n-V \nNO_PROMPT_CR \n-W \nAUTO_RESUME \n-X \nLIST_TYPES \n-Y \nMENU_COMPLETE \n-Z \nZLE \n-a \nALL_EXPORT \n-e \nERR_EXIT \n-f \nNO_RCS \n-g \nHIST_IGNORE_SPACE \n-h \nHIST_IGNORE_DUPS \n-i \nINTERACTIVE \n-k \nINTERACTIVE_COMMENTS \n-l \nLOGIN \n-m \nMONITOR \n-n \nNO_EXEC \n-p \nPRIVILEGED \n-r \nRESTRICTED \n-s \nSHIN_STDIN \n-t \nSINGLE_COMMAND \n-u \nNO_UNSET \n-v \nVERBOSE \n-w \nCHASE_LINKS \n-x \nXTRACE \n-y \nSH_WORD_SPLIT \n16.4.2 sh/ksh emulation set\n-C \nNO_CLOBBER \n-T \nTRAPS_ASYNC \n-X \nMARK_DIRS \n-a \nALL_EXPORT \n-b \nNOTIFY \n-e \nERR_EXIT \n-f \nNO_GLOB \n-i \nINTERACTIVE \n-l \nLOGIN \n-m \nMONITOR \n-n \nNO_EXEC \n-p \nPRIVILEGED \n-r \nRESTRICTED \n-s \nSHIN_STDIN \n-t \nSINGLE_COMMAND \n-u \nNO_UNSET \n-v \nVERBOSE \n-x \nXTRACE \n16.4.3 Also note\n-A \nUsed by set for setting arrays \n-b \nUsed on the command line to specify end of option processing \n-c \nUsed on the command line to specify a single command \n-m \nUsed by setopt for pattern-matching option setting \n-o \nUsed in all places to allow use of long option names \n-s \nUsed by set to sort positional parameters \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-html-Options-15qsf.html",
  "markdown": "# zsh: 16 Options\n\n* * *\n\n## 16.1 Specifying Options\n\nOptions are primarily referred to by name. These names are case insensitive and underscores are ignored. For example, ‘allexport’ is equivalent to ‘A\\_\\_lleXP\\_ort’.\n\nThe sense of an option name may be inverted by preceding it with ‘no’, so ‘setopt No\\_Beep’ is equivalent to ‘unsetopt beep’. This inversion can only be done once, so ‘nonobeep’ is _not_ a synonym for ‘beep’. Similarly, ‘tify’ is not a synonym for ‘nonotify’ (the inversion of ‘notify’).\n\nSome options also have one or more single letter names. There are two sets of single letter options: one used by default, and another used to emulate sh/ksh (used when the SH\\_OPTION\\_LETTERS option is set). The single letter options can be used on the shell command line, or with the set, setopt and unsetopt builtins, as normal Unix options preceded by ‘\\-’.\n\nThe sense of the single letter options may be inverted by using ‘+’ instead of ‘\\-’. Some of the single letter option names refer to an option being off, in which case the inversion of that name refers to the option being on. For example, ‘+n’ is the short name of ‘exec’, and ‘\\-n’ is the short name of its inversion, ‘noexec’.\n\nIn strings of single letter options supplied to the shell at startup, trailing whitespace will be ignored; for example the string ‘\\-f ’ will be treated just as ‘\\-f’, but the string ‘\\-f i’ is an error. This is because many systems which implement the ‘#!’ mechanism for calling scripts do not strip trailing whitespace.\n\nIt is possible for options to be set within a function scope. See the description of the option LOCAL\\_OPTIONS below.\n\n* * *\n\n## 16.2 Description of Options\n\nIn the following list, options set by default in all emulations are marked <D>; those set by default only in csh, ksh, sh, or zsh emulations are marked <C>, <K>, <S>, <Z> as appropriate. When listing options (by ‘setopt’, ‘unsetopt’, ‘set -o’ or ‘set +o’), those turned on by default appear in the list prefixed with ‘no’. Hence (unless KSH\\_OPTION\\_PRINT is set), ‘setopt’ shows all options whose settings are changed from the default.\n\n* * *\n\n### 16.2.1 Changing Directories\n\nAUTO\\_CD (\\-J)\n\nIf a command is issued that can’t be executed as a normal command, and the command is the name of a directory, perform the cd command to that directory. This option is only applicable if the option SHIN\\_STDIN is set, i.e. if commands are being read from standard input. The option is designed for interactive use; it is recommended that cd be used explicitly in scripts to avoid ambiguity.\n\nAUTO\\_PUSHD (\\-N)\n\nMake cd push the old directory onto the directory stack.\n\nCDABLE\\_VARS (\\-T)\n\nIf the argument to a cd command (or an implied cd with the AUTO\\_CD option set) is not a directory, and does not begin with a slash, try to expand the expression as if it were preceded by a ‘~’ (see [Filename Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Expansion)).\n\nCD\\_SILENT\n\nNever print the working directory after a cd (whether explicit or implied with the AUTO\\_CD option set). cd normally prints the working directory when the argument given to it was \\-, a stack entry, or the name of a directory found under CDPATH. Note that this is distinct from pushd’s stack-printing behaviour, which is controlled by PUSHD\\_SILENT. This option overrides the printing-related effects of POSIX\\_CD.\n\nCHASE\\_DOTS\n\nWhen changing to a directory containing a path segment ‘..’ which would otherwise be treated as canceling the previous segment in the path (in other words, ‘foo/..’ would be removed from the path, or if ‘..’ is the first part of the path, the last part of the current working directory would be removed), instead resolve the path to the physical directory. This option is overridden by CHASE\\_LINKS.\n\nFor example, suppose /foo/bar is a link to the directory /alt/rod. Without this option set, ‘cd /foo/bar/..’ changes to /foo; with it set, it changes to /alt. The same applies if the current directory is /foo/bar and ‘cd ..’ is used. Note that all other symbolic links in the path will also be resolved.\n\nCHASE\\_LINKS (\\-w)\n\nResolve symbolic links to their true values when changing directory. This also has the effect of CHASE\\_DOTS, i.e. a ‘..’ path segment will be treated as referring to the physical parent, even if the preceding path segment is a symbolic link.\n\nPOSIX\\_CD <K> <S>\n\nModifies the behaviour of cd, chdir and pushd commands to make them more compatible with the POSIX standard. The behaviour with the option unset is described in the documentation for the cd builtin in [Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands). If the option is set, the shell does not test for directories beneath the local directory (‘.’) until after all directories in cdpath have been tested, and the cd and chdir commands do not recognise arguments of the form ‘{+|\\-}n’ as directory stack entries.\n\nAlso, if the option is set, the conditions under which the shell prints the new directory after changing to it are modified. It is no longer restricted to interactive shells (although printing of the directory stack with pushd is still limited to interactive shells); and any use of a component of CDPATH, including a ‘.’ but excluding an empty component that is otherwise treated as ‘.’, causes the directory to be printed.\n\nPUSHD\\_IGNORE\\_DUPS\n\nDon’t push multiple copies of the same directory onto the directory stack.\n\nPUSHD\\_MINUS\n\nExchanges the meanings of ‘+’ and ‘\\-’ when used with a number to specify a directory in the stack.\n\nPUSHD\\_SILENT (\\-E)\n\nDo not print the directory stack after pushd or popd.\n\nPUSHD\\_TO\\_HOME (\\-D)\n\nHave pushd with no arguments act like ‘pushd $HOME’.\n\n* * *\n\n### 16.2.2 Completion\n\nALWAYS\\_LAST\\_PROMPT <D>\n\nIf unset, key functions that list completions try to return to the last prompt if given a numeric argument. If set these functions try to return to the last prompt if given _no_ numeric argument.\n\nALWAYS\\_TO\\_END\n\nIf a completion is performed with the cursor within a word, and a full completion is inserted, the cursor is moved to the end of the word. That is, the cursor is moved to the end of the word if either a single match is inserted or menu completion is performed.\n\nAUTO\\_LIST (\\-9) <D>\n\nAutomatically list choices on an ambiguous completion.\n\nAUTO\\_MENU <D>\n\nAutomatically use menu completion after the second consecutive request for completion, for example by pressing the tab key repeatedly. This option is overridden by MENU\\_COMPLETE.\n\nAUTO\\_NAME\\_DIRS\n\nAny parameter that is set to the absolute name of a directory immediately becomes a name for that directory, that will be used by the ‘%~’ and related prompt sequences, and will be available when completion is performed on a word starting with ‘~’. (Otherwise, the parameter must be used in the form ‘~param’ first.)\n\nAUTO\\_PARAM\\_KEYS <D>\n\nIf a parameter name was completed and a following character (normally a space) automatically inserted, and the next character typed is one of those that have to come directly after the name (like ‘}’, ‘:’, etc.), the automatically added character is deleted, so that the character typed comes immediately after the parameter name. Completion in a brace expansion is affected similarly: the added character is a ‘,’, which will be removed if ‘}’ is typed next.\n\nAUTO\\_PARAM\\_SLASH <D>\n\nIf a parameter is completed whose content is the name of a directory, then add a trailing slash instead of a space.\n\nAUTO\\_REMOVE\\_SLASH <D>\n\nWhen the last character resulting from a completion is a slash and the next character typed is a word delimiter, a slash, or a character that ends a command (such as a semicolon or an ampersand), remove the slash.\n\nBASH\\_AUTO\\_LIST\n\nOn an ambiguous completion, automatically list choices when the completion function is called twice in succession. This takes precedence over AUTO\\_LIST. The setting of LIST\\_AMBIGUOUS is respected. If AUTO\\_MENU is set, the menu behaviour will then start with the third press. Note that this will not work with MENU\\_COMPLETE, since repeated completion calls immediately cycle through the list in that case.\n\nCOMPLETE\\_ALIASES\n\nPrevents aliases on the command line from being internally substituted before completion is attempted. The effect is to make the alias a distinct command for completion purposes.\n\nCOMPLETE\\_IN\\_WORD\n\nIf unset, the cursor is set to the end of the word if completion is started. Otherwise it stays there and completion is done from both ends.\n\nGLOB\\_COMPLETE\n\nWhen the current word has a glob pattern, do not insert all the words resulting from the expansion but generate matches as for completion and cycle through them like MENU\\_COMPLETE. The matches are generated as if a ‘\\*’ was added to the end of the word, or inserted at the cursor when COMPLETE\\_IN\\_WORD is set. This actually uses pattern matching, not globbing, so it works not only for files but for any completion, such as options, user names, etc.\n\nNote that when the pattern matcher is used, matching control (for example, case-insensitive or anchored matching) cannot be used. This limitation only applies when the current word contains a pattern; simply turning on the GLOB\\_COMPLETE option does not have this effect.\n\nHASH\\_LIST\\_ALL <D>\n\nWhenever a command completion or spelling correction is attempted, make sure the entire command path is hashed first. This makes the first completion slower but avoids false reports of spelling errors.\n\nLIST\\_AMBIGUOUS <D>\n\nThis option works when AUTO\\_LIST or BASH\\_AUTO\\_LIST is also set. If there is an unambiguous prefix to insert on the command line, that is done without a completion list being displayed; in other words, auto-listing behaviour only takes place when nothing would be inserted. In the case of BASH\\_AUTO\\_LIST, this means that the list will be delayed to the third call of the function.\n\nLIST\\_BEEP <D>\n\nBeep on an ambiguous completion. More accurately, this forces the completion widgets to return status 1 on an ambiguous completion, which causes the shell to beep if the option BEEP is also set; this may be modified if completion is called from a user-defined widget.\n\nLIST\\_PACKED\n\nTry to make the completion list smaller (occupying less lines) by printing the matches in columns with different widths.\n\nLIST\\_ROWS\\_FIRST\n\nLay out the matches in completion lists sorted horizontally, that is, the second match is to the right of the first one, not under it as usual.\n\nLIST\\_TYPES (\\-X) <D>\n\nWhen listing files that are possible completions, show the type of each file with a trailing identifying mark.\n\nMENU\\_COMPLETE (\\-Y)\n\nOn an ambiguous completion, instead of listing possibilities or beeping, insert the first match immediately. Then when completion is requested again, remove the first match and insert the second match, etc. When there are no more matches, go back to the first one again. reverse-menu-complete may be used to loop through the list in the other direction. This option overrides AUTO\\_MENU.\n\nREC\\_EXACT (\\-S)\n\nIf the string on the command line exactly matches one of the possible completions, it is accepted, even if there is another completion (i.e. that string with something else added) that also matches.\n\n* * *\n\n### 16.2.3 Expansion and Globbing\n\nBAD\\_PATTERN (+2) <C> <Z>\n\nIf a pattern for filename generation is badly formed, print an error message. (If this option is unset, the pattern will be left unchanged.)\n\nBARE\\_GLOB\\_QUAL <Z>\n\nIn a glob pattern, treat a trailing set of parentheses as a qualifier list, if it contains no ‘|’, ‘(’ or (if special) ‘~’ characters. See [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation).\n\nBRACE\\_CCL\n\nExpand expressions in braces which would not otherwise undergo brace expansion to a lexically ordered list of all the characters. See [Brace Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Brace-Expansion).\n\nCASE\\_GLOB <D>\n\nMake globbing (filename generation) sensitive to case. Note that other uses of patterns are always sensitive to case. If the option is unset, the presence of any character which is special to filename generation will cause case-insensitive matching. For example, cvs(/) can match the directory CVS owing to the presence of the globbing flag (unless the option BARE\\_GLOB\\_QUAL is unset).\n\nCASE\\_MATCH <D>\n\nMake regular expressions using the zsh/regex module (including matches with \\=~) sensitive to case.\n\nCASE\\_PATHS\n\nIf CASE\\_PATHS is not set (the default), CASE\\_GLOB affects the interpretation of _every_ path component, whenever a special character appears in _any_ component. When CASE\\_PATHS is set, file path components that do _not_ contain special filename generation characters are always sensitive to case, thus restricting NO\\_CASE\\_GLOB to components that contain globbing characters.\n\nNote that if the filesystem itself is not sensitive to case, then CASE\\_PATHS has no effect.\n\nCSH\\_NULL\\_GLOB <C>\n\nIf a pattern for filename generation has no matches, delete the pattern from the argument list; do not report an error unless all the patterns in a command have no matches. Overrides NOMATCH.\n\nEQUALS <Z>\n\nPerform \\= filename expansion. (See [Filename Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Expansion).)\n\nEXTENDED\\_GLOB\n\nTreat the ‘#’, ‘~’ and ‘^’ characters as part of patterns for filename generation, etc. (An initial unquoted ‘~’ always produces named directory expansion.)\n\nFORCE\\_FLOAT\n\nConstants in arithmetic evaluation will be treated as floating point even without the use of a decimal point; the values of integer variables will be converted to floating point when used in arithmetic expressions. Integers in any base will be converted.\n\nGLOB (+F, ksh: +f) <D>\n\nPerform filename generation (globbing). (See [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation).)\n\nGLOB\\_ASSIGN <C>\n\nIf this option is set, filename generation (globbing) is performed on the right hand side of scalar parameter assignments of the form ‘name\\=pattern (e.g. ‘foo=\\*’). If the result has more than one word the parameter will become an array with those words as arguments. This option is provided for backwards compatibility only: globbing is always performed on the right hand side of array assignments of the form ‘name\\=(value)’ (e.g. ‘foo=(\\*)’) and this form is recommended for clarity; with this option set, it is not possible to predict whether the result will be an array or a scalar.\n\nGLOB\\_DOTS (\\-4)\n\nDo not require a leading ‘.’ in a filename to be matched explicitly.\n\nGLOB\\_STAR\\_SHORT\n\nWhen this option is set and the default zsh-style globbing is in effect, the pattern ‘\\*\\*/\\*’ can be abbreviated to ‘\\*\\*’ and the pattern ‘\\*\\*\\*/\\*’ can be abbreviated to \\*\\*\\*. Hence ‘\\*\\*.c’ finds a file ending in .c in any subdirectory, and ‘\\*\\*\\*.c’ does the same while also following symbolic links. A / immediately after the ‘\\*\\*’ or ‘\\*\\*\\*’ forces the pattern to be treated as the unabbreviated form.\n\nGLOB\\_SUBST <C> <K> <S>\n\nTreat any characters resulting from parameter expansion as being eligible for filename expansion and filename generation, and any characters resulting from command substitution as being eligible for filename generation. Braces (and commas in between) do not become eligible for expansion.\n\nHIST\\_SUBST\\_PATTERN\n\nSubstitutions using the :s and :& history modifiers are performed with pattern matching instead of string matching. This occurs wherever history modifiers are valid, including glob qualifiers and parameters. See [Modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Modifiers).\n\nIGNORE\\_BRACES (\\-I) <S>\n\nDo not perform brace expansion. For historical reasons this also includes the effect of the IGNORE\\_CLOSE\\_BRACES option.\n\nIGNORE\\_CLOSE\\_BRACES\n\nWhen neither this option nor IGNORE\\_BRACES is set, a sole close brace character ‘}’ is syntactically significant at any point on a command line. This has the effect that no semicolon or newline is necessary before the brace terminating a function or current shell construct. When either option is set, a closing brace is syntactically significant only in command position. Unlike IGNORE\\_BRACES, this option does not disable brace expansion.\n\nFor example, with both options unset a function may be defined in the following fashion:\n\nwhile if either option is set, this does not work and something equivalent to the following is required:\n\nKSH\\_GLOB <K>\n\nIn pattern matching, the interpretation of parentheses is affected by a preceding ‘@’, ‘\\*’, ‘+’, ‘?’ or ‘!’. See [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation).\n\nMAGIC\\_EQUAL\\_SUBST\n\nAll unquoted arguments of the form ‘anything\\=expression’ appearing after the command name have filename expansion (that is, where expression has a leading ‘~’ or ‘\\=’) performed on expression as if it were a parameter assignment. The argument is not otherwise treated specially; it is passed to the command as a single argument, and not used as an actual parameter assignment. For example, in echo foo=~/bar:~/rod, both occurrences of ~ would be replaced. Note that this happens anyway with typeset and similar statements.\n\nThis option respects the setting of the KSH\\_TYPESET option. In other words, if both options are in effect, arguments looking like assignments will not undergo word splitting.\n\nMARK\\_DIRS (\\-8, ksh: \\-X)\n\nAppend a trailing ‘/’ to all directory names resulting from filename generation (globbing).\n\nMULTIBYTE <D>\n\nRespect multibyte characters when found in strings. When this option is set, strings are examined using the system library to determine how many bytes form a character, depending on the current locale. This affects the way characters are counted in pattern matching, parameter values and various delimiters.\n\nThe option is on by default if the shell was compiled with MULTIBYTE\\_SUPPORT; otherwise it is off by default and has no effect if turned on.\n\nIf the option is off a single byte is always treated as a single character. This setting is designed purely for examining strings known to contain raw bytes or other values that may not be characters in the current locale. It is not necessary to unset the option merely because the character set for the current locale does not contain multibyte characters.\n\nThe option does not affect the shell’s editor, which always uses the locale to determine multibyte characters. This is because the character set displayed by the terminal emulator is independent of shell settings.\n\nNOMATCH (+3) <C> <Z>\n\nIf a pattern for filename generation has no matches, print an error, instead of leaving it unchanged in the argument list. This also applies to file expansion of an initial ‘~’ or ‘\\=’.\n\nNULL\\_GLOB (\\-G)\n\nIf a pattern for filename generation has no matches, delete the pattern from the argument list instead of reporting an error. Overrides NOMATCH.\n\nNUMERIC\\_GLOB\\_SORT\n\nIf numeric filenames are matched by a filename generation pattern, sort the filenames numerically rather than lexicographically.\n\nRC\\_EXPAND\\_PARAM (\\-P)\n\nArray expansions of the form ‘foo${xx}bar’, where the parameter xx is set to (a b c), are substituted with ‘fooabar foobbar foocbar’ instead of the default ‘fooa b cbar’. Note that an empty array will therefore cause all arguments to be removed.\n\nREMATCH\\_PCRE\n\nIf set, regular expression matching with the \\=~ operator will use Perl-Compatible Regular Expressions from the PCRE library. (The zsh/pcre module must be available.) If not set, regular expressions will use the extended regexp syntax provided by the system libraries.\n\nSH\\_GLOB <K> <S>\n\nDisables the special meaning of ‘(’, ‘|’, ‘)’ and ’<’ for globbing the result of parameter and command substitutions, and in some other places where the shell accepts patterns. If SH\\_GLOB is set but KSH\\_GLOB is not, the shell allows the interpretation of subshell expressions enclosed in parentheses in some cases where there is no space before the opening parenthesis, e.g. !(true) is interpreted as if there were a space after the !. This option is set by default if zsh is invoked as sh or ksh.\n\nUNSET (+u, ksh: +u) <K> <S> <Z>\n\nTreat unset parameters as if they were empty when substituting, and as if they were zero when reading their values in arithmetic expansion and arithmetic commands. Otherwise they are treated as an error.\n\nWARN\\_CREATE\\_GLOBAL\n\nPrint a warning message when a global parameter is created in a function by an assignment or in math context. This often indicates that a parameter has not been declared local when it should have been. Parameters explicitly declared global from within a function using typeset -g do not cause a warning. Note that there is no warning when a local parameter is assigned to in a nested function, which may also indicate an error.\n\nWARN\\_NESTED\\_VAR\n\nPrint a warning message when an existing parameter from an enclosing function scope, or global, is set in a function by an assignment or in math context. Assignment to shell special parameters does not cause a warning. This is the companion to WARN\\_CREATE\\_GLOBAL as in this case the warning is only printed when a parameter is _not_ created. Where possible, use of typeset -g to set the parameter suppresses the error, but note that this needs to be used every time the parameter is set. To restrict the effect of this option to a single function scope, use ‘functions -W’.\n\nFor example, the following code produces a warning for the assignment inside the function nested as that overrides the value within toplevel\n\ntoplevel() {\n  local foo=\"in fn\"\n  nested\n}\nnested() {\n     foo=\"in nested\"\n}\nsetopt warn\\_nested\\_var\ntoplevel\n\n* * *\n\n### 16.2.4 History\n\nAPPEND\\_HISTORY <D>\n\nIf this is set, zsh sessions will append their history list to the history file, rather than replace it. Thus, multiple parallel zsh sessions will all have the new entries from their history lists added to the history file, in the order that they exit. The file will still be periodically re-written to trim it when the number of lines grows 20% beyond the value specified by $SAVEHIST (see also the HIST\\_SAVE\\_BY\\_COPY option).\n\nBANG\\_HIST (+K) <C> <Z>\n\nPerform textual history expansion, csh\\-style, treating the character ‘!’ specially.\n\nEXTENDED\\_HISTORY <C>\n\nSave each command’s beginning timestamp (in seconds since the epoch) and the duration (in seconds) to the history file. The format of this prefixed data is:\n\n‘: <beginning time>:<elapsed seconds>;<command>’.\n\nHIST\\_ALLOW\\_CLOBBER\n\nAdd ‘|’ to output redirections in the history. This allows history references to clobber files even when CLOBBER is unset.\n\nHIST\\_BEEP <D>\n\nBeep in ZLE when a widget attempts to access a history entry which isn’t there.\n\nHIST\\_EXPIRE\\_DUPS\\_FIRST\n\nIf the internal history needs to be trimmed to add the current command line, setting this option will cause the oldest history event that has a duplicate to be lost before losing a unique event from the list. You should be sure to set the value of HISTSIZE to a larger number than SAVEHIST in order to give you some room for the duplicated events, otherwise this option will behave just like HIST\\_IGNORE\\_ALL\\_DUPS once the history fills up with unique events.\n\nHIST\\_FCNTL\\_LOCK\n\nWhen writing out the history file, by default zsh uses ad-hoc file locking to avoid known problems with locking on some operating systems. With this option locking is done by means of the system’s fcntl call, where this method is available. On recent operating systems this may provide better performance, in particular avoiding history corruption when files are stored on NFS.\n\nHIST\\_FIND\\_NO\\_DUPS\n\nWhen searching for history entries in the line editor, do not display duplicates of a line previously found, even if the duplicates are not contiguous.\n\nHIST\\_IGNORE\\_ALL\\_DUPS\n\nIf a new command line being added to the history list duplicates an older one, the older command is removed from the list (even if it is not the previous event).\n\nHIST\\_IGNORE\\_DUPS (\\-h)\n\nDo not enter command lines into the history list if they are duplicates of the previous event.\n\nHIST\\_IGNORE\\_SPACE (\\-g)\n\nRemove command lines from the history list when the first character on the line is a space, or when one of the expanded aliases contains a leading space. Only normal aliases (not global or suffix aliases) have this behaviour. Note that the command lingers in the internal history until the next command is entered before it vanishes, allowing you to briefly reuse or edit the line. If you want to make it vanish right away without entering another command, type a space and press return.\n\nHIST\\_LEX\\_WORDS\n\nBy default, shell history that is read in from files is split into words on all white space. This means that arguments with quoted whitespace are not correctly handled, with the consequence that references to words in history lines that have been read from a file may be inaccurate. When this option is set, words read in from a history file are divided up in a similar fashion to normal shell command line handling. Although this produces more accurately delimited words, if the size of the history file is large this can be slow. Trial and error is necessary to decide.\n\nHIST\\_NO\\_FUNCTIONS\n\nRemove function definitions from the history list. Note that the function lingers in the internal history until the next command is entered before it vanishes, allowing you to briefly reuse or edit the definition.\n\nHIST\\_NO\\_STORE\n\nRemove the history (fc -l) command from the history list when invoked. Note that the command lingers in the internal history until the next command is entered before it vanishes, allowing you to briefly reuse or edit the line.\n\nHIST\\_REDUCE\\_BLANKS\n\nRemove superfluous blanks from each command line being added to the history list.\n\nHIST\\_SAVE\\_BY\\_COPY <D>\n\nWhen the history file is re-written, we normally write out a copy of the file named $HISTFILE.new and then rename it over the old one. However, if this option is unset, we instead truncate the old history file and write out the new version in-place. If one of the history-appending options is enabled, this option only has an effect when the enlarged history file needs to be re-written to trim it down to size. Disable this only if you have special needs, as doing so makes it possible to lose history entries if zsh gets interrupted during the save.\n\nWhen writing out a copy of the history file, zsh preserves the old file’s permissions and group information, but will refuse to write out a new file if it would change the history file’s owner.\n\nHIST\\_SAVE\\_NO\\_DUPS\n\nWhen writing out the history file, older commands that duplicate newer ones are omitted.\n\nHIST\\_VERIFY\n\nWhenever the user enters a line with history expansion, don’t execute the line directly; instead, perform history expansion and reload the line into the editing buffer.\n\nINC\\_APPEND\\_HISTORY\n\nThis option works like APPEND\\_HISTORY except that new history lines are added to the $HISTFILE incrementally (as soon as they are entered), rather than waiting until the shell exits. The file will still be periodically re-written to trim it when the number of lines grows 20% beyond the value specified by $SAVEHIST (see also the HIST\\_SAVE\\_BY\\_COPY option).\n\nINC\\_APPEND\\_HISTORY\\_TIME\n\nThis option is a variant of INC\\_APPEND\\_HISTORY in which, where possible, the history entry is written out to the file after the command is finished, so that the time taken by the command is recorded correctly in the history file in EXTENDED\\_HISTORY format. This means that the history entry will not be available immediately from other instances of the shell that are using the same history file.\n\nThis option is only useful if INC\\_APPEND\\_HISTORY and SHARE\\_HISTORY are turned off. The three options should be considered mutually exclusive.\n\nSHARE\\_HISTORY <K>\n\nThis option both imports new commands from the history file, and also causes your typed commands to be appended to the history file (the latter is like specifying INC\\_APPEND\\_HISTORY, which should be turned off if this option is in effect). The history lines are also output with timestamps ala EXTENDED\\_HISTORY (which makes it easier to find the spot where we left off reading the file after it gets re-written).\n\nBy default, history movement commands visit the imported lines as well as the local lines, but you can toggle this on and off with the set-local-history zle binding. It is also possible to create a zle widget that will make some commands ignore imported commands, and some include them.\n\nIf you find that you want more control over when commands get imported, you may wish to turn SHARE\\_HISTORY off, INC\\_APPEND\\_HISTORY or INC\\_APPEND\\_HISTORY\\_TIME (see above) on, and then manually import commands whenever you need them using ‘fc -RI’.\n\n* * *\n\n### 16.2.5 Initialisation\n\nALL\\_EXPORT (\\-a, ksh: \\-a)\n\nAll parameters subsequently defined are automatically exported.\n\nGLOBAL\\_EXPORT <Z>\n\nIf this option is set, passing the \\-x flag to the builtins declare, float, integer, readonly and typeset (but not local) will also set the \\-g flag; hence parameters exported to the environment will not be made local to the enclosing function, unless they were already or the flag +g is given explicitly. If the option is unset, exported parameters will be made local in just the same way as any other parameter.\n\nThis option is set by default for backward compatibility; it is not recommended that its behaviour be relied upon. Note that the builtin export always sets both the \\-x and \\-g flags, and hence its effect extends beyond the scope of the enclosing function; this is the most portable way to achieve this behaviour.\n\nGLOBAL\\_RCS (+d) <D>\n\nIf this option is unset, the startup files /etc/zprofile, /etc/zshrc, /etc/zlogin and /etc/zlogout will not be run. It can be disabled and re-enabled at any time, including inside local startup files (.zshrc, etc.).\n\nRCS (+f) <D>\n\nAfter /etc/zshenv is sourced on startup, source the .zshenv, /etc/zprofile, .zprofile, /etc/zshrc, .zshrc, /etc/zlogin, .zlogin, and .zlogout files, as described in [Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Files). If this option is unset, the /etc/zshenv file is still sourced, but any of the others will not be; it can be set at any time to prevent the remaining startup files after the currently executing one from being sourced.\n\n* * *\n\n### 16.2.6 Input/Output\n\nALIASES <D>\n\nExpand aliases.\n\nCLOBBER (+C, ksh: +C) <D>\n\nAllows ‘\\>’ redirection to truncate existing files. Otherwise ‘\\>!’ or ‘\\>|’ must be used to truncate a file.\n\nIf the option is not set, and the option APPEND\\_CREATE is also not set, ‘\\>>!’ or ‘\\>>|’ must be used to create a file. If either option is set, ‘\\>>’ may be used.\n\nCLOBBER\\_EMPTY\n\nThis option is only used if the option CLOBBER is not set: note that it is set by default.\n\nIf this option is set, then regular files of zero length may be ovewritten (‘clobbered’). Note that it is possible another process has written to the file between this test and use of the file by the current process. This option should therefore not be used in cases where files to be clobbered may be written to asynchronously.\n\nCORRECT (\\-0)\n\nTry to correct the spelling of commands. Note that, when the HASH\\_LIST\\_ALL option is not set or when some directories in the path are not readable, this may falsely report spelling errors the first time some commands are used.\n\nThe shell variable CORRECT\\_IGNORE may be set to a pattern to match words that will never be offered as corrections.\n\nCORRECT\\_ALL (\\-O)\n\nTry to correct the spelling of all arguments in a line.\n\nThe shell variable CORRECT\\_IGNORE\\_FILE may be set to a pattern to match file names that will never be offered as corrections.\n\nDVORAK\n\nUse the Dvorak keyboard instead of the standard qwerty keyboard as a basis for examining spelling mistakes for the CORRECT and CORRECT\\_ALL options and the spell-word editor command.\n\nFLOW\\_CONTROL <D>\n\nIf this option is unset, output flow control via start/stop characters (usually assigned to ^S/^Q) is disabled in the shell’s editor.\n\nIGNORE\\_EOF (\\-7)\n\nDo not exit on end-of-file. Require the use of exit or logout instead. However, ten consecutive EOFs will cause the shell to exit anyway, to avoid the shell hanging if its tty goes away.\n\nAlso, if this option is set and the Zsh Line Editor is used, widgets implemented by shell functions can be bound to EOF (normally Control-D) without printing the normal warning message. This works only for normal widgets, not for completion widgets.\n\nINTERACTIVE\\_COMMENTS (\\-k) <K> <S>\n\nAllow comments even in interactive shells.\n\nHASH\\_CMDS <D>\n\nNote the location of each command the first time it is executed. Subsequent invocations of the same command will use the saved location, avoiding a path search. If this option is unset, no path hashing is done at all. However, when CORRECT is set, commands whose names do not appear in the functions or aliases hash tables are hashed in order to avoid reporting them as spelling errors.\n\nHASH\\_DIRS <D>\n\nWhenever a command name is hashed, hash the directory containing it, as well as all directories that occur earlier in the path. Has no effect if neither HASH\\_CMDS nor CORRECT is set.\n\nHASH\\_EXECUTABLES\\_ONLY\n\nWhen hashing commands because of HASH\\_CMDS, check that the file to be hashed is actually an executable. This option is unset by default as if the path contains a large number of commands, or consists of many remote files, the additional tests can take a long time. Trial and error is needed to show if this option is beneficial.\n\nMAIL\\_WARNING (\\-U)\n\nPrint a warning message if a mail file has been accessed since the shell last checked.\n\nPATH\\_DIRS (\\-Q)\n\nPerform a path search even on command names with slashes in them. Thus if ‘/usr/local/bin’ is in the user’s path, and he or she types ‘X11/xinit’, the command ‘/usr/local/bin/X11/xinit’ will be executed (assuming it exists). Commands explicitly beginning with ‘/’, ‘./’ or ‘../’ are not subject to the path search. This also applies to the ‘.’ and source builtins.\n\nNote that subdirectories of the current directory are always searched for executables specified in this form. This takes place before any search indicated by this option, and regardless of whether ‘.’ or the current directory appear in the command search path.\n\nPATH\\_SCRIPT <K> <S>\n\nIf this option is not set, a script passed as the first non-option argument to the shell must contain the name of the file to open. If this option is set, and the script does not specify a directory path, the script is looked for first in the current directory, then in the command path. See [Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation).\n\nPRINT\\_EIGHT\\_BIT\n\nPrint eight bit characters literally in completion lists, etc. This option is not necessary if your system correctly returns the printability of eight bit characters (see ctype(3)).\n\nPRINT\\_EXIT\\_VALUE (\\-1)\n\nPrint the exit value of programs with non-zero exit status. This is only available at the command line in interactive shells.\n\nRC\\_QUOTES\n\nAllow the character sequence ‘’’’ to signify a single quote within singly quoted strings. Note this does not apply in quoted strings using the format $’...’, where a backslashed single quote can be used.\n\nRM\\_STAR\\_SILENT (\\-H) <K> <S>\n\nDo not query the user before executing ‘rm \\*’ or ‘rm path/\\*’.\n\nRM\\_STAR\\_WAIT\n\nIf querying the user before executing ‘rm \\*’ or ‘rm path/\\*’, first wait ten seconds and ignore anything typed in that time. This avoids the problem of reflexively answering ‘yes’ to the query when one didn’t really mean it. The wait and query can always be avoided by expanding the ‘\\*’ in ZLE (with tab).\n\nSHORT\\_LOOPS <C> <Z>\n\nAllow the short forms of for, repeat, select, if, and function constructs.\n\nSHORT\\_REPEAT\n\nAllow the short form repeat as SHORT\\_LOOPS but without enabling it for the other constructs.\n\nSUN\\_KEYBOARD\\_HACK (\\-L)\n\nIf a line ends with a backquote, and there are an odd number of backquotes on the line, ignore the trailing backquote. This is useful on some keyboards where the return key is too small, and the backquote key lies annoyingly close to it. As an alternative the variable KEYBOARD\\_HACK lets you choose the character to be removed.\n\n* * *\n\n### 16.2.7 Job Control\n\nAUTO\\_CONTINUE\n\nWith this option set, stopped jobs that are removed from the job table with the disown builtin command are automatically sent a CONT signal to make them running.\n\nAUTO\\_RESUME (\\-W)\n\nTreat single word simple commands without redirection as candidates for resumption of an existing job.\n\nBG\\_NICE (\\-6) <C> <Z>\n\nRun all background jobs at a lower priority. This option is set by default.\n\nCHECK\\_JOBS <Z>\n\nReport the status of background and suspended jobs before exiting a shell with job control; a second attempt to exit the shell will succeed. NO\\_CHECK\\_JOBS is best used only in combination with NO\\_HUP, else such jobs will be killed automatically.\n\nThe check is omitted if the commands run from the previous command line included a ‘jobs’ command, since it is assumed the user is aware that there are background or suspended jobs. A ‘jobs’ command run from one of the hook functions defined in the section ‘Special Functions’ in [Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions) is not counted for this purpose.\n\nCHECK\\_RUNNING\\_JOBS <Z>\n\nCheck for both running and suspended jobs when CHECK\\_JOBS is enabled. When this option is disabled, zsh checks only for suspended jobs, which matches the default behavior of bash.\n\nThis option has no effect unless CHECK\\_JOBS is set.\n\nHUP <Z>\n\nSend the HUP signal to running jobs when the shell exits.\n\nLONG\\_LIST\\_JOBS (\\-R)\n\nPrint job notifications in the long format by default.\n\nMONITOR (\\-m, ksh: \\-m)\n\nAllow job control. Set by default in interactive shells.\n\nNOTIFY (\\-5, ksh: \\-b) <Z>\n\nReport the status of background jobs immediately, rather than waiting until just before printing a prompt.\n\nPOSIX\\_JOBS <K> <S>\n\nThis option makes job control more compliant with the POSIX standard.\n\nWhen the option is not set, the MONITOR option is unset on entry to subshells, so that job control is no longer active. When the option is set, the MONITOR option and job control remain active in the subshell, but note that the subshell has no access to jobs in the parent shell.\n\nWhen the option is not set, jobs put in the background or foreground with bg or fg are displayed with the same information that would be reported by jobs. When the option is set, only the text is printed. The output from jobs itself is not affected by the option.\n\nWhen the option is not set, job information from the parent shell is saved for output within a subshell (for example, within a pipeline). When the option is set, the output of jobs is empty until a job is started within the subshell.\n\nIn previous versions of the shell, it was necessary to enable POSIX\\_JOBS in order for the builtin command wait to return the status of background jobs that had already exited. This is no longer the case.\n\n* * *\n\n### 16.2.8 Prompting\n\nPROMPT\\_BANG <K>\n\nIf set, ‘!’ is treated specially in prompt expansion. See [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion).\n\nPROMPT\\_CR (+V) <D>\n\nPrint a carriage return just before printing a prompt in the line editor. This is on by default as multi-line editing is only possible if the editor knows where the start of the line appears.\n\nPROMPT\\_SP <D>\n\nAttempt to preserve a partial line (i.e. a line that did not end with a newline) that would otherwise be covered up by the command prompt due to the PROMPT\\_CR option. This works by outputting some cursor-control characters, including a series of spaces, that should make the terminal wrap to the next line when a partial line is present (note that this is only successful if your terminal has automatic margins, which is typical).\n\nWhen a partial line is preserved, by default you will see an inverse+bold character at the end of the partial line: a ‘%’ for a normal user or a ‘#’ for root. If set, the shell parameter PROMPT\\_EOL\\_MARK can be used to customize how the end of partial lines are shown.\n\nNOTE: if the PROMPT\\_CR option is not set, enabling this option will have no effect. This option is on by default.\n\nPROMPT\\_PERCENT <C> <Z>\n\nIf set, ‘%’ is treated specially in prompt expansion. See [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion).\n\nPROMPT\\_SUBST <K> <S>\n\nIf set, _parameter expansion_, _command substitution_ and _arithmetic expansion_ are performed in prompts. Substitutions within prompts do not affect the command status.\n\nTRANSIENT\\_RPROMPT\n\nRemove any right prompt from display when accepting a command line. This may be useful with terminals with other cut/paste methods.\n\n* * *\n\n### 16.2.9 Scripts and Functions\n\nALIAS\\_FUNC\\_DEF <S>\n\nBy default, zsh does not allow the definition of functions using the ‘name ()’ syntax if name was expanded as an alias: this causes an error. This is usually the desired behaviour, as otherwise the combination of an alias and a function based on the same definition can easily cause problems.\n\nWhen this option is set, aliases can be used for defining functions.\n\nFor example, consider the following definitions as they might occur in a startup file.\n\nalias foo=bar\nfoo() {\n  print This probably does not do what you expect.\n}\n\nHere, foo is expanded as an alias to bar before the () is encountered, so the function defined would be named bar. By default this is instead an error in native mode. Note that quoting any part of the function name, or using the keyword function, avoids the problem, so is recommended when the function name can also be an alias.\n\nC\\_BASES\n\nOutput hexadecimal numbers in the standard C format, for example ‘0xFF’ instead of the usual ‘16#FF’. If the option OCTAL\\_ZEROES is also set (it is not by default), octal numbers will be treated similarly and hence appear as ‘077’ instead of ‘8#77’. This option has no effect on the choice of the output base, nor on the output of bases other than hexadecimal and octal. Note that these formats will be understood on input irrespective of the setting of C\\_BASES.\n\nC\\_PRECEDENCES\n\nThis alters the precedence of arithmetic operators to be more like C and other programming languages; [Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) has an explicit list.\n\nDEBUG\\_BEFORE\\_CMD <D>\n\nRun the DEBUG trap before each command; otherwise it is run after each command. Setting this option mimics the behaviour of ksh 93; with the option unset the behaviour is that of ksh 88.\n\nERR\\_EXIT (\\-e, ksh: \\-e)\n\nIf a command has a non-zero exit status, execute the ZERR trap, if set, and exit. This is disabled while running initialization scripts.\n\nThe behaviour is also disabled inside DEBUG traps. In this case the option is handled specially: it is unset on entry to the trap. If the option DEBUG\\_BEFORE\\_CMD is set, as it is by default, and the option ERR\\_EXIT is found to have been set on exit, then the command for which the DEBUG trap is being executed is skipped. The option is restored after the trap exits.\n\nNon-zero status in a command list containing && or || is ignored for commands not at the end of the list. Hence\n\ndoes not trigger exit.\n\nExiting due to ERR\\_EXIT has certain interactions with asynchronous jobs noted in [Jobs & Signals](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs-_0026-Signals).\n\nERR\\_RETURN\n\nIf a command has a non-zero exit status, return immediately from the enclosing function. The logic is similar to that for ERR\\_EXIT, except that an implicit return statement is executed instead of an exit. This will trigger an exit at the outermost level of a non-interactive script.\n\nNormally this option inherits the behaviour of ERR\\_EXIT that code followed by ‘&&’ ‘||’ does not trigger a return. Hence in the following:\n\nno return is forced as the combined effect always has a zero return status.\n\nNote. however, that if summit in the above example is itself a function, code inside it is considered separately: it may force a return from summit (assuming the option remains set within summit), but not from the enclosing context. This behaviour is different from ERR\\_EXIT which is unaffected by function scope.\n\nEVAL\\_LINENO <Z>\n\nIf set, line numbers of expressions evaluated using the builtin eval are tracked separately of the enclosing environment. This applies both to the parameter LINENO and the line number output by the prompt escape %i. If the option is set, the prompt escape %N will output the string ‘(eval)’ instead of the script or function name as an indication. (The two prompt escapes are typically used in the parameter PS4 to be output when the option XTRACE is set.) If EVAL\\_LINENO is unset, the line number of the surrounding script or function is retained during the evaluation.\n\nEXEC (+n, ksh: +n) <D>\n\nDo execute commands. Without this option, commands are read and checked for syntax errors, but not executed. This option cannot be turned off in an interactive shell, except when ‘\\-n’ is supplied to the shell at startup.\n\nFUNCTION\\_ARGZERO <C> <Z>\n\nWhen executing a shell function or sourcing a script, set $0 temporarily to the name of the function/script. Note that toggling FUNCTION\\_ARGZERO from on to off (or off to on) does not change the current value of $0. Only the state upon entry to the function or script has an effect. Compare POSIX\\_ARGZERO.\n\nLOCAL\\_LOOPS\n\nWhen this option is not set, the effect of break and continue commands may propagate outside function scope, affecting loops in calling functions. When the option is set in a calling function, a break or a continue that is not caught within a called function (regardless of the setting of the option within that function) produces a warning and the effect is cancelled.\n\nLOCAL\\_OPTIONS <K>\n\nIf this option is set at the point of return from a shell function, most options (including this one) which were in force upon entry to the function are restored; options that are not restored are PRIVILEGED and RESTRICTED. Otherwise, only this option, and the LOCAL\\_LOOPS, XTRACE and PRINT\\_EXIT\\_VALUE options are restored. Hence if this is explicitly unset by a shell function the other options in force at the point of return will remain so. A shell function can also guarantee itself a known shell configuration with a formulation like ‘emulate -L zsh’; the \\-L activates LOCAL\\_OPTIONS.\n\nLOCAL\\_PATTERNS\n\nIf this option is set at the point of return from a shell function, the state of pattern disables, as set with the builtin command ‘disable -p’, is restored to what it was when the function was entered. The behaviour of this option is similar to the effect of LOCAL\\_OPTIONS on options; hence ‘emulate -L sh’ (or indeed any other emulation with the \\-L option) activates LOCAL\\_PATTERNS.\n\nLOCAL\\_TRAPS <K>\n\nIf this option is set when a signal trap is set inside a function, then the previous status of the trap for that signal will be restored when the function exits. Note that this option must be set _prior_ to altering the trap behaviour in a function; unlike LOCAL\\_OPTIONS, the value on exit from the function is irrelevant. However, it does not need to be set before any global trap for that to be correctly restored by a function. For example,\n\nunsetopt localtraps\ntrap - INT\nfn() { setopt localtraps; trap '' INT; sleep 3; }\n\nwill restore normal handling of SIGINT after the function exits.\n\nMULTI\\_FUNC\\_DEF <Z>\n\nAllow definitions of multiple functions at once in the form ‘fn1 fn2...()’; if the option is not set, this causes a parse error. Definition of multiple functions with the function keyword is always allowed. Multiple function definitions are not often used and can cause obscure errors.\n\nMULTIOS <Z>\n\nPerform implicit tees or cats when multiple redirections are attempted (see [Redirection](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirection)).\n\nOCTAL\\_ZEROES <S>\n\nInterpret any integer constant beginning with a 0 as octal, per IEEE Std 1003.2-1992 (ISO 9945-2:1993). This is not enabled by default as it causes problems with parsing of, for example, date and time strings with leading zeroes.\n\nSequences of digits indicating a numeric base such as the ‘08’ component in ‘08#77’ are always interpreted as decimal, regardless of leading zeroes.\n\nPIPE\\_FAIL\n\nBy default, when a pipeline exits the exit status recorded by the shell and returned by the shell variable $? reflects that of the rightmost element of a pipeline. If this option is set, the exit status instead reflects the status of the rightmost element of the pipeline that was non-zero, or zero if all elements exited with zero status.\n\nSOURCE\\_TRACE\n\nIf set, zsh will print an informational message announcing the name of each file it loads. The format of the output is similar to that for the XTRACE option, with the message <sourcetrace>. A file may be loaded by the shell itself when it starts up and shuts down (Startup/Shutdown Files) or by the use of the ‘source’ and ‘dot’ builtin commands.\n\nTYPESET\\_SILENT\n\nIf this is unset, executing any of the ‘typeset’ family of commands with no options and a list of parameters that have no values to be assigned but already exist will display the value of the parameter. If the option is set, they will only be shown when parameters are selected with the ‘\\-m’ option. The option ‘\\-p’ is available whether or not the option is set.\n\nTYPESET\\_TO\\_UNSET <K> <S>\n\nWhen declaring a new parameter with any of the ‘typeset’ family of related commands, the parameter remains unset unless and until a value is explicity assigned to it, either in the ‘typeset’ command itself or as a later assignment statement.\n\nVERBOSE (\\-v, ksh: \\-v)\n\nPrint shell input lines as they are read.\n\nXTRACE (\\-x, ksh: \\-x)\n\nPrint commands and their arguments as they are executed. The output is preceded by the value of $PS4, formatted as described in [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion).\n\n* * *\n\n### 16.2.10 Shell Emulation\n\nAPPEND\\_CREATE <K> <S>\n\nThis option only applies when NO\\_CLOBBER (-C) is in effect.\n\nIf this option is not set, the shell will report an error when a append redirection (\\>>) is used on a file that does not already exists (the traditional zsh behaviour of NO\\_CLOBBER). If the option is set, no error is reported (POSIX behaviour).\n\nBASH\\_REMATCH\n\nWhen set, matches performed with the \\=~ operator will set the BASH\\_REMATCH array variable, instead of the default MATCH and match variables. The first element of the BASH\\_REMATCH array will contain the entire matched text and subsequent elements will contain extracted substrings. This option makes more sense when KSH\\_ARRAYS is also set, so that the entire matched portion is stored at index 0 and the first substring is at index 1. Without this option, the MATCH variable contains the entire matched text and the match array variable contains substrings.\n\nBSD\\_ECHO <S>\n\nMake the echo builtin compatible with the BSD echo(1) command. This disables backslashed escape sequences in echo strings unless the \\-e option is specified.\n\nCONTINUE\\_ON\\_ERROR\n\nIf a fatal error is encountered (see [Errors](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Errors)), and the code is running in a script, the shell will resume execution at the next statement in the script at the top level, in other words outside all functions or shell constructs such as loops and conditions. This mimics the behaviour of interactive shells, where the shell returns to the line editor to read a new command; it was the normal behaviour in versions of zsh before 5.0.1.\n\nCSH\\_JUNKIE\\_HISTORY <C>\n\nA history reference without an event specifier will always refer to the previous command. Without this option, such a history reference refers to the same event as the previous history reference on the current command line, defaulting to the previous command.\n\nCSH\\_JUNKIE\\_LOOPS <C>\n\nAllow loop bodies to take the form ‘list; end’ instead of ‘do list; done’.\n\nCSH\\_JUNKIE\\_QUOTES <C>\n\nChanges the rules for single- and double-quoted text to match that of csh. These require that embedded newlines be preceded by a backslash; unescaped newlines will cause an error message. In double-quoted strings, it is made impossible to escape ‘$’, ‘‘’ or ‘\"’ (and ‘\\\\’ itself no longer needs escaping). Command substitutions are only expanded once, and cannot be nested.\n\nCSH\\_NULLCMD <C>\n\nDo not use the values of NULLCMD and READNULLCMD when running redirections with no command. This make such redirections fail (see [Redirection](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirection)).\n\nKSH\\_ARRAYS <K> <S>\n\nEmulate ksh array handling as closely as possible. If this option is set, array elements are numbered from zero, an array parameter without subscript refers to the first element instead of the whole array, and braces are required to delimit a subscript (‘${path\\[2\\]}’ rather than just ‘$path\\[2\\]’) or to apply modifiers to any parameter (‘${PWD:h}’ rather than ‘$PWD:h’).\n\nKSH\\_AUTOLOAD <K> <S>\n\nEmulate ksh function autoloading. This means that when a function is autoloaded, the corresponding file is merely executed, and must define the function itself. (By default, the function is defined to the contents of the file. However, the most common ksh\\-style case - of the file containing only a simple definition of the function - is always handled in the ksh\\-compatible manner.)\n\nKSH\\_OPTION\\_PRINT <K>\n\nAlters the way options settings are printed: instead of separate lists of set and unset options, all options are shown, marked ‘on’ if they are in the non-default state, ‘off’ otherwise.\n\nKSH\\_TYPESET\n\nThis option is now obsolete: a better appropximation to the behaviour of other shells is obtained with the reserved word interface to declare, export, float, integer, local, readonly and typeset. Note that the option is only applied when the reserved word interface is _not_ in use.\n\nAlters the way arguments to the typeset family of commands, including declare, export, float, integer, local and readonly, are processed. Without this option, zsh will perform normal word splitting after command and parameter expansion in arguments of an assignment; with it, word splitting does not take place in those cases.\n\nKSH\\_ZERO\\_SUBSCRIPT\n\nTreat use of a subscript of value zero in array or string expressions as a reference to the first element, i.e. the element that usually has the subscript 1. Ignored if KSH\\_ARRAYS is also set.\n\nIf neither this option nor KSH\\_ARRAYS is set, accesses to an element of an array or string with subscript zero return an empty element or string, while attempts to set element zero of an array or string are treated as an error. However, attempts to set an otherwise valid subscript range that includes zero will succeed. For example, if KSH\\_ZERO\\_SUBSCRIPT is not set,\n\nis an error, while\n\nis not and will replace the first element of the array.\n\nThis option is for compatibility with older versions of the shell and is not recommended in new code.\n\nPOSIX\\_ALIASES <K> <S>\n\nWhen this option is set, reserved words are not candidates for alias expansion: it is still possible to declare any of them as an alias, but the alias will never be expanded. Reserved words are described in [Reserved Words](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Reserved-Words).\n\nAlias expansion takes place while text is being read; hence when this option is set it does not take effect until the end of any function or other piece of shell code parsed as one unit. Note this may cause differences from other shells even when the option is in effect. For example, when running a command with ‘zsh -c’, or even ‘zsh -o posixaliases -c’, the entire command argument is parsed as one unit, so aliases defined within the argument are not available even in later lines. If in doubt, avoid use of aliases in non-interactive code.\n\nPOSIX\\_ARGZERO\n\nThis option may be used to temporarily disable FUNCTION\\_ARGZERO and thereby restore the value of $0 to the name used to invoke the shell (or as set by the \\-c command line option). For compatibility with previous versions of the shell, emulations use NO\\_FUNCTION\\_ARGZERO instead of POSIX\\_ARGZERO, which may result in unexpected scoping of $0 if the emulation mode is changed inside a function or script. To avoid this, explicitly enable POSIX\\_ARGZERO in the emulate command:\n\nemulate sh -o POSIX\\_ARGZERO\n\nNote that NO\\_POSIX\\_ARGZERO has no effect unless FUNCTION\\_ARGZERO was already enabled upon entry to the function or script.\n\nPOSIX\\_BUILTINS <K> <S>\n\nWhen this option is set the command builtin can be used to execute shell builtin commands. Parameter assignments specified before shell functions and special builtins are kept after the command completes unless the special builtin is prefixed with the command builtin. Special builtins are ., :, break, continue, declare, eval, exit, export, integer, local, readonly, return, set, shift, source, times, trap and unset.\n\nIn addition, various error conditions associated with the above builtins or exec cause a non-interactive shell to exit and an interactive shell to return to its top-level processing.\n\nFurthermore, functions and shell builtins are not executed after an exec prefix; the command to be executed must be an external command found in the path.\n\nFurthermore, the getopts builtin behaves in a POSIX-compatible fashion in that the associated variable OPTIND is not made local to functions, and its value is calculated differently to match other shells.\n\nMoreover, the warning and special exit code from \\[\\[ -o non\\_existent\\_option \\]\\] are suppressed.\n\nPOSIX\\_IDENTIFIERS <K> <S>\n\nWhen this option is set, only the ASCII characters a to z, A to Z, 0 to 9 and \\_ may be used in identifiers (names of shell parameters and modules).\n\nIn addition, setting this option limits the effect of parameter substitution with no braces, so that the expression $# is treated as the parameter $# even if followed by a valid parameter name. When it is unset, zsh allows expressions of the form $#name to refer to the length of $name, even for special variables, for example in expressions such as $#- and $#\\*.\n\nAnother difference is that with the option set assignment to an unset variable in arithmetic context causes the variable to be created as a scalar rather than a numeric type. So after ‘unset t; (( t = 3 ))’. without POSIX\\_IDENTIFIERS set t has integer type, while with it set it has scalar type.\n\nWhen the option is unset and multibyte character support is enabled (i.e. it is compiled in and the option MULTIBYTE is set), then additionally any alphanumeric characters in the local character set may be used in identifiers. Note that scripts and functions written with this feature are not portable, and also that both options must be set before the script or function is parsed; setting them during execution is not sufficient as the syntax variable\\=value has already been parsed as a command rather than an assignment.\n\nIf multibyte character support is not compiled into the shell this option is ignored; all octets with the top bit set may be used in identifiers. This is non-standard but is the traditional zsh behaviour.\n\nPOSIX\\_STRINGS <K> <S>\n\nThis option affects processing of quoted strings. Currently it only affects the behaviour of null characters, i.e. character 0 in the portable character set corresponding to US ASCII.\n\nWhen this option is not set, null characters embedded within strings of the form $’...’ are treated as ordinary characters. The entire string is maintained within the shell and output to files where necessary, although owing to restrictions of the library interface the string is truncated at the null character in file names, environment variables, or in arguments to external programs.\n\nWhen this option is set, the $’...’ expression is truncated at the null character. Note that remaining parts of the same string beyond the termination of the quotes are not truncated.\n\nFor example, the command line argument a$’b\\\\0c’d is treated with the option off as the characters a, b, null, c, d, and with the option on as the characters a, b, d.\n\nPOSIX\\_TRAPS <K> <S>\n\nWhen this option is set, the usual zsh behaviour of executing traps for EXIT on exit from shell functions is suppressed. In that case, manipulating EXIT traps always alters the global trap for exiting the shell; the LOCAL\\_TRAPS option is ignored for the EXIT trap.\n\nAlso, a return statement executed in a trap with no argument passes back from the function the value from the surrounding context, not from code executed within the trap.\n\nFurthermore, if a trap is set to be ignored, this state persists when a subshell is entered. Without the option, the trap would be reset to its default state at this point.\n\nSH\\_FILE\\_EXPANSION <K> <S>\n\nPerform filename expansion (e.g., ~ expansion) _before_ parameter expansion, command substitution, arithmetic expansion and brace expansion. If this option is unset, it is performed _after_ brace expansion, so things like ‘~$USERNAME’ and ‘~{pfalstad,rc}’ will work.\n\nSH\\_NULLCMD <K> <S>\n\nDo not use the values of NULLCMD and READNULLCMD when doing redirections, use ‘:’ instead (see [Redirection](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirection)).\n\nSH\\_OPTION\\_LETTERS <K> <S>\n\nIf this option is set the shell tries to interpret single letter options (which are used with set and setopt) like ksh does. This also affects the value of the \\- special parameter.\n\nSH\\_WORD\\_SPLIT (\\-y) <K> <S>\n\nCauses field splitting to be performed on unquoted parameter expansions. Note that this option has nothing to do with word splitting. (See [Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion).)\n\nTRAPS\\_ASYNC\n\nWhile waiting for a program to exit, handle signals and run traps immediately. Otherwise the trap is run after a child process has exited. Note this does not affect the point at which traps are run for any case other than when the shell is waiting for a child process.\n\n* * *\n\n### 16.2.11 Shell State\n\nINTERACTIVE (\\-i, ksh: \\-i)\n\nThis is an interactive shell. This option is set upon initialisation if the standard input is a tty and commands are being read from standard input. (See the discussion of SHIN\\_STDIN.) This heuristic may be overridden by specifying a state for this option on the command line. The value of this option can only be changed via flags supplied at invocation of the shell. It cannot be changed once zsh is running.\n\nLOGIN (\\-l, ksh: \\-l)\n\nThis is a login shell. If this option is not explicitly set, the shell becomes a login shell if the first character of the argv\\[0\\] passed to the shell is a ‘\\-’.\n\nPRIVILEGED (\\-p, ksh: \\-p)\n\nTurn on privileged mode. Typically this is used when script is to be run with elevated privileges. This should be done as follows directly with the \\-p option to zsh so that it takes effect during startup.\n\nThe option is enabled automatically on startup if the effective user (group) ID is not equal to the real user (group) ID. In this case, turning the option off causes the effective user and group IDs to be set to the real user and group IDs. Be aware that if that fails the shell may be running with different IDs than was intended so a script should check for failure and act accordingly, for example:\n\nunsetopt privileged || exit\n\nThe PRIVILEGED option disables sourcing user startup files. If zsh is invoked as ‘sh’ or ‘ksh’ with this option set, /etc/suid\\_profile is sourced (after /etc/profile on interactive shells). Sourcing ~/.profile is disabled and the contents of the ENV variable is ignored. This option cannot be changed using the \\-m option of setopt and unsetopt, and changing it inside a function always changes it globally regardless of the LOCAL\\_OPTIONS option.\n\nRESTRICTED (\\-r)\n\nEnables restricted mode. This option cannot be changed using unsetopt, and setting it inside a function always changes it globally regardless of the LOCAL\\_OPTIONS option. See [Restricted Shell](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Restricted-Shell).\n\nSHIN\\_STDIN (\\-s, ksh: \\-s)\n\nCommands are being read from the standard input. Commands are read from standard input if no command is specified with \\-c and no file of commands is specified. If SHIN\\_STDIN is set explicitly on the command line, any argument that would otherwise have been taken as a file to run will instead be treated as a normal positional parameter. Note that setting or unsetting this option on the command line does not necessarily affect the state the option will have while the shell is running - that is purely an indicator of whether or not commands are _actually_ being read from standard input. The value of this option can only be changed via flags supplied at invocation of the shell. It cannot be changed once zsh is running.\n\nSINGLE\\_COMMAND (\\-t, ksh: \\-t)\n\nIf the shell is reading from standard input, it exits after a single command has been executed. This also makes the shell non-interactive, unless the INTERACTIVE option is explicitly set on the command line. The value of this option can only be changed via flags supplied at invocation of the shell. It cannot be changed once zsh is running.\n\n* * *\n\n### 16.2.12 Zle\n\nBEEP (+B) <D>\n\nBeep on error in ZLE.\n\nCOMBINING\\_CHARS\n\nAssume that the terminal displays combining characters correctly. Specifically, if a base alphanumeric character is followed by one or more zero-width punctuation characters, assume that the zero-width characters will be displayed as modifications to the base character within the same width. Not all terminals handle this. If this option is not set, zero-width characters are displayed separately with special mark-up.\n\nIf this option is set, the pattern test \\[\\[:WORD:\\]\\] matches a zero-width punctuation character on the assumption that it will be used as part of a word in combination with a word character. Otherwise the base shell does not handle combining characters specially.\n\nEMACS\n\nIf ZLE is loaded, turning on this option has the equivalent effect of ‘bindkey -e’. In addition, the VI option is unset. Turning it off has no effect. The option setting is not guaranteed to reflect the current keymap. This option is provided for compatibility; bindkey is the recommended interface.\n\nOVERSTRIKE\n\nStart up the line editor in overstrike mode.\n\nSINGLE\\_LINE\\_ZLE (\\-M) <K>\n\nUse single-line command line editing instead of multi-line.\n\nNote that although this is on by default in ksh emulation it only provides superficial compatibility with the ksh line editor and reduces the effectiveness of the zsh line editor. As it has no effect on shell syntax, many users may wish to disable this option when using ksh emulation interactively.\n\nVI\n\nIf ZLE is loaded, turning on this option has the equivalent effect of ‘bindkey -v’. In addition, the EMACS option is unset. Turning it off has no effect. The option setting is not guaranteed to reflect the current keymap. This option is provided for compatibility; bindkey is the recommended interface.\n\nZLE (\\-Z)\n\nUse the zsh line editor. Set by default in interactive shells connected to a terminal.\n\n* * *\n\n## 16.3 Option Aliases\n\nSome options have alternative names. These aliases are never used for output, but can be used just like normal option names when specifying options to the shell.\n\nBRACE\\_EXPAND\n\n_NO\\__IGNORE\\_BRACES (ksh and bash compatibility)\n\nDOT\\_GLOB\n\nGLOB\\_DOTS (bash compatibility)\n\nHASH\\_ALL\n\nHASH\\_CMDS (bash compatibility)\n\nHIST\\_APPEND\n\nAPPEND\\_HISTORY (bash compatibility)\n\nHIST\\_EXPAND\n\nBANG\\_HIST (bash compatibility)\n\nLOG\n\n_NO\\__HIST\\_NO\\_FUNCTIONS (ksh compatibility)\n\nMAIL\\_WARN\n\nMAIL\\_WARNING (bash compatibility)\n\nONE\\_CMD\n\nSINGLE\\_COMMAND (bash compatibility)\n\nPHYSICAL\n\nCHASE\\_LINKS (ksh and bash compatibility)\n\nPROMPT\\_VARS\n\nPROMPT\\_SUBST (bash compatibility)\n\nSTDIN\n\nSHIN\\_STDIN (ksh compatibility)\n\nTRACK\\_ALL\n\nHASH\\_CMDS (ksh compatibility)\n\n* * *\n\n## 16.4 Single Letter Options\n\n* * *\n\n### 16.4.1 Default set\n\n\\-0\n\nCORRECT\n\n\\-1\n\nPRINT\\_EXIT\\_VALUE\n\n\\-2\n\n_NO\\__BAD\\_PATTERN\n\n\\-3\n\n_NO\\__NOMATCH\n\n\\-4\n\nGLOB\\_DOTS\n\n\\-5\n\nNOTIFY\n\n\\-6\n\nBG\\_NICE\n\n\\-7\n\nIGNORE\\_EOF\n\n\\-8\n\nMARK\\_DIRS\n\n\\-9\n\nAUTO\\_LIST\n\n\\-B\n\n_NO\\__BEEP\n\n\\-C\n\n_NO\\__CLOBBER\n\n\\-D\n\nPUSHD\\_TO\\_HOME\n\n\\-E\n\nPUSHD\\_SILENT\n\n\\-F\n\n_NO\\__GLOB\n\n\\-G\n\nNULL\\_GLOB\n\n\\-H\n\nRM\\_STAR\\_SILENT\n\n\\-I\n\nIGNORE\\_BRACES\n\n\\-J\n\nAUTO\\_CD\n\n\\-K\n\n_NO\\__BANG\\_HIST\n\n\\-L\n\nSUN\\_KEYBOARD\\_HACK\n\n\\-M\n\nSINGLE\\_LINE\\_ZLE\n\n\\-N\n\nAUTO\\_PUSHD\n\n\\-O\n\nCORRECT\\_ALL\n\n\\-P\n\nRC\\_EXPAND\\_PARAM\n\n\\-Q\n\nPATH\\_DIRS\n\n\\-R\n\nLONG\\_LIST\\_JOBS\n\n\\-S\n\nREC\\_EXACT\n\n\\-T\n\nCDABLE\\_VARS\n\n\\-U\n\nMAIL\\_WARNING\n\n\\-V\n\n_NO\\__PROMPT\\_CR\n\n\\-W\n\nAUTO\\_RESUME\n\n\\-X\n\nLIST\\_TYPES\n\n\\-Y\n\nMENU\\_COMPLETE\n\n\\-Z\n\nZLE\n\n\\-a\n\nALL\\_EXPORT\n\n\\-e\n\nERR\\_EXIT\n\n\\-f\n\n_NO\\__RCS\n\n\\-g\n\nHIST\\_IGNORE\\_SPACE\n\n\\-h\n\nHIST\\_IGNORE\\_DUPS\n\n\\-i\n\nINTERACTIVE\n\n\\-k\n\nINTERACTIVE\\_COMMENTS\n\n\\-l\n\nLOGIN\n\n\\-m\n\nMONITOR\n\n\\-n\n\n_NO\\__EXEC\n\n\\-p\n\nPRIVILEGED\n\n\\-r\n\nRESTRICTED\n\n\\-s\n\nSHIN\\_STDIN\n\n\\-t\n\nSINGLE\\_COMMAND\n\n\\-u\n\n_NO\\__UNSET\n\n\\-v\n\nVERBOSE\n\n\\-w\n\nCHASE\\_LINKS\n\n\\-x\n\nXTRACE\n\n\\-y\n\nSH\\_WORD\\_SPLIT\n\n* * *\n\n### 16.4.2 sh/ksh emulation set\n\n\\-C\n\n_NO\\__CLOBBER\n\n\\-T\n\nTRAPS\\_ASYNC\n\n\\-X\n\nMARK\\_DIRS\n\n\\-a\n\nALL\\_EXPORT\n\n\\-b\n\nNOTIFY\n\n\\-e\n\nERR\\_EXIT\n\n\\-f\n\n_NO\\__GLOB\n\n\\-i\n\nINTERACTIVE\n\n\\-l\n\nLOGIN\n\n\\-m\n\nMONITOR\n\n\\-n\n\n_NO\\__EXEC\n\n\\-p\n\nPRIVILEGED\n\n\\-r\n\nRESTRICTED\n\n\\-s\n\nSHIN\\_STDIN\n\n\\-t\n\nSINGLE\\_COMMAND\n\n\\-u\n\n_NO\\__UNSET\n\n\\-v\n\nVERBOSE\n\n\\-x\n\nXTRACE\n\n* * *\n\n### 16.4.3 Also note\n\n\\-A\n\nUsed by set for setting arrays\n\n\\-b\n\nUsed on the command line to specify end of option processing\n\n\\-c\n\nUsed on the command line to specify a single command\n\n\\-m\n\nUsed by setopt for pattern-matching option setting\n\n\\-o\n\nUsed in all places to allow use of long option names\n\n\\-s\n\nUsed by set to sort positional parameters\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 1242,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-html-Options-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-html-Options-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-html-Options-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-html-Options-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Options-html-Options-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 85128,
      "readableText": 130427,
      "none": 158716,
      "readableTextIfPossible": 130427,
      "result": 130427,
      "markdown": 70328
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Command-Execution.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#Command-Execution",
    "loadedTime": "2025-05-08T06:51:24.312Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#Command-Execution",
    "title": "zsh: 8 Command Execution",
    "description": "zsh: 8 Command Execution",
    "author": null,
    "keywords": "zsh: 8 Command Execution",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:22 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-19d8\"",
      "expires": "Thu, 08 May 2025 06:52:22 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "MISS",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7073a79cf36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 8 Command Execution\nIf a command name contains no slashes, the shell attempts to locate it. If there exists a shell function by that name, the function is invoked as described in Functions. If there exists a shell builtin by that name, the builtin is invoked. \nOtherwise, the shell searches each element of $path for a directory containing an executable file by that name. \nIf execution fails: an error message is printed, and one of the following values is returned. \n127 \nThe search was unsuccessful. The error message is ‘command not found: cmd’. \n126 \nThe executable file has insufficient permissions, is a directory or special file, or is not a script and is in a format unrecognized by the operating system. The exact conditions and error message are operating system-dependent; see execve(2). \nIf execution fails because the file is not in executable format, and the file is not a directory, it is assumed to be a shell script. /bin/sh is spawned to execute it. If the program is a file beginning with ‘#!’, the remainder of the first line specifies an interpreter for the program. The shell will execute the specified interpreter on operating systems that do not handle this executable format in the kernel. \nIf no external command is found but a function command_not_found_handler exists the shell executes this function with all command line arguments. The return status of the function becomes the status of the command. Note that the handler is executed in a subshell forked to execute an external command, hence changes to directories, shell parameters, etc. have no effect on the main shell. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Command-Execution-html-Command-Execution-pf6xa.html",
  "markdown": "# zsh: 8 Command Execution\n\nIf a command name contains no slashes, the shell attempts to locate it. If there exists a shell function by that name, the function is invoked as described in [Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions). If there exists a shell builtin by that name, the builtin is invoked.\n\nOtherwise, the shell searches each element of $path for a directory containing an executable file by that name.\n\nIf execution fails: an error message is printed, and one of the following values is returned.\n\n127\n\nThe search was unsuccessful. The error message is ‘command not found: cmd’.\n\n126\n\nThe executable file has insufficient permissions, is a directory or special file, or is not a script and is in a format unrecognized by the operating system. The exact conditions and error message are operating system-dependent; see execve(2).\n\nIf execution fails because the file is not in executable format, and the file is not a directory, it is assumed to be a shell script. /bin/sh is spawned to execute it. If the program is a file beginning with ‘#!’, the remainder of the first line specifies an interpreter for the program. The shell will execute the specified interpreter on operating systems that do not handle this executable format in the kernel.\n\nIf no external command is found but a function command\\_not\\_found\\_handler exists the shell executes this function with all command line arguments. The return status of the function becomes the status of the command. Note that the handler is executed in a subshell forked to execute an external command, hence changes to directories, shell parameters, etc. have no effect on the main shell.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 24,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Command-Execution-html-Command-Execution-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Command-Execution-html-Command-Execution-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Command-Execution-html-Command-Execution-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Command-Execution-html-Command-Execution-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Command-Execution-html-Command-Execution-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 2061,
      "readableText": 2538,
      "none": 4935,
      "readableTextIfPossible": 4935,
      "result": 2538,
      "markdown": 1841
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets",
    "loadedTime": "2025-05-08T06:51:27.609Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets",
    "title": "zsh: 19 Completion Widgets",
    "description": "zsh: 19 Completion Widgets",
    "author": null,
    "keywords": "zsh: 19 Completion Widgets",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:25 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-11c56\"",
      "expires": "Thu, 08 May 2025 06:52:25 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7074cab3a36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 19 Completion Widgets\n19.1 Description\nThe shell’s programmable completion mechanism can be manipulated in two ways; here the low-level features supporting the newer, function-based mechanism are defined. A complete set of shell functions based on these features is described in the next chapter, Completion System, and users with no interest in adding to that system (or, potentially, writing their own — see dictionary entry for ‘hubris’) should skip the current section. The older system based on the compctl builtin command is described in Completion Using compctl. \nCompletion widgets are defined by the -C option to the zle builtin command provided by the zsh/zle module (see The zsh/zle Module). For example, \nzle -C complete expand-or-complete completer\ndefines a widget named ‘complete’. The second argument is the name of any of the builtin widgets that handle completions: complete-word, expand-or-complete, expand-or-complete-prefix, menu-complete, menu-expand-or-complete, reverse-menu-complete, list-choices, or delete-char-or-list. Note that this will still work even if the widget in question has been re-bound. \nWhen this newly defined widget is bound to a key using the bindkey builtin command defined in the zsh/zle module (Zsh Line Editor), typing that key will call the shell function ‘completer’. This function is responsible for generating completion matches using the builtins described below. As with other ZLE widgets, the function is called with its standard input closed. \nOnce the function returns, the completion code takes over control again and treats the matches in the same manner as the specified builtin widget, in this case expand-or-complete. \n19.2 Completion Special Parameters\nThe parameters ZLE_REMOVE_SUFFIX_CHARS and ZLE_SPACE_SUFFIX_CHARS are used by the completion mechanism, but are not special. See Parameters Used By The Shell. \nInside completion widgets, and any functions called from them, some parameters have special meaning; outside these functions they are not special to the shell in any way. These parameters are used to pass information between the completion code and the completion widget. Some of the builtin commands and the condition codes use or change the current values of these parameters. Any existing values will be hidden during execution of completion widgets; except for compstate, the parameters are reset on each function exit (including nested function calls from within the completion widget) to the values they had when the function was entered. \nCURRENT \nThis is the number of the current word, i.e. the word the cursor is currently on in the words array. Note that this value is only correct if the ksharrays option is not set. \nIPREFIX \nInitially this will be set to the empty string. This parameter functions like PREFIX; it contains a string which precedes the one in PREFIX and is not considered part of the list of matches. Typically, a string is transferred from the beginning of PREFIX to the end of IPREFIX, for example: \nIPREFIX=${PREFIX%%\\=*}=\nPREFIX=${PREFIX#*=}\ncauses the part of the prefix up to and including the first equal sign not to be treated as part of a matched string. This can be done automatically by the compset builtin, see below. \nISUFFIX \nAs IPREFIX, but for a suffix that should not be considered part of the matches; note that the ISUFFIX string follows the SUFFIX string. \nPREFIX \nInitially this will be set to the part of the current word from the beginning of the word up to the position of the cursor; it may be altered to give a common prefix for all matches. \nQIPREFIX \nThis parameter is read-only and contains the quoted string up to the word being completed. E.g. when completing ‘\"foo’, this parameter contains the double quote. If the -q option of compset is used (see below), and the original string was ‘\"foo bar’ with the cursor on the ‘bar’, this parameter contains ‘\"foo ’. \nQISUFFIX \nLike QIPREFIX, but containing the suffix. \nSUFFIX \nInitially this will be set to the part of the current word from the cursor position to the end; it may be altered to give a common suffix for all matches. It is most useful when the option COMPLETE_IN_WORD is set, as otherwise the whole word on the command line is treated as a prefix. \ncompstate \nThis is an associative array with various keys and values that the completion code uses to exchange information with the completion widget. The keys are: \nall_quotes \nThe -q option of the compset builtin command (see below) allows a quoted string to be broken into separate words; if the cursor is on one of those words, that word will be completed, possibly invoking ‘compset -q’ recursively. With this key it is possible to test the types of quoted strings which are currently broken into parts in this fashion. Its value contains one character for each quoting level. The characters are a single quote or a double quote for strings quoted with these characters, a dollars sign for strings quoted with $’...’ and a backslash for strings not starting with a quote character. The first character in the value always corresponds to the innermost quoting level. \ncontext \nThis will be set by the completion code to the overall context in which completion is attempted. Possible values are: \narray_value \nwhen completing inside the value of an array parameter assignment; in this case the words array contains the words inside the parentheses. \nbrace_parameter \nwhen completing the name of a parameter in a parameter expansion beginning with ${. This context will also be set when completing parameter flags following ${(; the full command line argument is presented and the handler must test the value to be completed to ascertain that this is the case. \nassign_parameter \nwhen completing the name of a parameter in a parameter assignment. \ncommand \nwhen completing for a normal command (either in command position or for an argument of the command). \ncondition \nwhen completing inside a ‘[[...]]’ conditional expression; in this case the words array contains only the words inside the conditional expression. \nmath \nwhen completing in a mathematical environment such as a ‘((...))’ construct. \nparameter \nwhen completing the name of a parameter in a parameter expansion beginning with $ but not ${. \nredirect \nwhen completing after a redirection operator. \nsubscript \nwhen completing inside a parameter subscript. \nvalue \nwhen completing the value of a parameter assignment. \nexact \nControls the behaviour when the REC_EXACT option is set. It will be set to accept if an exact match would be accepted, and will be unset otherwise. \nIf it was set when at least one match equal to the string on the line was generated, the match is accepted. \nexact_string \nThe string of an exact match if one was found, otherwise unset. \nignored \nThe number of completions that were ignored because they matched one of the patterns given with the -F option to the compadd builtin command. \ninsert \nThis controls the manner in which a match is inserted into the command line. On entry to the widget function, if it is unset the command line is not to be changed; if set to unambiguous, any prefix common to all matches is to be inserted; if set to automenu-unambiguous, the common prefix is to be inserted and the next invocation of the completion code may start menu completion (due to the AUTO_MENU option being set); if set to menu or automenu menu completion will be started for the matches currently generated (in the latter case this will happen because the AUTO_MENU is set). The value may also contain the string ‘tab’ when the completion code would normally not really do completion, but only insert the TAB character. \nOn exit it may be set to any of the values above (where setting it to the empty string is the same as unsetting it), or to a number, in which case the match whose number is given will be inserted into the command line. Negative numbers count backward from the last match (with ‘-1’ selecting the last match) and out-of-range values are wrapped around, so that a value of zero selects the last match and a value one more than the maximum selects the first. Unless the value of this key ends in a space, the match is inserted as in a menu completion, i.e. without automatically appending a space. \nBoth menu and automenu may also specify the number of the match to insert, given after a colon. For example, ‘menu:2’ says to start menu completion, beginning with the second match. \nNote that a value containing the substring ‘tab’ makes the matches generated be ignored and only the TAB be inserted. \nFinally, it may also be set to all, which makes all matches generated be inserted into the line. \ninsert_positions \nWhen the completion system inserts an unambiguous string into the line, there may be multiple places where characters are missing or where the character inserted differs from at least one match. The value of this key contains a colon separated list of all these positions, as indexes into the command line. \nlast_prompt \nIf this is set to a non-empty string for every match added, the completion code will move the cursor back to the previous prompt after the list of completions has been displayed. Initially this is set or unset according to the ALWAYS_LAST_PROMPT option. \nlist \nThis controls whether or how the list of matches will be displayed. If it is unset or empty they will never be listed; if its value begins with list, they will always be listed; if it begins with autolist or ambiguous, they will be listed when the AUTO_LIST or LIST_AMBIGUOUS options respectively would normally cause them to be. \nIf the substring force appears in the value, this makes the list be shown even if there is only one match. Normally, the list would be shown only if there are at least two matches. \nThe value contains the substring packed if the LIST_PACKED option is set. If this substring is given for all matches added to a group, this group will show the LIST_PACKED behavior. The same is done for the LIST_ROWS_FIRST option with the substring rows. \nFinally, if the value contains the string explanations, only the explanation strings, if any, will be listed and if it contains messages, only the messages (added with the -x option of compadd) will be listed. If it contains both explanations and messages both kinds of explanation strings will be listed. It will be set appropriately on entry to a completion widget and may be changed there. \nlist_lines \nThis gives the number of lines that are needed to display the full list of completions. Note that to calculate the total number of lines to display you need to add the number of lines needed for the command line to this value, this is available as the value of the BUFFERLINES special parameter. \nlist_max \nInitially this is set to the value of the LISTMAX parameter. It may be set to any other value; when the widget exits this value will be used in the same way as the value of LISTMAX. \nnmatches \nThe number of matches added by the completion code so far. \nold_insert \nOn entry to the widget this will be set to the number of the match of an old list of completions that is currently inserted into the command line. If no match has been inserted, this is unset. \nAs with old_list, the value of this key will only be used if it is the string keep. If it was set to this value by the widget and there was an old match inserted into the command line, this match will be kept and if the value of the insert key specifies that another match should be inserted, this will be inserted after the old one. \nold_list \nThis is set to yes if there is still a valid list of completions from a previous completion at the time the widget is invoked. This will usually be the case if and only if the previous editing operation was a completion widget or one of the builtin completion functions. If there is a valid list and it is also currently shown on the screen, the value of this key is shown. \nAfter the widget has exited the value of this key is only used if it was set to keep. In this case the completion code will continue to use this old list. If the widget generated new matches, they will not be used. \nparameter \nThe name of the parameter when completing in a subscript or in the value of a parameter assignment. \npattern_insert \nNormally this is set to menu, which specifies that menu completion will be used whenever a set of matches was generated using pattern_match (see below). If it is set to any other non-empty string by the user and menu completion is not selected by other option settings, the code will instead insert any common prefix for the generated matches as with normal completion. \npattern_match \nLocally controls the behaviour given by the GLOB_COMPLETE option. Initially it is set to ‘*’ if and only if the option is set. The completion widget may set it to this value, to an empty string (which has the same effect as unsetting it), or to any other non-empty string. If it is non-empty, unquoted metacharacters on the command line will be treated as patterns; if it is ‘*’, then additionally a wildcard ‘*’ is assumed at the cursor position; if it is empty or unset, metacharacters will be treated literally. \nNote that the match specifications given to the compadd builtin command are not used if this is set to a non-empty string. \nquote \nWhen completing inside quotes, this contains the quotation character (i.e. either a single quote, a double quote, or a backtick). Otherwise it is unset. \nquoting \nWhen completing inside single quotes, this is set to the string single; inside double quotes, the string double; inside backticks, the string backtick. Otherwise it is unset. \nredirect \nThe redirection operator when completing in a redirection position, i.e. one of <, >, etc. \nrestore \nThis is set to auto before a function is entered, which forces the special parameters mentioned above (words, CURRENT, PREFIX, IPREFIX, SUFFIX, and ISUFFIX) to be restored to their previous values when the function exits. If a function unsets it or sets it to any other string, they will not be restored. \nto_end \nSpecifies the occasions on which the cursor is moved to the end of a string when a match is inserted. On entry to a widget function, it may be single if this will happen when a single unambiguous match was inserted or match if it will happen any time a match is inserted (for example, by menu completion; this is likely to be the effect of the ALWAYS_TO_END option). \nOn exit, it may be set to single as above. It may also be set to always, or to the empty string or unset; in those cases the cursor will be moved to the end of the string always or never respectively. Any other string is treated as match. \nunambiguous \nThis key is read-only and will always be set to the common (unambiguous) prefix the completion code has generated for all matches added so far. \nunambiguous_cursor \nThis gives the position the cursor would be placed at if the common prefix in the unambiguous key were inserted, relative to the value of that key. The cursor would be placed before the character whose index is given by this key. \nunambiguous_positions \nThis contains all positions where characters in the unambiguous string are missing or where the character inserted differs from at least one of the matches. The positions are given as indexes into the string given by the value of the unambiguous key. \nvared \nIf completion is called while editing a line using the vared builtin, the value of this key is set to the name of the parameter given as an argument to vared. This key is only set while a vared command is active. \nwords \nThis array contains the words present on the command line currently being edited. \n19.3 Completion Builtin Commands\ncompadd [ -akqQfenUl12C ] [ -F array ] [-P prefix ] [ -S suffix ] [-p hidden-prefix ] [ -s hidden-suffix ] [-i ignored-prefix ] [ -I ignored-suffix ] [-W file-prefix ] [ -d array ] [-J group-name ] [ -X explanation ] [ -x message ] [-V group-name ] [ -o [ order ] ] [-r remove-chars ] [ -R remove-func ] [-D array ] [ -O array ] [ -A array ] [-E number ] [-M match-spec ] [ -- ] [ completions ... ] \nThis builtin command can be used to add matches directly and control all the information the completion code stores with each possible completion. The return status is zero if at least one match was added and non-zero if no matches were added. \nThe completion code breaks each match into seven fields in the order: \n<ipre><apre><hpre><body><hsuf><asuf><isuf> \nThe first field is an ignored prefix taken from the command line, the contents of the IPREFIX parameter plus the string given with the -i option. With the -U option, only the string from the -i option is used. The field <apre> is an optional prefix string given with the -P option. The <hpre> field is a string that is considered part of the match but that should not be shown when listing completions, given with the -p option; for example, functions that do filename generation might specify a common path prefix this way. <body> is the part of the match that should appear in the list of matches shown to the user. The suffixes <hsuf>, <asuf> and <isuf> correspond to the prefixes <hpre>, <apre> and <ipre> and are given by the options -s, -S and -I, respectively. \nThe supported flags are: \n-P prefix \nThis gives a string to be inserted before each match. The string given is not considered as part of the match and any shell metacharacters in it will not be quoted when the string is inserted. \n-S suffix \nLike -P, but gives a string to be inserted after each match. \n-p hidden-prefix \nThis gives a string that should be inserted before each match but that should not appear in the list of matches. Unless the -U option is given, this string must be matched as part of the string on the command line. \n-s hidden-suffix \nLike ‘-p’, but gives a string to insert after each match. \n-i ignored-prefix \nThis gives a string to insert just before any string given with the ‘-P’ option. Without ‘-P’ the string is inserted before the string given with ‘-p’ or directly before each match. \n-I ignored-suffix \nLike -i, but gives an ignored suffix. \n-a \nWith this flag the completions are taken as names of arrays and the actual completions are their values. If only some elements of the arrays are needed, the completions may also contain subscripts, as in ‘foo[2,-1]’. \n-k \nWith this flag the completions are taken as names of associative arrays and the actual completions are their keys. As for -a, the words may also contain subscripts, as in ‘foo[(R)*bar*]’. \n-d array \nThis adds per-completion display strings. The array should contain one element per completion given. The completion code will then display the first element instead of the first completion, and so on. The array may be given as the name of an array parameter or directly as a space-separated list of words in parentheses. \nIf there are fewer display strings than completions, the leftover completions will be displayed unchanged and if there are more display strings than completions, the leftover display strings will be silently ignored. \n-l \nThis option only has an effect if used together with the -d option. If it is given, the display strings are listed one per line, not arrayed in columns. \n-o [ order ] \nThis controls the order in which matches are sorted. order is a comma-separated list comprising the following possible values. These values can be abbreviated to their initial two or three characters. Note that the order forms part of the group name space so matches with different orderings will not be in the same group. \nmatch \nIf given, the order of the output is determined by the match strings; otherwise it is determined by the display strings (i.e. the strings given by the -d option). This is the default if ‘-o’ is specified but the order argument is omitted. \nnosort \nThis specifies that the completions are pre-sorted and their order should be preserved. This value only makes sense alone and cannot be combined with any others. \nnumeric \nIf the matches include numbers, sort them numerically rather than lexicographically. \nreverse \nArrange the matches backwards by reversing the sort ordering. \n-J group-name \nGives the name of the group that the matches should be stored in. \n-V group-name \nLike -J but naming an unsorted group. This option is identical to the combination of -J and -o nosort. \n-1 \nIf given together with the -V option, makes only consecutive duplicates in the group be removed. If combined with the -J option, this has no visible effect. Note that groups with and without this flag are in different name spaces. \n-2 \nIf given together with the -J or -V option, makes all duplicates be kept. Again, groups with and without this flag are in different name spaces. \n-X explanation \nThe explanation string will be printed with the list of matches, above the group currently selected. \nWithin the explanation, the following sequences may be used to specify output attributes (see Prompt Expansion): ‘%B’, ‘%S’, ‘%U’, ‘%F’, ‘%K’ and their lower case counterparts, as well as ‘%{...%}’. ‘%F’, ‘%K’ and ‘%{...%}’ take arguments in the same form as prompt expansion. (Note that the sequence ‘%G’ is not available; an argument to ‘%{’ should be used instead.) The sequence ‘%%’ produces a literal ‘%’. \nThese sequences are most often employed by users when customising the format style (see Completion System), but they must also be taken into account when writing completion functions, as passing descriptions with unescaped ‘%’ characters to utility functions such as _arguments and _message may produce unexpected results. If arbitrary text is to be passed in a description, it can be escaped using e.g. ${my_str//\\%/%%}. \n-x message \nLike -X, but the message will be printed even if there are no matches in the group. \n-q \nThe suffix given with -S will be automatically removed if the next character typed is a blank or does not insert anything, or if the suffix consists of only one character and the next character typed is the same character. \n-r remove-chars \nThis is a more versatile form of the -q option. The suffix given with -S or the slash automatically added after completing directories will be automatically removed if the next character typed inserts one of the characters given in the remove-chars. This string is parsed as a characters class and understands the backslash sequences used by the print command. For example, ‘-r \"a-z\\t\"’ removes the suffix if the next character typed inserts a lower case character or a TAB, and ‘-r \"^0-9\"’ removes the suffix if the next character typed inserts anything but a digit. One extra backslash sequence is understood in this string: ‘\\-’ stands for all characters that insert nothing. Thus ‘-S \"=\" -q’ is the same as ‘-S \"=\" -r \"= \\t\\n\\-\"’. \nThis option may also be used without the -S option; then any automatically added space will be removed when one of the characters in the list is typed. \n-R remove-func \nThis is another form of the -r option. When a match has been accepted and a suffix has been inserted, the function remove-func will be called after the next character typed. It is passed the length of the suffix as an argument and can use the special parameters available in ordinary (non-completion) zle widgets (see Zsh Line Editor) to analyse and modify the command line. \n-f \nIf this flag is given, all of the matches built from the completions are marked as being the names of files. They are not required to be actual filenames, but if they are, and the option LIST_TYPES is set, the characters describing the types of the files in the completion lists will be shown. This also forces a slash to be added when the name of a directory is completed. \n-e \nThis flag can be used to tell the completion code that the matches added are parameter names for a parameter expansion. This will make the AUTO_PARAM_SLASH and AUTO_PARAM_KEYS options be used for the matches. \n-W file-prefix \nThis string is a pathname that will be prepended to each match together with any prefix specified by the -p option to form a complete filename for testing. Hence it is only useful if combined with the -f flag, as the tests will not otherwise be performed. \n-F array \nSpecifies an array containing patterns. completions that match one of these patterns are ignored, that is, not considered to be matches. \nThe array may be the name of an array parameter or a list of literal patterns enclosed in parentheses and quoted, as in ‘-F \"(*?.o *?.h)\"’. If the name of an array is given, the elements of the array are taken as the patterns. \n-Q \nThis flag instructs the completion code not to quote any metacharacters in the matches when inserting them into the command line. \n-M match-spec \nThis gives local match specifications as described below in Completion Matching Control. This option may be given more than once. In this case all match-specs given are concatenated with spaces between them to form the specification string to use. Note that they will only be used if the -U option is not given. \n-n \nSpecifies that matching completions are to be added to the set of matches, but are not to be listed to the user. \n-U \nIf this flag is given, all completions are added to the set of matches and no matching will be done by the completion code. Normally this is used in functions that do the matching themselves. \n-O array \nIf this option is given, the completions are not added to the set of matches. Instead, matching is done as usual and all of the completions that match will be stored in the array parameter whose name is given as array. \n-A array \nAs the -O option, except that instead of those of the completions which match being stored in array, the strings generated internally by the completion code are stored. For example, with a match specification of ‘-M \"L:|no=\"’, a current word of ‘nof’ and completions of ‘foo’, this option stores the string ‘nofoo’ in the array, whereas the -O option stores the ‘foo’ originally given. \n-D array \nAs with -O, the completions are not added to the set of matches. Instead, whenever the nth completion does not match, the nth element of the array is removed. Elements for which the corresponding completion matches are retained. This option can be used more than once to remove elements from multiple arrays. \n-C \nThis option adds a special match which expands to all other matches when inserted into the line, even those that are added after this option is used. Together with the -d option it is possible to specify a string that should be displayed in the list for this special match. If no string is given, it will be shown as a string containing the strings that would be inserted for the other matches, truncated to the width of the screen. \n-E number \nThis option adds number empty matches after matching completions have been added. An empty match takes up space in completion listings but will never be inserted in the line and can’t be selected with menu completion or menu selection. This makes empty matches only useful to format completion lists and to make explanatory string be shown in completion lists (since empty matches can be given display strings with the -d option). And because all but one empty string would otherwise be removed, this option implies the -V and -2 options (even if an explicit -J option is given). This can be important to note as it affects the name space into which matches are added. \n- -- \nThis flag ends the list of flags and options. All arguments after it will be taken as the completions even if they begin with hyphens. \nExcept for the -M flag, if any of these flags is given more than once, the first one (and its argument) will be used. \ncompset -p number compset -P [ number ] pattern compset -s number compset -S [ number ] pattern compset -n begin [ end ] compset -N beg-pat [ end-pat ] compset -q \nThis command simplifies modification of the special parameters, while its return status allows tests on them to be carried out. \nThe options are: \n-p number \nIf the value of the PREFIX parameter is at least number characters long, the first number characters are removed from it and appended to the contents of the IPREFIX parameter. \n-P [ number ] pattern \nIf the value of the PREFIX parameter begins with anything that matches the pattern, the matched portion is removed from PREFIX and appended to IPREFIX. \nWithout the optional number, the longest match is taken, but if number is given, anything up to the numberth match is moved. If the number is negative, the numberth longest match is moved. For example, if PREFIX contains the string ‘a=b=c’, then compset -P ’*\\=’ will move the string ‘a=b=’ into the IPREFIX parameter, but compset -P 1 ’*\\=’ will move only the string ‘a=’. \n-s number \nAs -p, but transfer the last number characters from the value of SUFFIX to the front of the value of ISUFFIX. \n-S [ number ] pattern \nAs -P, but match the last portion of SUFFIX and transfer the matched portion to the front of the value of ISUFFIX. \n-n begin [ end ] \nIf the current word position as specified by the parameter CURRENT is greater than or equal to begin, anything up to the beginth word is removed from the words array and the value of the parameter CURRENT is decremented by begin. \nIf the optional end is given, the modification is done only if the current word position is also less than or equal to end. In this case, the words from position end onwards are also removed from the words array. \nBoth begin and end may be negative to count backwards from the last element of the words array. \n-N beg-pat [ end-pat ] \nIf one of the elements of the words array before the one at the index given by the value of the parameter CURRENT matches the pattern beg-pat, all elements up to and including the matching one are removed from the words array and the value of CURRENT is changed to point to the same word in the changed array. \nIf the optional pattern end-pat is also given, and there is an element in the words array matching this pattern, the parameters are modified only if the index of this word is higher than the one given by the CURRENT parameter (so that the matching word has to be after the cursor). In this case, the words starting with the one matching end-pat are also removed from the words array. If words contains no word matching end-pat, the testing and modification is performed as if it were not given. \n-q \nThe word currently being completed is split on spaces into separate words, respecting the usual shell quoting conventions. The resulting words are stored in the words array, and CURRENT, PREFIX, SUFFIX, QIPREFIX, and QISUFFIX are modified to reflect the word part that is completed. \nIn all the above cases the return status is zero if the test succeeded and the parameters were modified and non-zero otherwise. This allows one to use this builtin in tests such as: \nif compset -P '*\\='; then ...\nThis forces anything up to and including the last equal sign to be ignored by the completion code. \ncompcall [ -TD ] \nThis allows the use of completions defined with the compctl builtin from within completion widgets. The list of matches will be generated as if one of the non-widget completion functions (complete-word, etc.) had been called, except that only compctls given for specific commands are used. To force the code to try completions defined with the -T option of compctl and/or the default completion (whether defined by compctl -D or the builtin default) in the appropriate places, the -T and/or -D flags can be passed to compcall. \nThe return status can be used to test if a matching compctl definition was found. It is non-zero if a compctl was found and zero otherwise. \nNote that this builtin is defined by the zsh/compctl module. \n19.4 Completion Condition Codes\nThe following additional condition codes for use within the [[ ... ]] construct are available in completion widgets. These work on the special parameters. All of these tests can also be performed by the compset builtin, but in the case of the condition codes the contents of the special parameters are not modified. \n-prefix [ number ] pattern \ntrue if the test for the -P option of compset would succeed. \n-suffix [ number ] pattern \ntrue if the test for the -S option of compset would succeed. \n-after beg-pat \ntrue if the test of the -N option with only the beg-pat given would succeed. \n-between beg-pat end-pat \ntrue if the test for the -N option with both patterns would succeed. \n19.5 Completion Matching Control\nWhen the user invokes completion, the current word on the command line (that is, the word the cursor is currently on) is used to generate a match pattern. Only those completions that match the pattern are offered to the user as matches. \nThe default match pattern is generated from the current word by either \nappending a ‘*’ (matching any number of characters in a completion) or, \nif the shell option COMPLETE_IN_WORD is set, inserting a ‘*’ at the cursor position. \nThis narrow pattern can be broadened selectively by passing a match specification to the compadd builtin command through its -M option (see Completion Builtin Commands). A match specification consists of one or more matchers separated by whitespace. Matchers in a match specification are applied one at a time, from left to right. Once all matchers have been applied, completions are compared to the final match pattern and non-matching ones are discarded. \nNote that the -M option is ignored if the current word contains a glob pattern and the shell option GLOB_COMPLETE is set or if the pattern_match key of the special associative array compstate is set to a non-empty value (see Completion Special Parameters). \nUsers of the Completion System should generally not use the -M option directly, but rather use the matcher-list and matcher styles (see the subsection Standard Styles in Completion System Configuration). \nEach matcher consists of \na case-sensitive letter \na ‘:’, \none or more patterns separated by pipes (‘|’), \nan equals sign (‘=’), and \nanother pattern. \nThe patterns before the ‘=’ are used to match substrings of the current word. For each matched substring, the corresponding part of the match pattern is broadened with the pattern after the ‘=’, by means of a logical OR. \nEach pattern in a matcher cosists of either \nthe empty string or \na sequence of \nliteral characters (which may be quoted with a ‘\\’), \nquestion marks (‘?’), \nbracket expressions (‘[...]’; see the subsection Glob Operators in Filename Generation), and/or \nbrace expressions (see below). \nOther shell patterns are not allowed. \nA brace expression, like a bracket expression, consists of a list of \nliteral characters, \nranges (‘0-9’), and/or \ncharacter classes (‘[:name:]’). \nHowever, they differ from each other as follows: \nA brace expression is delimited by a pair of braces (‘{...}’). \nBrace expressions do not support negations. That is, an initial ‘!’ or ‘^’ has no special meaning and will be interpreted as a literal character. \nWhen a character in the current word matches the nth pattern in a brace expression, the corresponding part of the match pattern is broadened only with the nth pattern of the brace expression on the other side of the ‘=’, if there is one; if there is no brace expression on the other side, then this pattern is the empty string. However, if either brace expression has more elements than the other, then the excess entries are simply ignored. When comparing indexes, each literal character or character class counts as one element, but each range is instead expanded to the full list of literal characters it represents. Additionally, if on both sides of the ‘=’, the nth pattern is ‘[:upper:]’ or ‘[:lower:]’, then these are expanded as ranges, too. \nNote that, although the matching system does not yet handle multibyte characters, this is likely to be a future extension. Hence, using ‘[:upper:]’ and ‘[:lower:]’ is recommended over ‘A-Z’ and ‘a-z’. \nBelow are the different forms of matchers supported. Each uppercase form behaves exactly like its lowercase counterpart, but adds an additional step after the match pattern has filtered out non-matching completions: Each of a match’s substrings that was matched by a subpattern from an uppercase matcher is replaced with the corresponding substring of the current word. However, patterns from lowercase matchers have higher weight: If a substring of the current word was matched by patterns from both a lowercase and an uppercase matcher, then the lowercase matcher’s pattern wins and the corresponding part of the match is not modified. \nUnless indicated otherwise, each example listed assumes COMPLETE_IN_WORD to be unset (as it is by default). \nm:word-pat=match-pat M:word-pat=match-pat \nFor each substring of the current word that matches word-pat, broaden the corresponding part of the match pattern to additionally match match-pat. \nExamples: \nm:{[:lower:]}={[:upper:]} lets any lower case character in the current word be completed to itself or its uppercase counterpart. So, the completions ‘foo’, ‘FOO’ and ‘Foo’ will are be considered matches for the word ‘fo’. \nM:_= inserts every underscore from the current word into each match, in the same relative position, determined by matching the substrings around it. So, given a completion ‘foo’, the word ‘f_o’ will be completed to the match ‘f_oo’, even though the latter was not present as a completion. \nb:word-pat=match-pat B:word-pat=match-pat e:word-pat=match-pat E:word-pat=match-pat \nFor each consecutive substring at the b:eginning or e:nd of the current word that matches word-pat, broaden the corresponding part of the match pattern to additionally match match-pat. \nExamples: \n‘b:-=+’ lets any number of minuses at the start of the current word be completed to a minus or a plus. \n‘B:0=’ adds all zeroes at the beginning of the current word to the beginning of each match. \nl:|word-pat=match-pat L:|word-pat=match-pat R:word-pat|=match-pat r:word-pat|=match-pat \nIf there is a substring at the l:eft or r:ight edge of the current word that matches word-pat, then broaden the corresponding part of the match pattern to additionally match match-pat. \nFor each l:, L:, r: and R: matcher (including the ones below), the pattern match-pat may also be a ‘*’. This matches any number of characters in a completion. \nExamples: \n‘r:|=*’ appends a ‘*’ to the match pattern, even when COMPLETE_IN_WORD is set and the cursor is not at the end of the current word. \nIf the current word starts with a minus, then ‘L:|-=’ will prepend it to each match. \nl:anchor|word-pat=match-pat L:anchor|word-pat=match-pat r:word-pat|anchor=match-pat R:word-pat|anchor=match-pat \nFor each substring of the current word that matches word-pat and has on its l:eft or r:ight another substring matching anchor, broaden the corresponding part of the match pattern to additionally match match-pat. \nNote that these matchers (and the ones below) modify only what is matched by word-pat; they do not change the matching behavior of what is matched by anchor (or coanchor; see the matchers below). Thus, unless its corresponding part of the match pattern has been modified, the anchor in the current word has to match literally in each completion, just like any other substring of the current word. \nIf a matcher includes at least one anchor (which includes the matchers with two anchors, below), then match-pat may also be ‘*’ or ‘**’. ‘*’ can match any part of a completion that does not contain any substrings matching anchor, whereas a ‘**’ can match any part of a completion, period. (Note that this is different from the behavior of ‘*’ in the anchorless forms of ‘l:’ and ‘r:’ and and also different from ‘*’ and ‘**’ in glob expressions.) \nExamples: \n‘r:|.=*’ makes the completion ‘comp.sources.unix’ a match for the word ‘..u’ — but not for the word ‘.u’. \nGiven a completion ‘--foo’, the matcher ‘L:–|no-=’ will complete the word ‘--no-’ to the match ‘--no-foo’. \nl:anchor||coanchor=match-pat L:anchor||coanchor=match-pat r:coanchor||anchor=match-pat R:coanchor||anchor=match-pat \nFor any two consecutive substrings of the current word that match anchor and coanchor, in the order given, insert the pattern match-pat between their corresponding parts in the match pattern. \nNote that, unlike anchor, the pattern coanchor does not change what ‘*’ can match. \nExamples: \n‘r:?||[[:upper:]]=*’ will complete the current word ‘fB’ to ‘fooBar’, but it will not complete it to ‘fooHooBar’ (because ‘*’ here cannot match anything that includes a match for ‘[[:upper:]]), nor will it complete ‘B’ to ‘fooBar’ (because there is no character in the current word to match coanchor). \nGiven the current word ‘pass.n’ and a completion ‘pass.byname’, the matcher ‘L:.||[[:alpha:]]=by’ will produce the match ‘pass.name’. \nx: \nIgnore this matcher and all matchers to its right. \nThis matcher is used to mark the end of a match specification. In a single standalone list of matchers, this has no use, but where match specifications are concatenated, as is often the case when using the Completion System, it can allow one match specification to override another. \n19.6 Completion Widget Example\nThe first step is to define the widget: \nzle -C complete complete-word complete-files\nThen the widget can be bound to a key using the bindkey builtin command: \nAfter that the shell function complete-files will be invoked after typing control-X and TAB. The function should then generate the matches, e.g.: \ncomplete-files () { compadd - * }\nThis function will complete files in the current directory matching the current word. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Widgets-html-Completion-Widgets-la7yjj.html",
  "markdown": "# zsh: 19 Completion Widgets\n\n* * *\n\n## 19.1 Description\n\nThe shell’s programmable completion mechanism can be manipulated in two ways; here the low-level features supporting the newer, function-based mechanism are defined. A complete set of shell functions based on these features is described in the next chapter, [Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System), and users with no interest in adding to that system (or, potentially, writing their own — see dictionary entry for ‘hubris’) should skip the current section. The older system based on the compctl builtin command is described in [Completion Using compctl](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#Completion-Using-compctl).\n\nCompletion widgets are defined by the \\-C option to the zle builtin command provided by the zsh/zle module (see [The zsh/zle Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzle-Module)). For example,\n\nzle -C complete expand-or-complete completer\n\ndefines a widget named ‘complete’. The second argument is the name of any of the builtin widgets that handle completions: complete-word, expand-or-complete, expand-or-complete-prefix, menu-complete, menu-expand-or-complete, reverse-menu-complete, list-choices, or delete-char-or-list. Note that this will still work even if the widget in question has been re-bound.\n\nWhen this newly defined widget is bound to a key using the bindkey builtin command defined in the zsh/zle module ([Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor)), typing that key will call the shell function ‘completer’. This function is responsible for generating completion matches using the builtins described below. As with other ZLE widgets, the function is called with its standard input closed.\n\nOnce the function returns, the completion code takes over control again and treats the matches in the same manner as the specified builtin widget, in this case expand-or-complete.\n\n* * *\n\n## 19.2 Completion Special Parameters\n\nThe parameters ZLE\\_REMOVE\\_SUFFIX\\_CHARS and ZLE\\_SPACE\\_SUFFIX\\_CHARS are used by the completion mechanism, but are not special. See [Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell).\n\nInside completion widgets, and any functions called from them, some parameters have special meaning; outside these functions they are not special to the shell in any way. These parameters are used to pass information between the completion code and the completion widget. Some of the builtin commands and the condition codes use or change the current values of these parameters. Any existing values will be hidden during execution of completion widgets; except for compstate, the parameters are reset on each function exit (including nested function calls from within the completion widget) to the values they had when the function was entered.\n\nCURRENT\n\nThis is the number of the current word, i.e. the word the cursor is currently on in the words array. Note that this value is only correct if the ksharrays option is not set.\n\nIPREFIX\n\nInitially this will be set to the empty string. This parameter functions like PREFIX; it contains a string which precedes the one in PREFIX and is not considered part of the list of matches. Typically, a string is transferred from the beginning of PREFIX to the end of IPREFIX, for example:\n\nIPREFIX=${PREFIX%%\\\\=\\*}=\nPREFIX=${PREFIX#\\*=}\n\ncauses the part of the prefix up to and including the first equal sign not to be treated as part of a matched string. This can be done automatically by the compset builtin, see below.\n\nISUFFIX\n\nAs IPREFIX, but for a suffix that should not be considered part of the matches; note that the ISUFFIX string follows the SUFFIX string.\n\nPREFIX\n\nInitially this will be set to the part of the current word from the beginning of the word up to the position of the cursor; it may be altered to give a common prefix for all matches.\n\nQIPREFIX\n\nThis parameter is read-only and contains the quoted string up to the word being completed. E.g. when completing ‘\"foo’, this parameter contains the double quote. If the \\-q option of compset is used (see below), and the original string was ‘\"foo bar’ with the cursor on the ‘bar’, this parameter contains ‘\"foo ’.\n\nQISUFFIX\n\nLike QIPREFIX, but containing the suffix.\n\nSUFFIX\n\nInitially this will be set to the part of the current word from the cursor position to the end; it may be altered to give a common suffix for all matches. It is most useful when the option COMPLETE\\_IN\\_WORD is set, as otherwise the whole word on the command line is treated as a prefix.\n\ncompstate\n\nThis is an associative array with various keys and values that the completion code uses to exchange information with the completion widget. The keys are:\n\nall\\_quotes\n\nThe \\-q option of the compset builtin command (see below) allows a quoted string to be broken into separate words; if the cursor is on one of those words, that word will be completed, possibly invoking ‘compset -q’ recursively. With this key it is possible to test the types of quoted strings which are currently broken into parts in this fashion. Its value contains one character for each quoting level. The characters are a single quote or a double quote for strings quoted with these characters, a dollars sign for strings quoted with $’...’ and a backslash for strings not starting with a quote character. The first character in the value always corresponds to the innermost quoting level.\n\ncontext\n\nThis will be set by the completion code to the overall context in which completion is attempted. Possible values are:\n\narray\\_value\n\nwhen completing inside the value of an array parameter assignment; in this case the words array contains the words inside the parentheses.\n\nbrace\\_parameter\n\nwhen completing the name of a parameter in a parameter expansion beginning with ${. This context will also be set when completing parameter flags following ${(; the full command line argument is presented and the handler must test the value to be completed to ascertain that this is the case.\n\nassign\\_parameter\n\nwhen completing the name of a parameter in a parameter assignment.\n\ncommand\n\nwhen completing for a normal command (either in command position or for an argument of the command).\n\ncondition\n\nwhen completing inside a ‘\\[\\[...\\]\\]’ conditional expression; in this case the words array contains only the words inside the conditional expression.\n\nmath\n\nwhen completing in a mathematical environment such as a ‘((...))’ construct.\n\nparameter\n\nwhen completing the name of a parameter in a parameter expansion beginning with $ but not ${.\n\nredirect\n\nwhen completing after a redirection operator.\n\nsubscript\n\nwhen completing inside a parameter subscript.\n\nvalue\n\nwhen completing the value of a parameter assignment.\n\nexact\n\nControls the behaviour when the REC\\_EXACT option is set. It will be set to accept if an exact match would be accepted, and will be unset otherwise.\n\nIf it was set when at least one match equal to the string on the line was generated, the match is accepted.\n\nexact\\_string\n\nThe string of an exact match if one was found, otherwise unset.\n\nignored\n\nThe number of completions that were ignored because they matched one of the patterns given with the \\-F option to the compadd builtin command.\n\ninsert\n\nThis controls the manner in which a match is inserted into the command line. On entry to the widget function, if it is unset the command line is not to be changed; if set to unambiguous, any prefix common to all matches is to be inserted; if set to automenu-unambiguous, the common prefix is to be inserted and the next invocation of the completion code may start menu completion (due to the AUTO\\_MENU option being set); if set to menu or automenu menu completion will be started for the matches currently generated (in the latter case this will happen because the AUTO\\_MENU is set). The value may also contain the string ‘tab’ when the completion code would normally not really do completion, but only insert the TAB character.\n\nOn exit it may be set to any of the values above (where setting it to the empty string is the same as unsetting it), or to a number, in which case the match whose number is given will be inserted into the command line. Negative numbers count backward from the last match (with ‘\\-1’ selecting the last match) and out-of-range values are wrapped around, so that a value of zero selects the last match and a value one more than the maximum selects the first. Unless the value of this key ends in a space, the match is inserted as in a menu completion, i.e. without automatically appending a space.\n\nBoth menu and automenu may also specify the number of the match to insert, given after a colon. For example, ‘menu:2’ says to start menu completion, beginning with the second match.\n\nNote that a value containing the substring ‘tab’ makes the matches generated be ignored and only the TAB be inserted.\n\nFinally, it may also be set to all, which makes all matches generated be inserted into the line.\n\ninsert\\_positions\n\nWhen the completion system inserts an unambiguous string into the line, there may be multiple places where characters are missing or where the character inserted differs from at least one match. The value of this key contains a colon separated list of all these positions, as indexes into the command line.\n\nlast\\_prompt\n\nIf this is set to a non-empty string for every match added, the completion code will move the cursor back to the previous prompt after the list of completions has been displayed. Initially this is set or unset according to the ALWAYS\\_LAST\\_PROMPT option.\n\nlist\n\nThis controls whether or how the list of matches will be displayed. If it is unset or empty they will never be listed; if its value begins with list, they will always be listed; if it begins with autolist or ambiguous, they will be listed when the AUTO\\_LIST or LIST\\_AMBIGUOUS options respectively would normally cause them to be.\n\nIf the substring force appears in the value, this makes the list be shown even if there is only one match. Normally, the list would be shown only if there are at least two matches.\n\nThe value contains the substring packed if the LIST\\_PACKED option is set. If this substring is given for all matches added to a group, this group will show the LIST\\_PACKED behavior. The same is done for the LIST\\_ROWS\\_FIRST option with the substring rows.\n\nFinally, if the value contains the string explanations, only the explanation strings, if any, will be listed and if it contains messages, only the messages (added with the \\-x option of compadd) will be listed. If it contains both explanations and messages both kinds of explanation strings will be listed. It will be set appropriately on entry to a completion widget and may be changed there.\n\nlist\\_lines\n\nThis gives the number of lines that are needed to display the full list of completions. Note that to calculate the total number of lines to display you need to add the number of lines needed for the command line to this value, this is available as the value of the BUFFERLINES special parameter.\n\nlist\\_max\n\nInitially this is set to the value of the LISTMAX parameter. It may be set to any other value; when the widget exits this value will be used in the same way as the value of LISTMAX.\n\nnmatches\n\nThe number of matches added by the completion code so far.\n\nold\\_insert\n\nOn entry to the widget this will be set to the number of the match of an old list of completions that is currently inserted into the command line. If no match has been inserted, this is unset.\n\nAs with old\\_list, the value of this key will only be used if it is the string keep. If it was set to this value by the widget and there was an old match inserted into the command line, this match will be kept and if the value of the insert key specifies that another match should be inserted, this will be inserted after the old one.\n\nold\\_list\n\nThis is set to yes if there is still a valid list of completions from a previous completion at the time the widget is invoked. This will usually be the case if and only if the previous editing operation was a completion widget or one of the builtin completion functions. If there is a valid list and it is also currently shown on the screen, the value of this key is shown.\n\nAfter the widget has exited the value of this key is only used if it was set to keep. In this case the completion code will continue to use this old list. If the widget generated new matches, they will not be used.\n\nparameter\n\nThe name of the parameter when completing in a subscript or in the value of a parameter assignment.\n\npattern\\_insert\n\nNormally this is set to menu, which specifies that menu completion will be used whenever a set of matches was generated using pattern\\_match (see below). If it is set to any other non-empty string by the user and menu completion is not selected by other option settings, the code will instead insert any common prefix for the generated matches as with normal completion.\n\npattern\\_match\n\nLocally controls the behaviour given by the GLOB\\_COMPLETE option. Initially it is set to ‘\\*’ if and only if the option is set. The completion widget may set it to this value, to an empty string (which has the same effect as unsetting it), or to any other non-empty string. If it is non-empty, unquoted metacharacters on the command line will be treated as patterns; if it is ‘\\*’, then additionally a wildcard ‘\\*’ is assumed at the cursor position; if it is empty or unset, metacharacters will be treated literally.\n\nNote that the match specifications given to the compadd builtin command are not used if this is set to a non-empty string.\n\nquote\n\nWhen completing inside quotes, this contains the quotation character (i.e. either a single quote, a double quote, or a backtick). Otherwise it is unset.\n\nquoting\n\nWhen completing inside single quotes, this is set to the string single; inside double quotes, the string double; inside backticks, the string backtick. Otherwise it is unset.\n\nredirect\n\nThe redirection operator when completing in a redirection position, i.e. one of <, \\>, etc.\n\nrestore\n\nThis is set to auto before a function is entered, which forces the special parameters mentioned above (words, CURRENT, PREFIX, IPREFIX, SUFFIX, and ISUFFIX) to be restored to their previous values when the function exits. If a function unsets it or sets it to any other string, they will not be restored.\n\nto\\_end\n\nSpecifies the occasions on which the cursor is moved to the end of a string when a match is inserted. On entry to a widget function, it may be single if this will happen when a single unambiguous match was inserted or match if it will happen any time a match is inserted (for example, by menu completion; this is likely to be the effect of the ALWAYS\\_TO\\_END option).\n\nOn exit, it may be set to single as above. It may also be set to always, or to the empty string or unset; in those cases the cursor will be moved to the end of the string always or never respectively. Any other string is treated as match.\n\nunambiguous\n\nThis key is read-only and will always be set to the common (unambiguous) prefix the completion code has generated for all matches added so far.\n\nunambiguous\\_cursor\n\nThis gives the position the cursor would be placed at if the common prefix in the unambiguous key were inserted, relative to the value of that key. The cursor would be placed before the character whose index is given by this key.\n\nunambiguous\\_positions\n\nThis contains all positions where characters in the unambiguous string are missing or where the character inserted differs from at least one of the matches. The positions are given as indexes into the string given by the value of the unambiguous key.\n\nvared\n\nIf completion is called while editing a line using the vared builtin, the value of this key is set to the name of the parameter given as an argument to vared. This key is only set while a vared command is active.\n\nwords\n\nThis array contains the words present on the command line currently being edited.\n\n* * *\n\n## 19.3 Completion Builtin Commands\n\ncompadd \\[ \\-akqQfenUl12C \\] \\[ \\-F array \\]\n\n        \\[\\-P prefix \\] \\[ \\-S suffix \\]\n\n        \\[\\-p hidden-prefix \\] \\[ \\-s hidden-suffix \\]\n\n        \\[\\-i ignored-prefix \\] \\[ \\-I ignored-suffix \\]\n\n        \\[\\-W file-prefix \\] \\[ \\-d array \\]\n\n        \\[\\-J group-name \\] \\[ \\-X explanation \\] \\[ \\-x message \\]\n\n        \\[\\-V group-name \\] \\[ \\-o \\[ order \\] \\]\n\n        \\[\\-r remove-chars \\] \\[ \\-R remove-func \\]\n\n        \\[\\-D array \\] \\[ \\-O array \\] \\[ \\-A array \\]\n\n        \\[\\-E number \\]\n\n        \\[\\-M match-spec \\] \\[ \\-\\- \\] \\[ completions ... \\]\n\nThis builtin command can be used to add matches directly and control all the information the completion code stores with each possible completion. The return status is zero if at least one match was added and non-zero if no matches were added.\n\nThe completion code breaks each match into seven fields in the order:\n\n> <ipre><apre><hpre><body><hsuf><asuf><isuf>\n\nThe first field is an ignored prefix taken from the command line, the contents of the IPREFIX parameter plus the string given with the \\-i option. With the \\-U option, only the string from the \\-i option is used. The field <apre> is an optional prefix string given with the \\-P option. The <hpre> field is a string that is considered part of the match but that should not be shown when listing completions, given with the \\-p option; for example, functions that do filename generation might specify a common path prefix this way. <body> is the part of the match that should appear in the list of matches shown to the user. The suffixes <hsuf>, <asuf> and <isuf> correspond to the prefixes <hpre>, <apre> and <ipre> and are given by the options \\-s, \\-S and \\-I, respectively.\n\nThe supported flags are:\n\n\\-P prefix\n\nThis gives a string to be inserted before each match. The string given is not considered as part of the match and any shell metacharacters in it will not be quoted when the string is inserted.\n\n\\-S suffix\n\nLike \\-P, but gives a string to be inserted after each match.\n\n\\-p hidden-prefix\n\nThis gives a string that should be inserted before each match but that should not appear in the list of matches. Unless the \\-U option is given, this string must be matched as part of the string on the command line.\n\n\\-s hidden-suffix\n\nLike ‘\\-p’, but gives a string to insert after each match.\n\n\\-i ignored-prefix\n\nThis gives a string to insert just before any string given with the ‘\\-P’ option. Without ‘\\-P’ the string is inserted before the string given with ‘\\-p’ or directly before each match.\n\n\\-I ignored-suffix\n\nLike \\-i, but gives an ignored suffix.\n\n\\-a\n\nWith this flag the completions are taken as names of arrays and the actual completions are their values. If only some elements of the arrays are needed, the completions may also contain subscripts, as in ‘foo\\[2,-1\\]’.\n\n\\-k\n\nWith this flag the completions are taken as names of associative arrays and the actual completions are their keys. As for \\-a, the words may also contain subscripts, as in ‘foo\\[(R)\\*bar\\*\\]’.\n\n\\-d array\n\nThis adds per-completion display strings. The array should contain one element per completion given. The completion code will then display the first element instead of the first completion, and so on. The array may be given as the name of an array parameter or directly as a space-separated list of words in parentheses.\n\nIf there are fewer display strings than completions, the leftover completions will be displayed unchanged and if there are more display strings than completions, the leftover display strings will be silently ignored.\n\n\\-l\n\nThis option only has an effect if used together with the \\-d option. If it is given, the display strings are listed one per line, not arrayed in columns.\n\n\\-o \\[ order \\]\n\nThis controls the order in which matches are sorted. order is a comma-separated list comprising the following possible values. These values can be abbreviated to their initial two or three characters. Note that the order forms part of the group name space so matches with different orderings will not be in the same group.\n\nmatch\n\nIf given, the order of the output is determined by the match strings; otherwise it is determined by the display strings (i.e. the strings given by the \\-d option). This is the default if ‘\\-o’ is specified but the order argument is omitted.\n\nnosort\n\nThis specifies that the completions are pre-sorted and their order should be preserved. This value only makes sense alone and cannot be combined with any others.\n\nnumeric\n\nIf the matches include numbers, sort them numerically rather than lexicographically.\n\nreverse\n\nArrange the matches backwards by reversing the sort ordering.\n\n\\-J group-name\n\nGives the name of the group that the matches should be stored in.\n\n\\-V group-name\n\nLike \\-J but naming an unsorted group. This option is identical to the combination of \\-J and \\-o nosort.\n\n\\-1\n\nIf given together with the \\-V option, makes only consecutive duplicates in the group be removed. If combined with the \\-J option, this has no visible effect. Note that groups with and without this flag are in different name spaces.\n\n\\-2\n\nIf given together with the \\-J or \\-V option, makes all duplicates be kept. Again, groups with and without this flag are in different name spaces.\n\n\\-X explanation\n\nThe explanation string will be printed with the list of matches, above the group currently selected.\n\nWithin the explanation, the following sequences may be used to specify output attributes (see [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion)): ‘%B’, ‘%S’, ‘%U’, ‘%F’, ‘%K’ and their lower case counterparts, as well as ‘%{...%}’. ‘%F’, ‘%K’ and ‘%{...%}’ take arguments in the same form as prompt expansion. (Note that the sequence ‘%G’ is not available; an argument to ‘%{’ should be used instead.) The sequence ‘%%’ produces a literal ‘%’.\n\nThese sequences are most often employed by users when customising the format style (see [Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System)), but they must also be taken into account when writing completion functions, as passing descriptions with unescaped ‘%’ characters to utility functions such as \\_arguments and \\_message may produce unexpected results. If arbitrary text is to be passed in a description, it can be escaped using e.g. ${my\\_str//\\\\%/%%}.\n\n\\-x message\n\nLike \\-X, but the message will be printed even if there are no matches in the group.\n\n\\-q\n\nThe suffix given with \\-S will be automatically removed if the next character typed is a blank or does not insert anything, or if the suffix consists of only one character and the next character typed is the same character.\n\n\\-r remove-chars\n\nThis is a more versatile form of the \\-q option. The suffix given with \\-S or the slash automatically added after completing directories will be automatically removed if the next character typed inserts one of the characters given in the remove-chars. This string is parsed as a characters class and understands the backslash sequences used by the print command. For example, ‘\\-r \"a-z\\\\t\"’ removes the suffix if the next character typed inserts a lower case character or a TAB, and ‘\\-r \"^0-9\"’ removes the suffix if the next character typed inserts anything but a digit. One extra backslash sequence is understood in this string: ‘\\\\-’ stands for all characters that insert nothing. Thus ‘\\-S \"=\" -q’ is the same as ‘\\-S \"=\" -r \"= \\\\t\\\\n\\\\-\"’.\n\nThis option may also be used without the \\-S option; then any automatically added space will be removed when one of the characters in the list is typed.\n\n\\-R remove-func\n\nThis is another form of the \\-r option. When a match has been accepted and a suffix has been inserted, the function remove-func will be called after the next character typed. It is passed the length of the suffix as an argument and can use the special parameters available in ordinary (non-completion) zle widgets (see [Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor)) to analyse and modify the command line.\n\n\\-f\n\nIf this flag is given, all of the matches built from the completions are marked as being the names of files. They are not required to be actual filenames, but if they are, and the option LIST\\_TYPES is set, the characters describing the types of the files in the completion lists will be shown. This also forces a slash to be added when the name of a directory is completed.\n\n\\-e\n\nThis flag can be used to tell the completion code that the matches added are parameter names for a parameter expansion. This will make the AUTO\\_PARAM\\_SLASH and AUTO\\_PARAM\\_KEYS options be used for the matches.\n\n\\-W file-prefix\n\nThis string is a pathname that will be prepended to each match together with any prefix specified by the \\-p option to form a complete filename for testing. Hence it is only useful if combined with the \\-f flag, as the tests will not otherwise be performed.\n\n\\-F array\n\nSpecifies an array containing patterns. completions that match one of these patterns are ignored, that is, not considered to be matches.\n\nThe array may be the name of an array parameter or a list of literal patterns enclosed in parentheses and quoted, as in ‘\\-F \"(\\*?.o \\*?.h)\"’. If the name of an array is given, the elements of the array are taken as the patterns.\n\n\\-Q\n\nThis flag instructs the completion code not to quote any metacharacters in the matches when inserting them into the command line.\n\n\\-M match-spec\n\nThis gives local match specifications as described below in [Completion Matching Control](#Completion-Matching-Control). This option may be given more than once. In this case all match-specs given are concatenated with spaces between them to form the specification string to use. Note that they will only be used if the \\-U option is not given.\n\n\\-n\n\nSpecifies that matching completions are to be added to the set of matches, but are not to be listed to the user.\n\n\\-U\n\nIf this flag is given, all completions are added to the set of matches and no matching will be done by the completion code. Normally this is used in functions that do the matching themselves.\n\n\\-O array\n\nIf this option is given, the completions are _not_ added to the set of matches. Instead, matching is done as usual and all of the completions that match will be stored in the array parameter whose name is given as array.\n\n\\-A array\n\nAs the \\-O option, except that instead of those of the completions which match being stored in array, the strings generated internally by the completion code are stored. For example, with a match specification of ‘\\-M \"L:|no=\"’, a current word of ‘nof’ and completions of ‘foo’, this option stores the string ‘nofoo’ in the array, whereas the \\-O option stores the ‘foo’ originally given.\n\n\\-D array\n\nAs with \\-O, the completions are not added to the set of matches. Instead, whenever the nth completion does not match, the nth element of the array is removed. Elements for which the corresponding completion matches are retained. This option can be used more than once to remove elements from multiple arrays.\n\n\\-C\n\nThis option adds a special match which expands to all other matches when inserted into the line, even those that are added after this option is used. Together with the \\-d option it is possible to specify a string that should be displayed in the list for this special match. If no string is given, it will be shown as a string containing the strings that would be inserted for the other matches, truncated to the width of the screen.\n\n\\-E number\n\nThis option adds number empty matches after matching completions have been added. An empty match takes up space in completion listings but will never be inserted in the line and can’t be selected with menu completion or menu selection. This makes empty matches only useful to format completion lists and to make explanatory string be shown in completion lists (since empty matches can be given display strings with the \\-d option). And because all but one empty string would otherwise be removed, this option implies the \\-V and \\-2 options (even if an explicit \\-J option is given). This can be important to note as it affects the name space into which matches are added.\n\n\\-\n\n\\-\\-\n\nThis flag ends the list of flags and options. All arguments after it will be taken as the completions even if they begin with hyphens.\n\nExcept for the \\-M flag, if any of these flags is given more than once, the first one (and its argument) will be used.\n\ncompset -p number\n\ncompset -P \\[ number \\] pattern\n\ncompset -s number\n\ncompset -S \\[ number \\] pattern\n\ncompset -n begin \\[ end \\]\n\ncompset -N beg-pat \\[ end-pat \\]\n\ncompset -q\n\nThis command simplifies modification of the special parameters, while its return status allows tests on them to be carried out.\n\nThe options are:\n\n\\-p number\n\nIf the value of the PREFIX parameter is at least number characters long, the first number characters are removed from it and appended to the contents of the IPREFIX parameter.\n\n\\-P \\[ number \\] pattern\n\nIf the value of the PREFIX parameter begins with anything that matches the pattern, the matched portion is removed from PREFIX and appended to IPREFIX.\n\nWithout the optional number, the longest match is taken, but if number is given, anything up to the numberth match is moved. If the number is negative, the numberth longest match is moved. For example, if PREFIX contains the string ‘a=b=c’, then compset -P ’\\*\\\\=’ will move the string ‘a=b=’ into the IPREFIX parameter, but compset -P 1 ’\\*\\\\=’ will move only the string ‘a=’.\n\n\\-s number\n\nAs \\-p, but transfer the last number characters from the value of SUFFIX to the front of the value of ISUFFIX.\n\n\\-S \\[ number \\] pattern\n\nAs \\-P, but match the last portion of SUFFIX and transfer the matched portion to the front of the value of ISUFFIX.\n\n\\-n begin \\[ end \\]\n\nIf the current word position as specified by the parameter CURRENT is greater than or equal to begin, anything up to the beginth word is removed from the words array and the value of the parameter CURRENT is decremented by begin.\n\nIf the optional end is given, the modification is done only if the current word position is also less than or equal to end. In this case, the words from position end onwards are also removed from the words array.\n\nBoth begin and end may be negative to count backwards from the last element of the words array.\n\n\\-N beg-pat \\[ end-pat \\]\n\nIf one of the elements of the words array before the one at the index given by the value of the parameter CURRENT matches the pattern beg-pat, all elements up to and including the matching one are removed from the words array and the value of CURRENT is changed to point to the same word in the changed array.\n\nIf the optional pattern end-pat is also given, and there is an element in the words array matching this pattern, the parameters are modified only if the index of this word is higher than the one given by the CURRENT parameter (so that the matching word has to be after the cursor). In this case, the words starting with the one matching end-pat are also removed from the words array. If words contains no word matching end-pat, the testing and modification is performed as if it were not given.\n\n\\-q\n\nThe word currently being completed is split on spaces into separate words, respecting the usual shell quoting conventions. The resulting words are stored in the words array, and CURRENT, PREFIX, SUFFIX, QIPREFIX, and QISUFFIX are modified to reflect the word part that is completed.\n\nIn all the above cases the return status is zero if the test succeeded and the parameters were modified and non-zero otherwise. This allows one to use this builtin in tests such as:\n\nif compset -P '\\*\\\\='; then ...\n\nThis forces anything up to and including the last equal sign to be ignored by the completion code.\n\ncompcall \\[ \\-TD \\]\n\nThis allows the use of completions defined with the compctl builtin from within completion widgets. The list of matches will be generated as if one of the non-widget completion functions (complete-word, etc.) had been called, except that only compctls given for specific commands are used. To force the code to try completions defined with the \\-T option of compctl and/or the default completion (whether defined by compctl -D or the builtin default) in the appropriate places, the \\-T and/or \\-D flags can be passed to compcall.\n\nThe return status can be used to test if a matching compctl definition was found. It is non-zero if a compctl was found and zero otherwise.\n\nNote that this builtin is defined by the zsh/compctl module.\n\n* * *\n\n## 19.4 Completion Condition Codes\n\nThe following additional condition codes for use within the \\[\\[ ... \\]\\] construct are available in completion widgets. These work on the special parameters. All of these tests can also be performed by the compset builtin, but in the case of the condition codes the contents of the special parameters are not modified.\n\n\\-prefix \\[ number \\] pattern\n\ntrue if the test for the \\-P option of compset would succeed.\n\n\\-suffix \\[ number \\] pattern\n\ntrue if the test for the \\-S option of compset would succeed.\n\n\\-after beg-pat\n\ntrue if the test of the \\-N option with only the beg-pat given would succeed.\n\n\\-between beg-pat end-pat\n\ntrue if the test for the \\-N option with both patterns would succeed.\n\n* * *\n\n## 19.5 Completion Matching Control\n\nWhen the user invokes completion, the current _word_ on the command line (that is, the word the cursor is currently on) is used to generate a _match pattern_. Only those _completions_ that match the pattern are offered to the user as _matches_.\n\nThe default match pattern is generated from the current word by either\n\n*   appending a ‘\\*’ (matching any number of characters in a completion) _or,_\n*   if the shell option COMPLETE\\_IN\\_WORD is set, inserting a ‘\\*’ at the cursor position.\n\nThis narrow pattern can be broadened selectively by passing a _match specification_ to the compadd builtin command through its \\-M option (see [Completion Builtin Commands](#Completion-Builtin-Commands)). A match specification consists of one or more matchers separated by whitespace. Matchers in a match specification are applied one at a time, from left to right. Once all matchers have been applied, completions are compared to the final match pattern and non-matching ones are discarded.\n\n*   Note that the \\-M option is ignored if the current word contains a glob pattern and the shell option GLOB\\_COMPLETE is set or if the pattern\\_match key of the special associative array compstate is set to a non-empty value (see [Completion Special Parameters](#Completion-Special-Parameters)).\n*   Users of the [Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System) should generally not use the \\-M option directly, but rather use the matcher-list and matcher styles (see the subsection _Standard Styles_ in [Completion System Configuration](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System-Configuration)).\n\nEach matcher consists of\n\n*   a case-sensitive letter\n*   a ‘:’,\n*   one or more patterns separated by pipes (‘|’),\n*   an equals sign (‘\\=’), and\n*   another pattern.\n\nThe patterns before the ‘\\=’ are used to match substrings of the current word. For each matched substring, the corresponding part of the match pattern is broadened with the pattern after the ‘\\=’, by means of a logical OR.\n\nEach pattern in a matcher cosists of either\n\n*   the empty string or\n*   a sequence of\n    *   literal characters (which may be quoted with a ‘\\\\’),\n    *   question marks (‘?’),\n    *   bracket expressions (‘\\[...\\]’; see the subsection _Glob Operators_ in [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation)), and/or\n    *   brace expressions (see below).\n\nOther shell patterns are not allowed.\n\nA brace expression, like a bracket expression, consists of a list of\n\n*   literal characters,\n*   ranges (‘0-9’), and/or\n*   character classes (‘\\[:name:\\]’).\n\nHowever, they differ from each other as follows:\n\n*   A brace expression is delimited by a pair of braces (‘{...}’).\n*   Brace expressions do not support negations. That is, an initial ‘!’ or ‘^’ has no special meaning and will be interpreted as a literal character.\n*   When a character in the current word matches the nth pattern in a brace expression, the corresponding part of the match pattern is broadened only with the nth pattern of the brace expression on the other side of the ‘\\=’, if there is one; if there is no brace expression on the other side, then this pattern is the empty string. However, if either brace expression has more elements than the other, then the excess entries are simply ignored. When comparing indexes, each literal character or character class counts as one element, but each range is instead expanded to the full list of literal characters it represents. Additionally, if on _both_ sides of the ‘\\=’, the nth pattern is ‘\\[:upper:\\]’ or ‘\\[:lower:\\]’, then these are expanded as ranges, too.\n\nNote that, although the matching system does not yet handle multibyte characters, this is likely to be a future extension. Hence, using ‘\\[:upper:\\]’ and ‘\\[:lower:\\]’ is recommended over ‘A-Z’ and ‘a-z’.\n\nBelow are the different forms of matchers supported. Each _uppercase_ form behaves exactly like its lowercase counterpart, but adds an additional step _after_ the match pattern has filtered out non-matching completions: Each of a match’s substrings that was matched by a subpattern from an uppercase matcher is replaced with the corresponding substring of the current word. However, patterns from _lowercase_ matchers have higher weight: If a substring of the current word was matched by patterns from both a lowercase and an uppercase matcher, then the lowercase matcher’s pattern wins and the corresponding part of the match is not modified.\n\nUnless indicated otherwise, each example listed assumes COMPLETE\\_IN\\_WORD to be unset (as it is by default).\n\nm:word-pat\\=match-pat\n\nM:word-pat\\=match-pat\n\nFor each substring of the current word that matches word-pat, broaden the corresponding part of the match pattern to additionally match match-pat.\n\nExamples:\n\nm:{\\[:lower:\\]}={\\[:upper:\\]} lets any lower case character in the current word be completed to itself or its uppercase counterpart. So, the completions ‘foo’, ‘FOO’ and ‘Foo’ will are be considered matches for the word ‘fo’.\n\nM:\\_= inserts every underscore from the current word into each match, in the same relative position, determined by matching the substrings around it. So, given a completion ‘foo’, the word ‘f\\_o’ will be completed to the match ‘f\\_oo’, even though the latter was not present as a completion.\n\nb:word-pat\\=match-pat\n\nB:word-pat\\=match-pat\n\ne:word-pat\\=match-pat\n\nE:word-pat\\=match-pat\n\nFor each consecutive substring at the b:eginning or e:nd of the current word that matches word-pat, broaden the corresponding part of the match pattern to additionally match match-pat.\n\nExamples:\n\n‘b:-=+’ lets any number of minuses at the start of the current word be completed to a minus or a plus.\n\n‘B:0=’ adds all zeroes at the beginning of the current word to the beginning of each match.\n\nl:|word-pat\\=match-pat\n\nL:|word-pat\\=match-pat\n\nR:word-pat|\\=match-pat\n\nr:word-pat|\\=match-pat\n\nIf there is a substring at the l:eft or r:ight edge of the current word that matches word-pat, then broaden the corresponding part of the match pattern to additionally match match-pat.\n\nFor each l:, L:, r: and R: matcher (including the ones below), the pattern match-pat may also be a ‘\\*’. This matches any number of characters in a completion.\n\nExamples:\n\n‘r:|=\\*’ appends a ‘\\*’ to the match pattern, even when COMPLETE\\_IN\\_WORD is set and the cursor is not at the end of the current word.\n\nIf the current word starts with a minus, then ‘L:|-=’ will prepend it to each match.\n\nl:anchor|word-pat\\=match-pat\n\nL:anchor|word-pat\\=match-pat\n\nr:word-pat|anchor\\=match-pat\n\nR:word-pat|anchor\\=match-pat\n\nFor each substring of the current word that matches word-pat and has on its l:eft or r:ight another substring matching anchor, broaden the corresponding part of the match pattern to additionally match match-pat.\n\nNote that these matchers (and the ones below) modify only what is matched by word-pat; they do not change the matching behavior of what is matched by anchor (or coanchor; see the matchers below). Thus, unless its corresponding part of the match pattern has been modified, the anchor in the current word has to match literally in each completion, just like any other substring of the current word.\n\nIf a matcher includes at least one anchor (which includes the matchers with two anchors, below), then match-pat may also be ‘\\*’ or ‘\\*\\*’. ‘\\*’ can match any part of a completion that does not contain any substrings matching anchor, whereas a ‘\\*\\*’ can match any part of a completion, period. (Note that this is different from the behavior of ‘\\*’ in the anchorless forms of ‘l:’ and ‘r:’ and and also different from ‘\\*’ and ‘\\*\\*’ in glob expressions.)\n\nExamples:\n\n‘r:|.=\\*’ makes the completion ‘comp.sources.unix’ a match for the word ‘..u’ — but _not_ for the word ‘.u’.\n\nGiven a completion ‘\\-\\-foo’, the matcher ‘L:–|no-=’ will complete the word ‘\\-\\-no-’ to the match ‘\\-\\-no-foo’.\n\nl:anchor||coanchor\\=match-pat\n\nL:anchor||coanchor\\=match-pat\n\nr:coanchor||anchor\\=match-pat\n\nR:coanchor||anchor\\=match-pat\n\nFor any two consecutive substrings of the current word that match anchor and coanchor, in the order given, insert the pattern match-pat between their corresponding parts in the match pattern.\n\nNote that, unlike anchor, the pattern coanchor does not change what ‘\\*’ can match.\n\nExamples:\n\n‘r:?||\\[\\[:upper:\\]\\]=\\*’ will complete the current word ‘fB’ to ‘fooBar’, but it will not complete it to ‘fooHooBar’ (because ‘\\*’ here cannot match anything that includes a match for ‘\\[\\[:upper:\\]\\]), nor will it complete ‘B’ to ‘fooBar’ (because there is no character in the current word to match coanchor).\n\nGiven the current word ‘pass.n’ and a completion ‘pass.byname’, the matcher ‘L:.||\\[\\[:alpha:\\]\\]=by’ will produce the match ‘pass.name’.\n\nx:\n\nIgnore this matcher and all matchers to its right.\n\nThis matcher is used to mark the end of a match specification. In a single standalone list of matchers, this has no use, but where match specifications are concatenated, as is often the case when using the [Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System), it can allow one match specification to override another.\n\n* * *\n\n## 19.6 Completion Widget Example\n\nThe first step is to define the widget:\n\nzle -C complete complete-word complete-files\n\nThen the widget can be bound to a key using the bindkey builtin command:\n\nAfter that the shell function complete-files will be invoked after typing control-X and TAB. The function should then generate the matches, e.g.:\n\ncomplete-files () { compadd - \\* }\n\nThis function will complete files in the current directory matching the current word.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 148,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Widgets-html-Completion-Widgets-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Widgets-html-Completion-Widgets-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Widgets-html-Completion-Widgets-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Widgets-html-Completion-Widgets-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Widgets-html-Completion-Widgets-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 47263,
      "readableText": 58364,
      "none": 69661,
      "readableTextIfPossible": 58364,
      "result": 58364,
      "markdown": 43519
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Redirection.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirection",
    "loadedTime": "2025-05-08T06:51:26.736Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirection",
    "title": "zsh: 7 Redirection",
    "description": "zsh: 7 Redirection",
    "author": null,
    "keywords": "zsh: 7 Redirection",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:24 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-6448\"",
      "expires": "Thu, 08 May 2025 06:52:24 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70748490736d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 7 Redirection\nIf a command is followed by & and job control is not active, then the default standard input for the command is the empty file /dev/null. Otherwise, the environment for the execution of a command contains the file descriptors of the invoking shell as modified by input/output specifications. \nThe following may appear anywhere in a simple command or may precede or follow a complex command. Expansion occurs before word or digit is used except as noted below. If the result of substitution on word produces more than one filename, redirection occurs for each separate filename in turn. \n< word \nOpen file word for reading as standard input. It is an error to open a file in this fashion if it does not exist. \n<> word \nOpen file word for reading and writing as standard input. If the file does not exist then it is created. \n> word \nOpen file word for writing as standard output. If the file does not exist then it is created. If the file exists, and the CLOBBER option is unset, this causes an error; otherwise, it is truncated to zero length. \n>| word >! word \nSame as >, except that the file is truncated to zero length if it exists, regardless of CLOBBER. \n>> word \nOpen file word for writing in append mode as standard output. If the file does not exist, and the CLOBBER and APPEND_CREATE options are both unset, this causes an error; otherwise, the file is created. \n>>| word >>! word \nSame as >>, except that the file is created if it does not exist, regardless of CLOBBER and APPEND_CREATE. \n<<[-] word \nThe shell input is read up to a line that is the same as word, or to an end-of-file. No parameter expansion, command substitution or filename generation is performed on word. The resulting document, called a here-document, becomes the standard input. \nIf any character of word is quoted with single or double quotes or a ‘\\’, no interpretation is placed upon the characters of the document. Otherwise, parameter and command substitution occurs, ‘\\’ followed by a newline is removed, and ‘\\’ must be used to quote the characters ‘\\’, ‘$’, ‘‘’ and the first character of word. \nNote that word itself does not undergo shell expansion. Backquotes in word do not have their usual effect; instead they behave similarly to double quotes, except that the backquotes themselves are passed through unchanged. (This information is given for completeness and it is not recommended that backquotes be used.) Quotes in the form $’...’ have their standard effect of expanding backslashed references to special characters. \nIf <<- is used, then all leading tabs are stripped from word and from the document. \n<<< word \nPerform shell expansion on word and pass the result to standard input. This is known as a here-string. Compare the use of word in here-documents above, where word does not undergo shell expansion. The result will have a trailing newline after it. \n<& number >& number \nThe standard input/output is duplicated from file descriptor number (see dup2(2)). \n<& - >& - \nClose the standard input/output. \n<& p >& p \nThe input/output from/to the coprocess is moved to the standard input/output. \n>& word &> word \n(Except where ‘>& word’ matches one of the above syntaxes; ‘&>’ can always be used to avoid this ambiguity.) Redirects both standard output and standard error (file descriptor 2) in the manner of ‘> word’. Note that this does not have the same effect as ‘> word 2>&1’ in the presence of multios (see the section below). \n>&| word >&! word &>| word &>! word \nRedirects both standard output and standard error (file descriptor 2) in the manner of ‘>| word’. \n>>& word &>> word \nRedirects both standard output and standard error (file descriptor 2) in the manner of ‘>> word’. \n>>&| word >>&! word &>>| word &>>! word \nRedirects both standard output and standard error (file descriptor 2) in the manner of ‘>>| word’. \nIf one of the above is preceded by a digit, then the file descriptor referred to is that specified by the digit instead of the default 0 or 1. The order in which redirections are specified is significant. The shell evaluates each redirection in terms of the (file descriptor, file) association at the time of evaluation. For example: \n... 1>fname 2>&1 \nfirst associates file descriptor 1 with file fname. It then associates file descriptor 2 with the file associated with file descriptor 1 (that is, fname). If the order of redirections were reversed, file descriptor 2 would be associated with the terminal (assuming file descriptor 1 had been) and then file descriptor 1 would be associated with file fname. \nThe ‘|&’ command separator described in Simple Commands & Pipelines is a shorthand for ‘2>&1 |’. \nThe various forms of process substitution, ‘<(list)’, and ‘=(list)’ for input and ‘>(list)’ for output, are often used together with redirection. For example, if word in an output redirection is of the form ‘>(list)’ then the output is piped to the command represented by list. See Process Substitution. \n7.1 Opening file descriptors using parameters\nWhen the shell is parsing arguments to a command, and the shell option IGNORE_BRACES is not set, a different form of redirection is allowed: instead of a digit before the operator there is a valid shell identifier enclosed in braces. The shell will open a new file descriptor that is guaranteed to be at least 10 and set the parameter named by the identifier to the file descriptor opened. No whitespace is allowed between the closing brace and the redirection character. For example: \n... {myfd}>&1 \nThis opens a new file descriptor that is a duplicate of file descriptor 1 and sets the parameter myfd to the number of the file descriptor, which will be at least 10. The new file descriptor can be written to using the syntax >&$myfd. The file descriptor remains open in subshells and forked external executables. \nThe syntax {varid}>&-, for example {myfd}>&-, may be used to close a file descriptor opened in this fashion. Note that the parameter given by varid must previously be set to a file descriptor in this case. \nIt is an error to open or close a file descriptor in this fashion when the parameter is readonly. However, it is not an error to read or write a file descriptor using <&$param or >&$param if param is readonly. \nIf the option CLOBBER is unset, it is an error to open a file descriptor using a parameter that is already set to an open file descriptor previously allocated by this mechanism. Unsetting the parameter before using it for allocating a file descriptor avoids the error. \nNote that this mechanism merely allocates or closes a file descriptor; it does not perform any redirections from or to it. It is usually convenient to allocate a file descriptor prior to use as an argument to exec. The syntax does not in any case work when used around complex commands such as parenthesised subshells or loops, where the opening brace is interpreted as part of a command list to be executed in the current shell. \nThe following shows a typical sequence of allocation, use, and closing of a file descriptor: \ninteger myfd\nexec {myfd}>~/logs/mylogfile.txt\nprint This is a log message. >&$myfd\nexec {myfd}>&-\nNote that the expansion of the variable in the expression >&$myfd occurs at the point the redirection is opened. This is after the expansion of command arguments and after any redirections to the left on the command line have been processed. \n7.2 Multios\nIf the user tries to open a file descriptor for writing more than once, the shell opens the file descriptor as a pipe to a process that copies its input to all the specified outputs, similar to tee, provided the MULTIOS option is set, as it is by default. Thus: \nwrites the date to two files, named ‘foo’ and ‘bar’. Note that a pipe is an implicit redirection; thus \nwrites the date to the file ‘foo’, and also pipes it to cat. \nNote that the shell opens all the files to be used in the multio process immediately, not at the point they are about to be written. \nNote also that redirections are always expanded in order. This happens regardless of the setting of the MULTIOS option, but with the option in effect there are additional consequences. For example, the meaning of the expression >&1 will change after a previous redirection: \nIn the case above, the >&1 refers to the standard output at the start of the line; the result is similar to the tee command. However, consider: \nAs redirections are evaluated in order, when the >&1 is encountered the standard output is set to the file output and another copy of the output is therefore sent to that file. This is unlikely to be what is intended. \nIf the MULTIOS option is set, the word after a redirection operator is also subjected to filename generation (globbing). Thus \nwill truncate all files in the current directory, assuming there’s at least one. (Without the MULTIOS option, it would create an empty file called ‘*’.) Similarly, you can do \nIf the user tries to open a file descriptor for reading more than once, the shell opens the file descriptor as a pipe to a process that copies all the specified inputs to its output in the order specified, provided the MULTIOS option is set. It should be noted that each file is opened immediately, not at the point where it is about to be read: this behaviour differs from cat, so if strictly standard behaviour is needed, cat should be used instead. \nThus \nor even \nis equivalent to ‘cat foo fubar | sort’. \nExpansion of the redirection argument occurs at the point the redirection is opened, at the point described above for the expansion of the variable in >&$myfd. \nNote that a pipe is an implicit redirection; thus \nis equivalent to ‘cat bar foo | sort’ (note the order of the inputs). \nIf the MULTIOS option is unset, each redirection replaces the previous redirection for that file descriptor. However, all files redirected to are actually opened, so \nwhen MULTIOS is unset will truncate ‘bar’, and write ‘Hello’ into ‘baz’. \nThere is a problem when an output multio is attached to an external program. A simple example shows this: \ncat file >file1 >file2\ncat file1 file2\nHere, it is possible that the second ‘cat’ will not display the full contents of file1 and file2 (i.e. the original contents of file repeated twice). \nThe reason for this is that the multios are spawned after the cat process is forked from the parent shell, so the parent shell does not wait for the multios to finish writing data. This means the command as shown can exit before file1 and file2 are completely written. As a workaround, it is possible to run the cat process as part of a job in the current shell: \n{ cat file } >file >file2\nHere, the {...} job will pause to wait for both files to be written. \n7.3 Redirections with no command\nWhen a simple command consists of one or more redirection operators and zero or more parameter assignments, but no command name, zsh can behave in several ways. \nIf the parameter NULLCMD is not set or the option CSH_NULLCMD is set, an error is caused. This is the csh behavior and CSH_NULLCMD is set by default when emulating csh. \nIf the option SH_NULLCMD is set, the builtin ‘:’ is inserted as a command with the given redirections. This is the default when emulating sh or ksh. \nOtherwise, if the parameter NULLCMD is set, its value will be used as a command with the given redirections. If both NULLCMD and READNULLCMD are set, then the value of the latter will be used instead of that of the former when the redirection is an input. The default for NULLCMD is ‘cat’ and for READNULLCMD is ‘more’. Thus \nshows the contents of file on standard output, with paging if that is a terminal. NULLCMD and READNULLCMD may refer to shell functions. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Redirection-html-Redirection-nt89b.html",
  "markdown": "# zsh: 7 Redirection\n\nIf a command is followed by & and job control is not active, then the default standard input for the command is the empty file /dev/null. Otherwise, the environment for the execution of a command contains the file descriptors of the invoking shell as modified by input/output specifications.\n\nThe following may appear anywhere in a simple command or may precede or follow a complex command. Expansion occurs before word or digit is used except as noted below. If the result of substitution on word produces more than one filename, redirection occurs for each separate filename in turn.\n\n< word\n\nOpen file word for reading as standard input. It is an error to open a file in this fashion if it does not exist.\n\n<> word\n\nOpen file word for reading and writing as standard input. If the file does not exist then it is created.\n\n\\> word\n\nOpen file word for writing as standard output. If the file does not exist then it is created. If the file exists, and the CLOBBER option is unset, this causes an error; otherwise, it is truncated to zero length.\n\n\\>| word\n\n\\>! word\n\nSame as \\>, except that the file is truncated to zero length if it exists, regardless of CLOBBER.\n\n\\>> word\n\nOpen file word for writing in append mode as standard output. If the file does not exist, and the CLOBBER and APPEND\\_CREATE options are both unset, this causes an error; otherwise, the file is created.\n\n\\>>| word\n\n\\>>! word\n\nSame as \\>>, except that the file is created if it does not exist, regardless of CLOBBER and APPEND\\_CREATE.\n\n<<\\[\\-\\] word\n\nThe shell input is read up to a line that is the same as word, or to an end-of-file. No parameter expansion, command substitution or filename generation is performed on word. The resulting document, called a _here-document_, becomes the standard input.\n\nIf any character of word is quoted with single or double quotes or a ‘\\\\’, no interpretation is placed upon the characters of the document. Otherwise, parameter and command substitution occurs, ‘\\\\’ followed by a newline is removed, and ‘\\\\’ must be used to quote the characters ‘\\\\’, ‘$’, ‘‘’ and the first character of word.\n\nNote that word itself does not undergo shell expansion. Backquotes in word do not have their usual effect; instead they behave similarly to double quotes, except that the backquotes themselves are passed through unchanged. (This information is given for completeness and it is not recommended that backquotes be used.) Quotes in the form $’...’ have their standard effect of expanding backslashed references to special characters.\n\nIf <<- is used, then all leading tabs are stripped from word and from the document.\n\n<<< word\n\nPerform shell expansion on word and pass the result to standard input. This is known as a _here-string_. Compare the use of word in here-documents above, where word does not undergo shell expansion. The result will have a trailing newline after it.\n\n<& number\n\n\\>& number\n\nThe standard input/output is duplicated from file descriptor number (see dup2(2)).\n\n<& -\n\n\\>& -\n\nClose the standard input/output.\n\n<& p\n\n\\>& p\n\nThe input/output from/to the coprocess is moved to the standard input/output.\n\n\\>& word\n\n&> word\n\n(Except where ‘\\>& word’ matches one of the above syntaxes; ‘&>’ can always be used to avoid this ambiguity.) Redirects both standard output and standard error (file descriptor 2) in the manner of ‘\\> word’. Note that this does _not_ have the same effect as ‘\\> word 2>&1’ in the presence of multios (see the section below).\n\n\\>&| word\n\n\\>&! word\n\n&>| word\n\n&>! word\n\nRedirects both standard output and standard error (file descriptor 2) in the manner of ‘\\>| word’.\n\n\\>>& word\n\n&>> word\n\nRedirects both standard output and standard error (file descriptor 2) in the manner of ‘\\>> word’.\n\n\\>>&| word\n\n\\>>&! word\n\n&>>| word\n\n&>>! word\n\nRedirects both standard output and standard error (file descriptor 2) in the manner of ‘\\>>| word’.\n\nIf one of the above is preceded by a digit, then the file descriptor referred to is that specified by the digit instead of the default 0 or 1. The order in which redirections are specified is significant. The shell evaluates each redirection in terms of the (_file descriptor_, _file_) association at the time of evaluation. For example:\n\n> ... 1>fname 2>&1\n\nfirst associates file descriptor 1 with file fname. It then associates file descriptor 2 with the file associated with file descriptor 1 (that is, fname). If the order of redirections were reversed, file descriptor 2 would be associated with the terminal (assuming file descriptor 1 had been) and then file descriptor 1 would be associated with file fname.\n\nThe ‘|&’ command separator described in [Simple Commands & Pipelines](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Simple-Commands-_0026-Pipelines) is a shorthand for ‘2>&1 |’.\n\nThe various forms of process substitution, ‘<(list)’, and ‘\\=(list)’ for input and ‘\\>(list)’ for output, are often used together with redirection. For example, if word in an output redirection is of the form ‘\\>(list)’ then the output is piped to the command represented by list. See [Process Substitution](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Process-Substitution).\n\n* * *\n\n## 7.1 Opening file descriptors using parameters\n\nWhen the shell is parsing arguments to a command, and the shell option IGNORE\\_BRACES is not set, a different form of redirection is allowed: instead of a digit before the operator there is a valid shell identifier enclosed in braces. The shell will open a new file descriptor that is guaranteed to be at least 10 and set the parameter named by the identifier to the file descriptor opened. No whitespace is allowed between the closing brace and the redirection character. For example:\n\n> ... {myfd}>&1\n\nThis opens a new file descriptor that is a duplicate of file descriptor 1 and sets the parameter myfd to the number of the file descriptor, which will be at least 10. The new file descriptor can be written to using the syntax \\>&$myfd. The file descriptor remains open in subshells and forked external executables.\n\nThe syntax {varid}>&-, for example {myfd}>&-, may be used to close a file descriptor opened in this fashion. Note that the parameter given by varid must previously be set to a file descriptor in this case.\n\nIt is an error to open or close a file descriptor in this fashion when the parameter is readonly. However, it is not an error to read or write a file descriptor using <&$param or \\>&$param if param is readonly.\n\nIf the option CLOBBER is unset, it is an error to open a file descriptor using a parameter that is already set to an open file descriptor previously allocated by this mechanism. Unsetting the parameter before using it for allocating a file descriptor avoids the error.\n\nNote that this mechanism merely allocates or closes a file descriptor; it does not perform any redirections from or to it. It is usually convenient to allocate a file descriptor prior to use as an argument to exec. The syntax does not in any case work when used around complex commands such as parenthesised subshells or loops, where the opening brace is interpreted as part of a command list to be executed in the current shell.\n\nThe following shows a typical sequence of allocation, use, and closing of a file descriptor:\n\ninteger myfd\nexec {myfd}>~/logs/mylogfile.txt\nprint This is a log message. >&$myfd\nexec {myfd}>&-\n\nNote that the expansion of the variable in the expression \\>&$myfd occurs at the point the redirection is opened. This is after the expansion of command arguments and after any redirections to the left on the command line have been processed.\n\n* * *\n\n## 7.2 Multios\n\nIf the user tries to open a file descriptor for writing more than once, the shell opens the file descriptor as a pipe to a process that copies its input to all the specified outputs, similar to tee, provided the MULTIOS option is set, as it is by default. Thus:\n\nwrites the date to two files, named ‘foo’ and ‘bar’. Note that a pipe is an implicit redirection; thus\n\nwrites the date to the file ‘foo’, and also pipes it to cat.\n\nNote that the shell opens all the files to be used in the multio process immediately, not at the point they are about to be written.\n\nNote also that redirections are always expanded in order. This happens regardless of the setting of the MULTIOS option, but with the option in effect there are additional consequences. For example, the meaning of the expression \\>&1 will change after a previous redirection:\n\nIn the case above, the \\>&1 refers to the standard output at the start of the line; the result is similar to the tee command. However, consider:\n\nAs redirections are evaluated in order, when the \\>&1 is encountered the standard output is set to the file output and another copy of the output is therefore sent to that file. This is unlikely to be what is intended.\n\nIf the MULTIOS option is set, the word after a redirection operator is also subjected to filename generation (globbing). Thus\n\nwill truncate all files in the current directory, assuming there’s at least one. (Without the MULTIOS option, it would create an empty file called ‘\\*’.) Similarly, you can do\n\nIf the user tries to open a file descriptor for reading more than once, the shell opens the file descriptor as a pipe to a process that copies all the specified inputs to its output in the order specified, provided the MULTIOS option is set. It should be noted that each file is opened immediately, not at the point where it is about to be read: this behaviour differs from cat, so if strictly standard behaviour is needed, cat should be used instead.\n\nThus\n\nor even\n\nis equivalent to ‘cat foo fubar | sort’.\n\nExpansion of the redirection argument occurs at the point the redirection is opened, at the point described above for the expansion of the variable in \\>&$myfd.\n\nNote that a pipe is an implicit redirection; thus\n\nis equivalent to ‘cat bar foo | sort’ (note the order of the inputs).\n\nIf the MULTIOS option is _un_set, each redirection replaces the previous redirection for that file descriptor. However, all files redirected to are actually opened, so\n\nwhen MULTIOS is unset will truncate ‘bar’, and write ‘Hello’ into ‘baz’.\n\nThere is a problem when an output multio is attached to an external program. A simple example shows this:\n\ncat file >file1 >file2\ncat file1 file2\n\nHere, it is possible that the second ‘cat’ will not display the full contents of file1 and file2 (i.e. the original contents of file repeated twice).\n\nThe reason for this is that the multios are spawned after the cat process is forked from the parent shell, so the parent shell does not wait for the multios to finish writing data. This means the command as shown can exit before file1 and file2 are completely written. As a workaround, it is possible to run the cat process as part of a job in the current shell:\n\n{ cat file } >file >file2\n\nHere, the {...} job will pause to wait for both files to be written.\n\n* * *\n\n## 7.3 Redirections with no command\n\nWhen a simple command consists of one or more redirection operators and zero or more parameter assignments, but no command name, zsh can behave in several ways.\n\nIf the parameter NULLCMD is not set or the option CSH\\_NULLCMD is set, an error is caused. This is the csh behavior and CSH\\_NULLCMD is set by default when emulating csh.\n\nIf the option SH\\_NULLCMD is set, the builtin ‘:’ is inserted as a command with the given redirections. This is the default when emulating sh or ksh.\n\nOtherwise, if the parameter NULLCMD is set, its value will be used as a command with the given redirections. If both NULLCMD and READNULLCMD are set, then the value of the latter will be used instead of that of the former when the redirection is an input. The default for NULLCMD is ‘cat’ and for READNULLCMD is ‘more’. Thus\n\nshows the contents of file on standard output, with paging if that is a terminal. NULLCMD and READNULLCMD may refer to shell functions.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 61,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Redirection-html-Redirection-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Redirection-html-Redirection-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Redirection-html-Redirection-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Redirection-html-Redirection-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Redirection-html-Redirection-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 13470,
      "readableText": 16364,
      "none": 23664,
      "readableTextIfPossible": 16364,
      "result": 16364,
      "markdown": 12113
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Conditional-Expressions.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Conditional-Expressions.html#Conditional-Expressions",
    "loadedTime": "2025-05-08T06:51:28.612Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Conditional-Expressions.html#Conditional-Expressions",
    "title": "zsh: 12 Conditional Expressions",
    "description": "zsh: 12 Conditional Expressions",
    "author": null,
    "keywords": "zsh: 12 Conditional Expressions",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:27 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-414e\"",
      "expires": "Thu, 08 May 2025 06:52:27 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7075688c236d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 12 Conditional Expressions\nA conditional expression is used with the [[ compound command to test attributes of files and to compare strings. Each expression can be constructed from one or more of the following unary or binary expressions: \n-a file \ntrue if file exists. \n-b file \ntrue if file exists and is a block special file. \n-c file \ntrue if file exists and is a character special file. \n-d file \ntrue if file exists and is a directory. \n-e file \ntrue if file exists. \n-f file \ntrue if file exists and is a regular file. \n-g file \ntrue if file exists and has its setgid bit set. \n-h file \ntrue if file exists and is a symbolic link. \n-k file \ntrue if file exists and has its sticky bit set. \n-n string \ntrue if length of string is non-zero. \n-o option \ntrue if option named option is on. option may be a single character, in which case it is a single letter option name. (See Specifying Options.) \nWhen no option named option exists, and the POSIX_BUILTINS option hasn’t been set, return 3 with a warning. If that option is set, return 1 with no warning. \n-p file \ntrue if file exists and is a FIFO special file (named pipe). \n-r file \ntrue if file exists and is readable by current process. \n-s file \ntrue if file exists and has size greater than zero. \n-t fd \ntrue if file descriptor number fd is open and associated with a terminal device. (note: fd is not optional) \n-u file \ntrue if file exists and has its setuid bit set. \n-v varname \ntrue if shell variable varname is set. \n-w file \ntrue if file exists and is writable by current process. \n-x file \ntrue if file exists and is executable by current process. If file exists and is a directory, then the current process has permission to search in the directory. \n-z string \ntrue if length of string is zero. \n-L file \ntrue if file exists and is a symbolic link. \n-O file \ntrue if file exists and is owned by the effective user ID of this process. \n-G file \ntrue if file exists and its group matches the effective group ID of this process. \n-S file \ntrue if file exists and is a socket. \n-N file \ntrue if file exists and its access time is not newer than its modification time. \nfile1 -nt file2 \ntrue if file1 exists and is newer than file2. \nfile1 -ot file2 \ntrue if file1 exists and is older than file2. \nfile1 -ef file2 \ntrue if file1 and file2 exist and refer to the same file. \nstring = pattern string == pattern \ntrue if string matches pattern. The two forms are exactly equivalent. The ‘=’ form is the traditional shell syntax (and hence the only one generally used with the test and [ builtins); the ‘==’ form provides compatibility with other sorts of computer language. \nstring != pattern \ntrue if string does not match pattern. \nstring =~ regexp \ntrue if string matches the regular expression regexp. If the option RE_MATCH_PCRE is set regexp is tested as a PCRE regular expression using the zsh/pcre module, else it is tested as a POSIX extended regular expression using the zsh/regex module. Upon successful match, some variables will be updated; no variables are changed if the matching fails. \nIf the option BASH_REMATCH is not set the scalar parameter MATCH is set to the substring that matched the pattern and the integer parameters MBEGIN and MEND to the index of the start and end, respectively, of the match in string, such that if string is contained in variable var the expression ‘${var[$MBEGIN,$MEND]}’ is identical to ‘$MATCH’. The setting of the option KSH_ARRAYS is respected. Likewise, the array match is set to the substrings that matched parenthesised subexpressions and the arrays mbegin and mend to the indices of the start and end positions, respectively, of the substrings within string. The arrays are not set if there were no parenthesised subexpressions. For example, if the string ‘a short string’ is matched against the regular expression ‘s(...)t’, then (assuming the option KSH_ARRAYS is not set) MATCH, MBEGIN and MEND are ‘short’, 3 and 7, respectively, while match, mbegin and mend are single entry arrays containing the strings ‘hor’, ‘4’ and ‘6’, respectively. \nIf the option BASH_REMATCH is set the array BASH_REMATCH is set to the substring that matched the pattern followed by the substrings that matched parenthesised subexpressions within the pattern. \nstring1 < string2 \ntrue if string1 comes before string2 based on ASCII value of their characters. \nstring1 > string2 \ntrue if string1 comes after string2 based on ASCII value of their characters. \nexp1 -eq exp2 \ntrue if exp1 is numerically equal to exp2. Note that for purely numeric comparisons use of the ((...)) builtin described in Arithmetic Evaluation is more convenient than conditional expressions. \nexp1 -ne exp2 \ntrue if exp1 is numerically not equal to exp2. \nexp1 -lt exp2 \ntrue if exp1 is numerically less than exp2. \nexp1 -gt exp2 \ntrue if exp1 is numerically greater than exp2. \nexp1 -le exp2 \ntrue if exp1 is numerically less than or equal to exp2. \nexp1 -ge exp2 \ntrue if exp1 is numerically greater than or equal to exp2. \n( exp ) \ntrue if exp is true. \n! exp \ntrue if exp is false. \nexp1 && exp2 \ntrue if exp1 and exp2 are both true. \nexp1 || exp2 \ntrue if either exp1 or exp2 is true. \nFor compatibility, if there is a single argument that is not syntactically significant, typically a variable, the condition is treated as a test for whether the expression expands as a string of non-zero length. In other words, [[ $var ]] is the same as [[ -n $var ]]. It is recommended that the second, explicit, form be used where possible. \nNormal shell expansion is performed on the file, string and pattern arguments, but the result of each expansion is constrained to be a single word, similar to the effect of double quotes. \nFilename generation is not performed on any form of argument to conditions. However, it can be forced in any case where normal shell expansion is valid and when the option EXTENDED_GLOB is in effect by using an explicit glob qualifier of the form (#q) at the end of the string. A normal glob qualifier expression may appear between the ‘q’ and the closing parenthesis; if none appears the expression has no effect beyond causing filename generation. The results of filename generation are joined together to form a single word, as with the results of other forms of expansion. \nThis special use of filename generation is only available with the [[ syntax. If the condition occurs within the [ or test builtin commands then globbing occurs instead as part of normal command line expansion before the condition is evaluated. In this case it may generate multiple words which are likely to confuse the syntax of the test command. \nFor example, \nproduces status zero if and only if there is at least one file in the current directory beginning with the string ‘file’. The globbing qualifier N ensures that the expression is empty if there is no matching file. \nPattern metacharacters are active for the pattern arguments; the patterns are the same as those used for filename generation, see Filename Generation, but there is no special behaviour of ‘/’ nor initial dots, and no glob qualifiers are allowed. \nIn each of the above expressions, if file is of the form ‘/dev/fd/n’, where n is an integer, then the test applied to the open file whose descriptor number is n, even if the underlying system does not support the /dev/fd directory. \nIn the forms which do numeric comparison, the expressions exp undergo arithmetic expansion as if they were enclosed in $((...)). \nFor example, the following: \n[[ ( -f foo || -f bar ) && $report = y* ]] && print File exists.\ntests if either file foo or file bar exists, and if so, if the value of the parameter report begins with ‘y’; if the complete condition is true, the message ‘File exists.’ is printed. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Conditional-Expressions-html-Conditional-Expressions-cdbza.html",
  "markdown": "# zsh: 12 Conditional Expressions\n\nA _conditional expression_ is used with the \\[\\[ compound command to test attributes of files and to compare strings. Each expression can be constructed from one or more of the following unary or binary expressions:\n\n\\-a file\n\ntrue if file exists.\n\n\\-b file\n\ntrue if file exists and is a block special file.\n\n\\-c file\n\ntrue if file exists and is a character special file.\n\n\\-d file\n\ntrue if file exists and is a directory.\n\n\\-e file\n\ntrue if file exists.\n\n\\-f file\n\ntrue if file exists and is a regular file.\n\n\\-g file\n\ntrue if file exists and has its setgid bit set.\n\n\\-h file\n\ntrue if file exists and is a symbolic link.\n\n\\-k file\n\ntrue if file exists and has its sticky bit set.\n\n\\-n string\n\ntrue if length of string is non-zero.\n\n\\-o option\n\ntrue if option named option is on. option may be a single character, in which case it is a single letter option name. (See [Specifying Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Specifying-Options).)\n\nWhen no option named option exists, and the POSIX\\_BUILTINS option hasn’t been set, return 3 with a warning. If that option is set, return 1 with no warning.\n\n\\-p file\n\ntrue if file exists and is a FIFO special file (named pipe).\n\n\\-r file\n\ntrue if file exists and is readable by current process.\n\n\\-s file\n\ntrue if file exists and has size greater than zero.\n\n\\-t fd\n\ntrue if file descriptor number fd is open and associated with a terminal device. (note: fd is not optional)\n\n\\-u file\n\ntrue if file exists and has its setuid bit set.\n\n\\-v varname\n\ntrue if shell variable varname is set.\n\n\\-w file\n\ntrue if file exists and is writable by current process.\n\n\\-x file\n\ntrue if file exists and is executable by current process. If file exists and is a directory, then the current process has permission to search in the directory.\n\n\\-z string\n\ntrue if length of string is zero.\n\n\\-L file\n\ntrue if file exists and is a symbolic link.\n\n\\-O file\n\ntrue if file exists and is owned by the effective user ID of this process.\n\n\\-G file\n\ntrue if file exists and its group matches the effective group ID of this process.\n\n\\-S file\n\ntrue if file exists and is a socket.\n\n\\-N file\n\ntrue if file exists and its access time is not newer than its modification time.\n\nfile1 \\-nt file2\n\ntrue if file1 exists and is newer than file2.\n\nfile1 \\-ot file2\n\ntrue if file1 exists and is older than file2.\n\nfile1 \\-ef file2\n\ntrue if file1 and file2 exist and refer to the same file.\n\nstring \\= pattern\n\nstring \\== pattern\n\ntrue if string matches pattern. The two forms are exactly equivalent. The ‘\\=’ form is the traditional shell syntax (and hence the only one generally used with the test and \\[ builtins); the ‘\\==’ form provides compatibility with other sorts of computer language.\n\nstring != pattern\n\ntrue if string does not match pattern.\n\nstring \\=~ regexp\n\ntrue if string matches the regular expression regexp. If the option RE\\_MATCH\\_PCRE is set regexp is tested as a PCRE regular expression using the zsh/pcre module, else it is tested as a POSIX extended regular expression using the zsh/regex module. Upon successful match, some variables will be updated; no variables are changed if the matching fails.\n\nIf the option BASH\\_REMATCH is not set the scalar parameter MATCH is set to the substring that matched the pattern and the integer parameters MBEGIN and MEND to the index of the start and end, respectively, of the match in string, such that if string is contained in variable var the expression ‘${var\\[$MBEGIN,$MEND\\]}’ is identical to ‘$MATCH’. The setting of the option KSH\\_ARRAYS is respected. Likewise, the array match is set to the substrings that matched parenthesised subexpressions and the arrays mbegin and mend to the indices of the start and end positions, respectively, of the substrings within string. The arrays are not set if there were no parenthesised subexpressions. For example, if the string ‘a short string’ is matched against the regular expression ‘s(...)t’, then (assuming the option KSH\\_ARRAYS is not set) MATCH, MBEGIN and MEND are ‘short’, 3 and 7, respectively, while match, mbegin and mend are single entry arrays containing the strings ‘hor’, ‘4’ and ‘6’, respectively.\n\nIf the option BASH\\_REMATCH is set the array BASH\\_REMATCH is set to the substring that matched the pattern followed by the substrings that matched parenthesised subexpressions within the pattern.\n\nstring1 < string2\n\ntrue if string1 comes before string2 based on ASCII value of their characters.\n\nstring1 \\> string2\n\ntrue if string1 comes after string2 based on ASCII value of their characters.\n\nexp1 \\-eq exp2\n\ntrue if exp1 is numerically equal to exp2. Note that for purely numeric comparisons use of the ((...)) builtin described in [Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) is more convenient than conditional expressions.\n\nexp1 \\-ne exp2\n\ntrue if exp1 is numerically not equal to exp2.\n\nexp1 \\-lt exp2\n\ntrue if exp1 is numerically less than exp2.\n\nexp1 \\-gt exp2\n\ntrue if exp1 is numerically greater than exp2.\n\nexp1 \\-le exp2\n\ntrue if exp1 is numerically less than or equal to exp2.\n\nexp1 \\-ge exp2\n\ntrue if exp1 is numerically greater than or equal to exp2.\n\n( exp )\n\ntrue if exp is true.\n\n! exp\n\ntrue if exp is false.\n\nexp1 && exp2\n\ntrue if exp1 and exp2 are both true.\n\nexp1 || exp2\n\ntrue if either exp1 or exp2 is true.\n\nFor compatibility, if there is a single argument that is not syntactically significant, typically a variable, the condition is treated as a test for whether the expression expands as a string of non-zero length. In other words, \\[\\[ $var \\]\\] is the same as \\[\\[ -n $var \\]\\]. It is recommended that the second, explicit, form be used where possible.\n\nNormal shell expansion is performed on the file, string and pattern arguments, but the result of each expansion is constrained to be a single word, similar to the effect of double quotes.\n\nFilename generation is not performed on any form of argument to conditions. However, it can be forced in any case where normal shell expansion is valid and when the option EXTENDED\\_GLOB is in effect by using an explicit glob qualifier of the form (#q) at the end of the string. A normal glob qualifier expression may appear between the ‘q’ and the closing parenthesis; if none appears the expression has no effect beyond causing filename generation. The results of filename generation are joined together to form a single word, as with the results of other forms of expansion.\n\nThis special use of filename generation is only available with the \\[\\[ syntax. If the condition occurs within the \\[ or test builtin commands then globbing occurs instead as part of normal command line expansion before the condition is evaluated. In this case it may generate multiple words which are likely to confuse the syntax of the test command.\n\nFor example,\n\nproduces status zero if and only if there is at least one file in the current directory beginning with the string ‘file’. The globbing qualifier N ensures that the expression is empty if there is no matching file.\n\nPattern metacharacters are active for the pattern arguments; the patterns are the same as those used for filename generation, see [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation), but there is no special behaviour of ‘/’ nor initial dots, and no glob qualifiers are allowed.\n\nIn each of the above expressions, if file is of the form ‘/dev/fd/n’, where n is an integer, then the test applied to the open file whose descriptor number is n, even if the underlying system does not support the /dev/fd directory.\n\nIn the forms which do numeric comparison, the expressions exp undergo arithmetic expansion as if they were enclosed in $((...)).\n\nFor example, the following:\n\n\\[\\[ ( -f foo || -f bar ) && $report = y\\* \\]\\] && print File exists.\n\ntests if either file foo or file bar exists, and if so, if the value of the parameter report begins with ‘y’; if the complete condition is true, the message ‘File exists.’ is printed.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 23,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Conditional-Expressions-html-Conditional-Expressions-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Conditional-Expressions-html-Conditional-Expressions-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Conditional-Expressions-html-Conditional-Expressions-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Conditional-Expressions-html-Conditional-Expressions-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Conditional-Expressions-html-Conditional-Expressions-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 9198,
      "readableText": 12331,
      "none": 14849,
      "readableTextIfPossible": 12331,
      "result": 12331,
      "markdown": 8228
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands",
    "loadedTime": "2025-05-08T06:51:23.704Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands",
    "title": "zsh: 17 Shell Builtin Commands",
    "description": "zsh: 17 Shell Builtin Commands",
    "author": null,
    "keywords": "zsh: 17 Shell Builtin Commands",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:21 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-290d9\"",
      "expires": "Thu, 08 May 2025 06:52:21 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70732fd2036d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 17 Shell Builtin Commands\nSome shell builtin commands take options as described in individual entries; these are often referred to in the list below as ‘flags’ to avoid confusion with shell options, which may also have an effect on the behaviour of builtin commands. In this introductory section, ‘option’ always has the meaning of an option to a command that should be familiar to most command line users. \nTypically, options are single letters preceded by a hyphen (-). Options that take an argument accept it either immediately following the option letter or after white space, for example ‘print -C3 {1..9}’ or ‘print -C 3 {1..9}’ are equivalent. Arguments to options are not the same as arguments to the command; the documentation indicates which is which. Options that do not take an argument may be combined in a single word, for example ‘print -rca – *’ and ‘print -r -c -a – *’ are equivalent. \nSome shell builtin commands also take options that begin with ‘+’ instead of ‘-’. The list below makes clear which commands these are. \nOptions (together with their individual arguments, if any) must appear in a group before any non-option arguments; once the first non-option argument has been found, option processing is terminated. \nAll builtin commands other than ‘echo’ and precommand modifiers, even those that have no options, can be given the argument ‘--’ to terminate option processing. This indicates that the following words are non-option arguments, but is otherwise ignored. This is useful in cases where arguments to the command may begin with ‘-’. For historical reasons, most builtin commands (including ‘echo’) also recognize a single ‘-’ in a separate word for this purpose; note that this is less standard and use of ‘--’ is recommended. \n- simple command \nSee Precommand Modifiers. \n. file [ arg ... ] \nRead commands from file and execute them in the current shell environment. \nIf file does not contain a slash, or if PATH_DIRS is set, the shell looks in the components of $path to find the directory containing file. Files in the current directory are not read unless ‘.’ appears somewhere in $path. If a file named ‘file.zwc’ is found, is newer than file, and is the compiled form (created with the zcompile builtin) of file, then commands are read from that file instead of file. \nIf any arguments arg are given, they become the positional parameters; the old positional parameters are restored when the file is done executing. However, if no arguments are given, the positional parameters remain those of the calling context, and no restoring is done. \nIf file was not found the return status is 127; if file was found but contained a syntax error the return status is 126; else the return status is the exit status of the last command executed. \n: [ arg ... ] \nThis command does nothing, although normal argument expansions is performed which may have effects on shell parameters. A zero exit status is returned. \nalias [ {+|-}gmrsL ] [ name[=value] ... ] \nFor each name with a corresponding value, define an alias with that value. A trailing space in value causes the next word to be checked for alias expansion. If the -g flag is present, define a global alias; global aliases are expanded even if they do not occur in command position: \n% perldoc --help 2>&1 | grep 'built-in functions'\n    -f   Search Perl built-in functions\n% alias -g HG='--help 2>&1 | grep'\n% perldoc HG 'built-in functions'\n    -f   Search Perl built-in functions\nIf the -s flag is present, define a suffix alias: if the command word on a command line is in the form ‘text.name’, where text is any non-empty string, it is replaced by the text ‘value text.name’. Note that name is treated as a literal string, not a pattern. A trailing space in value is not special in this case. For example, \nwill cause the command ‘*.ps’ to be expanded to ‘gv – *.ps’. As alias expansion is carried out earlier than globbing, the ‘*.ps’ will then be expanded. Suffix aliases constitute a different name space from other aliases (so in the above example it is still possible to create an alias for the command ps) and the two sets are never listed together. \nFor each name with no value, print the value of name, if any. With no arguments, print all currently defined aliases other than suffix aliases. If the -m flag is given the arguments are taken as patterns (they should be quoted to preserve them from being interpreted as glob patterns), and the aliases matching these patterns are printed. When printing aliases and one of the -g, -r or -s flags is present, restrict the printing to global, regular or suffix aliases, respectively; a regular alias is one which is neither a global nor a suffix alias. Using ‘+’ instead of ‘-’, or ending the option list with a single ‘+’, prevents the values of the aliases from being printed. \nIf the -L flag is present, then print each alias in a manner suitable for putting in a startup script. The exit status is nonzero if a name (with no value) is given for which no alias has been defined. \nFor more on aliases, include common problems, see Aliasing. \nautoload [ {+|-}RTUXdkmrtWz ] [ -w ] [ name ... ] \nSee the section ‘Autoloading Functions’ in Functions for full details. The fpath parameter will be searched to find the function definition when the function is first referenced. \nIf name consists of an absolute path, the function is defined to load from the file given (searching as usual for dump files in the given location). The name of the function is the basename (non-directory part) of the file. It is normally an error if the function is not found in the given location; however, if the option -d is given, searching for the function defaults to $fpath. If a function is loaded by absolute path, any functions loaded from it that are marked for autoload without an absolute path have the load path of the parent function temporarily prepended to $fpath. \nIf the option -r or -R is given, the function is searched for immediately and the location is recorded internally for use when the function is executed; a relative path is expanded using the value of $PWD. This protects against a change to $fpath after the call to autoload. With -r, if the function is not found, it is silently left unresolved until execution; with -R, an error message is printed and command processing aborted immediately the search fails, i.e. at the autoload command rather than at function execution.. \nThe flag -X may be used only inside a shell function. It causes the calling function to be marked for autoloading and then immediately loaded and executed, with the current array of positional parameters as arguments. This replaces the previous definition of the function. If no function definition is found, an error is printed and the function remains undefined and marked for autoloading. If an argument is given, it is used as a directory (i.e. it does not include the name of the function) in which the function is to be found; this may be combined with the -d option to allow the function search to default to $fpath if it is not in the given location. \nThe flag +X attempts to load each name as an autoloaded function, but does not execute it. The exit status is zero (success) if the function was not previously defined and a definition for it was found. This does not replace any existing definition of the function. The exit status is nonzero (failure) if the function was already defined or when no definition was found. In the latter case the function remains undefined and marked for autoloading. If ksh-style autoloading is enabled, the function created will contain the contents of the file plus a call to the function itself appended to it, thus giving normal ksh autoloading behaviour on the first call to the function. If the -m flag is also given each name is treated as a pattern and all functions already marked for autoload that match the pattern are loaded. \nWith the -t flag, turn on execution tracing; with -T, turn on execution tracing only for the current function, turning it off on entry to any called functions that do not also have tracing enabled. \nWith the -U flag, alias expansion is suppressed when the function is loaded. \nWith the -w flag, the names are taken as names of files compiled with the zcompile builtin, and all functions defined in them are marked for autoloading. \nThe flags -z and -k mark the function to be autoloaded using the zsh or ksh style, as if the option KSH_AUTOLOAD were unset or were set, respectively. The flags override the setting of the option at the time the function is loaded. \nNote that the autoload command makes no attempt to ensure the shell options set during the loading or execution of the file have any particular value. For this, the emulate command can be used: \nemulate zsh -c 'autoload -Uz func'\narranges that when func is loaded the shell is in native zsh emulation, and this emulation is also applied when func is run. \nSome of the functions of autoload are also provided by functions -u or functions -U, but autoload is a more comprehensive interface. \nbg [ job ... ] job ... & \nPut each specified job in the background, or the current job if none is specified. \nbindkey \nSee Zle Builtins. \nbreak [ n ] \nExit from an enclosing for, while, until, select or repeat loop. If an arithmetic expression n is specified, then break n levels instead of just one. \nbuiltin name [ args ... ] \nExecutes the builtin name, with the given args. \nbye \nSame as exit. \ncap \nSee The zsh/cap Module. \ncd [ -qsLP ] [ arg ] cd [ -qsLP ] old new cd [ -qsLP ] {+|-}n \nChange the current directory. In the first form, change the current directory to arg, or to the value of $HOME if arg is not specified. If arg is ‘-’, change to the previous directory. \nOtherwise, if arg begins with a slash, attempt to change to the directory given by arg. \nIf arg does not begin with a slash, the behaviour depends on whether the current directory ‘.’ occurs in the list of directories contained in the shell parameter cdpath. If it does not, first attempt to change to the directory arg under the current directory, and if that fails but cdpath is set and contains at least one element attempt to change to the directory arg under each component of cdpath in turn until successful. If ‘.’ occurs in cdpath, then cdpath is searched strictly in order so that ‘.’ is only tried at the appropriate point. \nThe order of testing cdpath is modified if the option POSIX_CD is set, as described in the documentation for the option. \nIf no directory is found, the option CDABLE_VARS is set, and a parameter named arg exists whose value begins with a slash, treat its value as the directory. In that case, the parameter is added to the named directory hash table. \nThe second form of cd substitutes the string new for the string old in the name of the current directory, and tries to change to this new directory. \nThe third form of cd extracts an entry from the directory stack, and changes to that directory. An argument of the form ‘+n’ identifies a stack entry by counting from the left of the list shown by the dirs command, starting with zero. An argument of the form ‘-n’ counts from the right. If the PUSHD_MINUS option is set, the meanings of ‘+’ and ‘-’ in this context are swapped. If the POSIX_CD option is set, this form of cd is not recognised and will be interpreted as the first form. \nIf the -q (quiet) option is specified, the hook function chpwd and the functions in the array chpwd_functions are not called. This is useful for calls to cd that do not change the environment seen by an interactive user. \nIf the -s option is specified, cd refuses to change the current directory if the given pathname contains symlinks. If the -P option is given or the CHASE_LINKS option is set, symbolic links are resolved to their true values. If the -L option is given symbolic links are retained in the directory (and not resolved) regardless of the state of the CHASE_LINKS option. \nchdir \nSame as cd. \nclone \nSee The zsh/clone Module. \ncommand [ -pvV ] simple command \nThe simple command argument is taken as an external command instead of a function or builtin and is executed. If the POSIX_BUILTINS option is set, builtins will also be executed but certain special properties of them are suppressed. The -p flag causes a default path to be searched instead of that in $path. With the -v flag, command is similar to whence and with -V, it is equivalent to whence -v. \nSee also Precommand Modifiers. \ncomparguments \nSee The zsh/computil Module. \ncompcall \nSee The zsh/compctl Module. \ncompctl \nSee The zsh/compctl Module. \ncompdescribe \nSee The zsh/computil Module. \ncompfiles \nSee The zsh/computil Module. \ncompgroups \nSee The zsh/computil Module. \ncompquote \nSee The zsh/computil Module. \ncomptags \nSee The zsh/computil Module. \ncomptry \nSee The zsh/computil Module. \ncompvalues \nSee The zsh/computil Module. \ncontinue [ n ] \nResume the next iteration of the enclosing for, while, until, select or repeat loop. If an arithmetic expression n is specified, break out of n-1 loops and resume at the nth enclosing loop. \ndeclare \nSame as typeset. \ndirs [ -c ] [ arg ... ] dirs [ -lpv ] \nWith no arguments, print the contents of the directory stack. Directories are added to this stack with the pushd command, and removed with the cd or popd commands. If arguments are specified, load them onto the directory stack, replacing anything that was there, and push the current directory onto the stack. \n-c \nclear the directory stack. \n-l \nprint directory names in full instead of using of using ~ expressions (Filename Expansion). \n-p \nprint directory entries one per line. \n-v \nnumber the directories in the stack when printing. \ndisable [ -afmprs ] name ... \nTemporarily disable the named hash table elements or patterns. The default is to disable builtin commands. This allows you to use an external command with the same name as a builtin command. The -a option causes disable to act on regular or global aliases. The -s option causes disable to act on suffix aliases. The -f option causes disable to act on shell functions. The -r options causes disable to act on reserved words. Without arguments all disabled hash table elements from the corresponding hash table are printed. With the -m flag the arguments are taken as patterns (which should be quoted to prevent them from undergoing filename expansion), and all hash table elements from the corresponding hash table matching these patterns are disabled. Disabled objects can be enabled with the enable command. \nWith the option -p, name ... refer to elements of the shell’s pattern syntax as described in Filename Generation. Certain elements can be disabled separately, as given below. \nNote that patterns not allowed by the current settings for the options EXTENDED_GLOB, KSH_GLOB and SH_GLOB are never enabled, regardless of the setting here. For example, if EXTENDED_GLOB is not active, the pattern ^ is ineffective even if ‘disable -p \"^\"’ has not been issued. The list below indicates any option settings that restrict the use of the pattern. It should be noted that setting SH_GLOB has a wider effect than merely disabling patterns as certain expressions, in particular those involving parentheses, are parsed differently. \nThe following patterns may be disabled; all the strings need quoting on the command line to prevent them from being interpreted immediately as patterns and the patterns are shown below in single quotes as a reminder. \n’?’ \nThe pattern character ? wherever it occurs, including when preceding a parenthesis with KSH_GLOB. \n’*’ \nThe pattern character * wherever it occurs, including recursive globbing and when preceding a parenthesis with KSH_GLOB. \n’[’ \nCharacter classes. \n’<’ (NO_SH_GLOB) \nNumeric ranges. \n’|’ (NO_SH_GLOB) \nAlternation in grouped patterns, case statements, or KSH_GLOB parenthesised expressions. \n’(’ (NO_SH_GLOB) \nGrouping using single parentheses. Disabling this does not disable the use of parentheses for KSH_GLOB where they are introduced by a special character, nor for glob qualifiers (use ‘setopt NO_BARE_GLOB_QUAL’ to disable glob qualifiers that use parentheses only). \n’~’ (EXTENDED_GLOB) \nExclusion in the form A~B. \n’^’ (EXTENDED_GLOB) \nExclusion in the form A^B. \n’#’ (EXTENDED_GLOB) \nThe pattern character # wherever it occurs, both for repetition of a previous pattern and for indicating globbing flags. \n’?(’ (KSH_GLOB) \nThe grouping form ?(...). Note this is also disabled if ’?’ is disabled. \n’*(’ (KSH_GLOB) \nThe grouping form *(...). Note this is also disabled if ’*’ is disabled. \n’+(’ (KSH_GLOB) \nThe grouping form +(...). \n’!(’ (KSH_GLOB) \nThe grouping form !(...). \n’@(’ (KSH_GLOB) \nThe grouping form @(...). \ndisown [ job ... ] job ... &| job ... &! \nRemove the specified jobs from the job table; the shell will no longer report their status, and will not complain if you try to exit an interactive shell with them running or stopped. If no job is specified, disown the current job. \nIf the jobs are currently stopped and the AUTO_CONTINUE option is not set, a warning is printed containing information about how to make them running after they have been disowned. If one of the latter two forms is used, the jobs will automatically be made running, independent of the setting of the AUTO_CONTINUE option. \necho [ -neE ] [ arg ... ] \nWrite each arg on the standard output, with a space separating each one. If the -n flag is not present, print a newline at the end. echo recognizes the following escape sequences: \n\\a \nbell character \n\\b \nbackspace \n\\c \nsuppress subsequent characters and final newline \n\\e \nescape \n\\f \nform feed \n\\n \nlinefeed (newline) \n\\r \ncarriage return \n\\t \nhorizontal tab \n\\v \nvertical tab \n\\\\ \nbackslash \n\\0NNN \ncharacter code in octal \n\\xNN \ncharacter code in hexadecimal \n\\uNNNN \nunicode character code in hexadecimal \n\\UNNNNNNNN \nunicode character code in hexadecimal \nThe -E flag, or the BSD_ECHO option, can be used to disable these escape sequences. In the latter case, -e flag can be used to enable them. \nNote that for standards compliance a double dash does not terminate option processing; instead, it is printed directly. However, a single dash does terminate option processing, so the first dash, possibly following options, is not printed, but everything following it is printed as an argument. The single dash behaviour is different from other shells. For a more portable way of printing text, see printf, and for a more controllable way of printing text within zsh, see print. \nechotc \nSee The zsh/termcap Module. \nechoti \nSee The zsh/terminfo Module. \nemulate [ -lLR ] [ {zsh|sh|ksh|csh} [ flags ... ] ] \nWithout any argument print current emulation mode. \nWith single argument set up zsh options to emulate the specified shell as much as possible. csh will never be fully emulated. If the argument is not one of the shells listed above, zsh will be used as a default; more precisely, the tests performed on the argument are the same as those used to determine the emulation at startup based on the shell name, see Compatibility . In addition to setting shell options, the command also restores the pristine state of pattern enables, as if all patterns had been enabled using enable -p. \nIf the emulate command occurs inside a function that has been marked for execution tracing with functions -t then the xtrace option will be turned on regardless of emulation mode or other options. Note that code executed inside the function by the ., source, or eval commands is not considered to be running directly from the function, hence does not provoke this behaviour. \nIf the -R switch is given, all settable options are reset to their default value corresponding to the specified emulation mode, except for certain options describing the interactive environment; otherwise, only those options likely to cause portability problems in scripts and functions are altered. If the -L switch is given, the options LOCAL_OPTIONS, LOCAL_PATTERNS and LOCAL_TRAPS will be set as well, causing the effects of the emulate command and any setopt, disable -p or enable -p, and trap commands to be local to the immediately surrounding shell function, if any; normally these options are turned off in all emulation modes except ksh. The -L switch is mutually exclusive with the use of -c in flags. \nIf there is a single argument and the -l switch is given, the options that would be set or unset (the latter indicated with the prefix ‘no’) are listed. -l can be combined with -L or -R and the list will be modified in the appropriate way. Note the list does not depend on the current setting of options, i.e. it includes all options that may in principle change, not just those that would actually change. \nThe flags may be any of the invocation-time flags described in Invocation, except that ‘-o EMACS’ and ‘-o VI’ may not be used. Flags such as ‘+r’/‘+o RESTRICTED’ may be prohibited in some circumstances. \nIf -c arg appears in flags, arg is evaluated while the requested emulation is temporarily in effect. In this case the emulation mode and all options are restored to their previous values before emulate returns. The -R switch may precede the name of the shell to emulate; note this has a meaning distinct from including -R in flags. \nUse of -c enables ‘sticky’ emulation mode for functions defined within the evaluated expression: the emulation mode is associated thereafter with the function so that whenever the function is executed the emulation (respecting the -R switch, if present) and all options are set (and pattern disables cleared) before entry to the function, and the state is restored after exit. If the function is called when the sticky emulation is already in effect, either within an ‘emulate shell -c’ expression or within another function with the same sticky emulation, entry and exit from the function do not cause options to be altered (except due to standard processing such as the LOCAL_OPTIONS option). This also applies to functions marked for autoload within the sticky emulation; the appropriate set of options will be applied at the point the function is loaded as well as when it is run. \nFor example: \nemulate sh -c 'fni() { setopt cshnullglob; }\nfno() { fni; }'\nfno\nThe two functions fni and fno are defined with sticky sh emulation. fno is then executed, causing options associated with emulations to be set to their values in sh. fno then calls fni; because fni is also marked for sticky sh emulation, no option changes take place on entry to or exit from it. Hence the option cshnullglob, turned off by sh emulation, will be turned on within fni and remain on return to fno. On exit from fno, the emulation mode and all options will be restored to the state they were in before entry to the temporary emulation. \nThe documentation above is typically sufficient for the intended purpose of executing code designed for other shells in a suitable environment. More detailed rules follow. \n1. \nThe sticky emulation environment provided by ‘emulate shell -c’ is identical to that provided by entry to a function marked for sticky emulation as a consequence of being defined in such an environment. Hence, for example, the sticky emulation is inherited by subfunctions defined within functions with sticky emulation. \n2. \nNo change of options takes place on entry to or exit from functions that are not marked for sticky emulation, other than those that would normally take place, even if those functions are called within sticky emulation. \n3. \nNo special handling is provided for functions marked for autoload nor for functions present in wordcode created by the zcompile command. \n4. \nThe presence or absence of the -R switch to emulate corresponds to different sticky emulation modes, so for example ‘emulate sh -c’, ‘emulate -R sh -c’ and ‘emulate csh -c’ are treated as three distinct sticky emulations. \n5. \nDifference in shell options supplied in addition to the basic emulation also mean the sticky emulations are different, so for example ‘emulate zsh -c’ and ‘emulate zsh -o cbases -c’ are treated as distinct sticky emulations. \nenable [ -afmprs ] name ... \nEnable the named hash table elements, presumably disabled earlier with disable. The default is to enable builtin commands. The -a option causes enable to act on regular or global aliases. The -s option causes enable to act on suffix aliases. The -f option causes enable to act on shell functions. The -r option causes enable to act on reserved words. Without arguments all enabled hash table elements from the corresponding hash table are printed. With the -m flag the arguments are taken as patterns (should be quoted) and all hash table elements from the corresponding hash table matching these patterns are enabled. Enabled objects can be disabled with the disable builtin command. \nenable -p reenables patterns disabled with disable -p. Note that it does not override globbing options; for example, ‘enable -p \"~\"’ does not cause the pattern character ~ to be active unless the EXTENDED_GLOB option is also set. To enable all possible patterns (so that they may be individually disabled with disable -p), use ‘setopt EXTENDED_GLOB KSH_GLOB NO_SH_GLOB’. \neval [ arg ... ] \nRead the arguments as input to the shell and execute the resulting command(s) in the current shell process. The return status is the same as if the commands had been executed directly by the shell; if there are no args or they contain no commands (i.e. are an empty string or whitespace) the return status is zero. \nexec [ -cl ] [ -a argv0 ] [ command [ arg ... ] ] \nReplace the current shell with command rather than forking. If command is a shell builtin command or a shell function, the shell executes it, and exits when the command is complete. \nWith -c clear the environment; with -l prepend - to the argv[0] string of the command executed (to simulate a login shell); with -a argv0 set the argv[0] string of the command executed. See Precommand Modifiers. \nIf the option POSIX_BUILTINS is set, command is never interpreted as a shell builtin command or shell function. This means further precommand modifiers such as builtin and noglob are also not interpreted within the shell. Hence command is always found by searching the command path. \nIf command is omitted but any redirections are specified, then the redirections will take effect in the current shell. \nexit [ n ] \nExit the shell with the exit status specified by an arithmetic expression n; if none is specified, use the exit status from the last command executed. An EOF condition will also cause the shell to exit, unless the IGNORE_EOF option is set. \nSee notes at the end of Jobs & Signals for some possibly unexpected interactions of the exit command with jobs. \nexport [ name[=value] ... ] \nThe specified names are marked for automatic export to the environment of subsequently executed commands. Equivalent to typeset -gx. If a parameter specified does not already exist, it is created in the global scope. \nfalse [ arg ... ] \nDo nothing and return an exit status of 1. \nfc [ -e ename ] [ -s ] [ -LI ] [ -m match ] [ old=new ... ] [ first [ last ] ] fc -l [ -LI ] [ -nrdfEiD ] [ -t timefmt ] [ -m match ] [ old=new ... ] [ first [ last ] ] fc -p [ -a ] [ filename [ histsize [ savehistsize ] ] ] fc -P fc -ARWI [ filename ] \nThe fc command controls the interactive history mechanism. Note that reading and writing of history options is only performed if the shell is interactive. Usually this is detected automatically, but it can be forced by setting the interactive option when starting the shell. \nThe first two forms of this command select a range of events from first to last from the history list. The arguments first and last may be specified as a number or as a string. A negative number is used as an offset to the current history event number. A string specifies the most recent event beginning with the given string. All substitutions old=new, if any, are then performed on the text of the events. \nThe range of events selected by numbers can be narrowed further by the following flags. \n-I \nrestricts to only internal events (not from $HISTFILE) \n-L \nrestricts to only local events (not from other shells, see SHARE_HISTORY in Description of Options – note that $HISTFILE is considered local when read at startup) \n-m \ntakes the first argument as a pattern (which should be quoted) and only the history events matching this pattern are considered \nIf first is not specified, it will be set to -1 (the most recent event), or to -16 if the -l flag is given. If last is not specified, it will be set to first, or to -1 if the -l flag is given. However, if the current event has added entries to the history with ‘print -s’ or ‘fc -R’, then the default last for -l includes all new history entries since the current event began. \nWhen the -l flag is given, the resulting events are listed on standard output. Otherwise the editor program specified by -e ename is invoked on a file containing these history events. If -e is not given, the value of the parameter FCEDIT is used; if that is not set the value of the parameter EDITOR is used; if that is not set a builtin default, usually ‘vi’ is used. If ename is ‘-’, no editor is invoked. When editing is complete, the edited command is executed. \nThe flag ‘-s’ is equivalent to ‘-e -’. The flag -r reverses the order of the events and the flag -n suppresses event numbers when listing. \nAlso when listing, \n-d \nprints timestamps for each event \n-f \nprints full time-date stamps in the US ‘MM/DD/YY hh:mm’ format \n-E \nprints full time-date stamps in the European ‘dd.mm.yyyy hh:mm’ format \n-i \nprints full time-date stamps in ISO8601 ‘yyyy-mm-dd hh:mm’ format \n-t fmt \nprints time and date stamps in the given format; fmt is formatted with the strftime function with the zsh extensions described for the %D{string} prompt format in Prompt Expansion. The resulting formatted string must be no more than 256 characters or will not be printed \n-D \nprints elapsed times; may be combined with one of the options above \n‘fc -p’ pushes the current history list onto a stack and switches to a new history list. If the -a option is also specified, this history list will be automatically popped when the current function scope is exited, which is a much better solution than creating a trap function to call ‘fc -P’ manually. If no arguments are specified, the history list is left empty, $HISTFILE is unset, and $HISTSIZE & $SAVEHIST are set to their default values. If one argument is given, $HISTFILE is set to that filename, $HISTSIZE & $SAVEHIST are left unchanged, and the history file is read in (if it exists) to initialize the new list. If a second argument is specified, $HISTSIZE & $SAVEHIST are instead set to the single specified numeric value. Finally, if a third argument is specified, $SAVEHIST is set to a separate value from $HISTSIZE. You are free to change these environment values for the new history list however you desire in order to manipulate the new history list. \n‘fc -P’ pops the history list back to an older list saved by ‘fc -p’. The current list is saved to its $HISTFILE before it is destroyed (assuming that $HISTFILE and $SAVEHIST are set appropriately, of course). The values of $HISTFILE, $HISTSIZE, and $SAVEHIST are restored to the values they had when ‘fc -p’ was called. Note that this restoration can conflict with making these variables \"local\", so your best bet is to avoid local declarations for these variables in functions that use ‘fc -p’. The one other guaranteed-safe combination is declaring these variables to be local at the top of your function and using the automatic option (-a) with ‘fc -p’. Finally, note that it is legal to manually pop a push marked for automatic popping if you need to do so before the function exits. \n‘fc -R’ reads the history from the given file, ‘fc -W’ writes the history out to the given file, and ‘fc -A’ appends the history out to the given file. If no filename is specified, the $HISTFILE is assumed. If the -I option is added to -R, only those events that are not already contained within the internal history list are added. If the -I option is added to -A or -W, only those events that are new since last incremental append/write to the history file are appended/written. In any case, the created file will have no more than $SAVEHIST entries. \nfg [ job ... ] job ... \nBring each specified job in turn to the foreground. If no job is specified, resume the current job. \nfloat [ {+|-}Hghlprtux ] [ {+|-}EFLRZ [ n ] ] [ name[=value] ... ] \nEquivalent to typeset -E, except that options irrelevant to floating point numbers are not permitted. \nfunctions [ {+|-}UkmtTuWz ] [ -x num ] [ name ... ] functions -c oldfn newfn functions -M [-s] mathfn [ min [ max [ shellfn ] ] ] functions -M [ -m pattern ... ] functions +M [ -m ] mathfn ... \nEquivalent to typeset -f, with the exception of the -c, -x, -M and -W options. For functions -u and functions -U, see autoload, which provides additional options. For functions -t and functions -T, see typeset -f. \nThe -x option indicates that any functions output will have each leading tab for indentation, added by the shell to show syntactic structure, expanded to the given number num of spaces. num can also be 0 to suppress all indentation. \nThe -W option turns on the option WARN_NESTED_VAR for the named function or functions only. The option is turned off at the start of nested functions (apart from anonoymous functions) unless the called function also has the -W attribute. \nThe -c option causes oldfn to be copied to newfn. The copy is efficiently handled internally by reference counting. If oldfn was marked for autoload it is first loaded and if this fails the copy fails. Either function may subsequently be redefined without affecting the other. A typical idiom is that oldfn is the name of a library shell function which is then redefined to call newfn, thereby installing a modified version of the function. \nThe -M and +M flags \nUse of the -M option may not be combined with any of the options handled by typeset -f. \nfunctions -M mathfn defines mathfn as the name of a mathematical function recognised in all forms of arithmetical expressions; see Arithmetic Evaluation. By default mathfn may take any number of comma-separated arguments. If min is given, it must have exactly min args; if min and max are both given, it must have at least min and at most max args. max may be -1 to indicate that there is no upper limit. \nBy default the function is implemented by a shell function of the same name; if shellfn is specified it gives the name of the corresponding shell function while mathfn remains the name used in arithmetical expressions. The name of the function in $0 is mathfn (not shellfn as would usually be the case), provided the option FUNCTION_ARGZERO is in effect. The positional parameters in the shell function correspond to the arguments of the mathematical function call. \nThe result of the last arithmetical expression evaluated inside the shell function gives the result of the mathematical function. This is not limited to arithmetic substitutions of the form $((...)), but also includes arithmetical expressions evaluated in any other way, including by the let builtin, by ((...)) statements, and even by the return builtin and by array subscripts. Therefore, care must be taken not to use syntactical constructs that perform arithmetic evaluation after evaluating what is to be the result of the function. For example: \n# WRONG\nzmath_cube() {\n  (( $1 * $1 * $1 ))\n  return 0\n}\nfunctions -M cube 1 1 zmath_cube\nprint $(( cube(3) ))\nThis will print ‘0’ because of the return. \nCommenting the return out would lead to a different problem: the ((...)) statement would become the last statement in the function, so the return status ($?) of the function would be non-zero (indicating failure) whenever the arithmetic result of the function would happen to be zero (numerically): \n# WRONG\nzmath_cube() {\n  (( $1 * $1 * $1 ))\n}\nfunctions -M cube 1 1 zmath_cube\nprint $(( cube(0) ))\nInstead, the true builtin can be used: \n# RIGHT\nzmath_cube() {\n  (( $1 * $1 * $1 ))\n  true\n}\nfunctions -M cube 1 1 zmath_cube\nprint $(( cube(3) ))\nIf the additional option -s is given to functions -M, the argument to the function is a single string: anything between the opening and matching closing parenthesis is passed to the function as a single argument, even if it includes commas or white space. The minimum and maximum argument specifiers must therefore be 1 if given. An empty argument list is passed as a zero-length string. Thus, the following string function takes a single argument, including the commas, and prints 11: \nstringfn() { (( $#1 )); true }\nfunctions -Ms stringfn\nprint $(( stringfn(foo,bar,rod) ))\nfunctions -M with no arguments lists all such user-defined functions in the same form as a definition. With the additional option -m and a list of arguments, all functions whose mathfn matches one of the pattern arguments are listed. \nfunction +M removes the list of mathematical functions; with the additional option -m the arguments are treated as patterns and all functions whose mathfn matches the pattern are removed. Note that the shell function implementing the behaviour is not removed (regardless of whether its name coincides with mathfn). \ngetcap \nSee The zsh/cap Module. \ngetln [ -AclneE ] name ... \nRead the top value from the buffer stack and put it in the shell parameter name. Equivalent to read -zr. \ngetopts optstring name [ arg ... ] \nChecks the args for legal options. If the args are omitted, use the positional parameters. A valid option argument begins with a ‘+’ or a ‘-’. An argument not beginning with a ‘+’ or a ‘-’, or the argument ‘--’, ends the options. Note that a single ‘-’ is not considered a valid option argument. optstring contains the letters that getopts recognizes. If a letter is followed by a ‘:’, that option requires an argument. The options can be separated from the argument by blanks. \nEach time it is invoked, getopts places the option letter it finds in the shell parameter name, prepended with a ‘+’ when arg begins with a ‘+’. The index of the next arg is stored in OPTIND. The option argument, if any, is stored in OPTARG. \nThe first option to be examined may be changed by explicitly assigning to OPTIND. OPTIND has an initial value of 1, and is normally set to 1 upon entry to a shell function and restored upon exit. (The POSIX_BUILTINS option disables this, and also changes the way the value is calculated to match other shells.) OPTARG is not reset and retains its value from the most recent call to getopts. If either of OPTIND or OPTARG is explicitly unset, it remains unset, and the index or option argument is not stored. The option itself is still stored in name in this case. \nA leading ‘:’ in optstring causes getopts to store the letter of any invalid option in OPTARG, and to set name to ‘?’ for an unknown option and to ‘:’ when a required argument is missing. Otherwise, getopts sets name to ‘?’ and prints an error message when an option is invalid. The exit status is nonzero when there are no more options. \nhash [ -Ldfmrv ] [ name[=value] ] ... \nhash can be used to directly modify the contents of the command hash table, and the named directory hash table. Normally one would modify these tables by modifying one’s PATH (for the command hash table) or by creating appropriate shell parameters (for the named directory hash table). The choice of hash table to work on is determined by the -d option; without the option the command hash table is used, and with the option the named directory hash table is used. \nA command name starting with a / is never hashed, whether by explicit use of the hash command or otherwise. Such a command is always found by direct look up in the file system. \nGiven no arguments, and neither the -r or -f options, the selected hash table will be listed in full. \nThe -r option causes the selected hash table to be emptied. It will be subsequently rebuilt in the normal fashion. The -f option causes the selected hash table to be fully rebuilt immediately. For the command hash table this hashes all the absolute directories in the PATH, and for the named directory hash table this adds all users’ home directories. These two options cannot be used with any arguments. \nThe -m option causes the arguments to be taken as patterns (which should be quoted) and the elements of the hash table matching those patterns are printed. This is the only way to display a limited selection of hash table elements. \nFor each name with a corresponding value, put ‘name’ in the selected hash table, associating it with the pathname ‘value’. In the command hash table, this means that whenever ‘name’ is used as a command argument, the shell will try to execute the file given by ‘value’. In the named directory hash table, this means that ‘value’ may be referred to as ‘~name’. \nFor each name with no corresponding value, attempt to add name to the hash table, checking what the appropriate value is in the normal manner for that hash table. If an appropriate value can’t be found, then the hash table will be unchanged. \nThe -v option causes hash table entries to be listed as they are added by explicit specification. If has no effect if used with -f. \nIf the -L flag is present, then each hash table entry is printed in the form of a call to hash. \nhistory \nSame as fc -l. \ninteger [ {+|-}Hghlprtux ] [ {+|-}LRZi [ n ] ] [ name[=value] ... ] \nEquivalent to typeset -i, except that options irrelevant to integers are not permitted. \njobs [ -dlprs ] [ job ... ] jobs -Z string \nLists information about each given job, or all jobs if job is omitted. The -l flag lists process IDs, and the -p flag lists process groups. If the -r flag is specified only running jobs will be listed and if the -s flag is given only stopped jobs are shown. If the -d flag is given, the directory from which the job was started (which may not be the current directory of the job) will also be shown. \nThe -Z option replaces the shell’s argument and environment space with the given string, truncated if necessary to fit. This will normally be visible in ps (ps(1)) listings. This feature is typically used by daemons, to indicate their state. \nFull job control is only available in the top-level interactive shell, not in commands run in the left hand side of pipelines or within the (...) construct. However, a snapshot of the job state at that point is taken, so it is still possible to use the jobs builtin, or any parameter providing job information. This gives information about the state of jobs at the point the subshell was created. If background processes are created within the subshell, then instead information about those processes is provided. \nFor example, \nsleep 10 &    # Job in background\n(             # Shell forks\njobs          # Shows information about \"sleep 10 &\"\nsleep 5 &     # Process in background (no job control)\njobs          # Shows information about \"sleep 5 &\"\n)\nkill [ -s signal_name | -n signal_number | -sig ] job ... kill -l [ sig ... ] \nSends either SIGTERM or the specified signal to the given jobs or processes. Signals are given by number or by names, with or without the ‘SIG’ prefix. If the signal being sent is not ‘KILL’ or ‘CONT’, then the job will be sent a ‘CONT’ signal if it is stopped. The argument job can be the process ID of a job not in the job list. In the second form, kill -l, if sig is not specified the signal names are listed. Otherwise, for each sig that is a name, the corresponding signal number is listed. For each sig that is a signal number or a number representing the exit status of a process which was terminated or stopped by a signal the name of the signal is printed. \nOn some systems, alternative signal names are allowed for a few signals. Typical examples are SIGCHLD and SIGCLD or SIGPOLL and SIGIO, assuming they correspond to the same signal number. kill -l will only list the preferred form, however kill -l alt will show if the alternative form corresponds to a signal number. For example, under Linux kill -l IO and kill -l POLL both output 29, hence kill -IO and kill -POLL have the same effect. \nMany systems will allow process IDs to be negative to kill a process group or zero to kill the current process group. \nlet arg ... \nEvaluate each arg as an arithmetic expression. See Arithmetic Evaluation for a description of arithmetic expressions. The exit status is 0 if the value of the last expression is nonzero, 1 if it is zero, and 2 if an error occurred. \nlimit [ -hs ] [ resource [ limit ] ] ... \nSet or display resource limits. Unless the -s flag is given, the limit applies only the children of the shell. If -s is given without other arguments, the resource limits of the current shell is set to the previously set resource limits of the children. \nIf limit is not specified, print the current limit placed on resource, otherwise set the limit to the specified value. If the -h flag is given, use hard limits instead of soft limits. If no resource is given, print all limits. \nWhen looping over multiple resources, the shell will abort immediately if it detects a badly formed argument. However, if it fails to set a limit for some other reason it will continue trying to set the remaining limits. \nresource can be one of: \naddressspace \nMaximum amount of address space used. \naiomemorylocked \nMaximum amount of memory locked in RAM for AIO operations. \naiooperations \nMaximum number of AIO operations. \ncachedthreads \nMaximum number of cached threads. \ncoredumpsize \nMaximum size of a core dump. \ncputime \nMaximum CPU seconds per process. \ndatasize \nMaximum data size (including stack) for each process. \ndescriptors \nMaximum value for a file descriptor. \nfilesize \nLargest single file allowed. \nkqueues \nMaximum number of kqueues allocated. \nmaxproc \nMaximum number of processes. \nmaxpthreads \nMaximum number of threads per process. \nmemorylocked \nMaximum amount of memory locked in RAM. \nmemoryuse \nMaximum resident set size. \nmsgqueue \nMaximum number of bytes in POSIX message queues. \nposixlocks \nMaximum number of POSIX locks per user. \npseudoterminals \nMaximum number of pseudo-terminals. \nresident \nMaximum resident set size. \nsigpending \nMaximum number of pending signals. \nsockbufsize \nMaximum size of all socket buffers. \nstacksize \nMaximum stack size for each process. \nswapsize \nMaximum amount of swap used. \nvmemorysize \nMaximum amount of virtual memory. \nWhich of these resource limits are available depends on the system. resource can be abbreviated to any unambiguous prefix. It can also be an integer, which corresponds to the integer defined for the resource by the operating system. \nIf argument corresponds to a number which is out of the range of the resources configured into the shell, the shell will try to read or write the limit anyway, and will report an error if this fails. As the shell does not store such resources internally, an attempt to set the limit will fail unless the -s option is present. \nlimit is a number, with an optional scaling factor, as follows: \nnh \nhours \nnk \nkilobytes (default) \nnm \nmegabytes or minutes \nng \ngigabytes \n[mm:]ss \nminutes and seconds \nThe limit command is not made available by default when the shell starts in a mode emulating another shell. It can be made available with the command ‘zmodload -F zsh/rlimits b:limit’. \nlocal [ {+|-}AHUahlprtux ] [ {+|-}EFLRZi [ n ] ] [ name[=value] ... ] \nSame as typeset, except that the options -g, and -f are not permitted. In this case the -x option does not force the use of -g, i.e. exported variables will be local to functions. \nlogout [ n ] \nSame as exit, except that it only works in a login shell. \nnoglob simple command \nSee Precommand Modifiers. \npopd [ -q ] [ {+|-}n ] \nRemove an entry from the directory stack, and perform a cd to the new top directory. With no argument, the current top entry is removed. An argument of the form ‘+n’ identifies a stack entry by counting from the left of the list shown by the dirs command, starting with zero. An argument of the form -n counts from the right. If the PUSHD_MINUS option is set, the meanings of ‘+’ and ‘-’ in this context are swapped. \nIf the -q (quiet) option is specified, the hook function chpwd and the functions in the array $chpwd_functions are not called, and the new directory stack is not printed. This is useful for calls to popd that do not change the environment seen by an interactive user. \nprint [ -abcDilmnNoOpPrsSz ] [ -u n ] [ -f format ] [ -C cols ] [ -v name ] [ -xX tabstop ] [ -R [ -en ]] [ arg ... ] \nWith the ‘-f’ option the arguments are printed as described by printf. With no flags or with the flag ‘-’, the arguments are printed on the standard output as described by echo, with the following differences: the escape sequence ‘\\M-x’ (or ‘\\Mx’) metafies the character x (sets the highest bit), ‘\\C-x’ (or ‘\\Cx’) produces a control character (‘\\C-@’ and ‘\\C-?’ give the characters NULL and delete), a character code in octal is represented by ‘\\NNN’ (instead of ‘\\0NNN’), and ‘\\E’ is a synonym for ‘\\e’. Finally, if not in an escape sequence, ‘\\’ escapes the following character and is not printed. \n-a \nPrint arguments with the column incrementing first. Only useful with the -c and -C options. \n-b \nRecognize all the escape sequences defined for the bindkey command, see Zle Builtins. \n-c \nPrint the arguments in columns. Unless -a is also given, arguments are printed with the row incrementing first. \n-C cols \nPrint the arguments in cols columns. Unless -a is also given, arguments are printed with the row incrementing first. \n-D \nTreat the arguments as paths, replacing directory prefixes with ~ expressions corresponding to directory names, as appropriate. \n-i \nIf given together with -o or -O, sorting is performed case-independently. \n-l \nPrint the arguments separated by newlines instead of spaces. Note: if the list of arguments is empty, print -l will still output one empty line. To print a possibly-empty list of arguments one per line, use print -C1, as in ‘print -rC1 – \"$list[@]\"’. \n-m \nTake the first argument as a pattern (should be quoted), and remove it from the argument list together with subsequent arguments that do not match this pattern. \n-n \nDo not add a newline to the output. \n-N \nPrint the arguments separated and terminated by nulls. Again, print -rNC1 – \"$list[@]\" is a canonical way to print an arbitrary list as null-delimited records. \n-o \nPrint the arguments sorted in ascending order. \n-O \nPrint the arguments sorted in descending order. \n-p \nPrint the arguments to the input of the coprocess. \n-P \nPerform prompt expansion (see Prompt Expansion). In combination with ‘-f’, prompt escape sequences are parsed only within interpolated arguments, not within the format string. \n-r \nIgnore the escape conventions of echo. \n-R \nEmulate the BSD echo command, which does not process escape sequences unless the -e flag is given. The -n flag suppresses the trailing newline. Only the -e and -n flags are recognized after -R; all other arguments and options are printed. \n-s \nPlace the results in the history list instead of on the standard output. Each argument to the print command is treated as a single word in the history, regardless of its content. \n-S \nPlace the results in the history list instead of on the standard output. In this case only a single argument is allowed; it will be split into words as if it were a full shell command line. The effect is similar to reading the line from a history file with the HIST_LEX_WORDS option active. \n-u n \nPrint the arguments to file descriptor n. \n-v name \nStore the printed arguments as the value of the parameter name. \n-x tab-stop \nExpand leading tabs on each line of output in the printed string assuming a tab stop every tab-stop characters. This is appropriate for formatting code that may be indented with tabs. Note that leading tabs of any argument to print, not just the first, are expanded, even if print is using spaces to separate arguments (the column count is maintained across arguments but may be incorrect on output owing to previous unexpanded tabs). \nThe start of the output of each print command is assumed to be aligned with a tab stop. Widths of multibyte characters are handled if the option MULTIBYTE is in effect. This option is ignored if other formatting options are in effect, namely column alignment or printf style, or if output is to a special location such as shell history or the command line editor. \n-X tab-stop \nThis is similar to -x, except that all tabs in the printed string are expanded. This is appropriate if tabs in the arguments are being used to produce a table format. \n-z \nPush the arguments onto the editing buffer stack, separated by spaces. \nIf any of ‘-m’, ‘-o’ or ‘-O’ are used in combination with ‘-f’ and there are no arguments (after the removal process in the case of ‘-m’) then nothing is printed. \nprintf [ -v name ] format [ arg ... ] \nPrint the arguments according to the format specification. Formatting rules are the same as used in C. The same escape sequences as for echo are recognised in the format. All C conversion specifications ending in one of csdiouxXeEfgGn are handled. In addition to this, ‘%b’ can be used instead of ‘%s’ to cause escape sequences in the argument to be recognised and ‘%q’ can be used to quote the argument in such a way that allows it to be reused as shell input. With the numeric format specifiers, if the corresponding argument starts with a quote character, the numeric value of the following character is used as the number to print; otherwise the argument is evaluated as an arithmetic expression. See Arithmetic Evaluation for a description of arithmetic expressions. With ‘%n’, the corresponding argument is taken as an identifier which is created as an integer parameter. \nNormally, conversion specifications are applied to each argument in order but they can explicitly specify the nth argument is to be used by replacing ‘%’ by ‘%n$’ and ‘*’ by ‘*n$’. It is recommended that you do not mix references of this explicit style with the normal style and the handling of such mixed styles may be subject to future change. \nIf arguments remain unused after formatting, the format string is reused until all arguments have been consumed. With the print builtin, this can be suppressed by using the -r option. If more arguments are required by the format than have been specified, the behaviour is as if zero or an empty string had been specified as the argument. \nThe -v option causes the output to be stored as the value of the parameter name, instead of printed. If name is an array and the format string is reused when consuming arguments then one array element will be used for each use of the format string. \npushd [ -qsLP ] [ arg ] pushd [ -qsLP ] old new pushd [ -qsLP ] {+|-}n \nChange the current directory, and push the old current directory onto the directory stack. In the first form, change the current directory to arg. If arg is not specified, change to the second directory on the stack (that is, exchange the top two entries), or change to $HOME if the PUSHD_TO_HOME option is set or if there is only one entry on the stack. Otherwise, arg is interpreted as it would be by cd. The meaning of old and new in the second form is also the same as for cd. \nThe third form of pushd changes directory by rotating the directory list. An argument of the form ‘+n’ identifies a stack entry by counting from the left of the list shown by the dirs command, starting with zero. An argument of the form ‘-n’ counts from the right. If the PUSHD_MINUS option is set, the meanings of ‘+’ and ‘-’ in this context are swapped. \nIf the -q (quiet) option is specified, the hook function chpwd and the functions in the array $chpwd_functions are not called, and the new directory stack is not printed. This is useful for calls to pushd that do not change the environment seen by an interactive user. \nIf the option -q is not specified and the shell option PUSHD_SILENT is not set, the directory stack will be printed after a pushd is performed. \nThe options -s, -L and -P have the same meanings as for the cd builtin. \npushln [ arg ... ] \nEquivalent to print -nz. \npwd [ -rLP ] \nPrint the absolute pathname of the current working directory. If the -r or the -P flag is specified, or the CHASE_LINKS option is set and the -L flag is not given, the printed path will not contain symbolic links. \nr \nSame as fc -e -. \nread [ -rszpqAclneE ] [ -t [ num ] ] [ -k [ num ] ] [ -d delim ] [ -u n ] [ [name][?prompt] ] [ name ... ] \nRead one line and break it into fields using the characters in $IFS as separators, except as noted below. The first field is assigned to the first name, the second field to the second name, etc., with leftover fields assigned to the last name. If name is omitted then REPLY is used for scalars and reply for arrays. \n-r \nRaw mode: a ‘\\’ at the end of a line does not signify line continuation and backslashes in the line don’t quote the following character and are not removed. \n-s \nDon’t echo back characters if reading from the terminal. \n-q \nRead only one character from the terminal and set name to ‘y’ if this character was ‘y’ or ‘Y’ and to ‘n’ otherwise. With this flag set the return status is zero only if the character was ‘y’ or ‘Y’. This option may be used with a timeout (see -t); if the read times out, or encounters end of file, status 2 is returned. Input is read from the terminal unless one of -u or -p is present. This option may also be used within zle widgets. \n-k [ num ] \nRead only one (or num) characters. All are assigned to the first name, without word splitting. This flag is ignored when -q is present. Input is read from the terminal unless one of -u or -p is present. This option may also be used within zle widgets. \nNote that despite the mnemonic ‘key’ this option does read full characters, which may consist of multiple bytes if the option MULTIBYTE is set. \n-z \nRead one entry from the editor buffer stack and assign it to the first name, without word splitting. Text is pushed onto the stack with ‘print -z’ or with push-line from the line editor (see Zsh Line Editor). This flag is ignored when the -k or -q flags are present. \n-e -E \nThe input read is printed (echoed) to the standard output. If the -e flag is used, no input is assigned to the parameters. \n-A \nThe first name is taken as the name of an array and all words are assigned to it. \n-c -l \nThese flags are allowed only if called inside a function used for completion (specified with the -K flag to compctl). If the -c flag is given, the words of the current command are read. If the -l flag is given, the whole line is assigned as a scalar. If both flags are present, -l is used and -c is ignored. \n-n \nTogether with -c, the number of the word the cursor is on is read. With -l, the index of the character the cursor is on is read. Note that the command name is word number 1, not word 0, and that when the cursor is at the end of the line, its character index is the length of the line plus one. \n-u n \nInput is read from file descriptor n. \n-p \nInput is read from the coprocess. \n-d delim \nInput is terminated by the first character of delim instead of by newline. \n-t [ num ] \nTest if input is available before attempting to read. If num is present, it must begin with a digit and will be evaluated to give a number of seconds, which may be a floating point number; in this case the read times out if input is not available within this time. If num is not present, it is taken to be zero, so that read returns immediately if no input is available. If no input is available, return status 1 and do not set any variables. \nThis option is not available when reading from the editor buffer with -z, when called from within completion with -c or -l, with -q which clears the input queue before reading, or within zle where other mechanisms should be used to test for input. \nNote that read does not attempt to alter the input processing mode. The default mode is canonical input, in which an entire line is read at a time, so usually ‘read -t’ will not read anything until an entire line has been typed. However, when reading from the terminal with -k input is processed one key at a time; in this case, only availability of the first character is tested, so that e.g. ‘read -t -k 2’ can still block on the second character. Use two instances of ‘read -t -k’ if this is not what is wanted. \nIf the first argument contains a ‘?’, the remainder of this word is used as a prompt on standard error when the shell is interactive. \nThe value (exit status) of read is 1 when an end-of-file is encountered, or when -c or -l is present and the command is not called from a compctl function, or as described for -q. Otherwise the value is 0. \nThe behavior of some combinations of the -k, -p, -q, -u and -z flags is undefined. Presently -q cancels all the others, -p cancels -u, -k cancels -z, and otherwise -z cancels both -p and -u. \nThe -c or -l flags cancel any and all of -kpquz. \nreadonly \nSame as typeset -r. With the POSIX_BUILTINS option set, same as typeset -gr. \nrehash \nSame as hash -r. \nreturn [ n ] \nCauses a shell function or ‘.’ script to return to the invoking script with the return status specified by an arithmetic expression n. For example, the following prints ‘42’: \n() { integer foo=40; return \"foo + 2\" }\necho $?\nIf n is omitted, the return status is that of the last command executed. \nIf return was executed from a trap in a TRAPNAL function, the effect is different for zero and non-zero return status. With zero status (or after an implicit return at the end of the trap), the shell will return to whatever it was previously processing; with a non-zero status, the shell will behave as interrupted except that the return status of the trap is retained. Note that the numeric value of the signal which caused the trap is passed as the first argument, so the statement ‘return \"128+$1\"’ will return the same status as if the signal had not been trapped. \nsched \nSee The zsh/sched Module. \nset [ {+|-}options | {+|-}o [ option_name ] ] ... [ {+|-}A [ name ] ] [ arg ... ] \nSet the options for the shell and/or set the positional parameters, or declare and set an array. If the -s option is given, it causes the specified arguments to be sorted before assigning them to the positional parameters (or to the array name if -A is used). With +s sort arguments in descending order. For the meaning of the other flags, see Options. Flags may be specified by name using the -o option. If no option name is supplied with -o, the current option states are printed: see the description of setopt below for more information on the format. With +o they are printed in a form that can be used as input to the shell. \nIf the -A flag is specified, name is set to an array containing the given args; if no name is specified, all arrays are printed together with their values. \nIf +A is used and name is an array, the given arguments will replace the initial elements of that array; if no name is specified, all arrays are printed without their values. \nThe behaviour of arguments after -A name or +A name depends on whether the option KSH_ARRAYS is set. If it is not set, all arguments following name are treated as values for the array, regardless of their form. If the option is set, normal option processing continues at that point; only regular arguments are treated as values for the array. This means that \nsets array to ‘-x -- foo’ if KSH_ARRAYS is not set, but sets the array to foo and turns on the option ‘-x’ if it is set. \nIf the -A flag is not present, but there are arguments beyond the options, the positional parameters are set. If the option list (if any) is terminated by ‘--’, and there are no further arguments, the positional parameters will be unset. \nIf no arguments and no ‘--’ are given, then the names and values of all parameters are printed on the standard output. If the only argument is ‘+’, the names of all parameters are printed. \nFor historical reasons, ‘set -’ is treated as ‘set +xv’ and ‘set - args’ as ‘set +xv – args’ when in any other emulation mode than zsh’s native mode. \nsetcap \nSee The zsh/cap Module. \nsetopt [ {+|-}options | {+|-}o option_name ] [ -m ] [ name ... ] \nSet the options for the shell. All options specified either with flags or by name are set. \nIf no arguments are supplied, the names of all options currently set are printed. The form is chosen so as to minimize the differences from the default options for the current emulation (the default emulation being native zsh, shown as <Z> in Description of Options). Options that are on by default for the emulation are shown with the prefix no only if they are off, while other options are shown without the prefix no and only if they are on. In addition to options changed from the default state by the user, any options activated automatically by the shell (for example, SHIN_STDIN or INTERACTIVE) will be shown in the list. The format is further modified by the option KSH_OPTION_PRINT, however the rationale for choosing options with or without the no prefix remains the same in this case. \nIf the -m flag is given the arguments are taken as patterns (which should be quoted to protect them from filename expansion), and all options with names matching these patterns are set. \nNote that a bad option name does not cause execution of subsequent shell code to be aborted; this is behaviour is different from that of ‘set -o’. This is because set is regarded as a special builtin by the POSIX standard, but setopt is not. \nshift [ -p ] [ n ] [ name ... ] \nThe positional parameters ${n+1} ... are renamed to $1 ..., where n is an arithmetic expression that defaults to 1. If any names are given then the arrays with these names are shifted instead of the positional parameters. \nIf the option -p is given arguments are instead removed (popped) from the end rather than the start of the array. \nsource file [ arg ... ] \nSame as ‘.’, except that the current directory is always searched and is always searched first, before directories in $path. \nstat \nSee The zsh/stat Module. \nsuspend [ -f ] \nSuspend the execution of the shell (send it a SIGTSTP) until it receives a SIGCONT. Unless the -f option is given, this will refuse to suspend a login shell. \ntest [ arg ... ] [ [ arg ... ] ] \nLike the system version of test. Added for compatibility; use conditional expressions instead (see Conditional Expressions). The main differences between the conditional expression syntax and the test and [ builtins are: these commands are not handled syntactically, so for example an empty variable expansion may cause an argument to be omitted; syntax errors cause status 2 to be returned instead of a shell error; and arithmetic operators expect integer arguments rather than arithmetic expressions. \nThe command attempts to implement POSIX and its extensions where these are specified. Unfortunately there are intrinsic ambiguities in the syntax; in particular there is no distinction between test operators and strings that resemble them. The standard attempts to resolve these for small numbers of arguments (up to four); for five or more arguments compatibility cannot be relied on. Users are urged wherever possible to use the ‘[[’ test syntax which does not have these ambiguities. \ntimes \nPrint the accumulated user and system times for the shell and for processes run from the shell. \ntrap [ arg ] [ sig ... ] \narg is a series of commands (usually quoted to protect it from immediate evaluation by the shell) to be read and executed when the shell receives any of the signals specified by one or more sig args. Each sig can be given as a number, or as the name of a signal either with or without the string SIG in front (e.g. 1, HUP, and SIGHUP are all the same signal). \nIf arg is ‘-’, then the specified signals are reset to their defaults, or, if no sig args are present, all traps are reset. \nIf arg is an empty string, then the specified signals are ignored by the shell (and by the commands it invokes). \nIf arg is omitted but one or more sig args are provided (i.e. the first argument is a valid signal number or name), the effect is the same as if arg had been specified as ‘-’. \nThe trap command with no arguments prints a list of commands associated with each signal. \nIf sig is ZERR then arg will be executed after each command with a nonzero exit status. ERR is an alias for ZERR on systems that have no SIGERR signal (this is the usual case). \nIf sig is DEBUG then arg will be executed before each command if the option DEBUG_BEFORE_CMD is set (as it is by default), else after each command. Here, a ‘command’ is what is described as a ‘sublist’ in the shell grammar, see Simple Commands & Pipelines. If DEBUG_BEFORE_CMD is set various additional features are available. First, it is possible to skip the next command by setting the option ERR_EXIT; see the description of the ERR_EXIT option in Description of Options. Also, the shell parameter ZSH_DEBUG_CMD is set to the string corresponding to the command to be executed following the trap. Note that this string is reconstructed from the internal format and may not be formatted the same way as the original text. The parameter is unset after the trap is executed. \nIf sig is 0 or EXIT and the trap statement is executed inside the body of a function, then the command arg is executed after the function completes. The value of $? at the start of execution is the exit status of the shell or the return status of the function exiting. If sig is 0 or EXIT and the trap statement is not executed inside the body of a function, then the command arg is executed when the shell terminates; the trap runs before any zshexit hook functions. \nZERR, DEBUG, and EXIT traps are not executed inside other traps. ZERR and DEBUG traps are kept within subshells, while other traps are reset. \nNote that traps defined with the trap builtin are slightly different from those defined as ‘TRAPNAL () { ... }’, as the latter have their own function environment (line numbers, local variables, etc.) while the former use the environment of the command in which they were called. For example, \ntrap 'print $LINENO' DEBUG\nwill print the line number of a command executed after it has run, while \nTRAPDEBUG() { print $LINENO; }\nwill always print the number zero. \nAlternative signal names are allowed as described under kill above. Defining a trap under either name causes any trap under an alternative name to be removed. However, it is recommended that for consistency users stick exclusively to one name or another. \ntrue [ arg ... ] \nDo nothing and return an exit status of 0. \nttyctl [ -fu ] \nThe -f option freezes the tty (i.e. terminal or terminal emulator), and -u unfreezes it. When the tty is frozen, no changes made to the tty settings by external programs will be honored by the shell, except for changes in the size of the screen; the shell will simply reset the settings to their previous values as soon as each command exits or is suspended. Thus, stty and similar programs have no effect when the tty is frozen. Freezing the tty does not cause the current state to be remembered: instead, it causes future changes to the state to be blocked. \nWithout options it reports whether the terminal is frozen or not. \nNote that, regardless of whether the tty is frozen or not, the shell needs to change the settings when the line editor starts, so unfreezing the tty does not guarantee settings made on the command line are preserved. Strings of commands run between editing the command line will see a consistent tty state. See also the shell variable STTY for a means of initialising the tty before running external commands and/or freezing the tty around a single command. \ntype [ -wfpamsS ] name ... \nEquivalent to whence -v. \ntypeset [ {+|-}AHUaghlmrtux ] [ {+|-}EFLRZip [ n ] ] [ + ] [ name[=value] ... ] typeset -T [ {+|-}Uglrux ] [ {+|-}LRZp [ n ] ] [ + | SCALAR[=value] array[=(value ...)] [ sep ] ] typeset -f [ {+|-}TUkmtuz ] [ + ] [ name ... ] \nSet or display attributes and values for shell parameters. \nExcept as noted below for control flags that change the behavior, a parameter is created for each name that does not already refer to one. When inside a function, a new parameter is created for every name (even those that already exist), and is unset again when the function completes. See Local Parameters. The same rules apply to special shell parameters, which retain their special attributes when made local. \nFor each name=value assignment, the parameter name is set to value. If the assignment is omitted and name does not refer to an existing parameter, a new parameter is intialized to empty string, zero, or empty array (as appropriate), unless the shell option TYPESET_TO_UNSET is set. When that option is set, the parameter attributes are recorded but the parameter remains unset. \nIf the shell option TYPESET_SILENT is not set, for each remaining name that refers to a parameter that is already set, the name and value of the parameter are printed in the form of an assignment. Nothing is printed for newly-created parameters, or when any attribute flags listed below are given along with the name. Using ‘+’ instead of minus to introduce an attribute turns it off. \nIf no name is present, the names and values of all parameters are printed. In this case the attribute flags restrict the display to only those parameters that have the specified attributes, and using ‘+’ rather than ‘-’ to introduce the flag suppresses printing of the values of parameters when there is no parameter name. \nAll forms of the command handle scalar assignment. Array assignment is possible if any of the reserved words declare, export, float, integer, local, readonly or typeset is matched when the line is parsed (N.B. not when it is executed). In this case the arguments are parsed as assignments, except that the ‘+=’ syntax and the GLOB_ASSIGN option are not supported, and scalar values after = are not split further into words, even if expanded (regardless of the setting of the KSH_TYPESET option; this option is obsolete). \nExamples of the differences between command and reserved word parsing: \n# Reserved word parsing\ntypeset svar=$(echo one word) avar=(several words)\nThe above creates a scalar parameter svar and an array parameter avar as if the assignments had been \nsvar=\"one word\"\navar=(several words)\nOn the other hand: \n# Normal builtin interface\nbuiltin typeset svar=$(echo two words)\nThe builtin keyword causes the above to use the standard builtin interface to typeset in which argument parsing is performed in the same way as for other commands. This example creates a scalar svar containing the value two and another scalar parameter words with no value. An array value in this case would either cause an error or be treated as an obscure set of glob qualifiers. \nArbitrary arguments are allowed if they take the form of assignments after command line expansion; however, these only perform scalar assignment: \nvar='svar=val'\ntypeset $var\nThe above sets the scalar parameter svar to the value val. Parentheses around the value within var would not cause array assignment as they will be treated as ordinary characters when $var is substituted. Any non-trivial expansion in the name part of the assignment causes the argument to be treated in this fashion: \ntypeset {var1,var2,var3}=name\nThe above syntax is valid, and has the expected effect of setting the three parameters to the same value, but the command line is parsed as a set of three normal command line arguments to typeset after expansion. Hence it is not possible to assign to multiple arrays by this means. \nNote that each interface to any of the commands may be disabled separately. For example, ‘disable -r typeset’ disables the reserved word interface to typeset, exposing the builtin interface, while ‘disable typeset’ disables the builtin. Note that disabling the reserved word interface for typeset may cause problems with the output of ‘typeset -p’, which assumes the reserved word interface is available in order to restore array and associative array values. \nUnlike parameter assignment statements, typeset’s exit status on an assignment that involves a command substitution does not reflect the exit status of the command substitution. Therefore, to test for an error in a command substitution, separate the declaration of the parameter from its initialization: \n# WRONG\ntypeset var1=$(exit 1) || echo \"Trouble with var1\"\n\n# RIGHT\ntypeset var1 && var1=$(exit 1) || echo \"Trouble with var1\"\n\nTo initialize a parameter param to a command output and mark it readonly, use typeset -r param or readonly param after the parameter assignment statement. \nIf no attribute flags are given, and either no name arguments are present or the flag +m is used, then each parameter name printed is preceded by a list of the attributes of that parameter (array, association, exported, float, integer, readonly, or undefined for autoloaded parameters not yet loaded). If +m is used with attribute flags, and all those flags are introduced with +, the matching parameter names are printed but their values are not. \nThe following control flags change the behavior of typeset: \n+ \nIf ‘+’ appears by itself in a separate word as the last option, then the names of all parameters (functions with -f) are printed, but the values (function bodies) are not. No name arguments may appear, and it is an error for any other options to follow ‘+’. The effect of ‘+’ is as if all attribute flags which precede it were given with a ‘+’ prefix. For example, ‘typeset -U +’ is equivalent to ‘typeset +U’ and displays the names of all arrays having the uniqueness attribute, whereas ‘typeset -f -U +’ displays the names of all autoloadable functions. If + is the only option, then type information (array, readonly, etc.) is also printed for each parameter, in the same manner as ‘typeset +m \"*\"’. \n-g \nThe -g (global) means that any resulting parameter will not be restricted to local scope. Note that this does not necessarily mean that the parameter will be global, as the flag will apply to any existing parameter (even if unset) from an enclosing function. This flag does not affect the parameter after creation, hence it has no effect when listing existing parameters, nor does the flag +g have any effect except in combination with -m (see below). \n-m \nIf the -m flag is given the name arguments are taken as patterns (use quoting to prevent these from being interpreted as file patterns). With no attribute flags, all parameters (or functions with the -f flag) with matching names are printed (the shell option TYPESET_SILENT is not used in this case). \nIf the +g flag is combined with -m, a new local parameter is created for every matching parameter that is not already local. Otherwise -m applies all other flags or assignments to the existing parameters. \nExcept when assignments are made with name=value, using +m forces the matching parameters and their attributes to be printed, even inside a function. Note that -m is ignored if no patterns are given, so ‘typeset -m’ displays attributes but ‘typeset -a +m’ does not. \n-p [ n ] \nIf the -p option is given, parameters and values are printed in the form of a typeset command with an assignment, regardless of other flags and options. Note that the -H flag on parameters is respected; no value will be shown for these parameters. \n-p may be followed by an optional integer argument. Currently only the value 1 is supported. In this case arrays and associative arrays are printed with newlines between indented elements for readability. \n-T [ scalar[=value] array[=(value ...)] [ sep ] ] \nThis flag has a different meaning when used with -f; see below. Otherwise the -T option requires zero, two, or three arguments to be present. With no arguments, the list of parameters created in this fashion is shown. With two or three arguments, the first two are the name of a scalar and of an array parameter (in that order) that will be tied together in the manner of $PATH and $path. The optional third argument is a single-character separator which will be used to join the elements of the array to form the scalar; if absent, a colon is used, as with $PATH. Only the first character of the separator is significant; any remaining characters are ignored. Multibyte characters are not yet supported. \nOnly one of the scalar and array parameters may be assigned an initial value (the restrictions on assignment forms described above also apply). \nBoth the scalar and the array may be manipulated as normal. If one is unset, the other will automatically be unset too. There is no way of untying the variables without unsetting them, nor of converting the type of one of them with another typeset command; +T does not work, assigning an array to scalar is an error, and assigning a scalar to array sets it to be a single-element array. \nNote that both ‘typeset -xT ...’ and ‘export -T ...’ work, but only the scalar will be marked for export. Setting the value using the scalar version causes a split on all separators (which cannot be quoted). It is possible to apply -T to two previously tied variables but with a different separator character, in which case the variables remain joined as before but the separator is changed. \nWhen an existing scalar is tied to a new array, the value of the scalar is preserved but no attribute other than export will be preserved. \nAttribute flags that transform the final value (-L, -R, -Z, -l, -u) are only applied to the expanded value at the point of a parameter expansion expression using ‘$’. They are not applied when a parameter is retrieved internally by the shell for any purpose. \nThe following attribute flags may be specified: \n-A \nThe names refer to associative array parameters; see Array Parameters. \n-L [ n ] \nLeft justify and remove leading blanks from the value when the parameter is expanded. If n is nonzero, it defines the width of the field. If n is zero, the width is determined by the width of the value of the first assignment. In the case of numeric parameters, the length of the complete value assigned to the parameter is used to determine the width, not the value that would be output. \nThe width is the count of characters, which may be multibyte characters if the MULTIBYTE option is in effect. Note that the screen width of the character is not taken into account; if this is required, use padding with parameter expansion flags ${(ml...)...} as described in ‘Parameter Expansion Flags’ in Parameter Expansion. \nWhen the parameter is expanded, it is filled on the right with blanks or truncated if necessary to fit the field. Note truncation can lead to unexpected results with numeric parameters. Leading zeros are removed if the -Z flag is also set. \n-R [ n ] \nSimilar to -L, except that right justification is used; when the parameter is expanded, the field is left filled with blanks or truncated from the end. May not be combined with the -Z flag. \n-U \nFor arrays (but not for associative arrays), keep only the first occurrence of each duplicated value. This may also be set for tied parameters (see -T) or colon-separated special parameters like PATH or FIGNORE, etc. Note the flag takes effect on assignment, and the type of the variable being assigned to is determinative; for variables with shared values it is therefore recommended to set the flag for all interfaces, e.g. ‘typeset -U PATH path’. \nThis flag has a different meaning when used with -f; see below. \n-Z [ n ] \nSpecially handled if set along with the -L flag. Otherwise, similar to -R, except that leading zeros are used for padding instead of blanks if the first non-blank character is a digit. Numeric parameters are specially handled: they are always eligible for padding with zeroes, and the zeroes are inserted at an appropriate place in the output. \n-a \nThe names refer to array parameters. An array parameter may be created this way, but it may be assigned to in the typeset statement only if the reserved word form of typeset is enabled (as it is by default). When displaying, both normal and associative arrays are shown. \n-f \nThe names refer to functions rather than parameters. No assignments can be made, and the only other valid flags are -t, -T, -k, -u, -U and -z. The flag -t turns on execution tracing for this function; the flag -T does the same, but turns off tracing for any named (not anonymous) function called from the present one, unless that function also has the -t or -T flag. The -u and -U flags cause the function to be marked for autoloading; -U also causes alias expansion to be suppressed when the function is loaded. See the description of the ‘autoload’ builtin for details. \nNote that the builtin functions provides the same basic capabilities as typeset -f but gives access to a few extra options; autoload gives further additional options for the case typeset -fu and typeset -fU. \n-h \nHide: only useful for special parameters (those marked ‘<S>’ in the table in Parameters Set By The Shell), and for local parameters with the same name as a special parameter, though harmless for others. A special parameter with this attribute will not retain its special effect when made local. Thus after ‘typeset -h PATH’, a function containing ‘typeset PATH’ will create an ordinary local parameter without the usual behaviour of PATH. Alternatively, the local parameter may itself be given this attribute; hence inside a function ‘typeset -h PATH’ creates an ordinary local parameter and the special PATH parameter is not altered in any way. It is also possible to create a local parameter using ‘typeset +h special’, where the local copy of special will retain its special properties regardless of having the -h attribute. Global special parameters loaded from shell modules (currently those in zsh/mapfile and zsh/parameter) are automatically given the -h attribute to avoid name clashes. \n-H \nHide value: specifies that typeset will not display the value of the parameter when listing parameters; the display for such parameters is always as if the ‘+’ flag had been given. Use of the parameter is in other respects normal, and the option does not apply if the parameter is specified by name, or by pattern with the -m option. This is on by default for the parameters in the zsh/parameter and zsh/mapfile modules. Note, however, that unlike the -h flag this is also useful for non-special parameters. \n-i [ n ] \nUse an internal integer representation. If n is nonzero it defines the output arithmetic base, otherwise it is determined by the first assignment. Bases from 2 to 36 inclusive are allowed. \n-E [ n ] \nUse an internal double-precision floating point representation. On output the variable will be converted to scientific notation. If n is nonzero it defines the number of significant figures to display; the default is ten. \n-F [ n ] \nUse an internal double-precision floating point representation. On output the variable will be converted to fixed-point decimal notation. If n is nonzero it defines the number of digits to display after the decimal point; the default is ten. \n-l \nConvert the result to lower case whenever the parameter is expanded. The value is not converted when assigned. \n-r \nThe given names are marked readonly. Note that if name is a special parameter, the readonly attribute can be turned on, but cannot then be turned off. \nIf the POSIX_BUILTINS option is set, the readonly attribute is more restrictive: unset variables can be marked readonly and cannot then be set; furthermore, the readonly attribute cannot be removed from any variable. \nIt is still possible to change other attributes of the variable though, some of which like -U or -Z would affect the value. More generally, the readonly attribute should not be relied on as a security mechanism. \nNote that in zsh (like in pdksh but unlike most other shells) it is still possible to create a local variable of the same name as this is considered a different variable (though this variable, too, can be marked readonly). Special variables that have been made readonly retain their value and readonly attribute when made local. \n-t \nTags the named parameters. Tags have no special meaning to the shell. This flag has a different meaning when used with -f; see above. \n-u \nConvert the result to upper case whenever the parameter is expanded. The value is not converted when assigned. This flag has a different meaning when used with -f; see above. \n-x \nMark for automatic export to the environment of subsequently executed commands. If the option GLOBAL_EXPORT is set, this implies the option -g, unless +g is also explicitly given; in other words the parameter is not made local to the enclosing function. This is for compatibility with previous versions of zsh. \nulimit [ -HSa ] [ { -bcdfiklmnpqrsTtvwx | -N resource } [ limit ] ... ] \nSet or display resource limits of the shell and the processes started by the shell. The value of limit can be a number in the unit specified below or one of the values ‘unlimited’, which removes the limit on the resource, or ‘hard’, which uses the current value of the hard limit on the resource. \nBy default, only soft limits are manipulated. If the -H flag is given use hard limits instead of soft limits. If the -S flag is given together with the -H flag set both hard and soft limits. \nIf no options are used, the file size limit (-f) is assumed. \nIf limit is omitted the current value of the specified resources are printed. When more than one resource value is printed, the limit name and unit is printed before each value. \nWhen looping over multiple resources, the shell will abort immediately if it detects a badly formed argument. However, if it fails to set a limit for some other reason it will continue trying to set the remaining limits. \nNot all the following resources are supported on all systems. Running ulimit -a will show which are supported. \n-a \nLists all of the current resource limits. \n-b \nSocket buffer size in bytes (N.B. not kilobytes) \n-c \n512-byte blocks on the size of core dumps. \n-d \nKilobytes on the size of the data segment. \n-f \n512-byte blocks on the size of files written. \n-i \nThe number of pending signals. \n-k \nThe number of kqueues allocated. \n-l \nKilobytes on the size of locked-in memory. \n-m \nKilobytes on the size of physical memory. \n-n \nopen file descriptors. \n-p \nThe number of pseudo-terminals. \n-q \nBytes in POSIX message queues. \n-r \nMaximum real time priority. On some systems where this is not available, such as NetBSD, this has the same effect as -T for compatibility with sh. \n-s \nKilobytes on the size of the stack. \n-T \nThe number of simultaneous threads available to the user. \n-t \nCPU seconds to be used. \n-u \nThe number of processes available to the user. \n-v \nKilobytes on the size of virtual memory. On some systems this refers to the limit called ‘address space’. \n-w \nKilobytes on the size of swapped out memory. \n-x \nThe number of locks on files. \nA resource may also be specified by integer in the form ‘-N resource’, where resource corresponds to the integer defined for the resource by the operating system. This may be used to set the limits for resources known to the shell which do not correspond to option letters. Such limits will be shown by number in the output of ‘ulimit -a’. \nThe number may alternatively be out of the range of limits compiled into the shell. The shell will try to read or write the limit anyway, and will report an error if this fails. \numask [ -S ] [ mask ] \nThe umask is set to mask. mask can be either an octal number or a symbolic value as described in the chmod(1) man page. If mask is omitted, the current value is printed. The -S option causes the mask to be printed as a symbolic value. Otherwise, the mask is printed as an octal number. Note that in the symbolic form the permissions you specify are those which are to be allowed (not denied) to the users specified. \nunalias [ -ams ] name ... \nRemoves aliases. This command works the same as unhash -a, except that the -a option removes all regular or global aliases, or with -s all suffix aliases: in this case no name arguments may appear. The options -m (remove by pattern) and -s without -a (remove listed suffix aliases) behave as for unhash -a. Note that the meaning of -a is different between unalias and unhash. \nunfunction \nSame as unhash -f. \nunhash [ -adfms ] name ... \nRemove the element named name from an internal hash table. The default is remove elements from the command hash table. The -a option causes unhash to remove regular or global aliases; note when removing a global aliases that the argument must be quoted to prevent it from being expanded before being passed to the command. The -s option causes unhash to remove suffix aliases. The -f option causes unhash to remove shell functions. The -d options causes unhash to remove named directories. If the -m flag is given the arguments are taken as patterns (should be quoted) and all elements of the corresponding hash table with matching names will be removed. \nunlimit [ -hs ] resource ... \nThe resource limit for each resource is set to the hard limit. If the -h flag is given and the shell has appropriate privileges, the hard resource limit for each resource is removed. The resources of the shell process are only changed if the -s flag is given. \nThe unlimit command is not made available by default when the shell starts in a mode emulating another shell. It can be made available with the command ‘zmodload -F zsh/rlimits b:unlimit’. \nunset [ -fmv ] name ... \nEach named parameter is unset. Local parameters remain local even if unset; they appear unset within scope, but the previous value will still reappear when the scope ends. \nIndividual elements of associative array parameters may be unset by using subscript syntax on name, which should be quoted (or the entire command prefixed with noglob) to protect the subscript from filename generation. \nIf the -m flag is specified the arguments are taken as patterns (should be quoted) and all parameters with matching names are unset. Note that this cannot be used when unsetting associative array elements, as the subscript will be treated as part of the pattern. \nThe -v flag specifies that name refers to parameters. This is the default behaviour. \nunset -f is equivalent to unfunction. \nunsetopt [ {+|-}options | {+|-}o option_name ] [ name ... ] \nUnset the options for the shell. All options specified either with flags or by name are unset. If no arguments are supplied, the names of all options currently unset are printed. If the -m flag is given the arguments are taken as patterns (which should be quoted to preserve them from being interpreted as glob patterns), and all options with names matching these patterns are unset. \nvared \nSee Zle Builtins. \nwait [ job ... ] \nWait for the specified jobs or processes. If job is not given then all currently active child processes are waited for. Each job can be either a job specification or the process ID of a job in the job table. The exit status from this command is that of the job waited for. If job represents an unknown job or process ID, a warning is printed (unless the POSIX_BUILTINS option is set) and the exit status is 127. \nIt is possible to wait for recent processes (specified by process ID, not by job) that were running in the background even if the process has exited. Typically the process ID will be recorded by capturing the value of the variable $! immediately after the process has been started. There is a limit on the number of process IDs remembered by the shell; this is given by the value of the system configuration parameter CHILD_MAX. When this limit is reached, older process IDs are discarded, least recently started processes first. \nNote there is no protection against the process ID wrapping, i.e. if the wait is not executed soon enough there is a chance the process waited for is the wrong one. A conflict implies both process IDs have been generated by the shell, as other processes are not recorded, and that the user is potentially interested in both, so this problem is intrinsic to process IDs. \nwhence [ -vcwfpamsS ] [ -x num ] name ... \nFor each name, indicate how it would be interpreted if used as a command name. \nIf name is not an alias, built-in command, external command, shell function, hashed command, or a reserved word, the exit status shall be non-zero, and — if -v, -c, or -w was passed — a message will be written to standard output. (This is different from other shells that write that message to standard error.) \nwhence is most useful when name is only the last path component of a command, i.e. does not include a ‘/’; in particular, pattern matching only succeeds if just the non-directory component of the command is passed. \n-v \nProduce a more verbose report. \n-c \nPrint the results in a csh-like format. This takes precedence over -v. \n-w \nFor each name, print ‘name: word’ where word is one of alias, builtin, command, function, hashed, reserved or none, according as name corresponds to an alias, a built-in command, an external command, a shell function, a command defined with the hash builtin, a reserved word, or is not recognised. This takes precedence over -v and -c. \n-f \nCauses the contents of a shell function to be displayed, which would otherwise not happen unless the -c flag were used. \n-p \nDo a path search for name even if it is an alias, reserved word, shell function or builtin. \n-a \nDo a search for all occurrences of name throughout the command path. Normally only the first occurrence is printed. \n-m \nThe arguments are taken as patterns (pattern characters should be quoted), and the information is displayed for each command matching one of these patterns. \n-s \nIf a pathname contains symlinks, print the symlink-free pathname as well. \n-S \nAs -s, but if the pathname had to be resolved by following multiple symlinks, the intermediate steps are printed, too. The symlink resolved at each step might be anywhere in the path. \n-x num \nExpand tabs when outputting shell functions using the -c option. This has the same effect as the -x option to the functions builtin. \nwhere [ -wpmsS ] [ -x num ] name ... \nEquivalent to whence -ca. \nwhich [ -wpamsS ] [ -x num ] name ... \nEquivalent to whence -c. \nzcompile [ -U ] [ -z | -k ] [ -R | -M ] file [ name ... ] zcompile -ca [ -m ] [ -R | -M ] file [ name ... ] zcompile -t file [ name ... ] \nThis builtin command can be used to compile functions or scripts, storing the compiled form in a file, and to examine files containing the compiled form. This allows faster autoloading of functions and sourcing of scripts by avoiding parsing of the text when the files are read. \nThe first form (without the -c, -a or -t options) creates a compiled file. If only the file argument is given, the output file has the name ‘file.zwc’ and will be placed in the same directory as the file. The shell will load the compiled file instead of the normal function file when the function is autoloaded; see Functions for a description of how autoloaded functions are searched. The extension .zwc stands for ‘zsh word code’. \nIf there is at least one name argument, all the named files are compiled into the output file given as the first argument. If file does not end in .zwc, this extension is automatically appended. Files containing multiple compiled functions are called ‘digest’ files, and are intended to be used as elements of the FPATH/fpath special array. \nThe second form, with the -c or -a options, writes the compiled definitions for all the named functions into file. For -c, the names must be functions currently defined in the shell, not those marked for autoloading. Undefined functions that are marked for autoloading may be written by using the -a option, in which case the fpath is searched and the contents of the definition files for those functions, if found, are compiled into file. If both -c and -a are given, names of both defined functions and functions marked for autoloading may be given. In either case, the functions in files written with the -c or -a option will be autoloaded as if the KSH_AUTOLOAD option were unset. \nThe reason for handling loaded and not-yet-loaded functions with different options is that some definition files for autoloading define multiple functions, including the function with the same name as the file, and, at the end, call that function. In such cases the output of ‘zcompile -c’ does not include the additional functions defined in the file, and any other initialization code in the file is lost. Using ‘zcompile -a’ captures all this extra information. \nIf the -m option is combined with -c or -a, the names are used as patterns and all functions whose names match one of these patterns will be written. If no name is given, the definitions of all functions currently defined or marked as autoloaded will be written. \nNote the second form cannot be used for compiling functions that include redirections as part of the definition rather than within the body of the function; for example \nfn1() { { ... } >~/logfile }\ncan be compiled but \ncannot. It is possible to use the first form of zcompile to compile autoloadable functions that include the full function definition instead of just the body of the function. \nThe third form, with the -t option, examines an existing compiled file. Without further arguments, the names of the original files compiled into it are listed. The first line of output shows the version of the shell which compiled the file and how the file will be used (i.e. by reading it directly or by mapping it into memory). With arguments, nothing is output and the return status is set to zero if definitions for all names were found in the compiled file, and non-zero if the definition for at least one name was not found. \nOther options: \n-U \nAliases are not expanded when compiling the named files. \n-R \nWhen the compiled file is read, its contents are copied into the shell’s memory, rather than memory-mapped (see -M). This happens automatically on systems that do not support memory mapping. \nWhen compiling scripts instead of autoloadable functions, it is often desirable to use this option; otherwise the whole file, including the code to define functions which have already been defined, will remain mapped, consequently wasting memory. \n-M \nThe compiled file is mapped into the shell’s memory when read. This is done in such a way that multiple instances of the shell running on the same host will share this mapped file. If neither -R nor -M is given, the zcompile builtin decides what to do based on the size of the compiled file. \n-k -z \nThese options are used when the compiled file contains functions which are to be autoloaded. If -z is given, the function will be autoloaded as if the KSH_AUTOLOAD option is not set, even if it is set at the time the compiled file is read, while if the -k is given, the function will be loaded as if KSH_AUTOLOAD is set. These options also take precedence over any -k or -z options specified to the autoload builtin. If neither of these options is given, the function will be loaded as determined by the setting of the KSH_AUTOLOAD option at the time the compiled file is read. \nThese options may also appear as many times as necessary between the listed names to specify the loading style of all following functions, up to the next -k or -z. \nThe created file always contains two versions of the compiled format, one for big-endian machines and one for small-endian machines. The upshot of this is that the compiled file is machine independent and if it is read or mapped, only one half of the file is actually used (and mapped). \nzformat \nSee The zsh/zutil Module. \nzftp \nSee The zsh/zftp Module. \nzle \nSee Zle Builtins. \nzmodload [ -dL ] [ -s ] [ ... ] zmodload -F [ -alLme -P param ] module [ [+-]feature ... ] zmodload -e [ -A ] [ ... ] zmodload [ -a [ -bcpf [ -I ] ] ] [ -iL ] ... zmodload -u [ -abcdpf [ -I ] ] [ -iL ] ... zmodload -A [ -L ] [ modalias[=module] ... ] zmodload -R modalias ... \nPerforms operations relating to zsh’s loadable modules. Loading of modules while the shell is running (‘dynamical loading’) is not available on all operating systems, or on all installations on a particular operating system, although the zmodload command itself is always available and can be used to manipulate modules built into versions of the shell executable without dynamical loading. \nWithout arguments the names of all currently loaded binary modules are printed. The -L option causes this list to be in the form of a series of zmodload commands. Forms with arguments are: \nzmodload [ -is ] name ... zmodload -u [ -i ] name ... \nIn the simplest case, zmodload loads a binary module. The module must be in a file with a name consisting of the specified name followed by a standard suffix, usually ‘.so’ (‘.sl’ on HPUX). If the module to be loaded is already loaded the duplicate module is ignored. If zmodload detects an inconsistency, such as an invalid module name or circular dependency list, the current code block is aborted. If it is available, the module is loaded if necessary, while if it is not available, non-zero status is silently returned. The option -i is accepted for compatibility but has no effect. \nThe named module is searched for in the same way a command is, using $module_path instead of $path. However, the path search is performed even when the module name contains a ‘/’, which it usually does. There is no way to prevent the path search. \nIf the module supports features (see below), zmodload tries to enable all features when loading a module. If the module was successfully loaded but not all features could be enabled, zmodload returns status 2. \nIf the option -s is given, no error is printed if the module was not available (though other errors indicating a problem with the module are printed). The return status indicates if the module was loaded. This is appropriate if the caller considers the module optional. \nWith -u, zmodload unloads modules. The same name must be given that was given when the module was loaded, but it is not necessary for the module to exist in the file system. The -i option suppresses the error if the module is already unloaded (or was never loaded). \nEach module has a boot and a cleanup function. The module will not be loaded if its boot function fails. Similarly a module can only be unloaded if its cleanup function runs successfully. \nzmodload -F [ -almLe -P param ] module [ [+-]feature ... ] \nzmodload -F allows more selective control over the features provided by modules. With no options apart from -F, the module named module is loaded, if it was not already loaded, and the list of features is set to the required state. If no features are specified, the module is loaded, if it was not already loaded, but the state of features is unchanged. Each feature may be preceded by a + to turn the feature on, or - to turn it off; the + is assumed if neither character is present. Any feature not explicitly mentioned is left in its current state; if the module was not previously loaded this means any such features will remain disabled. The return status is zero if all features were set, 1 if the module failed to load, and 2 if some features could not be set (for example, a parameter couldn’t be added because there was a different parameter of the same name) but the module was loaded. \nThe standard features are builtins, conditions, parameters and math functions; these are indicated by the prefix ‘b:’, ‘c:’ (‘C:’ for an infix condition), ‘p:’ and ‘f:’, respectively, followed by the name that the corresponding feature would have in the shell. For example, ‘b:strftime’ indicates a builtin named strftime and p:EPOCHSECONDS indicates a parameter named EPOCHSECONDS. The module may provide other (‘abstract’) features of its own as indicated by its documentation; these have no prefix. \nWith -l or -L, features provided by the module are listed. With -l alone, a list of features together with their states is shown, one feature per line. With -L alone, a zmodload -F command that would cause enabled features of the module to be turned on is shown. With -lL, a zmodload -F command that would cause all the features to be set to their current state is shown. If one of these combinations is given with the option -P param then the parameter param is set to an array of features, either features together with their state or (if -L alone is given) enabled features. \nWith the option -L the module name may be omitted; then a list of all enabled features for all modules providing features is printed in the form of zmodload -F commands. If -l is also given, the state of both enabled and disabled features is output in that form. \nA set of features may be provided together with -l or -L and a module name; in that case only the state of those features is considered. Each feature may be preceded by + or - but the character has no effect. If no set of features is provided, all features are considered. \nWith -e, the command first tests that the module is loaded; if it is not, status 1 is returned. If the module is loaded, the list of features given as an argument is examined. Any feature given with no prefix is simply tested to see if the module provides it; any feature given with a prefix + or - is tested to see if is provided and in the given state. If the tests on all features in the list succeed, status 0 is returned, else status 1. \nWith -m, each entry in the given list of features is taken as a pattern to be matched against the list of features provided by the module. An initial + or - must be given explicitly. This may not be combined with the -a option as autoloads must be specified explicitly. \nWith -a, the given list of features is marked for autoload from the specified module, which may not yet be loaded. An optional + may appear before the feature name. If the feature is prefixed with -, any existing autoload is removed. The options -l and -L may be used to list autoloads. Autoloading is specific to individual features; when the module is loaded only the requested feature is enabled. Autoload requests are preserved if the module is subsequently unloaded until an explicit ‘zmodload -Fa module -feature’ is issued. It is not an error to request an autoload for a feature of a module that is already loaded. \nWhen the module is loaded each autoload is checked against the features actually provided by the module; if the feature is not provided the autoload request is deleted. A warning message is output; if the module is being loaded to provide a different feature, and that autoload is successful, there is no effect on the status of the current command. If the module is already loaded at the time when zmodload -Fa is run, an error message is printed and status 1 returned. \nzmodload -Fa can be used with the -l, -L, -e and -P options for listing and testing the existence of autoloadable features. In this case -l is ignored if -L is specified. zmodload -FaL with no module name lists autoloads for all modules. \nNote that only standard features as described above can be autoloaded; other features require the module to be loaded before enabling. \nzmodload -d [ -L ] [ name ] zmodload -d name dep ... zmodload -ud name [ dep ... ] \nThe -d option can be used to specify module dependencies. The modules named in the second and subsequent arguments will be loaded before the module named in the first argument. \nWith -d and one argument, all dependencies for that module are listed. With -d and no arguments, all module dependencies are listed. This listing is by default in a Makefile-like format. The -L option changes this format to a list of zmodload -d commands. \nIf -d and -u are both used, dependencies are removed. If only one argument is given, all dependencies for that module are removed. \nzmodload -ab [ -L ] zmodload -ab [ -i ] name [ builtin ... ] zmodload -ub [ -i ] builtin ... \nThe -ab option defines autoloaded builtins. It defines the specified builtins. When any of those builtins is called, the module specified in the first argument is loaded and all its features are enabled (for selective control of features use ‘zmodload -F -a’ as described above). If only the name is given, one builtin is defined, with the same name as the module. -i suppresses the error if the builtin is already defined or autoloaded, but not if another builtin of the same name is already defined. \nWith -ab and no arguments, all autoloaded builtins are listed, with the module name (if different) shown in parentheses after the builtin name. The -L option changes this format to a list of zmodload -a commands. \nIf -b is used together with the -u option, it removes builtins previously defined with -ab. This is only possible if the builtin is not yet loaded. -i suppresses the error if the builtin is already removed (or never existed). \nAutoload requests are retained if the module is subsequently unloaded until an explicit ‘zmodload -ub builtin’ is issued. \nzmodload -ac [ -IL ] zmodload -ac [ -iI ] name [ cond ... ] zmodload -uc [ -iI ] cond ... \nThe -ac option is used to define autoloaded condition codes. The cond strings give the names of the conditions defined by the module. The optional -I option is used to define infix condition names. Without this option prefix condition names are defined. \nIf given no condition names, all defined names are listed (as a series of zmodload commands if the -L option is given). \nThe -uc option removes definitions for autoloaded conditions. \nzmodload -ap [ -L ] zmodload -ap [ -i ] name [ parameter ... ] zmodload -up [ -i ] parameter ... \nThe -p option is like the -b and -c options, but makes zmodload work on autoloaded parameters instead. \nzmodload -af [ -L ] zmodload -af [ -i ] name [ function ... ] zmodload -uf [ -i ] function ... \nThe -f option is like the -b, -p, and -c options, but makes zmodload work on autoloaded math functions instead. \nzmodload -a [ -L ] zmodload -a [ -i ] name [ builtin ... ] zmodload -ua [ -i ] builtin ... \nEquivalent to -ab and -ub. \nzmodload -e [ -A ] [ string ... ] \nThe -e option without arguments lists all loaded modules; if the -A option is also given, module aliases corresponding to loaded modules are also shown. If arguments are provided, nothing is printed; the return status is set to zero if all strings given as arguments are names of loaded modules and to one if at least on string is not the name of a loaded module. This can be used to test for the availability of things implemented by modules. In this case, any aliases are automatically resolved and the -A flag is not used. \nzmodload -A [ -L ] [ modalias[=module] ... ] \nFor each argument, if both modalias and module are given, define modalias to be an alias for the module module. If the module modalias is ever subsequently requested, either via a call to zmodload or implicitly, the shell will attempt to load module instead. If module is not given, show the definition of modalias. If no arguments are given, list all defined module aliases. When listing, if the -L flag was also given, list the definition as a zmodload command to recreate the alias. \nThe existence of aliases for modules is completely independent of whether the name resolved is actually loaded as a module: while the alias exists, loading and unloading the module under any alias has exactly the same effect as using the resolved name, and does not affect the connection between the alias and the resolved name which can be removed either by zmodload -R or by redefining the alias. Chains of aliases (i.e. where the first resolved name is itself an alias) are valid so long as these are not circular. As the aliases take the same format as module names, they may include path separators: in this case, there is no requirement for any part of the path named to exist as the alias will be resolved first. For example, ‘any/old/alias’ is always a valid alias. \nDependencies added to aliased modules are actually added to the resolved module; these remain if the alias is removed. It is valid to create an alias whose name is one of the standard shell modules and which resolves to a different module. However, if a module has dependencies, it will not be possible to use the module name as an alias as the module will already be marked as a loadable module in its own right. \nApart from the above, aliases can be used in the zmodload command anywhere module names are required. However, aliases will not be shown in lists of loaded modules with a bare ‘zmodload’. \nzmodload -R modalias ... \nFor each modalias argument that was previously defined as a module alias via zmodload -A, delete the alias. If any was not defined, an error is caused and the remainder of the line is ignored. \nNote that zsh makes no distinction between modules that were linked into the shell and modules that are loaded dynamically. In both cases this builtin command has to be used to make available the builtins and other things defined by modules (unless the module is autoloaded on these definitions). This is true even for systems that don’t support dynamic loading of modules. \nzparseopts \nSee The zsh/zutil Module. \nzprof \nSee The zsh/zprof Module. \nzpty \nSee The zsh/zpty Module. \nzregexparse \nSee The zsh/zutil Module. \nzsocket \nSee The zsh/net/socket Module. \nzstyle \nSee The zsh/zutil Module. \nztcp \nSee The zsh/net/tcp Module. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Builtin-Commands-html-Shell-Builtin-Commands-wg3vd.html",
  "markdown": "# zsh: 17 Shell Builtin Commands\n\nSome shell builtin commands take options as described in individual entries; these are often referred to in the list below as ‘flags’ to avoid confusion with shell options, which may also have an effect on the behaviour of builtin commands. In this introductory section, ‘option’ always has the meaning of an option to a command that should be familiar to most command line users.\n\nTypically, options are single letters preceded by a hyphen (\\-). Options that take an argument accept it either immediately following the option letter or after white space, for example ‘print -C3 {1..9}’ or ‘print -C 3 {1..9}’ are equivalent. Arguments to options are not the same as arguments to the command; the documentation indicates which is which. Options that do not take an argument may be combined in a single word, for example ‘print -rca – \\*’ and ‘print -r -c -a – \\*’ are equivalent.\n\nSome shell builtin commands also take options that begin with ‘+’ instead of ‘\\-’. The list below makes clear which commands these are.\n\nOptions (together with their individual arguments, if any) must appear in a group before any non-option arguments; once the first non-option argument has been found, option processing is terminated.\n\nAll builtin commands other than ‘echo’ and precommand modifiers, even those that have no options, can be given the argument ‘\\-\\-’ to terminate option processing. This indicates that the following words are non-option arguments, but is otherwise ignored. This is useful in cases where arguments to the command may begin with ‘\\-’. For historical reasons, most builtin commands (including ‘echo’) also recognize a single ‘\\-’ in a separate word for this purpose; note that this is less standard and use of ‘\\-\\-’ is recommended.\n\n\\- simple command\n\nSee [Precommand Modifiers](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Precommand-Modifiers).\n\n. file \\[ arg ... \\]\n\nRead commands from file and execute them in the current shell environment.\n\nIf file does not contain a slash, or if PATH\\_DIRS is set, the shell looks in the components of $path to find the directory containing file. Files in the current directory are not read unless ‘.’ appears somewhere in $path. If a file named ‘file.zwc’ is found, is newer than file, and is the compiled form (created with the zcompile builtin) of file, then commands are read from that file instead of file.\n\nIf any arguments arg are given, they become the positional parameters; the old positional parameters are restored when the file is done executing. However, if no arguments are given, the positional parameters remain those of the calling context, and no restoring is done.\n\nIf file was not found the return status is 127; if file was found but contained a syntax error the return status is 126; else the return status is the exit status of the last command executed.\n\n: \\[ arg ... \\]\n\nThis command does nothing, although normal argument expansions is performed which may have effects on shell parameters. A zero exit status is returned.\n\nalias \\[ {+|\\-}gmrsL \\] \\[ name\\[\\=value\\] ... \\]\n\nFor each name with a corresponding value, define an alias with that value. A trailing space in value causes the next word to be checked for alias expansion. If the \\-g flag is present, define a global alias; global aliases are expanded even if they do not occur in command position:\n\n% perldoc --help 2>&1 | grep 'built-in functions'\n    -f   Search Perl built-in functions\n% alias -g HG='--help 2>&1 | grep'\n% perldoc HG 'built-in functions'\n    -f   Search Perl built-in functions\n\nIf the \\-s flag is present, define a suffix alias: if the command word on a command line is in the form ‘text.name’, where text is any non-empty string, it is replaced by the text ‘value text.name’. Note that name is treated as a literal string, not a pattern. A trailing space in value is not special in this case. For example,\n\nwill cause the command ‘\\*.ps’ to be expanded to ‘gv – \\*.ps’. As alias expansion is carried out earlier than globbing, the ‘\\*.ps’ will then be expanded. Suffix aliases constitute a different name space from other aliases (so in the above example it is still possible to create an alias for the command ps) and the two sets are never listed together.\n\nFor each name with no value, print the value of name, if any. With no arguments, print all currently defined aliases other than suffix aliases. If the \\-m flag is given the arguments are taken as patterns (they should be quoted to preserve them from being interpreted as glob patterns), and the aliases matching these patterns are printed. When printing aliases and one of the \\-g, \\-r or \\-s flags is present, restrict the printing to global, regular or suffix aliases, respectively; a regular alias is one which is neither a global nor a suffix alias. Using ‘+’ instead of ‘\\-’, or ending the option list with a single ‘+’, prevents the values of the aliases from being printed.\n\nIf the \\-L flag is present, then print each alias in a manner suitable for putting in a startup script. The exit status is nonzero if a name (with no value) is given for which no alias has been defined.\n\nFor more on aliases, include common problems, see [Aliasing](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Aliasing).\n\nautoload \\[ {+|\\-}RTUXdkmrtWz \\] \\[ \\-w \\] \\[ name ... \\]\n\nSee the section ‘Autoloading Functions’ in [Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions) for full details. The fpath parameter will be searched to find the function definition when the function is first referenced.\n\nIf name consists of an absolute path, the function is defined to load from the file given (searching as usual for dump files in the given location). The name of the function is the basename (non-directory part) of the file. It is normally an error if the function is not found in the given location; however, if the option \\-d is given, searching for the function defaults to $fpath. If a function is loaded by absolute path, any functions loaded from it that are marked for autoload without an absolute path have the load path of the parent function temporarily prepended to $fpath.\n\nIf the option \\-r or \\-R is given, the function is searched for immediately and the location is recorded internally for use when the function is executed; a relative path is expanded using the value of $PWD. This protects against a change to $fpath after the call to autoload. With \\-r, if the function is not found, it is silently left unresolved until execution; with \\-R, an error message is printed and command processing aborted immediately the search fails, i.e. at the autoload command rather than at function execution..\n\nThe flag \\-X may be used only inside a shell function. It causes the calling function to be marked for autoloading and then immediately loaded and executed, with the current array of positional parameters as arguments. This replaces the previous definition of the function. If no function definition is found, an error is printed and the function remains undefined and marked for autoloading. If an argument is given, it is used as a directory (i.e. it does not include the name of the function) in which the function is to be found; this may be combined with the \\-d option to allow the function search to default to $fpath if it is not in the given location.\n\nThe flag +X attempts to load each name as an autoloaded function, but does _not_ execute it. The exit status is zero (success) if the function was not previously defined _and_ a definition for it was found. This does _not_ replace any existing definition of the function. The exit status is nonzero (failure) if the function was already defined or when no definition was found. In the latter case the function remains undefined and marked for autoloading. If ksh-style autoloading is enabled, the function created will contain the contents of the file plus a call to the function itself appended to it, thus giving normal ksh autoloading behaviour on the first call to the function. If the \\-m flag is also given each name is treated as a pattern and all functions already marked for autoload that match the pattern are loaded.\n\nWith the \\-t flag, turn on execution tracing; with \\-T, turn on execution tracing only for the current function, turning it off on entry to any called functions that do not also have tracing enabled.\n\nWith the \\-U flag, alias expansion is suppressed when the function is loaded.\n\nWith the \\-w flag, the names are taken as names of files compiled with the zcompile builtin, and all functions defined in them are marked for autoloading.\n\nThe flags \\-z and \\-k mark the function to be autoloaded using the zsh or ksh style, as if the option KSH\\_AUTOLOAD were unset or were set, respectively. The flags override the setting of the option at the time the function is loaded.\n\nNote that the autoload command makes no attempt to ensure the shell options set during the loading or execution of the file have any particular value. For this, the emulate command can be used:\n\nemulate zsh -c 'autoload -Uz func'\n\narranges that when func is loaded the shell is in native zsh emulation, and this emulation is also applied when func is run.\n\nSome of the functions of autoload are also provided by functions -u or functions -U, but autoload is a more comprehensive interface.\n\nbg \\[ job ... \\]\n\njob ... &\n\nPut each specified job in the background, or the current job if none is specified.\n\nbindkey\n\nSee [Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins).\n\nbreak \\[ n \\]\n\nExit from an enclosing for, while, until, select or repeat loop. If an arithmetic expression n is specified, then break n levels instead of just one.\n\nbuiltin name \\[ args ... \\]\n\nExecutes the builtin name, with the given args.\n\nbye\n\nSame as exit.\n\ncap\n\nSee [The zsh/cap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcap-Module).\n\ncd \\[ \\-qsLP \\] \\[ arg \\]\n\ncd \\[ \\-qsLP \\] old new\n\ncd \\[ \\-qsLP \\] {+|\\-}n\n\nChange the current directory. In the first form, change the current directory to arg, or to the value of $HOME if arg is not specified. If arg is ‘\\-’, change to the previous directory.\n\nOtherwise, if arg begins with a slash, attempt to change to the directory given by arg.\n\nIf arg does not begin with a slash, the behaviour depends on whether the current directory ‘.’ occurs in the list of directories contained in the shell parameter cdpath. If it does not, first attempt to change to the directory arg under the current directory, and if that fails but cdpath is set and contains at least one element attempt to change to the directory arg under each component of cdpath in turn until successful. If ‘.’ occurs in cdpath, then cdpath is searched strictly in order so that ‘.’ is only tried at the appropriate point.\n\nThe order of testing cdpath is modified if the option POSIX\\_CD is set, as described in the documentation for the option.\n\nIf no directory is found, the option CDABLE\\_VARS is set, and a parameter named arg exists whose value begins with a slash, treat its value as the directory. In that case, the parameter is added to the named directory hash table.\n\nThe second form of cd substitutes the string new for the string old in the name of the current directory, and tries to change to this new directory.\n\nThe third form of cd extracts an entry from the directory stack, and changes to that directory. An argument of the form ‘+n’ identifies a stack entry by counting from the left of the list shown by the dirs command, starting with zero. An argument of the form ‘\\-n’ counts from the right. If the PUSHD\\_MINUS option is set, the meanings of ‘+’ and ‘\\-’ in this context are swapped. If the POSIX\\_CD option is set, this form of cd is not recognised and will be interpreted as the first form.\n\nIf the \\-q (quiet) option is specified, the hook function chpwd and the functions in the array chpwd\\_functions are not called. This is useful for calls to cd that do not change the environment seen by an interactive user.\n\nIf the \\-s option is specified, cd refuses to change the current directory if the given pathname contains symlinks. If the \\-P option is given or the CHASE\\_LINKS option is set, symbolic links are resolved to their true values. If the \\-L option is given symbolic links are retained in the directory (and not resolved) regardless of the state of the CHASE\\_LINKS option.\n\nchdir\n\nSame as cd.\n\nclone\n\nSee [The zsh/clone Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fclone-Module).\n\ncommand \\[ \\-pvV \\] simple command\n\nThe simple command argument is taken as an external command instead of a function or builtin and is executed. If the POSIX\\_BUILTINS option is set, builtins will also be executed but certain special properties of them are suppressed. The \\-p flag causes a default path to be searched instead of that in $path. With the \\-v flag, command is similar to whence and with \\-V, it is equivalent to whence -v.\n\nSee also [Precommand Modifiers](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Precommand-Modifiers).\n\ncomparguments\n\nSee [The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module).\n\ncompcall\n\nSee [The zsh/compctl Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcompctl-Module).\n\ncompctl\n\nSee [The zsh/compctl Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcompctl-Module).\n\ncompdescribe\n\nSee [The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module).\n\ncompfiles\n\nSee [The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module).\n\ncompgroups\n\nSee [The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module).\n\ncompquote\n\nSee [The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module).\n\ncomptags\n\nSee [The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module).\n\ncomptry\n\nSee [The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module).\n\ncompvalues\n\nSee [The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module).\n\ncontinue \\[ n \\]\n\nResume the next iteration of the enclosing for, while, until, select or repeat loop. If an arithmetic expression n is specified, break out of n\\-1 loops and resume at the nth enclosing loop.\n\ndeclare\n\nSame as typeset.\n\ndirs \\[ \\-c \\] \\[ arg ... \\]\n\ndirs \\[ \\-lpv \\]\n\nWith no arguments, print the contents of the directory stack. Directories are added to this stack with the pushd command, and removed with the cd or popd commands. If arguments are specified, load them onto the directory stack, replacing anything that was there, and push the current directory onto the stack.\n\n\\-c\n\nclear the directory stack.\n\n\\-l\n\nprint directory names in full instead of using of using ~ expressions ([Filename Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Expansion)).\n\n\\-p\n\nprint directory entries one per line.\n\n\\-v\n\nnumber the directories in the stack when printing.\n\ndisable \\[ \\-afmprs \\] name ...\n\nTemporarily disable the named hash table elements or patterns. The default is to disable builtin commands. This allows you to use an external command with the same name as a builtin command. The \\-a option causes disable to act on regular or global aliases. The \\-s option causes disable to act on suffix aliases. The \\-f option causes disable to act on shell functions. The \\-r options causes disable to act on reserved words. Without arguments all disabled hash table elements from the corresponding hash table are printed. With the \\-m flag the arguments are taken as patterns (which should be quoted to prevent them from undergoing filename expansion), and all hash table elements from the corresponding hash table matching these patterns are disabled. Disabled objects can be enabled with the enable command.\n\nWith the option \\-p, name ... refer to elements of the shell’s pattern syntax as described in [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation). Certain elements can be disabled separately, as given below.\n\nNote that patterns not allowed by the current settings for the options EXTENDED\\_GLOB, KSH\\_GLOB and SH\\_GLOB are never enabled, regardless of the setting here. For example, if EXTENDED\\_GLOB is not active, the pattern ^ is ineffective even if ‘disable -p \"^\"’ has not been issued. The list below indicates any option settings that restrict the use of the pattern. It should be noted that setting SH\\_GLOB has a wider effect than merely disabling patterns as certain expressions, in particular those involving parentheses, are parsed differently.\n\nThe following patterns may be disabled; all the strings need quoting on the command line to prevent them from being interpreted immediately as patterns and the patterns are shown below in single quotes as a reminder.\n\n’?’\n\nThe pattern character ? wherever it occurs, including when preceding a parenthesis with KSH\\_GLOB.\n\n’\\*’\n\nThe pattern character \\* wherever it occurs, including recursive globbing and when preceding a parenthesis with KSH\\_GLOB.\n\n’\\[’\n\nCharacter classes.\n\n’<’ (NO\\_SH\\_GLOB)\n\nNumeric ranges.\n\n’|’ (NO\\_SH\\_GLOB)\n\nAlternation in grouped patterns, case statements, or KSH\\_GLOB parenthesised expressions.\n\n’(’ (NO\\_SH\\_GLOB)\n\nGrouping using single parentheses. Disabling this does not disable the use of parentheses for KSH\\_GLOB where they are introduced by a special character, nor for glob qualifiers (use ‘setopt NO\\_BARE\\_GLOB\\_QUAL’ to disable glob qualifiers that use parentheses only).\n\n’~’ (EXTENDED\\_GLOB)\n\nExclusion in the form A~B.\n\n’^’ (EXTENDED\\_GLOB)\n\nExclusion in the form A^B.\n\n’#’ (EXTENDED\\_GLOB)\n\nThe pattern character # wherever it occurs, both for repetition of a previous pattern and for indicating globbing flags.\n\n’?(’ (KSH\\_GLOB)\n\nThe grouping form ?(...). Note this is also disabled if ’?’ is disabled.\n\n’\\*(’ (KSH\\_GLOB)\n\nThe grouping form \\*(...). Note this is also disabled if ’\\*’ is disabled.\n\n’+(’ (KSH\\_GLOB)\n\nThe grouping form +(...).\n\n’!(’ (KSH\\_GLOB)\n\nThe grouping form !(...).\n\n’@(’ (KSH\\_GLOB)\n\nThe grouping form @(...).\n\ndisown \\[ job ... \\]\n\njob ... &|\n\njob ... &!\n\nRemove the specified jobs from the job table; the shell will no longer report their status, and will not complain if you try to exit an interactive shell with them running or stopped. If no job is specified, disown the current job.\n\nIf the jobs are currently stopped and the AUTO\\_CONTINUE option is not set, a warning is printed containing information about how to make them running after they have been disowned. If one of the latter two forms is used, the jobs will automatically be made running, independent of the setting of the AUTO\\_CONTINUE option.\n\necho \\[ \\-neE \\] \\[ arg ... \\]\n\nWrite each arg on the standard output, with a space separating each one. If the \\-n flag is not present, print a newline at the end. echo recognizes the following escape sequences:\n\n\\\\a\n\nbell character\n\n\\\\b\n\nbackspace\n\n\\\\c\n\nsuppress subsequent characters and final newline\n\n\\\\e\n\nescape\n\n\\\\f\n\nform feed\n\n\\\\n\n\nlinefeed (newline)\n\n\\\\r\n\ncarriage return\n\n\\\\t\n\nhorizontal tab\n\n\\\\v\n\nvertical tab\n\n\\\\\\\\\n\nbackslash\n\n\\\\0NNN\n\ncharacter code in octal\n\n\\\\xNN\n\ncharacter code in hexadecimal\n\n\\\\uNNNN\n\nunicode character code in hexadecimal\n\n\\\\UNNNNNNNN\n\nunicode character code in hexadecimal\n\nThe \\-E flag, or the BSD\\_ECHO option, can be used to disable these escape sequences. In the latter case, \\-e flag can be used to enable them.\n\nNote that for standards compliance a double dash does not terminate option processing; instead, it is printed directly. However, a single dash does terminate option processing, so the first dash, possibly following options, is not printed, but everything following it is printed as an argument. The single dash behaviour is different from other shells. For a more portable way of printing text, see printf, and for a more controllable way of printing text within zsh, see print.\n\nechotc\n\nSee [The zsh/termcap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ftermcap-Module).\n\nechoti\n\nSee [The zsh/terminfo Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fterminfo-Module).\n\nemulate \\[ \\-lLR \\] \\[ {zsh|sh|ksh|csh} \\[ flags ... \\] \\]\n\nWithout any argument print current emulation mode.\n\nWith single argument set up zsh options to emulate the specified shell as much as possible. csh will never be fully emulated. If the argument is not one of the shells listed above, zsh will be used as a default; more precisely, the tests performed on the argument are the same as those used to determine the emulation at startup based on the shell name, see [Compatibility](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Compatibility) . In addition to setting shell options, the command also restores the pristine state of pattern enables, as if all patterns had been enabled using enable -p.\n\nIf the emulate command occurs inside a function that has been marked for execution tracing with functions -t then the xtrace option will be turned on regardless of emulation mode or other options. Note that code executed inside the function by the ., source, or eval commands is not considered to be running directly from the function, hence does not provoke this behaviour.\n\nIf the \\-R switch is given, all settable options are reset to their default value corresponding to the specified emulation mode, except for certain options describing the interactive environment; otherwise, only those options likely to cause portability problems in scripts and functions are altered. If the \\-L switch is given, the options LOCAL\\_OPTIONS, LOCAL\\_PATTERNS and LOCAL\\_TRAPS will be set as well, causing the effects of the emulate command and any setopt, disable -p or enable -p, and trap commands to be local to the immediately surrounding shell function, if any; normally these options are turned off in all emulation modes except ksh. The \\-L switch is mutually exclusive with the use of \\-c in flags.\n\nIf there is a single argument and the \\-l switch is given, the options that would be set or unset (the latter indicated with the prefix ‘no’) are listed. \\-l can be combined with \\-L or \\-R and the list will be modified in the appropriate way. Note the list does not depend on the current setting of options, i.e. it includes all options that may in principle change, not just those that would actually change.\n\nThe flags may be any of the invocation-time flags described in [Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation), except that ‘\\-o EMACS’ and ‘\\-o VI’ may not be used. Flags such as ‘+r’/‘+o RESTRICTED’ may be prohibited in some circumstances.\n\nIf \\-c arg appears in flags, arg is evaluated while the requested emulation is temporarily in effect. In this case the emulation mode and all options are restored to their previous values before emulate returns. The \\-R switch may precede the name of the shell to emulate; note this has a meaning distinct from including \\-R in flags.\n\nUse of \\-c enables ‘sticky’ emulation mode for functions defined within the evaluated expression: the emulation mode is associated thereafter with the function so that whenever the function is executed the emulation (respecting the \\-R switch, if present) and all options are set (and pattern disables cleared) before entry to the function, and the state is restored after exit. If the function is called when the sticky emulation is already in effect, either within an ‘emulate shell \\-c’ expression or within another function with the same sticky emulation, entry and exit from the function do not cause options to be altered (except due to standard processing such as the LOCAL\\_OPTIONS option). This also applies to functions marked for autoload within the sticky emulation; the appropriate set of options will be applied at the point the function is loaded as well as when it is run.\n\nFor example:\n\nemulate sh -c 'fni() { setopt cshnullglob; }\nfno() { fni; }'\nfno\n\nThe two functions fni and fno are defined with sticky sh emulation. fno is then executed, causing options associated with emulations to be set to their values in sh. fno then calls fni; because fni is also marked for sticky sh emulation, no option changes take place on entry to or exit from it. Hence the option cshnullglob, turned off by sh emulation, will be turned on within fni and remain on return to fno. On exit from fno, the emulation mode and all options will be restored to the state they were in before entry to the temporary emulation.\n\nThe documentation above is typically sufficient for the intended purpose of executing code designed for other shells in a suitable environment. More detailed rules follow.\n\n1.\n\nThe sticky emulation environment provided by ‘emulate shell \\-c’ is identical to that provided by entry to a function marked for sticky emulation as a consequence of being defined in such an environment. Hence, for example, the sticky emulation is inherited by subfunctions defined within functions with sticky emulation.\n\n2.\n\nNo change of options takes place on entry to or exit from functions that are not marked for sticky emulation, other than those that would normally take place, even if those functions are called within sticky emulation.\n\n3.\n\nNo special handling is provided for functions marked for autoload nor for functions present in wordcode created by the zcompile command.\n\n4.\n\nThe presence or absence of the \\-R switch to emulate corresponds to different sticky emulation modes, so for example ‘emulate sh -c’, ‘emulate -R sh -c’ and ‘emulate csh -c’ are treated as three distinct sticky emulations.\n\n5.\n\nDifference in shell options supplied in addition to the basic emulation also mean the sticky emulations are different, so for example ‘emulate zsh -c’ and ‘emulate zsh -o cbases -c’ are treated as distinct sticky emulations.\n\nenable \\[ \\-afmprs \\] name ...\n\nEnable the named hash table elements, presumably disabled earlier with disable. The default is to enable builtin commands. The \\-a option causes enable to act on regular or global aliases. The \\-s option causes enable to act on suffix aliases. The \\-f option causes enable to act on shell functions. The \\-r option causes enable to act on reserved words. Without arguments all enabled hash table elements from the corresponding hash table are printed. With the \\-m flag the arguments are taken as patterns (should be quoted) and all hash table elements from the corresponding hash table matching these patterns are enabled. Enabled objects can be disabled with the disable builtin command.\n\nenable -p reenables patterns disabled with disable -p. Note that it does not override globbing options; for example, ‘enable -p \"~\"’ does not cause the pattern character ~ to be active unless the EXTENDED\\_GLOB option is also set. To enable all possible patterns (so that they may be individually disabled with disable -p), use ‘setopt EXTENDED\\_GLOB KSH\\_GLOB NO\\_SH\\_GLOB’.\n\neval \\[ arg ... \\]\n\nRead the arguments as input to the shell and execute the resulting command(s) in the current shell process. The return status is the same as if the commands had been executed directly by the shell; if there are no args or they contain no commands (i.e. are an empty string or whitespace) the return status is zero.\n\nexec \\[ \\-cl \\] \\[ \\-a argv0 \\] \\[ command \\[ arg ... \\] \\]\n\nReplace the current shell with command rather than forking. If command is a shell builtin command or a shell function, the shell executes it, and exits when the command is complete.\n\nWith \\-c clear the environment; with \\-l prepend \\- to the argv\\[0\\] string of the command executed (to simulate a login shell); with \\-a argv0 set the argv\\[0\\] string of the command executed. See [Precommand Modifiers](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Precommand-Modifiers).\n\nIf the option POSIX\\_BUILTINS is set, command is never interpreted as a shell builtin command or shell function. This means further precommand modifiers such as builtin and noglob are also not interpreted within the shell. Hence command is always found by searching the command path.\n\nIf command is omitted but any redirections are specified, then the redirections will take effect in the current shell.\n\nexit \\[ n \\]\n\nExit the shell with the exit status specified by an arithmetic expression n; if none is specified, use the exit status from the last command executed. An EOF condition will also cause the shell to exit, unless the IGNORE\\_EOF option is set.\n\nSee notes at the end of [Jobs & Signals](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs-_0026-Signals) for some possibly unexpected interactions of the exit command with jobs.\n\nexport \\[ name\\[\\=value\\] ... \\]\n\nThe specified names are marked for automatic export to the environment of subsequently executed commands. Equivalent to typeset -gx. If a parameter specified does not already exist, it is created in the global scope.\n\nfalse \\[ arg ... \\]\n\nDo nothing and return an exit status of 1.\n\nfc \\[ \\-e ename \\] \\[ \\-s \\] \\[ \\-LI \\] \\[ \\-m match \\] \\[ old\\=new ... \\] \\[ first \\[ last \\] \\]\n\nfc -l \\[ \\-LI \\] \\[ \\-nrdfEiD \\] \\[ \\-t timefmt \\] \\[ \\-m match \\]\n\n      \\[ old\\=new ... \\] \\[ first \\[ last \\] \\]\n\nfc -p \\[ \\-a \\] \\[ filename \\[ histsize \\[ savehistsize \\] \\] \\]\n\nfc \\-P\n\nfc \\-ARWI \\[ filename \\]\n\nThe fc command controls the interactive history mechanism. Note that reading and writing of history options is only performed if the shell is interactive. Usually this is detected automatically, but it can be forced by setting the interactive option when starting the shell.\n\nThe first two forms of this command select a range of events from first to last from the history list. The arguments first and last may be specified as a number or as a string. A negative number is used as an offset to the current history event number. A string specifies the most recent event beginning with the given string. All substitutions old\\=new, if any, are then performed on the text of the events.\n\nThe range of events selected by numbers can be narrowed further by the following flags.\n\n\\-I\n\nrestricts to only internal events (not from $HISTFILE)\n\n\\-L\n\nrestricts to only local events (not from other shells, see SHARE\\_HISTORY in [Description of Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Description-of-Options) – note that $HISTFILE is considered local when read at startup)\n\n\\-m\n\ntakes the first argument as a pattern (which should be quoted) and only the history events matching this pattern are considered\n\nIf first is not specified, it will be set to -1 (the most recent event), or to -16 if the \\-l flag is given. If last is not specified, it will be set to first, or to -1 if the \\-l flag is given. However, if the current event has added entries to the history with ‘print -s’ or ‘fc -R’, then the default last for \\-l includes all new history entries since the current event began.\n\nWhen the \\-l flag is given, the resulting events are listed on standard output. Otherwise the editor program specified by \\-e ename is invoked on a file containing these history events. If \\-e is not given, the value of the parameter FCEDIT is used; if that is not set the value of the parameter EDITOR is used; if that is not set a builtin default, usually ‘vi’ is used. If ename is ‘\\-’, no editor is invoked. When editing is complete, the edited command is executed.\n\nThe flag ‘\\-s’ is equivalent to ‘\\-e -’. The flag \\-r reverses the order of the events and the flag \\-n suppresses event numbers when listing.\n\nAlso when listing,\n\n\\-d\n\nprints timestamps for each event\n\n\\-f\n\nprints full time-date stamps in the US ‘MM/DD/YY hh:mm’ format\n\n\\-E\n\nprints full time-date stamps in the European ‘dd.mm.yyyy hh:mm’ format\n\n\\-i\n\nprints full time-date stamps in ISO8601 ‘yyyy\\-mm\\-dd hh:mm’ format\n\n\\-t fmt\n\nprints time and date stamps in the given format; fmt is formatted with the strftime function with the zsh extensions described for the %D{string} prompt format in [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion). The resulting formatted string must be no more than 256 characters or will not be printed\n\n\\-D\n\nprints elapsed times; may be combined with one of the options above\n\n‘fc -p’ pushes the current history list onto a stack and switches to a new history list. If the \\-a option is also specified, this history list will be automatically popped when the current function scope is exited, which is a much better solution than creating a trap function to call ‘fc -P’ manually. If no arguments are specified, the history list is left empty, $HISTFILE is unset, and $HISTSIZE & $SAVEHIST are set to their default values. If one argument is given, $HISTFILE is set to that filename, $HISTSIZE & $SAVEHIST are left unchanged, and the history file is read in (if it exists) to initialize the new list. If a second argument is specified, $HISTSIZE & $SAVEHIST are instead set to the single specified numeric value. Finally, if a third argument is specified, $SAVEHIST is set to a separate value from $HISTSIZE. You are free to change these environment values for the new history list however you desire in order to manipulate the new history list.\n\n‘fc -P’ pops the history list back to an older list saved by ‘fc -p’. The current list is saved to its $HISTFILE before it is destroyed (assuming that $HISTFILE and $SAVEHIST are set appropriately, of course). The values of $HISTFILE, $HISTSIZE, and $SAVEHIST are restored to the values they had when ‘fc -p’ was called. Note that this restoration can conflict with making these variables \"local\", so your best bet is to avoid local declarations for these variables in functions that use ‘fc -p’. The one other guaranteed-safe combination is declaring these variables to be local at the top of your function and using the automatic option (\\-a) with ‘fc -p’. Finally, note that it is legal to manually pop a push marked for automatic popping if you need to do so before the function exits.\n\n‘fc -R’ reads the history from the given file, ‘fc -W’ writes the history out to the given file, and ‘fc -A’ appends the history out to the given file. If no filename is specified, the $HISTFILE is assumed. If the \\-I option is added to \\-R, only those events that are not already contained within the internal history list are added. If the \\-I option is added to \\-A or \\-W, only those events that are new since last incremental append/write to the history file are appended/written. In any case, the created file will have no more than $SAVEHIST entries.\n\nfg \\[ job ... \\]\n\njob ...\n\nBring each specified job in turn to the foreground. If no job is specified, resume the current job.\n\nfloat \\[ {+|\\-}Hghlprtux \\] \\[ {+|\\-}EFLRZ \\[ n \\] \\] \\[ name\\[\\=value\\] ... \\]\n\nEquivalent to typeset -E, except that options irrelevant to floating point numbers are not permitted.\n\nfunctions \\[ {+|\\-}UkmtTuWz \\] \\[ \\-x num \\] \\[ name ... \\]\n\nfunctions -c oldfn newfn\n\nfunctions -M \\[\\-s\\] mathfn \\[ min \\[ max \\[ shellfn \\] \\] \\]\n\nfunctions -M \\[ \\-m pattern ... \\]\n\nfunctions +M \\[ \\-m \\] mathfn ...\n\nEquivalent to typeset -f, with the exception of the \\-c, \\-x, \\-M and \\-W options. For functions -u and functions -U, see autoload, which provides additional options. For functions -t and functions -T, see typeset -f.\n\nThe \\-x option indicates that any functions output will have each leading tab for indentation, added by the shell to show syntactic structure, expanded to the given number num of spaces. num can also be 0 to suppress all indentation.\n\nThe \\-W option turns on the option WARN\\_NESTED\\_VAR for the named function or functions only. The option is turned off at the start of nested functions (apart from anonoymous functions) unless the called function also has the \\-W attribute.\n\nThe \\-c option causes oldfn to be copied to newfn. The copy is efficiently handled internally by reference counting. If oldfn was marked for autoload it is first loaded and if this fails the copy fails. Either function may subsequently be redefined without affecting the other. A typical idiom is that oldfn is the name of a library shell function which is then redefined to call newfn, thereby installing a modified version of the function.\n\n_The_ \\-M _and_ +M _flags_\n\nUse of the \\-M option may not be combined with any of the options handled by typeset -f.\n\nfunctions -M mathfn defines mathfn as the name of a mathematical function recognised in all forms of arithmetical expressions; see [Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation). By default mathfn may take any number of comma-separated arguments. If min is given, it must have exactly min args; if min and max are both given, it must have at least min and at most max args. max may be -1 to indicate that there is no upper limit.\n\nBy default the function is implemented by a shell function of the same name; if shellfn is specified it gives the name of the corresponding shell function while mathfn remains the name used in arithmetical expressions. The name of the function in $0 is mathfn (not shellfn as would usually be the case), provided the option FUNCTION\\_ARGZERO is in effect. The positional parameters in the shell function correspond to the arguments of the mathematical function call.\n\nThe result of the last arithmetical expression evaluated inside the shell function gives the result of the mathematical function. This is not limited to arithmetic substitutions of the form $((...)), but also includes arithmetical expressions evaluated in any other way, including by the let builtin, by ((...)) statements, and even by the return builtin and by array subscripts. Therefore, care must be taken not to use syntactical constructs that perform arithmetic evaluation after evaluating what is to be the result of the function. For example:\n\n\\# WRONG\nzmath\\_cube() {\n  (( $1 \\* $1 \\* $1 ))\n  return 0\n}\nfunctions -M cube 1 1 zmath\\_cube\nprint $(( cube(3) ))\n\nThis will print ‘0’ because of the return.\n\nCommenting the return out would lead to a different problem: the ((...)) statement would become the last statement in the function, so the _return status_ ($?) of the function would be non-zero (indicating failure) whenever the _arithmetic result_ of the function would happen to be zero (numerically):\n\n\\# WRONG\nzmath\\_cube() {\n  (( $1 \\* $1 \\* $1 ))\n}\nfunctions -M cube 1 1 zmath\\_cube\nprint $(( cube(0) ))\n\nInstead, the true builtin can be used:\n\n\\# RIGHT\nzmath\\_cube() {\n  (( $1 \\* $1 \\* $1 ))\n  true\n}\nfunctions -M cube 1 1 zmath\\_cube\nprint $(( cube(3) ))\n\nIf the additional option \\-s is given to functions -M, the argument to the function is a single string: anything between the opening and matching closing parenthesis is passed to the function as a single argument, even if it includes commas or white space. The minimum and maximum argument specifiers must therefore be 1 if given. An empty argument list is passed as a zero-length string. Thus, the following string function takes a single argument, including the commas, and prints 11:\n\nstringfn() { (( $#1 )); true }\nfunctions -Ms stringfn\nprint $(( stringfn(foo,bar,rod) ))\n\nfunctions -M with no arguments lists all such user-defined functions in the same form as a definition. With the additional option \\-m and a list of arguments, all functions whose mathfn matches one of the pattern arguments are listed.\n\nfunction +M removes the list of mathematical functions; with the additional option \\-m the arguments are treated as patterns and all functions whose mathfn matches the pattern are removed. Note that the shell function implementing the behaviour is not removed (regardless of whether its name coincides with mathfn).\n\ngetcap\n\nSee [The zsh/cap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcap-Module).\n\ngetln \\[ \\-AclneE \\] name ...\n\nRead the top value from the buffer stack and put it in the shell parameter name. Equivalent to read -zr.\n\ngetopts optstring name \\[ arg ... \\]\n\nChecks the args for legal options. If the args are omitted, use the positional parameters. A valid option argument begins with a ‘+’ or a ‘\\-’. An argument not beginning with a ‘+’ or a ‘\\-’, or the argument ‘\\-\\-’, ends the options. Note that a single ‘\\-’ is not considered a valid option argument. optstring contains the letters that getopts recognizes. If a letter is followed by a ‘:’, that option requires an argument. The options can be separated from the argument by blanks.\n\nEach time it is invoked, getopts places the option letter it finds in the shell parameter name, prepended with a ‘+’ when arg begins with a ‘+’. The index of the next arg is stored in OPTIND. The option argument, if any, is stored in OPTARG.\n\nThe first option to be examined may be changed by explicitly assigning to OPTIND. OPTIND has an initial value of 1, and is normally set to 1 upon entry to a shell function and restored upon exit. (The POSIX\\_BUILTINS option disables this, and also changes the way the value is calculated to match other shells.) OPTARG is not reset and retains its value from the most recent call to getopts. If either of OPTIND or OPTARG is explicitly unset, it remains unset, and the index or option argument is not stored. The option itself is still stored in name in this case.\n\nA leading ‘:’ in optstring causes getopts to store the letter of any invalid option in OPTARG, and to set name to ‘?’ for an unknown option and to ‘:’ when a required argument is missing. Otherwise, getopts sets name to ‘?’ and prints an error message when an option is invalid. The exit status is nonzero when there are no more options.\n\nhash \\[ \\-Ldfmrv \\] \\[ name\\[\\=value\\] \\] ...\n\nhash can be used to directly modify the contents of the command hash table, and the named directory hash table. Normally one would modify these tables by modifying one’s PATH (for the command hash table) or by creating appropriate shell parameters (for the named directory hash table). The choice of hash table to work on is determined by the \\-d option; without the option the command hash table is used, and with the option the named directory hash table is used.\n\nA command name starting with a / is never hashed, whether by explicit use of the hash command or otherwise. Such a command is always found by direct look up in the file system.\n\nGiven no arguments, and neither the \\-r or \\-f options, the selected hash table will be listed in full.\n\nThe \\-r option causes the selected hash table to be emptied. It will be subsequently rebuilt in the normal fashion. The \\-f option causes the selected hash table to be fully rebuilt immediately. For the command hash table this hashes all the absolute directories in the PATH, and for the named directory hash table this adds all users’ home directories. These two options cannot be used with any arguments.\n\nThe \\-m option causes the arguments to be taken as patterns (which should be quoted) and the elements of the hash table matching those patterns are printed. This is the only way to display a limited selection of hash table elements.\n\nFor each name with a corresponding value, put ‘name’ in the selected hash table, associating it with the pathname ‘value’. In the command hash table, this means that whenever ‘name’ is used as a command argument, the shell will try to execute the file given by ‘value’. In the named directory hash table, this means that ‘value’ may be referred to as ‘~name’.\n\nFor each name with no corresponding value, attempt to add name to the hash table, checking what the appropriate value is in the normal manner for that hash table. If an appropriate value can’t be found, then the hash table will be unchanged.\n\nThe \\-v option causes hash table entries to be listed as they are added by explicit specification. If has no effect if used with \\-f.\n\nIf the \\-L flag is present, then each hash table entry is printed in the form of a call to hash.\n\nhistory\n\nSame as fc -l.\n\ninteger \\[ {+|\\-}Hghlprtux \\] \\[ {+|\\-}LRZi \\[ n \\] \\] \\[ name\\[\\=value\\] ... \\]\n\nEquivalent to typeset -i, except that options irrelevant to integers are not permitted.\n\njobs \\[ \\-dlprs \\] \\[ job ... \\]\n\njobs -Z string\n\nLists information about each given job, or all jobs if job is omitted. The \\-l flag lists process IDs, and the \\-p flag lists process groups. If the \\-r flag is specified only running jobs will be listed and if the \\-s flag is given only stopped jobs are shown. If the \\-d flag is given, the directory from which the job was started (which may not be the current directory of the job) will also be shown.\n\nThe \\-Z option replaces the shell’s argument and environment space with the given string, truncated if necessary to fit. This will normally be visible in ps (ps(1)) listings. This feature is typically used by daemons, to indicate their state.\n\nFull job control is only available in the top-level interactive shell, not in commands run in the left hand side of pipelines or within the (...) construct. However, a snapshot of the job state at that point is taken, so it is still possible to use the jobs builtin, or any parameter providing job information. This gives information about the state of jobs at the point the subshell was created. If background processes are created within the subshell, then instead information about those processes is provided.\n\nFor example,\n\nsleep 10 &    # Job in background\n(             # Shell forks\njobs          # Shows information about \"sleep 10 &\"\nsleep 5 &     # Process in background (no job control)\njobs          # Shows information about \"sleep 5 &\"\n)\n\nkill \\[ \\-s signal\\_name | \\-n signal\\_number | \\-sig \\] job ...\n\nkill \\-l \\[ sig ... \\]\n\nSends either SIGTERM or the specified signal to the given jobs or processes. Signals are given by number or by names, with or without the ‘SIG’ prefix. If the signal being sent is not ‘KILL’ or ‘CONT’, then the job will be sent a ‘CONT’ signal if it is stopped. The argument job can be the process ID of a job not in the job list. In the second form, kill -l, if sig is not specified the signal names are listed. Otherwise, for each sig that is a name, the corresponding signal number is listed. For each sig that is a signal number or a number representing the exit status of a process which was terminated or stopped by a signal the name of the signal is printed.\n\nOn some systems, alternative signal names are allowed for a few signals. Typical examples are SIGCHLD and SIGCLD or SIGPOLL and SIGIO, assuming they correspond to the same signal number. kill -l will only list the preferred form, however kill -l alt will show if the alternative form corresponds to a signal number. For example, under Linux kill -l IO and kill -l POLL both output 29, hence kill -IO and kill -POLL have the same effect.\n\nMany systems will allow process IDs to be negative to kill a process group or zero to kill the current process group.\n\nlet arg ...\n\nEvaluate each arg as an arithmetic expression. See [Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) for a description of arithmetic expressions. The exit status is 0 if the value of the last expression is nonzero, 1 if it is zero, and 2 if an error occurred.\n\nlimit \\[ \\-hs \\] \\[ resource \\[ limit \\] \\] ...\n\nSet or display resource limits. Unless the \\-s flag is given, the limit applies only the children of the shell. If \\-s is given without other arguments, the resource limits of the current shell is set to the previously set resource limits of the children.\n\nIf limit is not specified, print the current limit placed on resource, otherwise set the limit to the specified value. If the \\-h flag is given, use hard limits instead of soft limits. If no resource is given, print all limits.\n\nWhen looping over multiple resources, the shell will abort immediately if it detects a badly formed argument. However, if it fails to set a limit for some other reason it will continue trying to set the remaining limits.\n\nresource can be one of:\n\naddressspace\n\nMaximum amount of address space used.\n\naiomemorylocked\n\nMaximum amount of memory locked in RAM for AIO operations.\n\naiooperations\n\nMaximum number of AIO operations.\n\ncachedthreads\n\nMaximum number of cached threads.\n\ncoredumpsize\n\nMaximum size of a core dump.\n\ncputime\n\nMaximum CPU seconds per process.\n\ndatasize\n\nMaximum data size (including stack) for each process.\n\ndescriptors\n\nMaximum value for a file descriptor.\n\nfilesize\n\nLargest single file allowed.\n\nkqueues\n\nMaximum number of kqueues allocated.\n\nmaxproc\n\nMaximum number of processes.\n\nmaxpthreads\n\nMaximum number of threads per process.\n\nmemorylocked\n\nMaximum amount of memory locked in RAM.\n\nmemoryuse\n\nMaximum resident set size.\n\nmsgqueue\n\nMaximum number of bytes in POSIX message queues.\n\nposixlocks\n\nMaximum number of POSIX locks per user.\n\npseudoterminals\n\nMaximum number of pseudo-terminals.\n\nresident\n\nMaximum resident set size.\n\nsigpending\n\nMaximum number of pending signals.\n\nsockbufsize\n\nMaximum size of all socket buffers.\n\nstacksize\n\nMaximum stack size for each process.\n\nswapsize\n\nMaximum amount of swap used.\n\nvmemorysize\n\nMaximum amount of virtual memory.\n\nWhich of these resource limits are available depends on the system. resource can be abbreviated to any unambiguous prefix. It can also be an integer, which corresponds to the integer defined for the resource by the operating system.\n\nIf argument corresponds to a number which is out of the range of the resources configured into the shell, the shell will try to read or write the limit anyway, and will report an error if this fails. As the shell does not store such resources internally, an attempt to set the limit will fail unless the \\-s option is present.\n\nlimit is a number, with an optional scaling factor, as follows:\n\nnh\n\nhours\n\nnk\n\nkilobytes (default)\n\nnm\n\nmegabytes or minutes\n\nng\n\ngigabytes\n\n\\[mm:\\]ss\n\nminutes and seconds\n\nThe limit command is not made available by default when the shell starts in a mode emulating another shell. It can be made available with the command ‘zmodload -F zsh/rlimits b:limit’.\n\nlocal \\[ {+|\\-}AHUahlprtux \\] \\[ {+|\\-}EFLRZi \\[ n \\] \\] \\[ name\\[\\=value\\] ... \\]\n\nSame as typeset, except that the options \\-g, and \\-f are not permitted. In this case the \\-x option does not force the use of \\-g, i.e. exported variables will be local to functions.\n\nlogout \\[ n \\]\n\nSame as exit, except that it only works in a login shell.\n\nnoglob simple command\n\nSee [Precommand Modifiers](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Precommand-Modifiers).\n\npopd \\[ \\-q \\] \\[ {+|\\-}n \\]\n\nRemove an entry from the directory stack, and perform a cd to the new top directory. With no argument, the current top entry is removed. An argument of the form ‘+n’ identifies a stack entry by counting from the left of the list shown by the dirs command, starting with zero. An argument of the form \\-n counts from the right. If the PUSHD\\_MINUS option is set, the meanings of ‘+’ and ‘\\-’ in this context are swapped.\n\nIf the \\-q (quiet) option is specified, the hook function chpwd and the functions in the array $chpwd\\_functions are not called, and the new directory stack is not printed. This is useful for calls to popd that do not change the environment seen by an interactive user.\n\nprint \\[ \\-abcDilmnNoOpPrsSz \\] \\[ \\-u n \\] \\[ \\-f format \\] \\[ \\-C cols \\]\n\n      \\[ \\-v name \\] \\[ \\-xX tabstop \\] \\[ \\-R \\[ \\-en \\]\\] \\[ arg ... \\]\n\nWith the ‘\\-f’ option the arguments are printed as described by printf. With no flags or with the flag ‘\\-’, the arguments are printed on the standard output as described by echo, with the following differences: the escape sequence ‘\\\\M-x’ (or ‘\\\\Mx’) metafies the character x (sets the highest bit), ‘\\\\C-x’ (or ‘\\\\Cx’) produces a control character (‘\\\\C-@’ and ‘\\\\C-?’ give the characters NULL and delete), a character code in octal is represented by ‘\\\\NNN’ (instead of ‘\\\\0NNN’), and ‘\\\\E’ is a synonym for ‘\\\\e’. Finally, if not in an escape sequence, ‘\\\\’ escapes the following character and is not printed.\n\n\\-a\n\nPrint arguments with the column incrementing first. Only useful with the \\-c and \\-C options.\n\n\\-b\n\nRecognize all the escape sequences defined for the bindkey command, see [Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins).\n\n\\-c\n\nPrint the arguments in columns. Unless \\-a is also given, arguments are printed with the row incrementing first.\n\n\\-C cols\n\nPrint the arguments in cols columns. Unless \\-a is also given, arguments are printed with the row incrementing first.\n\n\\-D\n\nTreat the arguments as paths, replacing directory prefixes with ~ expressions corresponding to directory names, as appropriate.\n\n\\-i\n\nIf given together with \\-o or \\-O, sorting is performed case-independently.\n\n\\-l\n\nPrint the arguments separated by newlines instead of spaces. Note: if the list of arguments is empty, print -l will still output one empty line. To print a possibly-empty list of arguments one per line, use print -C1, as in ‘print -rC1 – \"$list\\[@\\]\"’.\n\n\\-m\n\nTake the first argument as a pattern (should be quoted), and remove it from the argument list together with subsequent arguments that do not match this pattern.\n\n\\-n\n\nDo not add a newline to the output.\n\n\\-N\n\nPrint the arguments separated and terminated by nulls. Again, print -rNC1 – \"$list\\[@\\]\" is a canonical way to print an arbitrary list as null-delimited records.\n\n\\-o\n\nPrint the arguments sorted in ascending order.\n\n\\-O\n\nPrint the arguments sorted in descending order.\n\n\\-p\n\nPrint the arguments to the input of the coprocess.\n\n\\-P\n\nPerform prompt expansion (see [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion)). In combination with ‘\\-f’, prompt escape sequences are parsed only within interpolated arguments, not within the format string.\n\n\\-r\n\nIgnore the escape conventions of echo.\n\n\\-R\n\nEmulate the BSD echo command, which does not process escape sequences unless the \\-e flag is given. The \\-n flag suppresses the trailing newline. Only the \\-e and \\-n flags are recognized after \\-R; all other arguments and options are printed.\n\n\\-s\n\nPlace the results in the history list instead of on the standard output. Each argument to the print command is treated as a single word in the history, regardless of its content.\n\n\\-S\n\nPlace the results in the history list instead of on the standard output. In this case only a single argument is allowed; it will be split into words as if it were a full shell command line. The effect is similar to reading the line from a history file with the HIST\\_LEX\\_WORDS option active.\n\n\\-u n\n\nPrint the arguments to file descriptor n.\n\n\\-v name\n\nStore the printed arguments as the value of the parameter name.\n\n\\-x tab-stop\n\nExpand leading tabs on each line of output in the printed string assuming a tab stop every tab-stop characters. This is appropriate for formatting code that may be indented with tabs. Note that leading tabs of any argument to print, not just the first, are expanded, even if print is using spaces to separate arguments (the column count is maintained across arguments but may be incorrect on output owing to previous unexpanded tabs).\n\nThe start of the output of each print command is assumed to be aligned with a tab stop. Widths of multibyte characters are handled if the option MULTIBYTE is in effect. This option is ignored if other formatting options are in effect, namely column alignment or printf style, or if output is to a special location such as shell history or the command line editor.\n\n\\-X tab-stop\n\nThis is similar to \\-x, except that all tabs in the printed string are expanded. This is appropriate if tabs in the arguments are being used to produce a table format.\n\n\\-z\n\nPush the arguments onto the editing buffer stack, separated by spaces.\n\nIf any of ‘\\-m’, ‘\\-o’ or ‘\\-O’ are used in combination with ‘\\-f’ and there are no arguments (after the removal process in the case of ‘\\-m’) then nothing is printed.\n\nprintf \\[ \\-v name \\] format \\[ arg ... \\]\n\nPrint the arguments according to the format specification. Formatting rules are the same as used in C. The same escape sequences as for echo are recognised in the format. All C conversion specifications ending in one of csdiouxXeEfgGn are handled. In addition to this, ‘%b’ can be used instead of ‘%s’ to cause escape sequences in the argument to be recognised and ‘%q’ can be used to quote the argument in such a way that allows it to be reused as shell input. With the numeric format specifiers, if the corresponding argument starts with a quote character, the numeric value of the following character is used as the number to print; otherwise the argument is evaluated as an arithmetic expression. See [Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) for a description of arithmetic expressions. With ‘%n’, the corresponding argument is taken as an identifier which is created as an integer parameter.\n\nNormally, conversion specifications are applied to each argument in order but they can explicitly specify the nth argument is to be used by replacing ‘%’ by ‘%n$’ and ‘\\*’ by ‘\\*n$’. It is recommended that you do not mix references of this explicit style with the normal style and the handling of such mixed styles may be subject to future change.\n\nIf arguments remain unused after formatting, the format string is reused until all arguments have been consumed. With the print builtin, this can be suppressed by using the \\-r option. If more arguments are required by the format than have been specified, the behaviour is as if zero or an empty string had been specified as the argument.\n\nThe \\-v option causes the output to be stored as the value of the parameter name, instead of printed. If name is an array and the format string is reused when consuming arguments then one array element will be used for each use of the format string.\n\npushd \\[ \\-qsLP \\] \\[ arg \\]\n\npushd \\[ \\-qsLP \\] old new\n\npushd \\[ \\-qsLP \\] {+|\\-}n\n\nChange the current directory, and push the old current directory onto the directory stack. In the first form, change the current directory to arg. If arg is not specified, change to the second directory on the stack (that is, exchange the top two entries), or change to $HOME if the PUSHD\\_TO\\_HOME option is set or if there is only one entry on the stack. Otherwise, arg is interpreted as it would be by cd. The meaning of old and new in the second form is also the same as for cd.\n\nThe third form of pushd changes directory by rotating the directory list. An argument of the form ‘+n’ identifies a stack entry by counting from the left of the list shown by the dirs command, starting with zero. An argument of the form ‘\\-n’ counts from the right. If the PUSHD\\_MINUS option is set, the meanings of ‘+’ and ‘\\-’ in this context are swapped.\n\nIf the \\-q (quiet) option is specified, the hook function chpwd and the functions in the array $chpwd\\_functions are not called, and the new directory stack is not printed. This is useful for calls to pushd that do not change the environment seen by an interactive user.\n\nIf the option \\-q is not specified and the shell option PUSHD\\_SILENT is not set, the directory stack will be printed after a pushd is performed.\n\nThe options \\-s, \\-L and \\-P have the same meanings as for the cd builtin.\n\npushln \\[ arg ... \\]\n\nEquivalent to print -nz.\n\npwd \\[ \\-rLP \\]\n\nPrint the absolute pathname of the current working directory. If the \\-r or the \\-P flag is specified, or the CHASE\\_LINKS option is set and the \\-L flag is not given, the printed path will not contain symbolic links.\n\nr\n\nSame as fc -e -.\n\nread \\[ \\-rszpqAclneE \\] \\[ \\-t \\[ num \\] \\] \\[ \\-k \\[ num \\] \\] \\[ \\-d delim \\]\n\n     \\[ \\-u n \\] \\[ \\[name\\]\\[?prompt\\] \\] \\[ name ... \\]\n\nRead one line and break it into fields using the characters in $IFS as separators, except as noted below. The first field is assigned to the first name, the second field to the second name, etc., with leftover fields assigned to the last name. If name is omitted then REPLY is used for scalars and reply for arrays.\n\n\\-r\n\nRaw mode: a ‘\\\\’ at the end of a line does not signify line continuation and backslashes in the line don’t quote the following character and are not removed.\n\n\\-s\n\nDon’t echo back characters if reading from the terminal.\n\n\\-q\n\nRead only one character from the terminal and set name to ‘y’ if this character was ‘y’ or ‘Y’ and to ‘n’ otherwise. With this flag set the return status is zero only if the character was ‘y’ or ‘Y’. This option may be used with a timeout (see \\-t); if the read times out, or encounters end of file, status 2 is returned. Input is read from the terminal unless one of \\-u or \\-p is present. This option may also be used within zle widgets.\n\n\\-k \\[ num \\]\n\nRead only one (or num) characters. All are assigned to the first name, without word splitting. This flag is ignored when \\-q is present. Input is read from the terminal unless one of \\-u or \\-p is present. This option may also be used within zle widgets.\n\nNote that despite the mnemonic ‘key’ this option does read full characters, which may consist of multiple bytes if the option MULTIBYTE is set.\n\n\\-z\n\nRead one entry from the editor buffer stack and assign it to the first name, without word splitting. Text is pushed onto the stack with ‘print -z’ or with push-line from the line editor (see [Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor)). This flag is ignored when the \\-k or \\-q flags are present.\n\n\\-e\n\n\\-E\n\nThe input read is printed (echoed) to the standard output. If the \\-e flag is used, no input is assigned to the parameters.\n\n\\-A\n\nThe first name is taken as the name of an array and all words are assigned to it.\n\n\\-c\n\n\\-l\n\nThese flags are allowed only if called inside a function used for completion (specified with the \\-K flag to compctl). If the \\-c flag is given, the words of the current command are read. If the \\-l flag is given, the whole line is assigned as a scalar. If both flags are present, \\-l is used and \\-c is ignored.\n\n\\-n\n\nTogether with \\-c, the number of the word the cursor is on is read. With \\-l, the index of the character the cursor is on is read. Note that the command name is word number 1, not word 0, and that when the cursor is at the end of the line, its character index is the length of the line plus one.\n\n\\-u n\n\nInput is read from file descriptor n.\n\n\\-p\n\nInput is read from the coprocess.\n\n\\-d delim\n\nInput is terminated by the first character of delim instead of by newline.\n\n\\-t \\[ num \\]\n\nTest if input is available before attempting to read. If num is present, it must begin with a digit and will be evaluated to give a number of seconds, which may be a floating point number; in this case the read times out if input is not available within this time. If num is not present, it is taken to be zero, so that read returns immediately if no input is available. If no input is available, return status 1 and do not set any variables.\n\nThis option is not available when reading from the editor buffer with \\-z, when called from within completion with \\-c or \\-l, with \\-q which clears the input queue before reading, or within zle where other mechanisms should be used to test for input.\n\nNote that read does not attempt to alter the input processing mode. The default mode is canonical input, in which an entire line is read at a time, so usually ‘read -t’ will not read anything until an entire line has been typed. However, when reading from the terminal with \\-k input is processed one key at a time; in this case, only availability of the first character is tested, so that e.g. ‘read -t -k 2’ can still block on the second character. Use two instances of ‘read -t -k’ if this is not what is wanted.\n\nIf the first argument contains a ‘?’, the remainder of this word is used as a prompt on standard error when the shell is interactive.\n\nThe value (exit status) of read is 1 when an end-of-file is encountered, or when \\-c or \\-l is present and the command is not called from a compctl function, or as described for \\-q. Otherwise the value is 0.\n\nThe behavior of some combinations of the \\-k, \\-p, \\-q, \\-u and \\-z flags is undefined. Presently \\-q cancels all the others, \\-p cancels \\-u, \\-k cancels \\-z, and otherwise \\-z cancels both \\-p and \\-u.\n\nThe \\-c or \\-l flags cancel any and all of \\-kpquz.\n\nreadonly\n\nSame as typeset -r. With the POSIX\\_BUILTINS option set, same as typeset -gr.\n\nrehash\n\nSame as hash -r.\n\nreturn \\[ n \\]\n\nCauses a shell function or ‘.’ script to return to the invoking script with the return status specified by an arithmetic expression n. For example, the following prints ‘42’:\n\n() { integer foo=40; return \"foo + 2\" }\necho $?\n\nIf n is omitted, the return status is that of the last command executed.\n\nIf return was executed from a trap in a TRAPNAL function, the effect is different for zero and non-zero return status. With zero status (or after an implicit return at the end of the trap), the shell will return to whatever it was previously processing; with a non-zero status, the shell will behave as interrupted except that the return status of the trap is retained. Note that the numeric value of the signal which caused the trap is passed as the first argument, so the statement ‘return \"128+$1\"’ will return the same status as if the signal had not been trapped.\n\nsched\n\nSee [The zsh/sched Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fsched-Module).\n\nset \\[ {+|\\-}options | {+|\\-}o \\[ option\\_name \\] \\] ... \\[ {+|\\-}A \\[ name \\] \\]\n\n    \\[ arg ... \\]\n\nSet the options for the shell and/or set the positional parameters, or declare and set an array. If the \\-s option is given, it causes the specified arguments to be sorted before assigning them to the positional parameters (or to the array name if \\-A is used). With +s sort arguments in descending order. For the meaning of the other flags, see [Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Options). Flags may be specified by name using the \\-o option. If no option name is supplied with \\-o, the current option states are printed: see the description of setopt below for more information on the format. With +o they are printed in a form that can be used as input to the shell.\n\nIf the \\-A flag is specified, name is set to an array containing the given args; if no name is specified, all arrays are printed together with their values.\n\nIf +A is used and name is an array, the given arguments will replace the initial elements of that array; if no name is specified, all arrays are printed without their values.\n\nThe behaviour of arguments after \\-A name or +A name depends on whether the option KSH\\_ARRAYS is set. If it is not set, all arguments following name are treated as values for the array, regardless of their form. If the option is set, normal option processing continues at that point; only regular arguments are treated as values for the array. This means that\n\nsets array to ‘\\-x -\\- foo’ if KSH\\_ARRAYS is not set, but sets the array to foo and turns on the option ‘\\-x’ if it is set.\n\nIf the \\-A flag is not present, but there are arguments beyond the options, the positional parameters are set. If the option list (if any) is terminated by ‘\\-\\-’, and there are no further arguments, the positional parameters will be unset.\n\nIf no arguments and no ‘\\-\\-’ are given, then the names and values of all parameters are printed on the standard output. If the only argument is ‘+’, the names of all parameters are printed.\n\nFor historical reasons, ‘set -’ is treated as ‘set +xv’ and ‘set - args’ as ‘set +xv – args’ when in any other emulation mode than zsh’s native mode.\n\nsetcap\n\nSee [The zsh/cap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcap-Module).\n\nsetopt \\[ {+|\\-}options | {+|\\-}o option\\_name \\] \\[ \\-m \\] \\[ name ... \\]\n\nSet the options for the shell. All options specified either with flags or by name are set.\n\nIf no arguments are supplied, the names of all options currently set are printed. The form is chosen so as to minimize the differences from the default options for the current emulation (the default emulation being native zsh, shown as <Z> in [Description of Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Description-of-Options)). Options that are on by default for the emulation are shown with the prefix no only if they are off, while other options are shown without the prefix no and only if they are on. In addition to options changed from the default state by the user, any options activated automatically by the shell (for example, SHIN\\_STDIN or INTERACTIVE) will be shown in the list. The format is further modified by the option KSH\\_OPTION\\_PRINT, however the rationale for choosing options with or without the no prefix remains the same in this case.\n\nIf the \\-m flag is given the arguments are taken as patterns (which should be quoted to protect them from filename expansion), and all options with names matching these patterns are set.\n\nNote that a bad option name does not cause execution of subsequent shell code to be aborted; this is behaviour is different from that of ‘set -o’. This is because set is regarded as a special builtin by the POSIX standard, but setopt is not.\n\nshift \\[ \\-p \\] \\[ n \\] \\[ name ... \\]\n\nThe positional parameters ${n+1} ... are renamed to $1 ..., where n is an arithmetic expression that defaults to 1. If any names are given then the arrays with these names are shifted instead of the positional parameters.\n\nIf the option \\-p is given arguments are instead removed (popped) from the end rather than the start of the array.\n\nsource file \\[ arg ... \\]\n\nSame as ‘.’, except that the current directory is always searched and is always searched first, before directories in $path.\n\nstat\n\nSee [The zsh/stat Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fstat-Module).\n\nsuspend \\[ \\-f \\]\n\nSuspend the execution of the shell (send it a SIGTSTP) until it receives a SIGCONT. Unless the \\-f option is given, this will refuse to suspend a login shell.\n\ntest \\[ arg ... \\]\n\n\\[ \\[ arg ... \\] \\]\n\nLike the system version of test. Added for compatibility; use conditional expressions instead (see [Conditional Expressions](https://zsh.sourceforge.io/Doc/Release/Conditional-Expressions.html#Conditional-Expressions)). The main differences between the conditional expression syntax and the test and \\[ builtins are: these commands are not handled syntactically, so for example an empty variable expansion may cause an argument to be omitted; syntax errors cause status 2 to be returned instead of a shell error; and arithmetic operators expect integer arguments rather than arithmetic expressions.\n\nThe command attempts to implement POSIX and its extensions where these are specified. Unfortunately there are intrinsic ambiguities in the syntax; in particular there is no distinction between test operators and strings that resemble them. The standard attempts to resolve these for small numbers of arguments (up to four); for five or more arguments compatibility cannot be relied on. Users are urged wherever possible to use the ‘\\[\\[’ test syntax which does not have these ambiguities.\n\ntimes\n\nPrint the accumulated user and system times for the shell and for processes run from the shell.\n\ntrap \\[ arg \\] \\[ sig ... \\]\n\narg is a series of commands (usually quoted to protect it from immediate evaluation by the shell) to be read and executed when the shell receives any of the signals specified by one or more sig args. Each sig can be given as a number, or as the name of a signal either with or without the string SIG in front (e.g. 1, HUP, and SIGHUP are all the same signal).\n\nIf arg is ‘\\-’, then the specified signals are reset to their defaults, or, if no sig args are present, all traps are reset.\n\nIf arg is an empty string, then the specified signals are ignored by the shell (and by the commands it invokes).\n\nIf arg is omitted but one or more sig args are provided (i.e. the first argument is a valid signal number or name), the effect is the same as if arg had been specified as ‘\\-’.\n\nThe trap command with no arguments prints a list of commands associated with each signal.\n\nIf sig is ZERR then arg will be executed after each command with a nonzero exit status. ERR is an alias for ZERR on systems that have no SIGERR signal (this is the usual case).\n\nIf sig is DEBUG then arg will be executed before each command if the option DEBUG\\_BEFORE\\_CMD is set (as it is by default), else after each command. Here, a ‘command’ is what is described as a ‘sublist’ in the shell grammar, see [Simple Commands & Pipelines](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Simple-Commands-_0026-Pipelines). If DEBUG\\_BEFORE\\_CMD is set various additional features are available. First, it is possible to skip the next command by setting the option ERR\\_EXIT; see the description of the ERR\\_EXIT option in [Description of Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Description-of-Options). Also, the shell parameter ZSH\\_DEBUG\\_CMD is set to the string corresponding to the command to be executed following the trap. Note that this string is reconstructed from the internal format and may not be formatted the same way as the original text. The parameter is unset after the trap is executed.\n\nIf sig is 0 or EXIT and the trap statement is executed inside the body of a function, then the command arg is executed after the function completes. The value of $? at the start of execution is the exit status of the shell or the return status of the function exiting. If sig is 0 or EXIT and the trap statement is not executed inside the body of a function, then the command arg is executed when the shell terminates; the trap runs before any zshexit hook functions.\n\nZERR, DEBUG, and EXIT traps are not executed inside other traps. ZERR and DEBUG traps are kept within subshells, while other traps are reset.\n\nNote that traps defined with the trap builtin are slightly different from those defined as ‘TRAPNAL () { ... }’, as the latter have their own function environment (line numbers, local variables, etc.) while the former use the environment of the command in which they were called. For example,\n\ntrap 'print $LINENO' DEBUG\n\nwill print the line number of a command executed after it has run, while\n\nTRAPDEBUG() { print $LINENO; }\n\nwill always print the number zero.\n\nAlternative signal names are allowed as described under kill above. Defining a trap under either name causes any trap under an alternative name to be removed. However, it is recommended that for consistency users stick exclusively to one name or another.\n\ntrue \\[ arg ... \\]\n\nDo nothing and return an exit status of 0.\n\nttyctl \\[ \\-fu \\]\n\nThe \\-f option freezes the tty (i.e. terminal or terminal emulator), and \\-u unfreezes it. When the tty is frozen, no changes made to the tty settings by external programs will be honored by the shell, except for changes in the size of the screen; the shell will simply reset the settings to their previous values as soon as each command exits or is suspended. Thus, stty and similar programs have no effect when the tty is frozen. Freezing the tty does not cause the current state to be remembered: instead, it causes future changes to the state to be blocked.\n\nWithout options it reports whether the terminal is frozen or not.\n\nNote that, regardless of whether the tty is frozen or not, the shell needs to change the settings when the line editor starts, so unfreezing the tty does not guarantee settings made on the command line are preserved. Strings of commands run between editing the command line will see a consistent tty state. See also the shell variable STTY for a means of initialising the tty before running external commands and/or freezing the tty around a single command.\n\ntype \\[ \\-wfpamsS \\] name ...\n\nEquivalent to whence -v.\n\ntypeset \\[ {+|\\-}AHUaghlmrtux \\] \\[ {+|\\-}EFLRZip \\[ n \\] \\]\n\n        \\[ + \\] \\[ name\\[\\=value\\] ... \\]\n\ntypeset \\-T \\[ {+|\\-}Uglrux \\] \\[ {+|\\-}LRZp \\[ n \\] \\]\n\n        \\[ + | SCALAR\\[\\=value\\] array\\[\\=(value ...)\\] \\[ sep \\] \\]\n\ntypeset \\-f \\[ {+|\\-}TUkmtuz \\] \\[ + \\] \\[ name ... \\]\n\nSet or display attributes and values for shell parameters.\n\nExcept as noted below for control flags that change the behavior, a parameter is created for each name that does not already refer to one. When inside a function, a new parameter is created for every name (even those that already exist), and is unset again when the function completes. See [Local Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Local-Parameters). The same rules apply to special shell parameters, which retain their special attributes when made local.\n\nFor each name\\=value assignment, the parameter name is set to value. If the assignment is omitted and name does _not_ refer to an existing parameter, a new parameter is intialized to empty string, zero, or empty array (as appropriate), _unless_ the shell option TYPESET\\_TO\\_UNSET is set. When that option is set, the parameter attributes are recorded but the parameter remains unset.\n\nIf the shell option TYPESET\\_SILENT is not set, for each remaining name that refers to a parameter that is already set, the name and value of the parameter are printed in the form of an assignment. Nothing is printed for newly-created parameters, or when any attribute flags listed below are given along with the name. Using ‘+’ instead of minus to introduce an attribute turns it off.\n\nIf no name is present, the names and values of all parameters are printed. In this case the attribute flags restrict the display to only those parameters that have the specified attributes, and using ‘+’ rather than ‘\\-’ to introduce the flag suppresses printing of the values of parameters when there is no parameter name.\n\nAll forms of the command handle scalar assignment. Array assignment is possible if any of the reserved words declare, export, float, integer, local, readonly or typeset is matched when the line is parsed (N.B. not when it is executed). In this case the arguments are parsed as assignments, except that the ‘+=’ syntax and the GLOB\\_ASSIGN option are not supported, and scalar values after \\= are _not_ split further into words, even if expanded (regardless of the setting of the KSH\\_TYPESET option; this option is obsolete).\n\nExamples of the differences between command and reserved word parsing:\n\n\\# Reserved word parsing\ntypeset svar=$(echo one word) avar=(several words)\n\nThe above creates a scalar parameter svar and an array parameter avar as if the assignments had been\n\nsvar=\"one word\"\navar=(several words)\n\nOn the other hand:\n\n\\# Normal builtin interface\nbuiltin typeset svar=$(echo two words)\n\nThe builtin keyword causes the above to use the standard builtin interface to typeset in which argument parsing is performed in the same way as for other commands. This example creates a scalar svar containing the value two and another scalar parameter words with no value. An array value in this case would either cause an error or be treated as an obscure set of glob qualifiers.\n\nArbitrary arguments are allowed if they take the form of assignments after command line expansion; however, these only perform scalar assignment:\n\nvar='svar=val'\ntypeset $var\n\nThe above sets the scalar parameter svar to the value val. Parentheses around the value within var would not cause array assignment as they will be treated as ordinary characters when $var is substituted. Any non-trivial expansion in the name part of the assignment causes the argument to be treated in this fashion:\n\ntypeset {var1,var2,var3}=name\n\nThe above syntax is valid, and has the expected effect of setting the three parameters to the same value, but the command line is parsed as a set of three normal command line arguments to typeset after expansion. Hence it is not possible to assign to multiple arrays by this means.\n\nNote that each interface to any of the commands may be disabled separately. For example, ‘disable -r typeset’ disables the reserved word interface to typeset, exposing the builtin interface, while ‘disable typeset’ disables the builtin. Note that disabling the reserved word interface for typeset may cause problems with the output of ‘typeset -p’, which assumes the reserved word interface is available in order to restore array and associative array values.\n\nUnlike parameter assignment statements, typeset’s exit status on an assignment that involves a command substitution does not reflect the exit status of the command substitution. Therefore, to test for an error in a command substitution, separate the declaration of the parameter from its initialization:\n\n\\# WRONG\ntypeset var1=$(exit 1) || echo \"Trouble with var1\"\n\n# RIGHT\ntypeset var1 && var1=$(exit 1) || echo \"Trouble with var1\"\n\nTo initialize a parameter param to a command output and mark it readonly, use typeset -r param or readonly param after the parameter assignment statement.\n\nIf no attribute flags are given, and either no name arguments are present or the flag +m is used, then each parameter name printed is preceded by a list of the attributes of that parameter (array, association, exported, float, integer, readonly, or undefined for autoloaded parameters not yet loaded). If +m is used with attribute flags, and all those flags are introduced with +, the matching parameter names are printed but their values are not.\n\nThe following control flags change the behavior of typeset:\n\n+\n\nIf ‘+’ appears by itself in a separate word as the last option, then the names of all parameters (functions with \\-f) are printed, but the values (function bodies) are not. No name arguments may appear, and it is an error for any other options to follow ‘+’. The effect of ‘+’ is as if all attribute flags which precede it were given with a ‘+’ prefix. For example, ‘typeset -U +’ is equivalent to ‘typeset +U’ and displays the names of all arrays having the uniqueness attribute, whereas ‘typeset -f -U +’ displays the names of all autoloadable functions. If + is the only option, then type information (array, readonly, etc.) is also printed for each parameter, in the same manner as ‘typeset +m \"\\*\"’.\n\n\\-g\n\nThe \\-g (global) means that any resulting parameter will not be restricted to local scope. Note that this does not necessarily mean that the parameter will be global, as the flag will apply to any existing parameter (even if unset) from an enclosing function. This flag does not affect the parameter after creation, hence it has no effect when listing existing parameters, nor does the flag +g have any effect except in combination with \\-m (see below).\n\n\\-m\n\nIf the \\-m flag is given the name arguments are taken as patterns (use quoting to prevent these from being interpreted as file patterns). With no attribute flags, all parameters (or functions with the \\-f flag) with matching names are printed (the shell option TYPESET\\_SILENT is not used in this case).\n\nIf the +g flag is combined with \\-m, a new local parameter is created for every matching parameter that is not already local. Otherwise \\-m applies all other flags or assignments to the existing parameters.\n\nExcept when assignments are made with name\\=value, using +m forces the matching parameters and their attributes to be printed, even inside a function. Note that \\-m is ignored if no patterns are given, so ‘typeset -m’ displays attributes but ‘typeset -a +m’ does not.\n\n\\-p \\[ n \\]\n\nIf the \\-p option is given, parameters and values are printed in the form of a typeset command with an assignment, regardless of other flags and options. Note that the \\-H flag on parameters is respected; no value will be shown for these parameters.\n\n\\-p may be followed by an optional integer argument. Currently only the value 1 is supported. In this case arrays and associative arrays are printed with newlines between indented elements for readability.\n\n\\-T \\[ scalar\\[\\=value\\] array\\[\\=(value ...)\\] \\[ sep \\] \\]\n\nThis flag has a different meaning when used with \\-f; see below. Otherwise the \\-T option requires zero, two, or three arguments to be present. With no arguments, the list of parameters created in this fashion is shown. With two or three arguments, the first two are the name of a scalar and of an array parameter (in that order) that will be tied together in the manner of $PATH and $path. The optional third argument is a single-character separator which will be used to join the elements of the array to form the scalar; if absent, a colon is used, as with $PATH. Only the first character of the separator is significant; any remaining characters are ignored. Multibyte characters are not yet supported.\n\nOnly one of the scalar and array parameters may be assigned an initial value (the restrictions on assignment forms described above also apply).\n\nBoth the scalar and the array may be manipulated as normal. If one is unset, the other will automatically be unset too. There is no way of untying the variables without unsetting them, nor of converting the type of one of them with another typeset command; +T does not work, assigning an array to scalar is an error, and assigning a scalar to array sets it to be a single-element array.\n\nNote that both ‘typeset -xT ...’ and ‘export -T ...’ work, but only the scalar will be marked for export. Setting the value using the scalar version causes a split on all separators (which cannot be quoted). It is possible to apply \\-T to two previously tied variables but with a different separator character, in which case the variables remain joined as before but the separator is changed.\n\nWhen an existing scalar is tied to a new array, the value of the scalar is preserved but no attribute other than export will be preserved.\n\nAttribute flags that transform the final value (\\-L, \\-R, \\-Z, \\-l, \\-u) are only applied to the expanded value at the point of a parameter expansion expression using ‘$’. They are not applied when a parameter is retrieved internally by the shell for any purpose.\n\nThe following attribute flags may be specified:\n\n\\-A\n\nThe names refer to associative array parameters; see [Array Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Array-Parameters).\n\n\\-L \\[ n \\]\n\nLeft justify and remove leading blanks from the value when the parameter is expanded. If n is nonzero, it defines the width of the field. If n is zero, the width is determined by the width of the value of the first assignment. In the case of numeric parameters, the length of the complete value assigned to the parameter is used to determine the width, not the value that would be output.\n\nThe width is the count of characters, which may be multibyte characters if the MULTIBYTE option is in effect. Note that the screen width of the character is not taken into account; if this is required, use padding with parameter expansion flags ${(ml...)...} as described in ‘Parameter Expansion Flags’ in [Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion).\n\nWhen the parameter is expanded, it is filled on the right with blanks or truncated if necessary to fit the field. Note truncation can lead to unexpected results with numeric parameters. Leading zeros are removed if the \\-Z flag is also set.\n\n\\-R \\[ n \\]\n\nSimilar to \\-L, except that right justification is used; when the parameter is expanded, the field is left filled with blanks or truncated from the end. May not be combined with the \\-Z flag.\n\n\\-U\n\nFor arrays (but not for associative arrays), keep only the first occurrence of each duplicated value. This may also be set for tied parameters (see \\-T) or colon-separated special parameters like PATH or FIGNORE, etc. Note the flag takes effect on assignment, and the type of the variable being assigned to is determinative; for variables with shared values it is therefore recommended to set the flag for all interfaces, e.g. ‘typeset -U PATH path’.\n\nThis flag has a different meaning when used with \\-f; see below.\n\n\\-Z \\[ n \\]\n\nSpecially handled if set along with the \\-L flag. Otherwise, similar to \\-R, except that leading zeros are used for padding instead of blanks if the first non-blank character is a digit. Numeric parameters are specially handled: they are always eligible for padding with zeroes, and the zeroes are inserted at an appropriate place in the output.\n\n\\-a\n\nThe names refer to array parameters. An array parameter may be created this way, but it may be assigned to in the typeset statement only if the reserved word form of typeset is enabled (as it is by default). When displaying, both normal and associative arrays are shown.\n\n\\-f\n\nThe names refer to functions rather than parameters. No assignments can be made, and the only other valid flags are \\-t, \\-T, \\-k, \\-u, \\-U and \\-z. The flag \\-t turns on execution tracing for this function; the flag \\-T does the same, but turns off tracing for any named (not anonymous) function called from the present one, unless that function also has the \\-t or \\-T flag. The \\-u and \\-U flags cause the function to be marked for autoloading; \\-U also causes alias expansion to be suppressed when the function is loaded. See the description of the ‘autoload’ builtin for details.\n\nNote that the builtin functions provides the same basic capabilities as typeset -f but gives access to a few extra options; autoload gives further additional options for the case typeset -fu and typeset -fU.\n\n\\-h\n\nHide: only useful for special parameters (those marked ‘<S>’ in the table in [Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)), and for local parameters with the same name as a special parameter, though harmless for others. A special parameter with this attribute will not retain its special effect when made local. Thus after ‘typeset -h PATH’, a function containing ‘typeset PATH’ will create an ordinary local parameter without the usual behaviour of PATH. Alternatively, the local parameter may itself be given this attribute; hence inside a function ‘typeset -h PATH’ creates an ordinary local parameter and the special PATH parameter is not altered in any way. It is also possible to create a local parameter using ‘typeset +h special’, where the local copy of special will retain its special properties regardless of having the \\-h attribute. Global special parameters loaded from shell modules (currently those in zsh/mapfile and zsh/parameter) are automatically given the \\-h attribute to avoid name clashes.\n\n\\-H\n\nHide value: specifies that typeset will not display the value of the parameter when listing parameters; the display for such parameters is always as if the ‘+’ flag had been given. Use of the parameter is in other respects normal, and the option does not apply if the parameter is specified by name, or by pattern with the \\-m option. This is on by default for the parameters in the zsh/parameter and zsh/mapfile modules. Note, however, that unlike the \\-h flag this is also useful for non-special parameters.\n\n\\-i \\[ n \\]\n\nUse an internal integer representation. If n is nonzero it defines the output arithmetic base, otherwise it is determined by the first assignment. Bases from 2 to 36 inclusive are allowed.\n\n\\-E \\[ n \\]\n\nUse an internal double-precision floating point representation. On output the variable will be converted to scientific notation. If n is nonzero it defines the number of significant figures to display; the default is ten.\n\n\\-F \\[ n \\]\n\nUse an internal double-precision floating point representation. On output the variable will be converted to fixed-point decimal notation. If n is nonzero it defines the number of digits to display after the decimal point; the default is ten.\n\n\\-l\n\nConvert the result to lower case whenever the parameter is expanded. The value is _not_ converted when assigned.\n\n\\-r\n\nThe given names are marked readonly. Note that if name is a special parameter, the readonly attribute can be turned on, but cannot then be turned off.\n\nIf the POSIX\\_BUILTINS option is set, the readonly attribute is more restrictive: unset variables can be marked readonly and cannot then be set; furthermore, the readonly attribute cannot be removed from any variable.\n\nIt is still possible to change other attributes of the variable though, some of which like \\-U or \\-Z would affect the value. More generally, the readonly attribute should not be relied on as a security mechanism.\n\nNote that in zsh (like in pdksh but unlike most other shells) it is still possible to create a local variable of the same name as this is considered a different variable (though this variable, too, can be marked readonly). Special variables that have been made readonly retain their value and readonly attribute when made local.\n\n\\-t\n\nTags the named parameters. Tags have no special meaning to the shell. This flag has a different meaning when used with \\-f; see above.\n\n\\-u\n\nConvert the result to upper case whenever the parameter is expanded. The value is _not_ converted when assigned. This flag has a different meaning when used with \\-f; see above.\n\n\\-x\n\nMark for automatic export to the environment of subsequently executed commands. If the option GLOBAL\\_EXPORT is set, this implies the option \\-g, unless +g is also explicitly given; in other words the parameter is not made local to the enclosing function. This is for compatibility with previous versions of zsh.\n\nulimit \\[ \\-HSa \\] \\[ { \\-bcdfiklmnpqrsTtvwx | \\-N resource } \\[ limit \\] ... \\]\n\nSet or display resource limits of the shell and the processes started by the shell. The value of limit can be a number in the unit specified below or one of the values ‘unlimited’, which removes the limit on the resource, or ‘hard’, which uses the current value of the hard limit on the resource.\n\nBy default, only soft limits are manipulated. If the \\-H flag is given use hard limits instead of soft limits. If the \\-S flag is given together with the \\-H flag set both hard and soft limits.\n\nIf no options are used, the file size limit (\\-f) is assumed.\n\nIf limit is omitted the current value of the specified resources are printed. When more than one resource value is printed, the limit name and unit is printed before each value.\n\nWhen looping over multiple resources, the shell will abort immediately if it detects a badly formed argument. However, if it fails to set a limit for some other reason it will continue trying to set the remaining limits.\n\nNot all the following resources are supported on all systems. Running ulimit -a will show which are supported.\n\n\\-a\n\nLists all of the current resource limits.\n\n\\-b\n\nSocket buffer size in bytes (N.B. not kilobytes)\n\n\\-c\n\n512-byte blocks on the size of core dumps.\n\n\\-d\n\nKilobytes on the size of the data segment.\n\n\\-f\n\n512-byte blocks on the size of files written.\n\n\\-i\n\nThe number of pending signals.\n\n\\-k\n\nThe number of kqueues allocated.\n\n\\-l\n\nKilobytes on the size of locked-in memory.\n\n\\-m\n\nKilobytes on the size of physical memory.\n\n\\-n\n\nopen file descriptors.\n\n\\-p\n\nThe number of pseudo-terminals.\n\n\\-q\n\nBytes in POSIX message queues.\n\n\\-r\n\nMaximum real time priority. On some systems where this is not available, such as NetBSD, this has the same effect as \\-T for compatibility with sh.\n\n\\-s\n\nKilobytes on the size of the stack.\n\n\\-T\n\nThe number of simultaneous threads available to the user.\n\n\\-t\n\nCPU seconds to be used.\n\n\\-u\n\nThe number of processes available to the user.\n\n\\-v\n\nKilobytes on the size of virtual memory. On some systems this refers to the limit called ‘address space’.\n\n\\-w\n\nKilobytes on the size of swapped out memory.\n\n\\-x\n\nThe number of locks on files.\n\nA resource may also be specified by integer in the form ‘\\-N resource’, where resource corresponds to the integer defined for the resource by the operating system. This may be used to set the limits for resources known to the shell which do not correspond to option letters. Such limits will be shown by number in the output of ‘ulimit -a’.\n\nThe number may alternatively be out of the range of limits compiled into the shell. The shell will try to read or write the limit anyway, and will report an error if this fails.\n\numask \\[ \\-S \\] \\[ mask \\]\n\nThe umask is set to mask. mask can be either an octal number or a symbolic value as described in the chmod(1) man page. If mask is omitted, the current value is printed. The \\-S option causes the mask to be printed as a symbolic value. Otherwise, the mask is printed as an octal number. Note that in the symbolic form the permissions you specify are those which are to be allowed (not denied) to the users specified.\n\nunalias \\[ \\-ams \\] name ...\n\nRemoves aliases. This command works the same as unhash -a, except that the \\-a option removes all regular or global aliases, or with \\-s all suffix aliases: in this case no name arguments may appear. The options \\-m (remove by pattern) and \\-s without \\-a (remove listed suffix aliases) behave as for unhash -a. Note that the meaning of \\-a is different between unalias and unhash.\n\nunfunction\n\nSame as unhash -f.\n\nunhash \\[ \\-adfms \\] name ...\n\nRemove the element named name from an internal hash table. The default is remove elements from the command hash table. The \\-a option causes unhash to remove regular or global aliases; note when removing a global aliases that the argument must be quoted to prevent it from being expanded before being passed to the command. The \\-s option causes unhash to remove suffix aliases. The \\-f option causes unhash to remove shell functions. The \\-d options causes unhash to remove named directories. If the \\-m flag is given the arguments are taken as patterns (should be quoted) and all elements of the corresponding hash table with matching names will be removed.\n\nunlimit \\[ \\-hs \\] resource ...\n\nThe resource limit for each resource is set to the hard limit. If the \\-h flag is given and the shell has appropriate privileges, the hard resource limit for each resource is removed. The resources of the shell process are only changed if the \\-s flag is given.\n\nThe unlimit command is not made available by default when the shell starts in a mode emulating another shell. It can be made available with the command ‘zmodload -F zsh/rlimits b:unlimit’.\n\nunset \\[ \\-fmv \\] name ...\n\nEach named parameter is unset. Local parameters remain local even if unset; they appear unset within scope, but the previous value will still reappear when the scope ends.\n\nIndividual elements of associative array parameters may be unset by using subscript syntax on name, which should be quoted (or the entire command prefixed with noglob) to protect the subscript from filename generation.\n\nIf the \\-m flag is specified the arguments are taken as patterns (should be quoted) and all parameters with matching names are unset. Note that this cannot be used when unsetting associative array elements, as the subscript will be treated as part of the pattern.\n\nThe \\-v flag specifies that name refers to parameters. This is the default behaviour.\n\nunset -f is equivalent to unfunction.\n\nunsetopt \\[ {+|\\-}options | {+|\\-}o option\\_name \\] \\[ name ... \\]\n\nUnset the options for the shell. All options specified either with flags or by name are unset. If no arguments are supplied, the names of all options currently unset are printed. If the \\-m flag is given the arguments are taken as patterns (which should be quoted to preserve them from being interpreted as glob patterns), and all options with names matching these patterns are unset.\n\nvared\n\nSee [Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins).\n\nwait \\[ job ... \\]\n\nWait for the specified jobs or processes. If job is not given then all currently active child processes are waited for. Each job can be either a job specification or the process ID of a job in the job table. The exit status from this command is that of the job waited for. If job represents an unknown job or process ID, a warning is printed (unless the POSIX\\_BUILTINS option is set) and the exit status is 127.\n\nIt is possible to wait for recent processes (specified by process ID, not by job) that were running in the background even if the process has exited. Typically the process ID will be recorded by capturing the value of the variable $! immediately after the process has been started. There is a limit on the number of process IDs remembered by the shell; this is given by the value of the system configuration parameter CHILD\\_MAX. When this limit is reached, older process IDs are discarded, least recently started processes first.\n\nNote there is no protection against the process ID wrapping, i.e. if the wait is not executed soon enough there is a chance the process waited for is the wrong one. A conflict implies both process IDs have been generated by the shell, as other processes are not recorded, and that the user is potentially interested in both, so this problem is intrinsic to process IDs.\n\nwhence \\[ \\-vcwfpamsS \\] \\[ \\-x num \\] name ...\n\nFor each name, indicate how it would be interpreted if used as a command name.\n\nIf name is not an alias, built-in command, external command, shell function, hashed command, or a reserved word, the exit status shall be non-zero, and — if \\-v, \\-c, or \\-w was passed — a message will be written to standard output. (This is different from other shells that write that message to standard error.)\n\nwhence is most useful when name is only the last path component of a command, i.e. does not include a ‘/’; in particular, pattern matching only succeeds if just the non-directory component of the command is passed.\n\n\\-v\n\nProduce a more verbose report.\n\n\\-c\n\nPrint the results in a csh\\-like format. This takes precedence over \\-v.\n\n\\-w\n\nFor each name, print ‘name: word’ where word is one of alias, builtin, command, function, hashed, reserved or none, according as name corresponds to an alias, a built-in command, an external command, a shell function, a command defined with the hash builtin, a reserved word, or is not recognised. This takes precedence over \\-v and \\-c.\n\n\\-f\n\nCauses the contents of a shell function to be displayed, which would otherwise not happen unless the \\-c flag were used.\n\n\\-p\n\nDo a path search for name even if it is an alias, reserved word, shell function or builtin.\n\n\\-a\n\nDo a search for all occurrences of name throughout the command path. Normally only the first occurrence is printed.\n\n\\-m\n\nThe arguments are taken as patterns (pattern characters should be quoted), and the information is displayed for each command matching one of these patterns.\n\n\\-s\n\nIf a pathname contains symlinks, print the symlink-free pathname as well.\n\n\\-S\n\nAs \\-s, but if the pathname had to be resolved by following multiple symlinks, the intermediate steps are printed, too. The symlink resolved at each step might be anywhere in the path.\n\n\\-x num\n\nExpand tabs when outputting shell functions using the \\-c option. This has the same effect as the \\-x option to the functions builtin.\n\nwhere \\[ \\-wpmsS \\] \\[ \\-x num \\] name ...\n\nEquivalent to whence -ca.\n\nwhich \\[ \\-wpamsS \\] \\[ \\-x num \\] name ...\n\nEquivalent to whence -c.\n\nzcompile \\[ \\-U \\] \\[ \\-z | \\-k \\] \\[ \\-R | \\-M \\] file \\[ name ... \\]\n\nzcompile \\-ca \\[ \\-m \\] \\[ \\-R | \\-M \\] file \\[ name ... \\]\n\nzcompile -t file \\[ name ... \\]\n\nThis builtin command can be used to compile functions or scripts, storing the compiled form in a file, and to examine files containing the compiled form. This allows faster autoloading of functions and sourcing of scripts by avoiding parsing of the text when the files are read.\n\nThe first form (without the \\-c, \\-a or \\-t options) creates a compiled file. If only the file argument is given, the output file has the name ‘file.zwc’ and will be placed in the same directory as the file. The shell will load the compiled file instead of the normal function file when the function is autoloaded; see [Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions) for a description of how autoloaded functions are searched. The extension .zwc stands for ‘zsh word code’.\n\nIf there is at least one name argument, all the named files are compiled into the output file given as the first argument. If file does not end in .zwc, this extension is automatically appended. Files containing multiple compiled functions are called ‘digest’ files, and are intended to be used as elements of the FPATH/fpath special array.\n\nThe second form, with the \\-c or \\-a options, writes the compiled definitions for all the named functions into file. For \\-c, the names must be functions currently defined in the shell, not those marked for autoloading. Undefined functions that are marked for autoloading may be written by using the \\-a option, in which case the fpath is searched and the contents of the definition files for those functions, if found, are compiled into file. If both \\-c and \\-a are given, names of both defined functions and functions marked for autoloading may be given. In either case, the functions in files written with the \\-c or \\-a option will be autoloaded as if the KSH\\_AUTOLOAD option were unset.\n\nThe reason for handling loaded and not-yet-loaded functions with different options is that some definition files for autoloading define multiple functions, including the function with the same name as the file, and, at the end, call that function. In such cases the output of ‘zcompile -c’ does not include the additional functions defined in the file, and any other initialization code in the file is lost. Using ‘zcompile -a’ captures all this extra information.\n\nIf the \\-m option is combined with \\-c or \\-a, the names are used as patterns and all functions whose names match one of these patterns will be written. If no name is given, the definitions of all functions currently defined or marked as autoloaded will be written.\n\nNote the second form cannot be used for compiling functions that include redirections as part of the definition rather than within the body of the function; for example\n\nfn1() { { ... } >~/logfile }\n\ncan be compiled but\n\ncannot. It is possible to use the first form of zcompile to compile autoloadable functions that include the full function definition instead of just the body of the function.\n\nThe third form, with the \\-t option, examines an existing compiled file. Without further arguments, the names of the original files compiled into it are listed. The first line of output shows the version of the shell which compiled the file and how the file will be used (i.e. by reading it directly or by mapping it into memory). With arguments, nothing is output and the return status is set to zero if definitions for _all_ names were found in the compiled file, and non-zero if the definition for at least one name was not found.\n\nOther options:\n\n\\-U\n\nAliases are not expanded when compiling the named files.\n\n\\-R\n\nWhen the compiled file is read, its contents are copied into the shell’s memory, rather than memory-mapped (see \\-M). This happens automatically on systems that do not support memory mapping.\n\nWhen compiling scripts instead of autoloadable functions, it is often desirable to use this option; otherwise the whole file, including the code to define functions which have already been defined, will remain mapped, consequently wasting memory.\n\n\\-M\n\nThe compiled file is mapped into the shell’s memory when read. This is done in such a way that multiple instances of the shell running on the same host will share this mapped file. If neither \\-R nor \\-M is given, the zcompile builtin decides what to do based on the size of the compiled file.\n\n\\-k\n\n\\-z\n\nThese options are used when the compiled file contains functions which are to be autoloaded. If \\-z is given, the function will be autoloaded as if the KSH\\_AUTOLOAD option is _not_ set, even if it is set at the time the compiled file is read, while if the \\-k is given, the function will be loaded as if KSH\\_AUTOLOAD _is_ set. These options also take precedence over any \\-k or \\-z options specified to the autoload builtin. If neither of these options is given, the function will be loaded as determined by the setting of the KSH\\_AUTOLOAD option at the time the compiled file is read.\n\nThese options may also appear as many times as necessary between the listed names to specify the loading style of all following functions, up to the next \\-k or \\-z.\n\nThe created file always contains two versions of the compiled format, one for big-endian machines and one for small-endian machines. The upshot of this is that the compiled file is machine independent and if it is read or mapped, only one half of the file is actually used (and mapped).\n\nzformat\n\nSee [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module).\n\nzftp\n\nSee [The zsh/zftp Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzftp-Module).\n\nzle\n\nSee [Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins).\n\nzmodload \\[ \\-dL \\] \\[ \\-s \\] \\[ ... \\]\n\nzmodload -F \\[ \\-alLme \\-P param \\] module \\[ \\[+-\\]feature ... \\]\n\nzmodload -e \\[ \\-A \\] \\[ ... \\]\n\nzmodload \\[ \\-a \\[ \\-bcpf \\[ \\-I \\] \\] \\] \\[ \\-iL \\] ...\n\nzmodload \\-u \\[ \\-abcdpf \\[ \\-I \\] \\] \\[ \\-iL \\] ...\n\nzmodload \\-A \\[ \\-L \\] \\[ modalias\\[\\=module\\] ... \\]\n\nzmodload \\-R modalias ...\n\nPerforms operations relating to zsh’s loadable modules. Loading of modules while the shell is running (‘dynamical loading’) is not available on all operating systems, or on all installations on a particular operating system, although the zmodload command itself is always available and can be used to manipulate modules built into versions of the shell executable without dynamical loading.\n\nWithout arguments the names of all currently loaded binary modules are printed. The \\-L option causes this list to be in the form of a series of zmodload commands. Forms with arguments are:\n\nzmodload \\[ \\-is \\] name ...\n\nzmodload \\-u \\[ \\-i \\] name ...\n\nIn the simplest case, zmodload loads a binary module. The module must be in a file with a name consisting of the specified name followed by a standard suffix, usually ‘.so’ (‘.sl’ on HPUX). If the module to be loaded is already loaded the duplicate module is ignored. If zmodload detects an inconsistency, such as an invalid module name or circular dependency list, the current code block is aborted. If it is available, the module is loaded if necessary, while if it is not available, non-zero status is silently returned. The option \\-i is accepted for compatibility but has no effect.\n\nThe named module is searched for in the same way a command is, using $module\\_path instead of $path. However, the path search is performed even when the module name contains a ‘/’, which it usually does. There is no way to prevent the path search.\n\nIf the module supports features (see below), zmodload tries to enable all features when loading a module. If the module was successfully loaded but not all features could be enabled, zmodload returns status 2.\n\nIf the option \\-s is given, no error is printed if the module was not available (though other errors indicating a problem with the module are printed). The return status indicates if the module was loaded. This is appropriate if the caller considers the module optional.\n\nWith \\-u, zmodload unloads modules. The same name must be given that was given when the module was loaded, but it is not necessary for the module to exist in the file system. The \\-i option suppresses the error if the module is already unloaded (or was never loaded).\n\nEach module has a boot and a cleanup function. The module will not be loaded if its boot function fails. Similarly a module can only be unloaded if its cleanup function runs successfully.\n\nzmodload -F \\[ \\-almLe \\-P param \\] module \\[ \\[+-\\]feature ... \\]\n\nzmodload -F allows more selective control over the features provided by modules. With no options apart from \\-F, the module named module is loaded, if it was not already loaded, and the list of features is set to the required state. If no features are specified, the module is loaded, if it was not already loaded, but the state of features is unchanged. Each feature may be preceded by a + to turn the feature on, or \\- to turn it off; the + is assumed if neither character is present. Any feature not explicitly mentioned is left in its current state; if the module was not previously loaded this means any such features will remain disabled. The return status is zero if all features were set, 1 if the module failed to load, and 2 if some features could not be set (for example, a parameter couldn’t be added because there was a different parameter of the same name) but the module was loaded.\n\nThe standard features are builtins, conditions, parameters and math functions; these are indicated by the prefix ‘b:’, ‘c:’ (‘C:’ for an infix condition), ‘p:’ and ‘f:’, respectively, followed by the name that the corresponding feature would have in the shell. For example, ‘b:strftime’ indicates a builtin named strftime and p:EPOCHSECONDS indicates a parameter named EPOCHSECONDS. The module may provide other (‘abstract’) features of its own as indicated by its documentation; these have no prefix.\n\nWith \\-l or \\-L, features provided by the module are listed. With \\-l alone, a list of features together with their states is shown, one feature per line. With \\-L alone, a zmodload -F command that would cause enabled features of the module to be turned on is shown. With \\-lL, a zmodload -F command that would cause all the features to be set to their current state is shown. If one of these combinations is given with the option \\-P param then the parameter param is set to an array of features, either features together with their state or (if \\-L alone is given) enabled features.\n\nWith the option \\-L the module name may be omitted; then a list of all enabled features for all modules providing features is printed in the form of zmodload -F commands. If \\-l is also given, the state of both enabled and disabled features is output in that form.\n\nA set of features may be provided together with \\-l or \\-L and a module name; in that case only the state of those features is considered. Each feature may be preceded by + or \\- but the character has no effect. If no set of features is provided, all features are considered.\n\nWith \\-e, the command first tests that the module is loaded; if it is not, status 1 is returned. If the module is loaded, the list of features given as an argument is examined. Any feature given with no prefix is simply tested to see if the module provides it; any feature given with a prefix + or \\- is tested to see if is provided and in the given state. If the tests on all features in the list succeed, status 0 is returned, else status 1.\n\nWith \\-m, each entry in the given list of features is taken as a pattern to be matched against the list of features provided by the module. An initial + or \\- must be given explicitly. This may not be combined with the \\-a option as autoloads must be specified explicitly.\n\nWith \\-a, the given list of features is marked for autoload from the specified module, which may not yet be loaded. An optional + may appear before the feature name. If the feature is prefixed with \\-, any existing autoload is removed. The options \\-l and \\-L may be used to list autoloads. Autoloading is specific to individual features; when the module is loaded only the requested feature is enabled. Autoload requests are preserved if the module is subsequently unloaded until an explicit ‘zmodload -Fa module \\-feature’ is issued. It is not an error to request an autoload for a feature of a module that is already loaded.\n\nWhen the module is loaded each autoload is checked against the features actually provided by the module; if the feature is not provided the autoload request is deleted. A warning message is output; if the module is being loaded to provide a different feature, and that autoload is successful, there is no effect on the status of the current command. If the module is already loaded at the time when zmodload -Fa is run, an error message is printed and status 1 returned.\n\nzmodload -Fa can be used with the \\-l, \\-L, \\-e and \\-P options for listing and testing the existence of autoloadable features. In this case \\-l is ignored if \\-L is specified. zmodload -FaL with no module name lists autoloads for all modules.\n\nNote that only standard features as described above can be autoloaded; other features require the module to be loaded before enabling.\n\nzmodload \\-d \\[ \\-L \\] \\[ name \\]\n\nzmodload \\-d name dep ...\n\nzmodload \\-ud name \\[ dep ... \\]\n\nThe \\-d option can be used to specify module dependencies. The modules named in the second and subsequent arguments will be loaded before the module named in the first argument.\n\nWith \\-d and one argument, all dependencies for that module are listed. With \\-d and no arguments, all module dependencies are listed. This listing is by default in a Makefile-like format. The \\-L option changes this format to a list of zmodload -d commands.\n\nIf \\-d and \\-u are both used, dependencies are removed. If only one argument is given, all dependencies for that module are removed.\n\nzmodload \\-ab \\[ \\-L \\]\n\nzmodload \\-ab \\[ \\-i \\] name \\[ builtin ... \\]\n\nzmodload \\-ub \\[ \\-i \\] builtin ...\n\nThe \\-ab option defines autoloaded builtins. It defines the specified builtins. When any of those builtins is called, the module specified in the first argument is loaded and all its features are enabled (for selective control of features use ‘zmodload -F -a’ as described above). If only the name is given, one builtin is defined, with the same name as the module. \\-i suppresses the error if the builtin is already defined or autoloaded, but not if another builtin of the same name is already defined.\n\nWith \\-ab and no arguments, all autoloaded builtins are listed, with the module name (if different) shown in parentheses after the builtin name. The \\-L option changes this format to a list of zmodload -a commands.\n\nIf \\-b is used together with the \\-u option, it removes builtins previously defined with \\-ab. This is only possible if the builtin is not yet loaded. \\-i suppresses the error if the builtin is already removed (or never existed).\n\nAutoload requests are retained if the module is subsequently unloaded until an explicit ‘zmodload -ub builtin’ is issued.\n\nzmodload \\-ac \\[ \\-IL \\]\n\nzmodload \\-ac \\[ \\-iI \\] name \\[ cond ... \\]\n\nzmodload \\-uc \\[ \\-iI \\] cond ...\n\nThe \\-ac option is used to define autoloaded condition codes. The cond strings give the names of the conditions defined by the module. The optional \\-I option is used to define infix condition names. Without this option prefix condition names are defined.\n\nIf given no condition names, all defined names are listed (as a series of zmodload commands if the \\-L option is given).\n\nThe \\-uc option removes definitions for autoloaded conditions.\n\nzmodload \\-ap \\[ \\-L \\]\n\nzmodload \\-ap \\[ \\-i \\] name \\[ parameter ... \\]\n\nzmodload \\-up \\[ \\-i \\] parameter ...\n\nThe \\-p option is like the \\-b and \\-c options, but makes zmodload work on autoloaded parameters instead.\n\nzmodload \\-af \\[ \\-L \\]\n\nzmodload \\-af \\[ \\-i \\] name \\[ function ... \\]\n\nzmodload \\-uf \\[ \\-i \\] function ...\n\nThe \\-f option is like the \\-b, \\-p, and \\-c options, but makes zmodload work on autoloaded math functions instead.\n\nzmodload \\-a \\[ \\-L \\]\n\nzmodload \\-a \\[ \\-i \\] name \\[ builtin ... \\]\n\nzmodload \\-ua \\[ \\-i \\] builtin ...\n\nEquivalent to \\-ab and \\-ub.\n\nzmodload -e \\[ \\-A \\] \\[ string ... \\]\n\nThe \\-e option without arguments lists all loaded modules; if the \\-A option is also given, module aliases corresponding to loaded modules are also shown. If arguments are provided, nothing is printed; the return status is set to zero if all strings given as arguments are names of loaded modules and to one if at least on string is not the name of a loaded module. This can be used to test for the availability of things implemented by modules. In this case, any aliases are automatically resolved and the \\-A flag is not used.\n\nzmodload \\-A \\[ \\-L \\] \\[ modalias\\[\\=module\\] ... \\]\n\nFor each argument, if both modalias and module are given, define modalias to be an alias for the module module. If the module modalias is ever subsequently requested, either via a call to zmodload or implicitly, the shell will attempt to load module instead. If module is not given, show the definition of modalias. If no arguments are given, list all defined module aliases. When listing, if the \\-L flag was also given, list the definition as a zmodload command to recreate the alias.\n\nThe existence of aliases for modules is completely independent of whether the name resolved is actually loaded as a module: while the alias exists, loading and unloading the module under any alias has exactly the same effect as using the resolved name, and does not affect the connection between the alias and the resolved name which can be removed either by zmodload -R or by redefining the alias. Chains of aliases (i.e. where the first resolved name is itself an alias) are valid so long as these are not circular. As the aliases take the same format as module names, they may include path separators: in this case, there is no requirement for any part of the path named to exist as the alias will be resolved first. For example, ‘any/old/alias’ is always a valid alias.\n\nDependencies added to aliased modules are actually added to the resolved module; these remain if the alias is removed. It is valid to create an alias whose name is one of the standard shell modules and which resolves to a different module. However, if a module has dependencies, it will not be possible to use the module name as an alias as the module will already be marked as a loadable module in its own right.\n\nApart from the above, aliases can be used in the zmodload command anywhere module names are required. However, aliases will not be shown in lists of loaded modules with a bare ‘zmodload’.\n\nzmodload \\-R modalias ...\n\nFor each modalias argument that was previously defined as a module alias via zmodload -A, delete the alias. If any was not defined, an error is caused and the remainder of the line is ignored.\n\nNote that zsh makes no distinction between modules that were linked into the shell and modules that are loaded dynamically. In both cases this builtin command has to be used to make available the builtins and other things defined by modules (unless the module is autoloaded on these definitions). This is true even for systems that don’t support dynamic loading of modules.\n\nzparseopts\n\nSee [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module).\n\nzprof\n\nSee [The zsh/zprof Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzprof-Module).\n\nzpty\n\nSee [The zsh/zpty Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzpty-Module).\n\nzregexparse\n\nSee [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module).\n\nzsocket\n\nSee [The zsh/net/socket Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fnet_002fsocket-Module).\n\nzstyle\n\nSee [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module).\n\nztcp\n\nSee [The zsh/net/tcp Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fnet_002ftcp-Module).\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 248,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Builtin-Commands-html-Shell-Builtin-Commands-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Builtin-Commands-html-Shell-Builtin-Commands-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Builtin-Commands-html-Shell-Builtin-Commands-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Builtin-Commands-html-Shell-Builtin-Commands-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Shell-Builtin-Commands-html-Shell-Builtin-Commands-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 133026,
      "readableText": 162234,
      "none": 163384,
      "readableTextIfPossible": 162234,
      "result": 162234,
      "markdown": 124115
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/User-Contributions.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#User-Contributions",
    "loadedTime": "2025-05-08T06:51:22.410Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#User-Contributions",
    "title": "zsh: 26 User Contributions",
    "description": "zsh: 26 User Contributions",
    "author": null,
    "keywords": "zsh: 26 User Contributions",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:19 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-4ad44\"",
      "expires": "Thu, 08 May 2025 06:52:19 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70727aa644bcc-BUF",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 26 User Contributions\n26.1 Description\nThe Zsh source distribution includes a number of items contributed by the user community. These are not inherently a part of the shell, and some may not be available in every zsh installation. The most significant of these are documented here. For documentation on other contributed items such as shell functions, look for comments in the function source files. \n26.2 Utilities\n26.2.1 Accessing On-Line Help\nThe key sequence ESC h is normally bound by ZLE to execute the run-help widget (see Zsh Line Editor). This invokes the run-help command with the command word from the current input line as its argument. By default, run-help is an alias for the man command, so this often fails when the command word is a shell builtin or a user-defined function. By redefining the run-help alias, one can improve the on-line help provided by the shell. \nThe helpfiles utility, found in the Util directory of the distribution, is a Perl program that can be used to process the zsh manual to produce a separate help file for each shell builtin and for many other shell features as well. The autoloadable run-help function, found in Functions/Misc, searches for these helpfiles and performs several other tests to produce the most complete help possible for the command. \nHelp files are installed by default to a subdirectory of /usr/share/zsh or /usr/local/share/zsh. \nTo create your own help files with helpfiles, choose or create a directory where the individual command help files will reside. For example, you might choose ~/zsh_help. If you unpacked the zsh distribution in your home directory, you would use the commands: \nmkdir ~/zsh_help\nperl ~/zsh-5.9/Util/helpfiles ~/zsh_help\nThe HELPDIR parameter tells run-help where to look for the help files. When unset, it uses the default installation path. To use your own set of help files, set this to the appropriate path in one of your startup files: \nTo use the run-help function, you need to add lines something like the following to your .zshrc or equivalent startup file: \nunalias run-help\nautoload run-help\nNote that in order for ‘autoload run-help’ to work, the run-help file must be in one of the directories named in your fpath array (see Parameters Used By The Shell). This should already be the case if you have a standard zsh installation; if it is not, copy Functions/Misc/run-help to an appropriate directory. \n26.2.2 Recompiling Functions\nIf you frequently edit your zsh functions, or periodically update your zsh installation to track the latest developments, you may find that function digests compiled with the zcompile builtin are frequently out of date with respect to the function source files. This is not usually a problem, because zsh always looks for the newest file when loading a function, but it may cause slower shell startup and function loading. Also, if a digest file is explicitly used as an element of fpath, zsh won’t check whether any of its source files has changed. \nThe zrecompile autoloadable function, found in Functions/Misc, can be used to keep function digests up to date. \nzrecompile [ -qt ] [ name ... ] zrecompile [ -qt ] -p arg ... [ -- arg ... ] \nThis tries to find *.zwc files and automatically re-compile them if at least one of the original files is newer than the compiled file. This works only if the names stored in the compiled files are full paths or are relative to the directory that contains the .zwc file. \nIn the first form, each name is the name of a compiled file or a directory containing *.zwc files that should be checked. If no arguments are given, the directories and *.zwc files in fpath are used. \nWhen -t is given, no compilation is performed, but a return status of zero (true) is set if there are files that need to be re-compiled and non-zero (false) otherwise. The -q option quiets the chatty output that describes what zrecompile is doing. \nWithout the -t option, the return status is zero if all files that needed re-compilation could be compiled and non-zero if compilation for at least one of the files failed. \nIf the -p option is given, the args are interpreted as one or more sets of arguments for zcompile, separated by ‘--’. For example: \nzrecompile -p \\ \n           -R ~/.zshrc -- \\ \n           -M ~/.zcompdump -- \\ \n           ~/zsh/comp.zwc ~/zsh/Completion/*/_*\nThis compiles ~/.zshrc into ~/.zshrc.zwc if that doesn’t exist or if it is older than ~/.zshrc. The compiled file will be marked for reading instead of mapping. The same is done for ~/.zcompdump and ~/.zcompdump.zwc, but this compiled file is marked for mapping. The last line re-creates the file ~/zsh/comp.zwc if any of the files matching the given pattern is newer than it. \nWithout the -p option, zrecompile does not create function digests that do not already exist, nor does it add new functions to the digest. \nThe following shell loop is an example of a method for creating function digests for all functions in your fpath, assuming that you have write permission to the directories: \nfor ((i=1; i <= $#fpath; ++i)); do\n  dir=$fpath[i]\n  zwc=${dir:t}.zwc\n  if [[ $dir == (.|..) || $dir == (.|..)/* ]]; then\n    continue\n  fi\n  files=($dir/*(N-.))\n  if [[ -w $dir:h && -n $files ]]; then\n    files=(${${(M)files%/*/*}#/})\n    if ( cd $dir:h &&\n         zrecompile -p -U -z $zwc $files ); then\n      fpath[i]=$fpath[i].zwc\n    fi\n  fi\ndone\nThe -U and -z options are appropriate for functions in the default zsh installation fpath; you may need to use different options for your personal function directories. \nOnce the digests have been created and your fpath modified to refer to them, you can keep them up to date by running zrecompile with no arguments. \n26.2.3 Keyboard Definition\nThe large number of possible combinations of keyboards, workstations, terminals, emulators, and window systems makes it impossible for zsh to have built-in key bindings for every situation. The zkbd utility, found in Functions/Misc, can help you quickly create key bindings for your configuration. \nRun zkbd either as an autoloaded function, or as a shell script: \nzsh -f ~/zsh-5.9/Functions/Misc/zkbd\nWhen you run zkbd, it first asks you to enter your terminal type; if the default it offers is correct, just press return. It then asks you to press a number of different keys to determine characteristics of your keyboard and terminal; zkbd warns you if it finds anything out of the ordinary, such as a Delete key that sends neither ^H nor ^?. \nThe keystrokes read by zkbd are recorded as a definition for an associative array named key, written to a file in the subdirectory .zkbd within either your HOME or ZDOTDIR directory. The name of the file is composed from the TERM, VENDOR and OSTYPE parameters, joined by hyphens. \nYou may read this file into your .zshrc or another startup file with the ‘source’ or ‘.’ commands, then reference the key parameter in bindkey commands, like this: \nsource ${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR-$OSTYPE\n[[ -n ${key[Left]} ]] && bindkey \"${key[Left]}\" backward-char\n[[ -n ${key[Right]} ]] && bindkey \"${key[Right]}\" forward-char\n# etc.\nNote that in order for ‘autoload zkbd’ to work, the zkdb file must be in one of the directories named in your fpath array (see Parameters Used By The Shell). This should already be the case if you have a standard zsh installation; if it is not, copy Functions/Misc/zkbd to an appropriate directory. \n26.2.4 Dumping Shell State\nOccasionally you may encounter what appears to be a bug in the shell, particularly if you are using a beta version of zsh or a development release. Usually it is sufficient to send a description of the problem to one of the zsh mailing lists (see Mailing Lists), but sometimes one of the zsh developers will need to recreate your environment in order to track the problem down. \nThe script named reporter, found in the Util directory of the distribution, is provided for this purpose. (It is also possible to autoload reporter, but reporter is not installed in fpath by default.) This script outputs a detailed dump of the shell state, in the form of another script that can be read with ‘zsh -f’ to recreate that state. \nTo use reporter, read the script into your shell with the ‘.’ command and redirect the output into a file: \n. ~/zsh-5.9/Util/reporter > zsh.report\nYou should check the zsh.report file for any sensitive information such as passwords and delete them by hand before sending the script to the developers. Also, as the output can be voluminous, it’s best to wait for the developers to ask for this information before sending it. \nYou can also use reporter to dump only a subset of the shell state. This is sometimes useful for creating startup files for the first time. Most of the output from reporter is far more detailed than usually is necessary for a startup file, but the aliases, options, and zstyles states may be useful because they include only changes from the defaults. The bindings state may be useful if you have created any of your own keymaps, because reporter arranges to dump the keymap creation commands as well as the bindings for every keymap. \nAs is usual with automated tools, if you create a startup file with reporter, you should edit the results to remove unnecessary commands. Note that if you’re using the new completion system, you should not dump the functions state to your startup files with reporter; use the compdump function instead (see Completion System). \nreporter [ state ... ] \nPrint to standard output the indicated subset of the current shell state. The state arguments may be one or more of: \nall \nOutput everything listed below. \naliases \nOutput alias definitions. \nbindings \nOutput ZLE key maps and bindings. \ncompletion \nOutput old-style compctl commands. New completion is covered by functions and zstyles. \nfunctions \nOutput autoloads and function definitions. \nlimits \nOutput limit commands. \noptions \nOutput setopt commands. \nstyles \nSame as zstyles. \nvariables \nOutput shell parameter assignments, plus export commands for any environment variables. \nzstyles \nOutput zstyle commands. \nIf the state is omitted, all is assumed. \nWith the exception of ‘all’, every state can be abbreviated by any prefix, even a single letter; thus a is the same as aliases, z is the same as zstyles, etc. \n26.2.5 Manipulating Hook Functions\nadd-zsh-hook [ -L | -dD ] [ -Uzk ] hook function \nSeveral functions are special to the shell, as described in the section Special Functions, Functions, in that they are automatically called at specific points during shell execution. Each has an associated array consisting of names of functions to be called at the same point; these are so-called ‘hook functions’. The shell function add-zsh-hook provides a simple way of adding or removing functions from the array. \nhook is one of chpwd, periodic, precmd, preexec, zshaddhistory, zshexit, or zsh_directory_name, the special functions in question. Note that zsh_directory_name is called in a different way from the other functions, but may still be manipulated as a hook. \nfunction is name of an ordinary shell function. If no options are given this will be added to the array of functions to be executed in the given context. Functions are invoked in the order they were added. \nIf the option -L is given, the current values for the hook arrays are listed with typeset. \nIf the option -d is given, the function is removed from the array of functions to be executed. \nIf the option -D is given, the function is treated as a pattern and any matching names of functions are removed from the array of functions to be executed. \nThe options -U, -z and -k are passed as arguments to autoload for function. For functions contributed with zsh, the options -Uz are appropriate. \nadd-zle-hook-widget [ -L | -dD ] [ -Uzk ] hook widgetname \nSeveral widget names are special to the line editor, as described in the section Special Widgets, Zle Widgets, in that they are automatically called at specific points during editing. Unlike function hooks, these do not use a predefined array of other names to call at the same point; the shell function add-zle-hook-widget maintains a similar array and arranges for the special widget to invoke those additional widgets. \nhook is one of isearch-exit, isearch-update, line-pre-redraw, line-init, line-finish, history-line-set, or keymap-select, corresponding to each of the special widgets zle-isearch-exit, etc. The special widget names are also accepted as the hook argument. \nwidgetname is the name of a ZLE widget. If no options are given this is added to the array of widgets to be invoked in the given hook context. Widgets are invoked in the order they were added, with \nzle widgetname -Nw -f \"nolast\" -- \"$@\"\nNote that this means that the ‘WIDGET’ special parameter tracks the widgetname when the widget function is called, rather than tracking the name of the corresponding special hook widget. \nIf the option -d is given, the widgetname is removed from the array of widgets to be executed. \nIf the option -D is given, the widgetname is treated as a pattern and any matching names of widgets are removed from the array. \nIf widgetname does not name an existing widget when added to the array, it is assumed that a shell function also named widgetname is meant to provide the implementation of the widget. This name is therefore marked for autoloading, and the options -U, -z and -k are passed as arguments to autoload as with add-zsh-hook. The widget is also created with ‘zle -N widgetname’ to cause the corresponding function to be loaded the first time the hook is called. \nThe arrays of widgetname are currently maintained in zstyle contexts, one for each hook context, with a style of ‘widgets’. If the -L option is given, this set of styles is listed with ‘zstyle -L’. This implementation may change, and the special widgets that refer to the styles are created only if add-zle-hook-widget is called to add at least one widget, so if this function is used for any hooks, then all hooks should be managed only via this function. \n26.3 Remembering Recent Directories\nThe function cdr allows you to change the working directory to a previous working directory from a list maintained automatically. It is similar in concept to the directory stack controlled by the pushd, popd and dirs builtins, but is more configurable, and as it stores all entries in files it is maintained across sessions and (by default) between terminal emulators in the current session. Duplicates are automatically removed, so that the list reflects the single most recent use of each directory. \nNote that the pushd directory stack is not actually modified or used by cdr unless you configure it to do so as described in the configuration section below. \n26.3.1 Installation\nThe system works by means of a hook function that is called every time the directory changes. To install the system, autoload the required functions and use the add-zsh-hook function described above: \nautoload -Uz chpwd_recent_dirs cdr add-zsh-hook\nadd-zsh-hook chpwd chpwd_recent_dirs\nNow every time you change directly interactively, no matter which command you use, the directory to which you change will be remembered in most-recent-first order. \n26.3.2 Use\nAll direct user interaction is via the cdr function. \nThe argument to cdr is a number N corresponding to the Nth most recently changed-to directory. 1 is the immediately preceding directory; the current directory is remembered but is not offered as a destination. Note that if you have multiple windows open 1 may refer to a directory changed to in another window; you can avoid this by having per-terminal files for storing directory as described for the recent-dirs-file style below. \nIf you set the recent-dirs-default style described below cdr will behave the same as cd if given a non-numeric argument, or more than one argument. The recent directory list is updated just the same however you change directory. \nIf the argument is omitted, 1 is assumed. This is similar to pushd’s behaviour of swapping the two most recent directories on the stack. \nCompletion for the argument to cdr is available if compinit has been run; menu selection is recommended, using: \nzstyle ':completion:*:*:cdr:*:*' menu selection\nto allow you to cycle through recent directories; the order is preserved, so the first choice is the most recent directory before the current one. The verbose style is also recommended to ensure the directory is shown; this style is on by default so no action is required unless you have changed it. \n26.3.3 Options\nThe behaviour of cdr may be modified by the following options. \n-l \nlists the numbers and the corresponding directories in abbreviated form (i.e. with ~ substitution reapplied), one per line. The directories here are not quoted (this would only be an issue if a directory name contained a newline). This is used by the completion system. \n-r \nsets the variable reply to the current set of directories. Nothing is printed and the directory is not changed. \n-e \nallows you to edit the list of directories, one per line. The list can be edited to any extent you like; no sanity checking is performed. Completion is available. No quoting is necessary (except for newlines, where I have in any case no sympathy); directories are in unabbreviated form and contain an absolute path, i.e. they start with /. Usually the first entry should be left as the current directory. \n-p ’pattern’ \nPrunes any items in the directory list that match the given extended glob pattern; the pattern needs to be quoted from immediate expansion on the command line. The pattern is matched against each completely expanded file name in the list; the full string must match, so wildcards at the end (e.g. ’*removeme*’) are needed to remove entries with a given substring. \nIf output is to a terminal, then the function will print the new list after pruning and prompt for confirmation by the user. This output and confirmation step can be skipped by using -P instead of -p. \n26.3.4 Configuration\nConfiguration is by means of the styles mechanism that should be familiar from completion; if not, see the description of the zstyle command in The zsh/zutil Module. The context for setting styles should be ’:chpwd:*’ in case the meaning of the context is extended in future, for example: \nzstyle ':chpwd:*' recent-dirs-max 0\nsets the value of the recent-dirs-max style to 0. In practice the style name is specific enough that a context of ’*’ should be fine. \nAn exception is recent-dirs-insert, which is used exclusively by the completion system and so has the usual completion system context (’:completion:*’ if nothing more specific is needed), though again ’*’ should be fine in practice. \nrecent-dirs-default \nIf true, and the command is expecting a recent directory index, and either there is more than one argument or the argument is not an integer, then fall through to \"cd\". This allows the lazy to use only one command for directory changing. Completion recognises this, too; see recent-dirs-insert for how to control completion when this option is in use. \nrecent-dirs-file \nThe file where the list of directories is saved. The default is ${ZDOTDIR:-$HOME}/.chpwd-recent-dirs, i.e. this is in your home directory unless you have set the variable ZDOTDIR to point somewhere else. Directory names are saved in $’...’ quoted form, so each line in the file can be supplied directly to the shell as an argument. \nThe value of this style may be an array. In this case, the first file in the list will always be used for saving directories while any other files are left untouched. When reading the recent directory list, if there are fewer than the maximum number of entries in the first file, the contents of later files in the array will be appended with duplicates removed from the list shown. The contents of the two files are not sorted together, i.e. all the entries in the first file are shown first. The special value + can appear in the list to indicate the default file should be read at that point. This allows effects like the following: \nzstyle ':chpwd:*' recent-dirs-file \\ \n~/.chpwd-recent-dirs-${TTY##*/} +\nRecent directories are read from a file numbered according to the terminal. If there are insufficient entries the list is supplemented from the default file. \nIt is possible to use zstyle -e to make the directory configurable at run time: \nzstyle -e ':chpwd:*' recent-dirs-file pick-recent-dirs-file\npick-recent-dirs-file() {\n  if [[ $PWD = ~/text/writing(|/*) ]]; then\n    reply=(~/.chpwd-recent-dirs-writing)\n  else\n    reply=(+)\n  fi\n}\nIn this example, if the current directory is ~/text/writing or a directory under it, then use a special file for saving recent directories, else use the default. \nrecent-dirs-insert \nUsed by completion. If recent-dirs-default is true, then setting this to true causes the actual directory, rather than its index, to be inserted on the command line; this has the same effect as using the corresponding index, but makes the history clearer and the line easier to edit. With this setting, if part of an argument was already typed, normal directory completion rather than recent directory completion is done; this is because recent directory completion is expected to be done by cycling through entries menu fashion. \nIf the value of the style is always, then only recent directories will be completed; in that case, use the cd command when you want to complete other directories. \nIf the value is fallback, recent directories will be tried first, then normal directory completion is performed if recent directory completion failed to find a match. \nFinally, if the value is both then both sets of completions are presented; the usual tag mechanism can be used to distinguish results, with recent directories tagged as recent-dirs. Note that the recent directories inserted are abbreviated with directory names where appropriate. \nrecent-dirs-max \nThe maximum number of directories to save to the file. If this is zero or negative there is no maximum. The default is 20. Note this includes the current directory, which isn’t offered, so the highest number of directories you will be offered is one less than the maximum. \nrecent-dirs-prune \nThis style is an array determining what directories should (or should not) be added to the recent list. Elements of the array can include: \nparent \nPrune parents (more accurately, ancestors) from the recent list. If present, changing directly down by any number of directories causes the current directory to be overwritten. For example, changing from ~pws to ~pws/some/other/dir causes ~pws not to be left on the recent directory stack. This only applies to direct changes to descendant directories; earlier directories on the list are not pruned. For example, changing from ~pws/yet/another to ~pws/some/other/dir does not cause ~pws to be pruned. \npattern:pattern \nGives a zsh pattern for directories that should not be added to the recent list (if not already there). This element can be repeated to add different patterns. For example, ’pattern:/tmp(|/*)’ stops /tmp or its descendants from being added. The EXTENDED_GLOB option is always turned on for these patterns. \nrecent-dirs-pushd \nIf set to true, cdr will use pushd instead of cd to change the directory, so the directory is saved on the directory stack. As the directory stack is completely separate from the list of files saved by the mechanism used in this file there is no obvious reason to do this. \n26.3.5 Use with dynamic directory naming\nIt is possible to refer to recent directories using the dynamic directory name syntax by using the supplied function zsh_directory_name_cdr a hook: \nautoload -Uz add-zsh-hook\nadd-zsh-hook -Uz zsh_directory_name zsh_directory_name_cdr\nWhen this is done, ~[1] will refer to the most recent directory other than $PWD, and so on. Completion after ~[... also works. \n26.3.6 Details of directory handling\nThis section is for the curious or confused; most users will not need to know this information. \nRecent directories are saved to a file immediately and hence are preserved across sessions. Note currently no file locking is applied: the list is updated immediately on interactive commands and nowhere else (unlike history), and it is assumed you are only going to change directory in one window at once. This is not safe on shared accounts, but in any case the system has limited utility when someone else is changing to a different set of directories behind your back. \nTo make this a little safer, only directory changes instituted from the command line, either directly or indirectly through shell function calls (but not through subshells, evals, traps, completion functions and the like) are saved. Shell functions should use cd -q or pushd -q to avoid side effects if the change to the directory is to be invisible at the command line. See the contents of the function chpwd_recent_dirs for more details. \n26.4 Abbreviated dynamic references to directories\nThe dynamic directory naming system is described in the subsection Dynamic named directories of Filename Expansion. In this, a reference to ~[...] is expanded by a function found by the hooks mechanism. \nThe contributed function zsh_directory_name_generic provides a system allowing the user to refer to directories with only a limited amount of new code. It supports all three of the standard interfaces for directory naming: converting from a name to a directory, converting in the reverse direction to find a short name, and completion of names. \nThe main feature of this function is a path-like syntax, combining abbreviations at multiple levels separated by \":\". As an example, ~[g:p:s] might specify: \ng \nThe top level directory for your git area. This first component has to match, or the function will return indicating another directory name hook function should be tried. \np \nThe name of a project within your git area. \ns \nThe source area within that project. \nThis allows you to collapse references to long hierarchies to a very compact form, particularly if the hierarchies are similar across different areas of the disk. \nName components may be completed: if a description is shown at the top of the list of completions, it includes the path to which previous components expand, while the description for an individual completion shows the path segment it would add. No additional configuration is needed for this as the completion system is aware of the dynamic directory name mechanism. \n26.4.1 Usage\nTo use the function, first define a wrapper function for your specific case. We’ll assume it’s to be autoloaded. This can have any name but we’ll refer to it as zdn_mywrapper. This wrapper function will define various variables and then call this function with the same arguments that the wrapper function gets. This configuration is described below. \nThen arrange for the wrapper to be run as a zsh_directory_name hook: \nautoload -Uz add-zsh-hook zsh_directory_name_generic zdn_mywrapper\nadd-zsh-hook -U zsh_directory_name zdn_mywrapper\n26.4.2 Configuration\nThe wrapper function should define a local associative array zdn_top. Alternatively, this can be set with a style called mapping. The context for the style is :zdn:wrapper-name where wrapper-name is the function calling zsh_directory_name_generic; for example: \nzstyle :zdn:zdn_mywrapper: mapping zdn_mywrapper_top\nThe keys in this associative array correspond to the first component of the name. The values are matching directories. They may have an optional suffix with a slash followed by a colon and the name of a variable in the same format to give the next component. (The slash before the colon is to disambiguate the case where a colon is needed in the path for a drive. There is otherwise no syntax for escaping this, so path components whose names start with a colon are not supported.) A special component :default: specifies a variable in the form /:var (the path section is ignored and so is usually empty) that will be used for the next component if no variable is given for the path. Variables referred to within zdn_top have the same format as zdn_top itself, but contain relative paths. \nFor example, \nlocal -A zdn_top=(\n  g   ~/git\n  ga  ~/alternate/git\n  gs  /scratch/$USER/git/:second2\n  :default: /:second1\n)\nThis specifies the behaviour of a directory referred to as ~[g:...] or ~[ga:...] or ~[gs:...]. Later path components are optional; in that case ~[g] expands to ~/git, and so on. gs expands to /scratch/$USER/git and uses the associative array second2 to match the second component; g and ga use the associative array second1 to match the second component. \nWhen expanding a name to a directory, if the first component is not g or ga or gs, it is not an error; the function simply returns 1 so that a later hook function can be tried. However, matching the first component commits the function, so if a later component does not match, an error is printed (though this still does not stop later hooks from being executed). \nFor components after the first, a relative path is expected, but note that multiple levels may still appear. Here is an example of second1: \nlocal -A second1=(\n  p   myproject\n  s   somproject\n  os  otherproject/subproject/:third\n)\nThe path as found from zdn_top is extended with the matching directory, so ~[g:p] becomes ~/git/myproject. The slash between is added automatically (it’s not possible to have a later component modify the name of a directory already matched). Only os specifies a variable for a third component, and there’s no :default:, so it’s an error to use a name like ~[g:p:x] or ~[ga:s:y] because there’s nowhere to look up the x or y. \nThe associative arrays need to be visible within this function; the generic function therefore uses internal variable names beginning _zdn_ in order to avoid clashes. Note that the variable reply needs to be passed back to the shell, so should not be local in the calling function. \nThe function does not test whether directories assembled by component actually exist; this allows the system to work across automounted file systems. The error from the command trying to use a non-existent directory should be sufficient to indicate the problem. \n26.4.3 Complete example\nHere is a full fictitious but usable autoloadable definition of the example function defined by the code above. So ~[gs:p:s] expands to /scratch/$USER/git/myscratchproject/top/srcdir (with $USER also expanded). \nlocal -A zdn_top=(\n  g   ~/git\n  ga  ~/alternate/git\n  gs  /scratch/$USER/git/:second2\n  :default: /:second1\n)\n\nlocal -A second1=(\n  p   myproject\n  s   somproject\n  os  otherproject/subproject/:third\n)\n\nlocal -A second2=(\n  p   myscratchproject\n  s   somescratchproject\n)\n\nlocal -A third=(\n  s   top/srcdir\n  d   top/documentation\n)\n\n# autoload not needed if you did this at initialisation...\nautoload -Uz zsh_directory_name_generic\nzsh_directory_name_generic \"$@\nIt is also possible to use global associative arrays, suitably named, and set the style for the context of your wrapper function to refer to this. Then your set up code would contain the following: \ntypeset -A zdn_mywrapper_top=(...)\n# ... and so on for other associative arrays ...\nzstyle ':zdn:zdn_mywrapper:' mapping zdn_mywrapper_top\nautoload -Uz add-zsh-hook zsh_directory_name_generic zdn_mywrapper\nadd-zsh-hook -U zsh_directory_name zdn_mywrapper\nand the function zdn_mywrapper would contain only the following: \nzsh_directory_name_generic \"$@\"\n26.5 Gathering information from version control systems\nIn a lot of cases, it is nice to automatically retrieve information from version control systems (VCSs), such as subversion, CVS or git, to be able to provide it to the user; possibly in the user’s prompt. So that you can instantly tell which branch you are currently on, for example. \nIn order to do that, you may use the vcs_info function. \nThe following VCSs are supported, showing the abbreviated name by which they are referred to within the system: \nBazaar (bzr) \nhttps://bazaar.canonical.com/ \nCodeville (cdv) \nhttp://freecode.com/projects/codeville/ \nConcurrent Versioning System (cvs) \nhttps://www.nongnu.org/cvs/ \nDarcs (darcs) \nhttp://darcs.net/ \nFossil (fossil) \nhttps://fossil-scm.org/ \nGit (git) \nhttps://git-scm.com/ \nGNU arch (tla) \nhttps://www.gnu.org/software/gnu-arch/ \nMercurial (hg) \nhttps://www.mercurial-scm.org/ \nMonotone (mtn) \nhttps://monotone.ca/ \nPerforce (p4) \nhttps://www.perforce.com/ \nSubversion (svn) \nhttps://subversion.apache.org/ \nSVK (svk) \nhttps://svk.bestpractical.com/ \nThere is also support for the patch management system quilt (https://savannah.nongnu.org/projects/quilt). See Quilt Support below for details. \nTo load vcs_info: \nIt can be used in any existing prompt, because it does not require any specific $psvar entries to be available. \n26.5.1 Quickstart\nTo get this feature working quickly (including colors), you can do the following (assuming, you loaded vcs_info properly - see above): \nzstyle ':vcs_info:*' actionformats \\ \n    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '\nzstyle ':vcs_info:*' formats       \\ \n    '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '\nzstyle ':vcs_info:(sv[nk]|bzr):*' branchformat '%b%F{1}:%F{3}%r'\nprecmd () { vcs_info }\nPS1='%F{5}[%F{2}%n%F{5}] %F{3}%3~ ${vcs_info_msg_0_}%f%# '\nObviously, the last two lines are there for demonstration. You need to call vcs_info from your precmd function. Once that is done you need a single quoted ’${vcs_info_msg_0_}’ in your prompt. \nTo be able to use ’${vcs_info_msg_0_}’ directly in your prompt like this, you will need to have the PROMPT_SUBST option enabled. \nNow call the vcs_info_printsys utility from the command line: \n% vcs_info_printsys\n## list of supported version control backends:\n## disabled systems are prefixed by a hash sign (#)\nbzr\ncdv\ncvs\ndarcs\nfossil\ngit\nhg\nmtn\np4\nsvk\nsvn\ntla\n## flavours (cannot be used in the enable or disable styles; they\n## are enabled and disabled with their master [git-svn -> git])\n## they *can* be used in contexts: ':vcs_info:git-svn:*'.\ngit-p4\ngit-svn\nhg-git\nhg-hgsubversion\nhg-hgsvn\nYou may not want all of these because there is no point in running the code to detect systems you do not use. So there is a way to disable some backends altogether: \nzstyle ':vcs_info:*' disable bzr cdv darcs mtn svk tla\nYou may also pick a few from that list and enable only those: \nzstyle ':vcs_info:*' enable git cvs svn\nIf you rerun vcs_info_printsys after one of these commands, you will see the backends listed in the disable style (or backends not in the enable style - if you used that) marked as disabled by a hash sign. That means the detection of these systems is skipped completely. No wasted time there. \n26.5.2 Configuration\nThe vcs_info feature can be configured via zstyle. \nFirst, the context in which we are working: \n:vcs_info:vcs-string:user-context:repo-root-name\nvcs-string \nis one of: git, git-svn, git-p4, hg, hg-git, hg-hgsubversion, hg-hgsvn, darcs, bzr, cdv, mtn, svn, cvs, svk, tla, p4 or fossil. This is followed by ‘.quilt-quilt-mode’ in Quilt mode (see Quilt Support for details) and by ‘+hook-name’ while hooks are active (see Hooks in vcs_info for details). \nCurrently, hooks in quilt mode don’t add the ‘.quilt-quilt-mode’ information. This may change in the future. \nuser-context \nis a freely configurable string, assignable by the user as the first argument to vcs_info (see its description below). \nrepo-root-name \nis the name of a repository in which you want a style to match. So, if you want a setting specific to /usr/src/zsh, with that being a CVS checkout, you can set repo-root-name to zsh to make it so. \nThere are three special values for vcs-string: The first is named -init-, that is in effect as long as there was no decision what VCS backend to use. The second is -preinit-; it is used before vcs_info is run, when initializing the data exporting variables. The third special value is formats and is used by the vcs_info_lastmsg for looking up its styles. \nThe initial value of repo-root-name is -all- and it is replaced with the actual name, as soon as it is known. Only use this part of the context for defining the formats, actionformats or branchformat styles, as it is guaranteed that repo-root-name is set up correctly for these only. For all other styles, just use ’*’ instead. \nThere are two pre-defined values for user-context: \ndefault \nthe one used if none is specified \ncommand \nused by vcs_info_lastmsg to lookup its styles \nYou can of course use ’:vcs_info:*’ to match all VCSs in all user-contexts at once. \nThis is a description of all styles that are looked up. \nformats \nA list of formats, used when actionformats is not used (which is most of the time). \nactionformats \nA list of formats, used if there is a special action going on in your current repository; like an interactive rebase or a merge conflict. \nbranchformat \nSome backends replace %b in the formats and actionformats styles above, not only by a branch name but also by a revision number. This style lets you modify how that string should look. \nnvcsformats \nThese \"formats\" are set when we didn’t detect a version control system for the current directory or vcs_info was disabled. This is useful if you want vcs_info to completely take over the generation of your prompt. You would do something like PS1=’${vcs_info_msg_0_}’ to accomplish that. \nhgrevformat \nhg uses both a hash and a revision number to reference a specific changeset in a repository. With this style you can format the revision string (see branchformat) to include either or both. It’s only useful when get-revision is true. Note, the full 40-character revision id is not available (except when using the use-simple option) because executing hg more than once per prompt is too slow; you may customize this behavior using hooks. \nmax-exports \nDefines the maximum number of vcs_info_msg_*_ variables vcs_info will set. \nenable \nA list of backends you want to use. Checked in the -init- context. If this list contains an item called NONE no backend is used at all and vcs_info will do nothing. If this list contains ALL, vcs_info will use all known backends. Only with ALL in enable will the disable style have any effect. ALL and NONE are case insensitive. \ndisable \nA list of VCSs you don’t want vcs_info to test for repositories (checked in the -init- context, too). Only used if enable contains ALL. \ndisable-patterns \nA list of patterns that are checked against $PWD. If a pattern matches, vcs_info will be disabled. This style is checked in the :vcs_info:-init-:*:-all- context. \nSay, ~/.zsh is a directory under version control, in which you do not want vcs_info to be active, do: \nzstyle ':vcs_info:*' disable-patterns \"${(b)HOME}/.zsh(|/*)\"\nuse-quilt \nIf enabled, the quilt support code is active in ‘addon’ mode. See Quilt Support for details. \nquilt-standalone \nIf enabled, ‘standalone’ mode detection is attempted if no VCS is active in a given directory. See Quilt Support for details. \nquilt-patch-dir \nOverwrite the value of the $QUILT_PATCHES environment variable. See Quilt Support for details. \nquiltcommand \nWhen quilt itself is called in quilt support, the value of this style is used as the command name. \ncheck-for-changes \nIf enabled, this style causes the %c and %u format escapes to show when the working directory has uncommitted changes. The strings displayed by these escapes can be controlled via the stagedstr and unstagedstr styles. The only backends that currently support this option are git, hg, and bzr (the latter two only support unstaged). \nFor this style to be evaluated with the hg backend, the get-revision style needs to be set and the use-simple style needs to be unset. The latter is the default; the former is not. \nWith the bzr backend, lightweight checkouts only honor this style if the use-server style is set. \nNote, the actions taken if this style is enabled are potentially expensive (read: they may be slow, depending on how big the current repository is). Therefore, it is disabled by default. \ncheck-for-staged-changes \nThis style is like check-for-changes, but it never checks the worktree files, only the metadata in the .${vcs} dir. Therefore, this style initializes only the %c escape (with stagedstr) but not the %u escape. This style is faster than check-for-changes. \nIn the git backend, this style checks for changes in the index. Other backends do not currently implement this style. \nThis style is disabled by default. \nstagedstr \nThis string will be used in the %c escape if there are staged changes in the repository. \nunstagedstr \nThis string will be used in the %u escape if there are unstaged changes in the repository. \ncommand \nThis style causes vcs_info to use the supplied string as the command to use as the VCS’s binary. Note, that setting this in ’:vcs_info:*’ is not a good idea. \nIf the value of this style is empty (which is the default), the used binary name is the name of the backend in use (e.g. svn is used in an svn repository). \nThe repo-root-name part in the context is always the default -all- when this style is looked up. \nFor example, this style can be used to use binaries from non-default installation directories. Assume, git is installed in /usr/bin but your sysadmin installed a newer version in /usr/local/bin. Instead of changing the order of your $PATH parameter, you can do this: \nzstyle ':vcs_info:git:*:-all-' command /usr/local/bin/git\nuse-server \nThis is used by the Perforce backend (p4) to decide if it should contact the Perforce server to find out if a directory is managed by Perforce. This is the only reliable way of doing this, but runs the risk of a delay if the server name cannot be found. If the server (more specifically, the host:port pair describing the server) cannot be contacted, its name is put into the associative array vcs_info_p4_dead_servers and is not contacted again during the session until it is removed by hand. If you do not set this style, the p4 backend is only usable if you have set the environment variable P4CONFIG to a file name and have corresponding files in the root directories of each Perforce client. See comments in the function VCS_INFO_detect_p4 for more detail. \nThe Bazaar backend (bzr) uses this to permit contacting the server about lightweight checkouts, see the check-for-changes style. \nuse-simple \nIf there are two different ways of gathering information, you can select the simpler one by setting this style to true; the default is to use the not-that-simple code, which is potentially a lot slower but might be more accurate in all possible cases. This style is used by the bzr, hg, and git backends. In the case of hg it will invoke the external hexdump program to parse the binary dirstate cache file; this method will not return the local revision number. \nget-revision \nIf set to true, vcs_info goes the extra mile to figure out the revision of a repository’s work tree (currently for the git and hg backends, where this kind of information is not always vital). For git, the hash value of the currently checked out commit is available via the %i expansion. With hg, the local revision number and the corresponding global hash are available via %i. \nget-mq \nIf set to true, the hg backend will look for a Mercurial Queue (mq) patch directory. Information will be available via the ‘%m’ replacement. \nget-bookmarks \nIf set to true, the hg backend will try to get a list of current bookmarks. They will be available via the ‘%m’ replacement. \nThe default is to generate a comma-separated list of all bookmark names that refer to the currently checked out revision. If a bookmark is active, its name is suffixed an asterisk and placed first in the list. \nuse-prompt-escapes \nDetermines if we assume that the assembled string from vcs_info includes prompt escapes. (Used by vcs_info_lastmsg.) \ndebug \nEnable debugging output to track possible problems. Currently this style is only used by vcs_info’s hooks system. \nhooks \nA list style that defines hook-function names. See Hooks in vcs_info below for details. \npatch-format nopatch-format \nThis pair of styles format the patch information used by the %m expando in formats and actionformats for the git and hg backends. The value is subject to certain %-expansions described below. The expanded value is made available in the global backend_misc array as ${backend_misc[patches]} (also if a set-patch-format hook is used). \nget-unapplied \nThis boolean style controls whether a backend should attempt to gather a list of unapplied patches (for example with Mercurial Queue patches). \nUsed by the quilt, hg, and git backends. \nThe default values for these styles in all contexts are: \nformats \n\" (%s)-[%b]%u%c-\" \nactionformats \n\" (%s)-[%b|%a]%u%c-\" \nbranchformat \n\"%b:%r\" (for bzr, svn, svk and hg) \nnvcsformats \n\"\" \nhgrevformat \n\"%r:%h\" \nmax-exports \n2 \nenable \nALL \ndisable \n(empty list) \ndisable-patterns \n(empty list) \ncheck-for-changes \nfalse \ncheck-for-staged-changes \nfalse \nstagedstr \n(string: \"S\") \nunstagedstr \n(string: \"U\") \ncommand \n(empty string) \nuse-server \nfalse \nuse-simple \nfalse \nget-revision \nfalse \nget-mq \ntrue \nget-bookmarks \nfalse \nuse-prompt-escapes \ntrue \ndebug \nfalse \nhooks \n(empty list) \nuse-quilt \nfalse \nquilt-standalone \nfalse \nquilt-patch-dir \nempty - use $QUILT_PATCHES \nquiltcommand \nquilt \npatch-format \nbackend dependent \nnopatch-format \nbackend dependent \nget-unapplied \nfalse \nIn normal formats and actionformats the following replacements are done: \n%s \nThe VCS in use (git, hg, svn, etc.). \n%b \nInformation about the current branch. \n%a \nAn identifier that describes the action. Only makes sense in actionformats. \n%i \nThe current revision number or identifier. For hg the hgrevformat style may be used to customize the output. \n%c \nThe string from the stagedstr style if there are staged changes in the repository. \n%u \nThe string from the unstagedstr style if there are unstaged changes in the repository. \n%R \nThe base directory of the repository. \n%r \nThe repository name. If %R is /foo/bar/repoXY, %r is repoXY. \n%S \nA subdirectory within a repository. If $PWD is /foo/bar/repoXY/beer/tasty, %S is beer/tasty. \n%m \nA \"misc\" replacement. It is at the discretion of the backend to decide what this replacement expands to. \nThe hg and git backends use this expando to display patch information. hg sources patch information from the mq extensions; git from in-progress rebase and cherry-pick operations and from the stgit extension. The patch-format and nopatch-format styles control the generated string. The former is used when at least one patch from the patch queue has been applied, and the latter otherwise. \nThe hg backend displays bookmark information in this expando (in addition to mq information). See the get-mq and get-bookmarks styles. Both of these styles may be enabled at the same time. If both are enabled, both resulting strings will be shown separated by a semicolon (that cannot currently be customized). \nThe quilt ‘standalone’ backend sets this expando to the same value as the %Q expando. \n%Q \nQuilt series information. When quilt is used (either in ‘addon’ mode or as a ‘standalone’ backend), this expando is set to the quilt series’ patch-format string. The set-patch-format hook and nopatch-format style are honoured. \nSee Quilt Support below for details. \nIn branchformat these replacements are done: \n%b \nThe branch name. For hg, the branch name can include a topic name. \n%r \nThe current revision number or the hgrevformat style for hg. \nIn hgrevformat these replacements are done: \n%r \nThe current local revision number. \n%h \nThe current global revision identifier. \nIn patch-format and nopatch-format these replacements are done: \n%p \nThe name of the top-most applied patch; may be overridden by the applied-string hook. \n%u \nThe number of unapplied patches; may be overridden by the unapplied-string hook. \n%n \nThe number of applied patches. \n%c \nThe number of unapplied patches. \n%a \nThe number of all patches (%a = %n + %c). \n%g \nThe names of active mq guards (hg backend). \n%G \nThe number of active mq guards (hg backend). \nNot all VCS backends have to support all replacements. For nvcsformats no replacements are performed at all, it is just a string. \n26.5.3 Oddities\nIf you want to use the %b (bold off) prompt expansion in formats, which expands %b itself, use %%b. That will cause the vcs_info expansion to replace %%b with %b, so that zsh’s prompt expansion mechanism can handle it. Similarly, to hand down %b from branchformat, use %%%%b. Sorry for this inconvenience, but it cannot be easily avoided. Luckily we do not clash with a lot of prompt expansions and this only needs to be done for those. \nWhen one of the gen-applied-string, gen-unapplied-string, and set-patch-format hooks is defined, applying %-escaping (‘foo=${foo//’%’/%%}’) to the interpolated values for use in the prompt is the responsibility of those hooks (jointly); when neither of those hooks is defined, vcs_info handles escaping by itself. We regret this coupling, but it was required for backwards compatibility. \n26.5.4 Quilt Support\nQuilt is not a version control system, therefore this is not implemented as a backend. It can help keeping track of a series of patches. People use it to keep a set of changes they want to use on top of software packages (which is tightly integrated into the package build process - the Debian project does this for a large number of packages). Quilt can also help individual developers keep track of their own patches on top of real version control systems. \nThe vcs_info integration tries to support both ways of using quilt by having two slightly different modes of operation: ‘addon’ mode and ‘standalone’ mode). \nQuilt integration is off by default; to enable it, set the use-quilt style, and add %Q to your formats or actionformats style: \nzstyle ':vcs_info:*' use-quilt true\nStyles looked up from the Quilt support code include ‘.quilt-quilt-mode’ in the vcs-string part of the context, where quilt-mode is either addon or standalone. Example: :vcs_info:git.quilt-addon:default:repo-root-name. \nFor ‘addon’ mode to become active vcs_info must have already detected a real version control system controlling the directory. If that is the case, a directory that holds quilt’s patches needs to be found. That directory is configurable via the ‘QUILT_PATCHES’ environment variable. If that variable exists its value is used, otherwise the value ‘patches’ is assumed. The value from $QUILT_PATCHES can be overwritten using the ‘quilt-patch-dir’ style. (Note: you can use vcs_info to keep the value of $QUILT_PATCHES correct all the time via the post-quilt hook). \nWhen the directory in question is found, quilt is assumed to be active. To gather more information, vcs_info looks for a directory called ‘.pc’; Quilt uses that directory to track its current state. If this directory does not exist we know that quilt has not done anything to the working directory (read: no patches have been applied yet). \nIf patches are applied, vcs_info will try to find out which. If you want to know which patches of a series are not yet applied, you need to activate the get-unapplied style in the appropriate context. \nvcs_info allows for very detailed control over how the gathered information is presented (see Configuration and Hooks in vcs_info), all of which are documented below. Note there are a number of other patch tracking systems that work on top of a certain version control system (like stgit for git, or mq for hg); the configuration for systems like that are generally configured the same way as the quilt support. \nIf the quilt support is working in ‘addon’ mode, the produced string is available as a simple format replacement (%Q to be precise), which can be used in formats and actionformats; see below for details). \nIf, on the other hand, the support code is working in ‘standalone’ mode, vcs_info will pretend as if quilt were an actual version control system. That means that the version control system identifier (which otherwise would be something like ‘svn’ or ‘cvs’) will be set to ‘-quilt-’. This has implications on the used style context where this identifier is the second element. vcs_info will have filled in a proper value for the \"repository’s\" root directory and the string containing the information about quilt’s state will be available as the ‘misc’ replacement (and %Q for compatibility with ‘addon’ mode). \nWhat is left to discuss is how ‘standalone’ mode is detected. The detection itself is a series of searches for directories. You can have this detection enabled all the time in every directory that is not otherwise under version control. If you know there is only a limited set of trees where you would like vcs_info to try and look for Quilt in ‘standalone’ mode to minimise the amount of searching on every call to vcs_info, there are a number of ways to do that: \nEssentially, ‘standalone’ mode detection is controlled by a style called ‘quilt-standalone’. It is a string style and its value can have different effects. The simplest values are: ‘always’ to run detection every time vcs_info is run, and ‘never’ to turn the detection off entirely. \nIf the value of quilt-standalone is something else, it is interpreted differently. If the value is the name of a scalar variable the value of that variable is checked and that value is used in the same ‘always’/‘never’ way as described above. \nIf the value of quilt-standalone is an array, the elements of that array are used as directory names under which you want the detection to be active. \nIf quilt-standalone is an associative array, the keys are taken as directory names under which you want the detection to be active, but only if the corresponding value is the string ‘true’. \nLast, but not least, if the value of quilt-standalone is the name of a function, the function is called without arguments and the return value decides whether detection should be active. A ‘0’ return value is true; a non-zero return value is interpreted as false. \nNote, if there is both a function and a variable by the name of quilt-standalone, the function will take precedence. \n26.5.5 Function Descriptions (Public API)\nvcs_info [user-context] \nThe main function, that runs all backends and assembles all data into ${vcs_info_msg_*_}. This is the function you want to call from precmd if you want to include up-to-date information in your prompt (see Variable Description below). If an argument is given, that string will be used instead of default in the user-context field of the style context. \nvcs_info_hookadd \nStatically registers a number of functions to a given hook. The hook needs to be given as the first argument; what follows is a list of hook-function names to register to the hook. The ‘+vi-’ prefix needs to be left out here. See Hooks in vcs_info below for details. \nvcs_info_hookdel \nRemove hook-functions from a given hook. The hook needs to be given as the first non-option argument; what follows is a list of hook-function names to un-register from the hook. If ‘-a’ is used as the first argument, all occurrences of the functions are unregistered. Otherwise only the last occurrence is removed (if a function was registered to a hook more than once). The ‘+vi-’ prefix needs to be left out here. See Hooks in vcs_info below for details. \nvcs_info_lastmsg \nOutputs the current values of ${vcs_info_msg_*_}. Takes into account the value of the use-prompt-escapes style in ’:vcs_info:formats:command:-all-’. It also only prints max-exports values. \nvcs_info_printsys [user-context] \nPrints a list of all supported version control systems. Useful to find out possible contexts (and which of them are enabled) or values for the disable style. \nvcs_info_setsys \nInitializes vcs_info’s internal list of available backends. With this function, you can add support for new VCSs without restarting the shell. \nAll functions named VCS_INFO_* are for internal use only. \n26.5.6 Variable Description\n${vcs_info_msg_N_} (Note the trailing underscore) \nWhere N is an integer, e.g., vcs_info_msg_0_. These variables are the storage for the informational message the last vcs_info call has assembled. These are strongly connected to the formats, actionformats and nvcsformats styles described above. Those styles are lists. The first member of that list gets expanded into ${vcs_info_msg_0_}, the second into ${vcs_info_msg_1_} and the Nth into ${vcs_info_msg_N-1_}. (See the max-exports style above.) \nAll variables named VCS_INFO_* are for internal use only. \n26.5.7 Hooks in vcs_info\nHooks are places in vcs_info where you can run your own code. That code can communicate with the code that called it and through that, change the system’s behaviour. \nFor configuration, hooks change the style context: \n:vcs_info:vcs-string+hook-name:user-context:repo-root-name\nTo register functions to a hook, you need to list them in the hooks style in the appropriate context. \nExample: \nzstyle ':vcs_info:*+foo:*' hooks bar baz\nThis registers functions to the hook ‘foo’ for all backends. In order to avoid namespace problems, all registered function names are prepended by a ‘+vi-’, so the actual functions called for the ‘foo’ hook are ‘+vi-bar’ and ‘+vi-baz’. \nIf you would like to register a function to a hook regardless of the current context, you may use the vcs_info_hookadd function. To remove a function that was added like that, the vcs_info_hookdel function can be used. \nIf something seems weird, you can enable the ‘debug’ boolean style in the proper context and the hook-calling code will print what it tried to execute and whether the function in question existed. \nWhen you register more than one function to a hook, all functions are executed one after another until one function returns non-zero or until all functions have been called. Context-sensitive hook functions are executed before statically registered ones (the ones added by vcs_info_hookadd). \nYou may pass data between functions via an associative array, user_data. For example: \n+vi-git-myfirsthook(){\n    user_data[myval]=$myval\n}\n+vi-git-mysecondhook(){\n    # do something with ${user_data[myval]}\n}\nThere are a number of variables that are special in hook contexts: \nret \nThe return value that the hooks system will return to the caller. The default is an integer ‘zero’. If and how a changed ret value changes the execution of the caller depends on the specific hook. See the hook documentation below for details. \nhook_com \nAn associated array which is used for bidirectional communication from the caller to hook functions. The used keys depend on the specific hook. \ncontext \nThe active context of the hook. Functions that wish to change this variable should make it local scope first. \nvcs \nThe current VCS after it was detected. The same values as in the enable/disable style are used. Available in all hooks except start-up. \nFinally, the full list of currently available hooks: \nstart-up \nCalled after starting vcs_info but before the VCS in this directory is determined. It can be used to deactivate vcs_info temporarily if necessary. When ret is set to 1, vcs_info aborts and does nothing; when set to 2, vcs_info sets up everything as if no version control were active and exits. \npre-get-data \nSame as start-up but after the VCS was detected. \ngen-hg-bookmark-string \nCalled in the Mercurial backend when a bookmark string is generated; the get-revision and get-bookmarks styles must be true. \nThis hook gets the names of the Mercurial bookmarks that vcs_info collected from ‘hg’. \nIf a bookmark is active, the key ${hook_com[hg-active-bookmark]} is set to its name. The key is otherwise unset. \nWhen setting ret to non-zero, the string in ${hook_com[hg-bookmark-string]} will be used in the %m escape in formats and actionformats and will be available in the global backend_misc array as ${backend_misc[bookmarks]}. \ngen-applied-string \nCalled in the git (with stgit or during rebase or merge), and hg (with mq) backends and in quilt support when the applied-string is generated; the use-quilt zstyle must be true for quilt (the mq and stgit backends are active by default). \nThe arguments to this hook describe applied patches in the opposite order, which means that the first argument is the top-most patch and so forth. \nWhen the patches’ log messages can be extracted, those are embedded within each argument after a space, so each argument is of the form ‘patch-name first line of the log message’, where patch-name contains no whitespace. The mq backend passes arguments of the form ‘patch name’, with possible embedded spaces, but without extracting the patch’s log message. \nWhen setting ret to non-zero, the string in ${hook_com[applied-string]} will be available as %p in the patch-format and nopatch-format styles. This hook is, in concert with set-patch-format, responsible for %-escaping that value for use in the prompt. (See Oddities.) \nThe quilt backend passes to this hook the inputs ${hook_com[quilt-patches-dir]} and, if it has been determined, ${hook_com[quilt-pc-dir]}. \ngen-unapplied-string \nCalled in the git (with stgit or during rebase), and hg (with mq) backend and in quilt support when the unapplied-string is generated; the get-unapplied style must be true. \nThis hook gets the names of all unapplied patches which vcs_info in order, which means that the first argument is the patch next-in-line to be applied and so forth. \nThe format of each argument is as for gen-applied-string, above. \nWhen setting ret to non-zero, the string in ${hook_com[unapplied-string]} will be available as %u in the patch-format and nopatch-format styles. This hook is, in concert with set-patch-format, responsible for %-escaping that value for use in the prompt. (See Oddities.) \nThe quilt backend passes to this hook the inputs ${hook_com[quilt-patches-dir]} and, if it has been determined, ${hook_com[quilt-pc-dir]}. \ngen-mqguards-string \nCalled in the hg backend when guards-string is generated; the get-mq style must be true (default). \nThis hook gets the names of any active mq guards. \nWhen setting ret to non-zero, the string in ${hook_com[guards-string]} will be used in the %g escape in the patch-format and nopatch-format styles. \nno-vcs \nThis hooks is called when no version control system was detected. \nThe ‘hook_com’ parameter is not used. \npost-backend \nCalled as soon as the backend has finished collecting information. \nThe ‘hook_com’ keys available are as for the set-message hook. \npost-quilt \nCalled after the quilt support is done. The following information is passed as arguments to the hook: 1. the quilt-support mode (‘addon’ or ‘standalone’); 2. the directory that contains the patch series; 3. the directory that holds quilt’s status information (the ‘.pc’ directory) or the string \"-nopc-\" if that directory wasn’t found. \nThe ‘hook_com’ parameter is not used. \nset-branch-format \nCalled before ‘branchformat’ is set. The only argument to the hook is the format that is configured at this point. \nThe ‘hook_com’ keys considered are ‘branch’ and ‘revision’. They are set to the values figured out so far by vcs_info and any change will be used directly when the actual replacement is done. \nIf ret is set to non-zero, the string in ${hook_com[branch-replace]} will be used unchanged as the ‘%b’ replacement in the variables set by vcs_info. \nset-hgrev-format \nCalled before a ‘hgrevformat’ is set. The only argument to the hook is the format that is configured at this point. \nThe ‘hook_com’ keys considered are ‘hash’ and ‘localrev’. They are set to the values figured out so far by vcs_info and any change will be used directly when the actual replacement is done. \nIf ret is set to non-zero, the string in ${hook_com[rev-replace]} will be used unchanged as the ‘%i’ replacement in the variables set by vcs_info. \npre-addon-quilt \nThis hook is used when vcs_info’s quilt functionality is active in \"addon\" mode (quilt used on top of a real version control system). It is activated right before any quilt specific action is taken. \nSetting the ‘ret’ variable in this hook to a non-zero value avoids any quilt specific actions from being run at all. \nset-patch-format \nThis hook is used to control some of the possible expansions in patch-format and nopatch-format styles with patch queue systems such as quilt, mqueue and the like. \nThis hook is used in the git, hg and quilt backends. \nThe hook allows the control of the %p (${hook_com[applied]}) and %u (${hook_com[unapplied]}) expansion in all backends that use the hook. With the mercurial backend, the %g (${hook_com[guards]}) expansion is controllable in addition to that. \nIf ret is set to non-zero, the string in ${hook_com[patch-replace]} will be used unchanged instead of an expanded format from patch-format or nopatch-format. \nThis hook is, in concert with the gen-applied-string or gen-unapplied-string hooks if they are defined, responsible for %-escaping the final patch-format value for use in the prompt. (See Oddities.) \nThe quilt backend passes to this hook the inputs ${hook_com[quilt-patches-dir]} and, if it has been determined, ${hook_com[quilt-pc-dir]}. \nset-message \nCalled each time before a ‘vcs_info_msg_N_’ message is set. It takes two arguments; the first being the ‘N’ in the message variable name, the second is the currently configured formats or actionformats. \nThere are a number of ‘hook_com’ keys, that are used here: ‘action’, ‘branch’, ‘base’, ‘base-name’, ‘subdir’, ‘staged’, ‘unstaged’, ‘revision’, ‘misc’, ‘vcs’ and one ‘miscN’ entry for each backend-specific data field (N starting at zero). They are set to the values figured out so far by vcs_info and any change will be used directly when the actual replacement is done. \nSince this hook is triggered multiple times (once for each configured formats or actionformats), each of the ‘hook_com’ keys mentioned above (except for the miscN entries) has an ‘_orig’ counterpart, so even if you changed a value to your liking you can still get the original value in the next run. Changing the ‘_orig’ values is probably not a good idea. \nIf ret is set to non-zero, the string in ${hook_com[message]} will be used unchanged as the message by vcs_info. \nIf all of this sounds rather confusing, take a look at Examples and also in the Misc/vcs_info-examples file in the Zsh source. They contain some explanatory code. \n26.5.8 Examples\nDon’t use vcs_info at all (even though it’s in your prompt): \nzstyle ':vcs_info:*' enable NONE\nDisable the backends for bzr and svk: \nzstyle ':vcs_info:*' disable bzr svk\nDisable everything but bzr and svk: \nzstyle ':vcs_info:*' enable bzr svk\nProvide a special formats for git: \nzstyle ':vcs_info:git:*' formats       ' GIT, BABY! [%b]'\nzstyle ':vcs_info:git:*' actionformats ' GIT ACTION! [%b|%a]'\nAll %x expansion in all sorts of formats (formats, actionformats, branchformat, you name it) are done using the ‘zformat’ builtin from the ‘zsh/zutil’ module. That means you can do everything with these %x items what zformat supports. In particular, if you want something that is really long to have a fixed width, like a hash in a mercurial branchformat, you can do this: %12.12i. That’ll shrink the 40 character hash to its 12 leading characters. The form is actually ‘%min.maxx’. More is possible. See The zsh/zutil Module for details. \nUse the quicker bzr backend \nzstyle ':vcs_info:bzr:*' use-simple true\nIf you do use use-simple, please report if it does ‘the-right-thing[tm]’. \nDisplay the revision number in yellow for bzr and svn: \nzstyle ':vcs_info:(svn|bzr):*' \\ \n       branchformat '%b%%F{yellow}:%r'\nThe doubled percent sign is explained in Oddities. \nAlternatively, one can use the raw colour codes directly: \nzstyle ':vcs_info:(svn|bzr):*' \\ \n       branchformat '%b%{'${fg[yellow]}'%}:%r'\nNormally when a variable is interpolated into a format string, the variable needs to be %-escaped. In this example we skipped that because we assume the value of ${fg[yellow]} doesn’t contain any % signs. \nMake sure you enclose the color codes in %{...%} if you want to use the string provided by vcs_info in prompts. \nHere is how to print the VCS information as a command (not in a prompt): \nvcsi() { vcs_info interactive; vcs_info_lastmsg }\nThis way, you can even define different formats for output via vcs_info_lastmsg in the ’:vcs_info:*:interactive:*’ namespace. \nNow as promised, some code that uses hooks: say, you’d like to replace the string ‘svn’ by ‘subversion’ in vcs_info’s %s formats replacement. \nFirst, we will tell vcs_info to call a function when populating the message variables with the gathered information: \nzstyle ':vcs_info:*+set-message:*' hooks svn2subversion\nNothing happens. Which is reasonable, since we didn’t define the actual function yet. To see what the hooks subsystem is trying to do, enable the ‘debug’ style: \nzstyle ':vcs_info:*+*:*' debug true\nThat should give you an idea what is going on. Specifically, the function that we are looking for is ‘+vi-svn2subversion’. Note, the ‘+vi-’ prefix. So, everything is in order, just as documented. When you are done checking out the debugging output, disable it again: \nzstyle ':vcs_info:*+*:*' debug false\nNow, let’s define the function: \nfunction +vi-svn2subversion() {\n    [[ ${hook_com[vcs_orig]} == svn ]] && hook_com[vcs]=subversion\n}\nSimple enough. And it could have even been simpler, if only we had registered our function in a less generic context. If we do it only in the ‘svn’ backend’s context, we don’t need to test which the active backend is: \nzstyle ':vcs_info:svn+set-message:*' hooks svn2subversion\nfunction +vi-svn2subversion() {\n    hook_com[vcs]=subversion\n}\nAnd finally a little more elaborate example, that uses a hook to create a customised bookmark string for the hg backend. \nAgain, we start off by registering a function: \nzstyle ':vcs_info:hg+gen-hg-bookmark-string:*' hooks hgbookmarks\nAnd then we define the ‘+vi-hgbookmarks’ function: \nfunction +vi-hgbookmarks() {\n    # The default is to connect all bookmark names by\n    # commas. This mixes things up a little.\n    # Imagine, there's one type of bookmarks that is\n    # special to you. Say, because it's *your* work.\n    # Those bookmarks look always like this: \"sh/*\"\n    # (because your initials are sh, for example).\n    # This makes the bookmarks string use only those\n    # bookmarks. If there's more than one, it\n    # concatenates them using commas.\n    # The bookmarks returned by `hg' are available in\n    # the function's positional parameters.\n    local s=\"${(Mj:,:)@:#sh/*}\"\n    # Now, the communication with the code that calls\n    # the hook functions is done via the hook_com[]\n    # hash. The key at which the `gen-hg-bookmark-string'\n    # hook looks is `hg-bookmark-string'. So:\n    hook_com[hg-bookmark-string]=$s\n    # And to signal that we want to use the string we\n    # just generated, set the special variable `ret' to\n    # something other than the default zero:\n    ret=1\n    return 0\n}\nSome longer examples and code snippets which might be useful are available in the examples file located at Misc/vcs_info-examples in the Zsh source directory. \nThis concludes our guided tour through zsh’s vcs_info. \n26.6 Prompt Themes\n26.6.1 Installation\nYou should make sure all the functions from the Functions/Prompts directory of the source distribution are available; they all begin with the string ‘prompt_’ except for the special function ‘promptinit’. You also need the ‘colors’ and ‘add-zsh-hook’ functions from Functions/Misc. All these functions may already be installed on your system; if not, you will need to find them and copy them. The directory should appear as one of the elements of the fpath array (this should already be the case if they were installed), and at least the function promptinit should be autoloaded; it will autoload the rest. Finally, to initialize the use of the system you need to call the promptinit function. The following code in your .zshrc will arrange for this; assume the functions are stored in the directory ~/myfns: \nfpath=(~/myfns $fpath)\nautoload -U promptinit\npromptinit\n26.6.2 Theme Selection\nUse the prompt command to select your preferred theme. This command may be added to your .zshrc following the call to promptinit in order to start zsh with a theme already selected. \nprompt [ -c | -l ] prompt [ -p | -h ] [ theme ... ] prompt [ -s ] theme [ arg ... ] \nSet or examine the prompt theme. With no options and a theme argument, the theme with that name is set as the current theme. The available themes are determined at run time; use the -l option to see a list. The special theme ‘random’ selects at random one of the available themes and sets your prompt to that. \nIn some cases the theme may be modified by one or more arguments, which should be given after the theme name. See the help for each theme for descriptions of these arguments. \nOptions are: \n-c \nShow the currently selected theme and its parameters, if any. \n-l \nList all available prompt themes. \n-p \nPreview the theme named by theme, or all themes if no theme is given. \n-h \nShow help for the theme named by theme, or for the prompt function if no theme is given. \n-s \nSet theme as the current theme and save state. \nprompt_theme_setup \nEach available theme has a setup function which is called by the prompt function to install that theme. This function may define other functions as necessary to maintain the prompt, including functions used to preview the prompt or provide help for its use. You should not normally call a theme’s setup function directly. \n26.6.3 Utility Themes\nprompt off \nThe theme ‘off’ sets all the prompt variables to minimal values with no special effects. \nprompt default \nThe theme ‘default’ sets all prompt variables to the same state as if an interactive zsh was started with no initialization files. \nprompt restore \nThe special theme ‘restore’ erases all theme settings and sets prompt variables to their state before the first time the ‘prompt’ function was run, provided each theme has properly defined its cleanup (see below). \nNote that you can undo ‘prompt off’ and ‘prompt default’ with ‘prompt restore’, but a second restore does not undo the first. \n26.6.4 Writing Themes\nThe first step for adding your own theme is to choose a name for it, and create a file ‘prompt_name_setup’ in a directory in your fpath, such as ~/myfns in the example above. The file should at minimum contain assignments for the prompt variables that your theme wishes to modify. By convention, themes use PS1, PS2, RPS1, etc., rather than the longer PROMPT and RPROMPT. \nThe file is autoloaded as a function in the current shell context, so it may contain any necessary commands to customize your theme, including defining additional functions. To make some complex tasks easier, your setup function may also do any of the following: \nAssign prompt_opts \nThe array prompt_opts may be assigned any of \"bang\", \"cr\", \"percent\", \"sp\", and/or \"subst\" as values. The corresponding setopts (promptbang, etc.) are turned on, all other prompt-related options are turned off. The prompt_opts array preserves setopts even beyond the scope of localoptions, should your function need that. \nModify hooks \nUse of add-zsh-hook and add-zle-hook-widget is recommended (see the Manipulating Hook Functions section above). All hooks that follow the naming pattern prompt_theme_hook are automatically removed when the prompt theme changes or is disabled. \nDeclare cleanup \nIf your function makes any other changes that should be undone when the theme is disabled, your setup function may call \nwhere command should be suitably quoted. If your theme is ever disabled or replaced by another, command is executed with eval. You may declare more than one such cleanup hook. \nDefine preview \nDefine or autoload a function prompt_name_preview to display a simulated version of your prompt. A simple default previewer is defined by promptinit for themes that do not define their own. This preview function is called by ‘prompt -p’. \nProvide help \nDefine or autoload a function prompt_name_help to display documentation or help text for your theme. This help function is called by ‘prompt -h’. \n26.7 ZLE Functions\n26.7.1 Widgets\nThese functions all implement user-defined ZLE widgets (see Zsh Line Editor) which can be bound to keystrokes in interactive shells. To use them, your .zshrc should contain lines of the form \nautoload function\nzle -N function\nfollowed by an appropriate bindkey command to associate the function with a key sequence. Suggested bindings are described below. \nbash-style word functions \nIf you are looking for functions to implement moving over and editing words in the manner of bash, where only alphanumeric characters are considered word characters, you can use the functions described in the next section. The following is sufficient: \nautoload -U select-word-style\nselect-word-style bash\nforward-word-match, backward-word-match kill-word-match, backward-kill-word-match transpose-words-match, capitalize-word-match up-case-word-match, down-case-word-match delete-whole-word-match, select-word-match select-word-style, match-word-context, match-words-by-style \nThe first eight ‘-match’ functions are drop-in replacements for the builtin widgets without the suffix. By default they behave in a similar way. However, by the use of styles and the function select-word-style, the way words are matched can be altered. select-word-match is intended to be used as a text object in vi mode but with custom word styles. For comparison, the widgets described in Text Objects use fixed definitions of words, compatible with the vim editor. \nThe simplest way of configuring the functions is to use select-word-style, which can either be called as a normal function with the appropriate argument, or invoked as a user-defined widget that will prompt for the first character of the word style to be used. The first time it is invoked, the first eight -match functions will automatically replace the builtin versions, so they do not need to be loaded explicitly. \nThe word styles available are as follows. Only the first character is examined. \nbash \nWord characters are alphanumeric characters only. \nnormal \nAs in normal shell operation: word characters are alphanumeric characters plus any characters present in the string given by the parameter $WORDCHARS. \nshell \nWords are complete shell command arguments, possibly including complete quoted strings, or any tokens special to the shell. \nwhitespace \nWords are any set of characters delimited by whitespace. \ndefault \nRestore the default settings; this is usually the same as ‘normal’. \nAll but ‘default’ can be input as an upper case character, which has the same effect but with subword matching turned on. In this case, words with upper case characters are treated specially: each separate run of upper case characters, or an upper case character followed by any number of other characters, is considered a word. The style subword-range can supply an alternative character range to the default ‘[:upper:]’; the value of the style is treated as the contents of a ‘[...]’ pattern (note that the outer brackets should not be supplied, only those surrounding named ranges). \nMore control can be obtained using the zstyle command, as described in The zsh/zutil Module. Each style is looked up in the context :zle:widget where widget is the name of the user-defined widget, not the name of the function implementing it, so in the case of the definitions supplied by select-word-style the appropriate contexts are :zle:forward-word, and so on. The function select-word-style itself always defines styles for the context ‘:zle:*’ which can be overridden by more specific (longer) patterns as well as explicit contexts. \nThe style word-style specifies the rules to use. This may have the following values. \nnormal \nUse the standard shell rules, i.e. alphanumerics and $WORDCHARS, unless overridden by the styles word-chars or word-class. \nspecified \nSimilar to normal, but only the specified characters, and not also alphanumerics, are considered word characters. \nunspecified \nThe negation of specified. The given characters are those which will not be considered part of a word. \nshell \nWords are obtained by using the syntactic rules for generating shell command arguments. In addition, special tokens which are never command arguments such as ‘()’ are also treated as words. \nwhitespace \nWords are whitespace-delimited strings of characters. \nThe first three of those rules usually use $WORDCHARS, but the value in the parameter can be overridden by the style word-chars, which works in exactly the same way as $WORDCHARS. In addition, the style word-class uses character class syntax to group characters and takes precedence over word-chars if both are set. The word-class style does not include the surrounding brackets of the character class; for example, ‘-:[:alnum:]’ is a valid word-class to include all alphanumerics plus the characters ‘-’ and ‘:’. Be careful including ‘]’, ‘^’ and ‘-’ as these are special inside character classes. \nword-style may also have ‘-subword’ appended to its value to turn on subword matching, as described above. \nThe style skip-chars is mostly useful for transpose-words and similar functions. If set, it gives a count of characters starting at the cursor position which will not be considered part of the word and are treated as space, regardless of what they actually are. For example, if \nzstyle ':zle:transpose-words' skip-chars 1\nhas been set, and transpose-words-match is called with the cursor on the X of fooXbar, where X can be any character, then the resulting expression is barXfoo. \nFiner grained control can be obtained by setting the style word-context to an array of pairs of entries. Each pair of entries consists of a pattern and a subcontext. The shell argument the cursor is on is matched against each pattern in turn until one matches; if it does, the context is extended by a colon and the corresponding subcontext. Note that the test is made against the original word on the line, with no stripping of quotes. Special handling is done between words: the current context is examined and if it contains the string between the word is set to a single space; else if it is contains the string back, the word before the cursor is considered, else the word after cursor is considered. Some examples are given below. \nThe style skip-whitespace-first is only used with the forward-word widget. If it is set to true, then forward-word skips any non-word-characters, followed by any non-word-characters: this is similar to the behaviour of other word-orientated widgets, and also that used by other editors, however it differs from the standard zsh behaviour. When using select-word-style the widget is set in the context :zle:* to true if the word style is bash and false otherwise. It may be overridden by setting it in the more specific context :zle:forward-word*. \nIt is possible to create widgets with specific behaviour by defining a new widget implemented by the appropriate generic function, then setting a style for the context of the specific widget. For example, the following defines a widget backward-kill-space-word using backward-kill-word-match, the generic widget implementing backward-kill-word behaviour, and ensures that the new widget always implements space-delimited behaviour. \nzle -N backward-kill-space-word backward-kill-word-match\nzstyle :zle:backward-kill-space-word word-style space\nThe widget backward-kill-space-word can now be bound to a key. \nHere are some further examples of use of the styles, actually taken from the simplified interface in select-word-style: \nzstyle ':zle:*' word-style standard\nzstyle ':zle:*' word-chars ''\nImplements bash-style word handling for all widgets, i.e. only alphanumerics are word characters; equivalent to setting the parameter WORDCHARS empty for the given context. \nstyle ':zle:*kill*' word-style space\nUses space-delimited words for widgets with the word ‘kill’ in the name. Neither of the styles word-chars nor word-class is used in this case. \nHere are some examples of use of the word-context style to extend the context. \nzstyle ':zle:*' word-context \\ \n       \"*/*\" filename \"[[:space:]]\" whitespace\nzstyle ':zle:transpose-words:whitespace' word-style shell\nzstyle ':zle:transpose-words:filename' word-style normal\nzstyle ':zle:transpose-words:filename' word-chars ''\nThis provides two different ways of using transpose-words depending on whether the cursor is on whitespace between words or on a filename, here any word containing a /. On whitespace, complete arguments as defined by standard shell rules will be transposed. In a filename, only alphanumerics will be transposed. Elsewhere, words will be transposed using the default style for :zle:transpose-words. \nThe word matching and all the handling of zstyle settings is actually implemented by the function match-words-by-style. This can be used to create new user-defined widgets. The calling function should set the local parameter curcontext to :zle:widget, create the local parameter matched_words and call match-words-by-style with no arguments. On return, matched_words will be set to an array with the elements: (1) the start of the line (2) the word before the cursor (3) any non-word characters between that word and the cursor (4) any non-word character at the cursor position plus any remaining non-word characters before the next word, including all characters specified by the skip-chars style, (5) the word at or following the cursor (6) any non-word characters following that word (7) the remainder of the line. Any of the elements may be an empty string; the calling function should test for this to decide whether it can perform its function. \nIf the variable matched_words is defined by the caller to match-words-by-style as an associative array (local -A matched_words), then the seven values given above should be retrieved from it as elements named start, word-before-cursor, ws-before-cursor, ws-after-cursor, word-after-cursor, ws-after-word, and end. In addition the element is-word-start is 1 if the cursor is on the start of a word or subword, or on white space before it (the cases can be distinguished by testing the ws-after-cursor element) and 0 otherwise. This form is recommended for future compatibility. \nIt is possible to pass options with arguments to match-words-by-style to override the use of styles. The options are: \n-w \nword-style \n-s \nskip-chars \n-c \nword-class \n-C \nword-chars \n-r \nsubword-range \nFor example, match-words-by-style -w shell -c 0 may be used to extract the command argument around the cursor. \nThe word-context style is implemented by the function match-word-context. This should not usually need to be called directly. \nbracketed-paste-magic \nThe bracketed-paste widget (see Miscellaneous in Standard Widgets) inserts pasted text literally into the editor buffer rather than interpret it as keystrokes. This disables some common usages where the self-insert widget is replaced in order to accomplish some extra processing. An example is the contributed url-quote-magic widget described below. \nThe bracketed-paste-magic widget is meant to replace bracketed-paste with a wrapper that re-enables these self-insert actions, and other actions as selected by zstyles. Therefore this widget is installed with \nautoload -Uz bracketed-paste-magic\nzle -N bracketed-paste bracketed-paste-magic\nOther than enabling some widget processing, bracketed-paste-magic attempts to replicate bracketed-paste as faithfully as possible. \nThe following zstyles may be set to control processing of pasted text. All are looked up in the context ‘:bracketed-paste-magic’. \nactive-widgets \nA list of patterns matching widget names that should be activated during the paste. All other key sequences are processed as self-insert-unmeta. The default is ‘self-*’ so any user-defined widgets named with that prefix are active along with the builtin self-insert. \nIf this style is not set (explicitly deleted) or set to an empty value, no widgets are active and the pasted text is inserted literally. If the value includes ‘undefined-key’, any unknown sequences are discarded from the pasted text. \ninactive-keys \nThe inverse of active-widgets, a list of key sequences that always use self-insert-unmeta even when bound to an active widget. Note that this is a list of literal key sequences, not patterns. \npaste-init \nA list of function names, called in widget context (but not as widgets). The functions are called in order until one of them returns a non-zero status. The parameter ‘PASTED’ contains the initial state of the pasted text. All other ZLE parameters such as ‘BUFFER’ have their normal values and side-effects, and full history is available, so for example paste-init functions may move words from BUFFER into PASTED to make those words visible to the active-widgets. \nA non-zero return from a paste-init function does not prevent the paste itself from proceeding. \nLoading bracketed-paste-magic defines backward-extend-paste, a helper function for use in paste-init. \nzstyle :bracketed-paste-magic paste-init \\ \n       backward-extend-paste\nWhen a paste would insert into the middle of a word or append text to a word already on the line, backward-extend-paste moves the prefix from LBUFFER into PASTED so that the active-widgets see the full word so far. This may be useful with url-quote-magic. \npaste-finish \nAnother list of function names called in order until one returns non-zero. These functions are called after the pasted text has been processed by the active-widgets, but before it is inserted into ‘BUFFER’. ZLE parameters have their normal values and side-effects. \nA non-zero return from a paste-finish function does not prevent the paste itself from proceeding. \nLoading bracketed-paste-magic also defines quote-paste, a helper function for use in paste-finish. \nzstyle :bracketed-paste-magic paste-finish \\ \n       quote-paste\nzstyle :bracketed-paste-magic:finish quote-style \\ \n       qqq\nWhen the pasted text is inserted into BUFFER, it is quoted per the quote-style value. To forcibly turn off the built-in numeric prefix quoting of bracketed-paste, use: \nzstyle :bracketed-paste-magic:finish quote-style \\ \n       none\nImportant: During active-widgets processing of the paste (after paste-init and before paste-finish), BUFFER starts empty and history is restricted, so cursor motions, etc., may not pass outside of the pasted content. Text assigned to BUFFER by the active widgets is copied back into PASTED before paste-finish. \ncopy-earlier-word \nThis widget works like a combination of insert-last-word and copy-prev-shell-word. Repeated invocations of the widget retrieve earlier words on the relevant history line. With a numeric argument N, insert the Nth word from the history line; N may be negative to count from the end of the line. \nIf insert-last-word has been used to retrieve the last word on a previous history line, repeated invocations will replace that word with earlier words from the same line. \nOtherwise, the widget applies to words on the line currently being edited. The widget style can be set to the name of another widget that should be called to retrieve words. This widget must accept the same three arguments as insert-last-word. \ncycle-completion-positions \nAfter inserting an unambiguous string into the command line, the new function based completion system may know about multiple places in this string where characters are missing or differ from at least one of the possible matches. It will then place the cursor on the position it considers to be the most interesting one, i.e. the one where one can disambiguate between as many matches as possible with as little typing as possible. \nThis widget allows the cursor to be easily moved to the other interesting spots. It can be invoked repeatedly to cycle between all positions reported by the completion system. \ndelete-whole-word-match \nThis is another function which works like the -match functions described immediately above, i.e. using styles to decide the word boundaries. However, it is not a replacement for any existing function. \nThe basic behaviour is to delete the word around the cursor. There is no numeric argument handling; only the single word around the cursor is considered. If the widget contains the string kill, the removed text will be placed in the cutbuffer for future yanking. This can be obtained by defining kill-whole-word-match as follows: \nzle -N kill-whole-word-match delete-whole-word-match\nand then binding the widget kill-whole-word-match. \nup-line-or-beginning-search, down-line-or-beginning-search \nThese widgets are similar to the builtin functions up-line-or-search and down-line-or-search: if in a multiline buffer they move up or down within the buffer, otherwise they search for a history line matching the start of the current line. In this case, however, they search for a line which matches the current line up to the current cursor position, in the manner of history-beginning-search-backward and -forward, rather than the first word on the line. \nedit-command-line \nEdit the command line using your visual editor, as in ksh. \nbindkey -M vicmd v edit-command-line\nThe editor to be used can also be specified using the editor style in the context of the widget. It is specified as an array of command and arguments: \nzstyle :zle:edit-command-line editor gvim -f\nexpand-absolute-path \nExpand the file name under the cursor to an absolute path, resolving symbolic links. Where possible, the initial path segment is turned into a named directory or reference to a user’s home directory. \nhistory-search-end \nThis function implements the widgets history-beginning-search-backward-end and history-beginning-search-forward-end. These commands work by first calling the corresponding builtin widget (see History Control) and then moving the cursor to the end of the line. The original cursor position is remembered and restored before calling the builtin widget a second time, so that the same search is repeated to look farther through the history. \nAlthough you autoload only one function, the commands to use it are slightly different because it implements two widgets. \nzle -N history-beginning-search-backward-end \\ \n       history-search-end\nzle -N history-beginning-search-forward-end \\ \n       history-search-end\nbindkey '\\e^P' history-beginning-search-backward-end\nbindkey '\\e^N' history-beginning-search-forward-end\nhistory-beginning-search-menu \nThis function implements yet another form of history searching. The text before the cursor is used to select lines from the history, as for history-beginning-search-backward except that all matches are shown in a numbered menu. Typing the appropriate digits inserts the full history line. Note that leading zeroes must be typed (they are only shown when necessary for removing ambiguity). The entire history is searched; there is no distinction between forwards and backwards. \nWith a numeric argument, the search is not anchored to the start of the line; the string typed by the use may appear anywhere in the line in the history. \nIf the widget name contains ‘-end’ the cursor is moved to the end of the line inserted. If the widget name contains ‘-space’ any space in the text typed is treated as a wildcard and can match anything (hence a leading space is equivalent to giving a numeric argument). Both forms can be combined, for example: \nzle -N history-beginning-search-menu-space-end \\ \n       history-beginning-search-menu\nhistory-pattern-search \nThe function history-pattern-search implements widgets which prompt for a pattern with which to search the history backwards or forwards. The pattern is in the usual zsh format, however the first character may be ^ to anchor the search to the start of the line, and the last character may be $ to anchor the search to the end of the line. If the search was not anchored to the end of the line the cursor is positioned just after the pattern found. \nThe commands to create bindable widgets are similar to those in the example immediately above: \nautoload -U history-pattern-search\nzle -N history-pattern-search-backward history-pattern-search\nzle -N history-pattern-search-forward history-pattern-search\nincarg \nTyping the keystrokes for this widget with the cursor placed on or to the left of an integer causes that integer to be incremented by one. With a numeric argument, the number is incremented by the amount of the argument (decremented if the numeric argument is negative). The shell parameter incarg may be set to change the default increment to something other than one. \nincremental-complete-word \nThis allows incremental completion of a word. After starting this command, a list of completion choices can be shown after every character you type, which you can delete with ^H or DEL. Pressing return accepts the completion so far and returns you to normal editing (that is, the command line is not immediately executed). You can hit TAB to do normal completion, ^G to abort back to the state when you started, and ^D to list the matches. \nThis works only with the new function based completion system. \nbindkey '^Xi' incremental-complete-word\ninsert-composed-char \nThis function allows you to compose characters that don’t appear on the keyboard to be inserted into the command line. The command is followed by two keys corresponding to ASCII characters (there is no prompt). For accented characters, the two keys are a base character followed by a code for the accent, while for other special characters the two characters together form a mnemonic for the character to be inserted. The two-character codes are a subset of those given by RFC 1345 (see for example http://www.faqs.org/rfcs/rfc1345.html). \nThe function may optionally be followed by up to two characters which replace one or both of the characters read from the keyboard; if both characters are supplied, no input is read. For example, insert-composed-char a: can be used within a widget to insert an a with umlaut into the command line. This has the advantages over use of a literal character that it is more portable. \nFor best results zsh should have been built with support for multibyte characters (configured with –enable-multibyte); however, the function works for the limited range of characters available in single-byte character sets such as ISO-8859-1. \nThe character is converted into the local representation and inserted into the command line at the cursor position. (The conversion is done within the shell, using whatever facilities the C library provides.) With a numeric argument, the character and its code are previewed in the status line \nThe function may be run outside zle in which case it prints the character (together with a newline) to standard output. Input is still read from keystrokes. \nSee insert-unicode-char for an alternative way of inserting Unicode characters using their hexadecimal character number. \nThe set of accented characters is reasonably complete up to Unicode character U+0180, the set of special characters less so. However, it is very sporadic from that point. Adding new characters is easy, however; see the function define-composed-chars. Please send any additions to zsh-workers@zsh.org. \nThe codes for the second character when used to accent the first are as follows. Note that not every character can take every accent. \n! \nGrave. \n’ \nAcute. \n> \nCircumflex. \n? \nTilde. (This is not ~ as RFC 1345 does not assume that character is present on the keyboard.) \n- \nMacron. (A horizontal bar over the base character.) \n( \nBreve. (A shallow dish shape over the base character.) \n. \nDot above the base character, or in the case of i no dot, or in the case of L and l a centered dot. \n: \nDiaeresis (Umlaut). \nc \nCedilla. \n_ \nUnderline, however there are currently no underlined characters. \n/ \nStroke through the base character. \n\" \nDouble acute (only supported on a few letters). \n; \nOgonek. (A little forward facing hook at the bottom right of the character.) \n< \nCaron. (A little v over the letter.) \n0 \nCircle over the base character. \n2 \nHook over the base character. \n9 \nHorn over the base character. \nThe most common characters from the Arabic, Cyrillic, Greek and Hebrew alphabets are available; consult RFC 1345 for the appropriate sequences. In addition, a set of two letter codes not in RFC 1345 are available for the double-width characters corresponding to ASCII characters from ! to ~ (0x21 to 0x7e) by preceding the character with ^, for example ^A for a double-width A. \nThe following other two-character sequences are understood. \nASCII characters \nThese are already present on most keyboards: \n<( \nLeft square bracket \n// \nBackslash (solidus) \n)> \nRight square bracket \n(! \nLeft brace (curly bracket) \n!! \nVertical bar (pipe symbol) \n!) \nRight brace (curly bracket) \n’? \nTilde \nSpecial letters \nCharacters found in various variants of the Latin alphabet: \nss \nEszett (scharfes S) \nD-, d- \nEth \nTH, th \nThorn \nkk \nKra \n’n \n’n \nNG, ng \nNg \nOI, oi \nOi \nyr \nyr \nED \nezh \nCurrency symbols \nCt \nCent \nPd \nPound sterling (also lira and others) \nCu \nCurrency \nYe \nYen \nEu \nEuro (N.B. not in RFC 1345) \nPunctuation characters \nReferences to \"right\" quotes indicate the shape (like a 9 rather than 6) rather than their grammatical use. (For example, a \"right\" low double quote is used to open quotations in German.) \n!I \nInverted exclamation mark \nBB \nBroken vertical bar \nSE \nSection \nCo \nCopyright \n-a \nSpanish feminine ordinal indicator \n<< \nLeft guillemet \n-- \nSoft hyphen \nRg \nRegistered trade mark \nPI \nPilcrow (paragraph) \n-o \nSpanish masculine ordinal indicator \n>> \nRight guillemet \n?I \nInverted question mark \n-1 \nHyphen \n-N \nEn dash \n-M \nEm dash \n-3 \nHorizontal bar \n:3 \nVertical ellipsis \n.3 \nHorizontal midline ellipsis \n!2 \nDouble vertical line \n=2 \nDouble low line \n’6 \nLeft single quote \n’9 \nRight single quote \n.9 \n\"Right\" low quote \n9’ \nReversed \"right\" quote \n\"6 \nLeft double quote \n\"9 \nRight double quote \n:9 \n\"Right\" low double quote \n9\" \nReversed \"right\" double quote \n/- \nDagger \n/= \nDouble dagger \nMathematical symbols \nDG \nDegree \n-2, +-, -+ \n- sign, +/- sign, -/+ sign \n2S \nSuperscript 2 \n3S \nSuperscript 3 \n1S \nSuperscript 1 \nMy \nMicro \n.M \nMiddle dot \n14 \nQuarter \n12 \nHalf \n34 \nThree quarters \n*X \nMultiplication \n-: \nDivision \n%0 \nPer mille \nFA, TE, /0 \nFor all, there exists, empty set \ndP, DE, NB \nPartial derivative, delta (increment), del (nabla) \n(-, -) \nElement of, contains \n*P, +Z \nProduct, sum \n*-, Ob, Sb \nAsterisk, ring, bullet \nRT, 0(, 00 \nRoot sign, proportional to, infinity \nOther symbols \ncS, cH, cD, cC \nCard suits: spades, hearts, diamonds, clubs \nMd, M8, M2, Mb, Mx, MX \nMusical notation: crotchet (quarter note), quaver (eighth note), semiquavers (sixteenth notes), flag sign, natural sign, sharp sign \nFm, Ml \nFemale, male \nAccents on their own \n’> \nCircumflex (same as caret, ^) \n’! \nGrave (same as backtick, ‘) \n’, \nCedilla \n’: \nDiaeresis (Umlaut) \n’m \nMacron \n” \nAcute \ninsert-files \nThis function allows you type a file pattern, and see the results of the expansion at each step. When you hit return, all expansions are inserted into the command line. \nbindkey '^Xf' insert-files\ninsert-unicode-char \nWhen first executed, the user inputs a set of hexadecimal digits. This is terminated with another call to insert-unicode-char. The digits are then turned into the corresponding Unicode character. For example, if the widget is bound to ^XU, the character sequence ‘^XU 4 c ^XU’ inserts L (Unicode U+004c). \nSee insert-composed-char for a way of inserting characters using a two-character mnemonic. \nnarrow-to-region [ -p pre ] [ -P post ] [ -S statepm | -R statepm | [ -l lbufvar ] [ -r rbufvar ] ] [ -n ] [ start end ] narrow-to-region-invisible \nNarrow the editable portion of the buffer to the region between the cursor and the mark, which may be in either order. The region may not be empty. \nnarrow-to-region may be used as a widget or called as a function from a user-defined widget; by default, the text outside the editable area remains visible. A recursive-edit is performed and the original widening status is then restored. Various options and arguments are available when it is called as a function. \nThe options -p pretext and -P posttext may be used to replace the text before and after the display for the duration of the function; either or both may be an empty string. \nIf the option -n is also given, pretext or posttext will only be inserted if there is text before or after the region respectively which will be made invisible. \nTwo numeric arguments may be given which will be used instead of the cursor and mark positions. \nThe option -S statepm is used to narrow according to the other options while saving the original state in the parameter with name statepm, while the option -R statepm is used to restore the state from the parameter; note in both cases the name of the parameter is required. In the second case, other options and arguments are irrelevant. When this method is used, no recursive-edit is performed; the calling widget should call this function with the option -S, perform its own editing on the command line or pass control to the user via ‘zle recursive-edit’, then call this function with the option -R. The argument statepm must be a suitable name for an ordinary parameter, except that parameters beginning with the prefix _ntr_ are reserved for use within narrow-to-region. Typically the parameter will be local to the calling function. \nThe options -l lbufvar and -r rbufvar may be used to specify parameters where the widget will store the resulting text from the operation. The parameter lbufvar will contain LBUFFER and rbufvar will contain RBUFFER. Neither of these two options may be used with -S or -R. \nnarrow-to-region-invisible is a simple widget which calls narrow-to-region with arguments which replace any text outside the region with ‘...’. It does not take any arguments. \nThe display is restored (and the widget returns) upon any zle command which would usually cause the line to be accepted or aborted. Hence an additional such command is required to accept or abort the current line. \nThe return status of both widgets is zero if the line was accepted, else non-zero. \nHere is a trivial example of a widget using this feature. \nlocal state\nnarrow-to-region -p $'Editing restricted region\\n' \\ \n  -P '' -S state\nzle recursive-edit\nnarrow-to-region -R state\npredict-on \nThis set of functions implements predictive typing using history search. After predict-on, typing characters causes the editor to look backward in the history for the first line beginning with what you have typed so far. After predict-off, editing returns to normal for the line found. In fact, you often don’t even need to use predict-off, because if the line doesn’t match something in the history, adding a key performs standard completion, and then inserts itself if no completions were found. However, editing in the middle of a line is liable to confuse prediction; see the toggle style below. \nWith the function based completion system (which is needed for this), you should be able to type TAB at almost any point to advance the cursor to the next ‘‘interesting’’ character position (usually the end of the current word, but sometimes somewhere in the middle of the word). And of course as soon as the entire line is what you want, you can accept with return, without needing to move the cursor to the end first. \nThe first time predict-on is used, it creates several additional widget functions: \ndelete-backward-and-predict \nReplaces the backward-delete-char widget. You do not need to bind this yourself. \ninsert-and-predict \nImplements predictive typing by replacing the self-insert widget. You do not need to bind this yourself. \npredict-off \nTurns off predictive typing. \nAlthough you autoload only the predict-on function, it is necessary to create a keybinding for predict-off as well. \nzle -N predict-on\nzle -N predict-off\nbindkey '^X^Z' predict-on\nbindkey '^Z' predict-off\nread-from-minibuffer \nThis is most useful when called as a function from inside a widget, but will work correctly as a widget in its own right. It prompts for a value below the current command line; a value may be input using all of the standard zle operations (and not merely the restricted set available when executing, for example, execute-named-cmd). The value is then returned to the calling function in the parameter $REPLY and the editing buffer restored to its previous state. If the read was aborted by a keyboard break (typically ^G), the function returns status 1 and $REPLY is not set. \nIf one argument is supplied to the function it is taken as a prompt, otherwise ‘? ’ is used. If two arguments are supplied, they are the prompt and the initial value of $LBUFFER, and if a third argument is given it is the initial value of $RBUFFER. This provides a default value and starting cursor placement. Upon return the entire buffer is the value of $REPLY. \nOne option is available: ‘-k num’ specifies that num characters are to be read instead of a whole line. The line editor is not invoked recursively in this case, so depending on the terminal settings the input may not be visible, and only the input keys are placed in $REPLY, not the entire buffer. Note that unlike the read builtin num must be given; there is no default. \nThe name is a slight misnomer, as in fact the shell’s own minibuffer is not used. Hence it is still possible to call executed-named-cmd and similar functions while reading a value. \nreplace-argument, replace-argument-edit \nThe function replace-argument can be used to replace a command line argument in the current command line or, if the current command line is empty, in the last command line executed (the new command line is not executed). Arguments are as delimited by standard shell syntax, \nIf a numeric argument is given, that specifies the argument to be replaced. 0 means the command name, as in history expansion. A negative numeric argument counts backward from the last word. \nIf no numeric argument is given, the current argument is replaced; this is the last argument if the previous history line is being used. \nThe function prompts for a replacement argument. \nIf the widget contains the string edit, for example is defined as \nzle -N replace-argument-edit replace-argument\nthen the function presents the current value of the argument for editing, otherwise the editing buffer for the replacement is initially empty. \nreplace-string, replace-pattern replace-string-again, replace-pattern-again \nThe function replace-string implements three widgets. If defined under the same name as the function, it prompts for two strings; the first (source) string will be replaced by the second everywhere it occurs in the line editing buffer. \nIf the widget name contains the word ‘pattern’, for example by defining the widget using the command ‘zle -N replace-pattern replace-string’, then the matching is performed using zsh patterns. All zsh extended globbing patterns can be used in the source string; note that unlike filename generation the pattern does not need to match an entire word, nor do glob qualifiers have any effect. In addition, the replacement string can contain parameter or command substitutions. Furthermore, a ‘&’ in the replacement string will be replaced with the matched source string, and a backquoted digit ‘\\N’ will be replaced by the Nth parenthesised expression matched. The form ‘\\{N}’ may be used to protect the digit from following digits. \nIf the widget instead contains the word ‘regex’ (or ‘regexp’), then the matching is performed using regular expressions, respecting the setting of the option RE_MATCH_PCRE (see the description of the function regexp-replace below). The special replacement facilities described above for pattern matching are available. \nBy default the previous source or replacement string will not be offered for editing. However, this feature can be activated by setting the style edit-previous in the context :zle:widget (for example, :zle:replace-string) to true. In addition, a positive numeric argument forces the previous values to be offered, a negative or zero argument forces them not to be. \nThe function replace-string-again can be used to repeat the previous replacement; no prompting is done. As with replace-string, if the name of the widget contains the word ‘pattern’ or ‘regex’, pattern or regular expression matching is performed, else a literal string replacement. Note that the previous source and replacement text are the same whether pattern, regular expression or string matching is used. \nIn addition, replace-string shows the previous replacement above the prompt, so long as there was one during the current session; if the source string is empty, that replacement will be repeated without the widget prompting for a replacement string. \nFor example, starting from the line: \nprint This line contains fan and fond\nand invoking replace-pattern with the source string ‘f(?)n’ and the replacement string ‘c\\1r’ produces the not very useful line: \nprint This line contains car and cord\nThe range of the replacement string can be limited by using the narrow-to-region-invisible widget. One limitation of the current version is that undo will cycle through changes to the replacement and source strings before undoing the replacement itself. \nsend-invisible \nThis is similar to read-from-minibuffer in that it may be called as a function from a widget or as a widget of its own, and interactively reads input from the keyboard. However, the input being typed is concealed and a string of asterisks (‘*’) is shown instead. The value is saved in the parameter $INVISIBLE to which a reference is inserted into the editing buffer at the restored cursor position. If the read was aborted by a keyboard break (typically ^G) or another escape from editing such as push-line, $INVISIBLE is set to empty and the original buffer is restored unchanged. \nIf one argument is supplied to the function it is taken as a prompt, otherwise ‘Non-echoed text: ’ is used (as in emacs). If a second and third argument are supplied they are used to begin and end the reference to $INVISIBLE that is inserted into the buffer. The default is to open with ${, then INVISIBLE, and close with }, but many other effects are possible. \nsmart-insert-last-word \nThis function may replace the insert-last-word widget, like so: \nzle -N insert-last-word smart-insert-last-word\nWith a numeric argument, or when passed command line arguments in a call from another widget, it behaves like insert-last-word, except that words in comments are ignored when INTERACTIVE_COMMENTS is set. \nOtherwise, the rightmost ‘‘interesting’’ word from the previous command is found and inserted. The default definition of ‘‘interesting’’ is that the word contains at least one alphabetic character, slash, or backslash. This definition may be overridden by use of the match style. The context used to look up the style is the widget name, so usually the context is :insert-last-word. However, you can bind this function to different widgets to use different patterns: \nzle -N insert-last-assignment smart-insert-last-word\nzstyle :insert-last-assignment match '[[:alpha:]][][[:alnum:]]#=*'\nbindkey '\\e=' insert-last-assignment\nIf no interesting word is found and the auto-previous style is set to a true value, the search continues upward through the history. When auto-previous is unset or false (the default), the widget must be invoked repeatedly in order to search earlier history lines. \ntranspose-lines \nOnly useful with a multi-line editing buffer; the lines here are lines within the current on-screen buffer, not history lines. The effect is similar to the function of the same name in Emacs. \nTranspose the current line with the previous line and move the cursor to the start of the next line. Repeating this (which can be done by providing a positive numeric argument) has the effect of moving the line above the cursor down by a number of lines. \nWith a negative numeric argument, requires two lines above the cursor. These two lines are transposed and the cursor moved to the start of the previous line. Using a numeric argument less than -1 has the effect of moving the line above the cursor up by minus that number of lines. \nurl-quote-magic \nThis widget replaces the built-in self-insert to make it easier to type URLs as command line arguments. As you type, the input character is analyzed and, if it may need quoting, the current word is checked for a URI scheme. If one is found and the current word is not already in quotes, a backslash is inserted before the input character. \nStyles to control quoting behavior: \nurl-metas \nThis style is looked up in the context ‘:url-quote-magic:scheme’ (where scheme is that of the current URL, e.g. \"ftp\"). The value is a string listing the characters to be treated as globbing metacharacters when appearing in a URL using that scheme. The default is to quote all zsh extended globbing characters, excluding ’<’ and ’>’ but including braces (as in brace expansion). See also url-seps. \nurl-seps \nLike url-metas, but lists characters that should be considered command separators, redirections, history references, etc. The default is to quote the standard set of shell separators, excluding those that overlap with the extended globbing characters, but including ’<’ and ’>’ and the first character of $histchars. \nurl-globbers \nThis style is looked up in the context ‘:url-quote-magic’. The values form a list of command names that are expected to do their own globbing on the URL string. This implies that they are aliased to use the ‘noglob’ modifier. When the first word on the line matches one of the values and the URL refers to a local file (see url-local-schema), only the url-seps characters are quoted; the url-metas are left alone, allowing them to affect command-line parsing, completion, etc. The default values are a literal ‘noglob’ plus (when the zsh/parameter module is available) any commands aliased to the helper function ‘urlglobber’ or its alias ‘globurl’. \nurl-local-schema \nThis style is always looked up in the context ‘:urlglobber’, even though it is used by both url-quote-magic and urlglobber. The values form a list of URI schema that should be treated as referring to local files by their real local path names, as opposed to files which are specified relative to a web-server-defined document root. The defaults are \"ftp\" and \"file\". \nurl-other-schema \nLike url-local-schema, but lists all other URI schema upon which urlglobber and url-quote-magic should act. If the URI on the command line does not have a scheme appearing either in this list or in url-local-schema, it is not magically quoted. The default values are \"http\", \"https\", and \"ftp\". When a scheme appears both here and in url-local-schema, it is quoted differently depending on whether the command name appears in url-globbers. \nLoading url-quote-magic also defines a helper function ‘urlglobber’ and aliases ‘globurl’ to ‘noglob urlglobber’. This function takes a local URL apart, attempts to pattern-match the local file portion of the URL path, and then puts the results back into URL format again. \nvi-pipe \nThis function reads a movement command from the keyboard and then prompts for an external command. The part of the buffer covered by the movement is piped to the external command and then replaced by the command’s output. If the movement command is bound to vi-pipe, the current line is used. \nThe function serves as an example for reading a vi movement command from within a user-defined widget. \nwhich-command \nThis function is a drop-in replacement for the builtin widget which-command. It has enhanced behaviour, in that it correctly detects whether or not the command word needs to be expanded as an alias; if so, it continues tracing the command word from the expanded alias until it reaches the command that will be executed. \nThe style whence is available in the context :zle:$WIDGET; this may be set to an array to give the command and options that will be used to investigate the command word found. The default is whence -c. \nzcalc-auto-insert \nThis function is useful together with the zcalc function described in Mathematical Functions. It should be bound to a key representing a binary operator such as ‘+’, ‘-’, ‘*’ or ‘/’. When running in zcalc, if the key occurs at the start of the line or immediately following an open parenthesis, the text \"ans \" is inserted before the representation of the key itself. This allows easy use of the answer from the previous calculation in the current line. The text to be inserted before the symbol typed can be modified by setting the variable ZCALC_AUTO_INSERT_PREFIX. \nHence, for example, typing ‘+12’ followed by return adds 12 to the previous result. \nIf zcalc is in RPN mode (-r option) the effect of this binding is automatically suppressed as operators alone on a line are meaningful. \nWhen not in zcalc, the key simply inserts the symbol itself. \n26.7.2 Utility Functions\nThese functions are useful in constructing widgets. They should be loaded with ‘autoload -U function’ and called as indicated from user-defined widgets. \nsplit-shell-arguments \nThis function splits the line currently being edited into shell arguments and whitespace. The result is stored in the array reply. The array contains all the parts of the line in order, starting with any whitespace before the first argument, and finishing with any whitespace after the last argument. Hence (so long as the option KSH_ARRAYS is not set) whitespace is given by odd indices in the array and arguments by even indices. Note that no stripping of quotes is done; joining together all the elements of reply in order is guaranteed to produce the original line. \nThe parameter REPLY is set to the index of the word in reply which contains the character after the cursor, where the first element has index 1. The parameter REPLY2 is set to the index of the character under the cursor in that word, where the first character has index 1. \nHence reply, REPLY and REPLY2 should all be made local to the enclosing function. \nSee the function modify-current-argument, described below, for an example of how to call this function. \nmodify-current-argument [ expr-using-$ARG | func ] \nThis function provides a simple method of allowing user-defined widgets to modify the command line argument under the cursor (or immediately to the left of the cursor if the cursor is between arguments). \nThe argument can be an expression which when evaluated operates on the shell parameter ARG, which will have been set to the command line argument under the cursor. The expression should be suitably quoted to prevent it being evaluated too early. \nAlternatively, if the argument does not contain the string ARG, it is assumed to be a shell function, to which the current command line argument is passed as the only argument. The function should set the variable REPLY to the new value for the command line argument. If the function returns non-zero status, so does the calling function. \nFor example, a user-defined widget containing the following code converts the characters in the argument under the cursor into all upper case: \nmodify-current-argument '${(U)ARG}'\nThe following strips any quoting from the current word (whether backslashes or one of the styles of quotes), and replaces it with single quoting throughout: \nmodify-current-argument '${(qq)${(Q)ARG}}'\nThe following performs directory expansion on the command line argument and replaces it by the absolute path: \nexpand-dir() {\n  REPLY=${~1}\n  REPLY=${REPLY:a}\n}\nmodify-current-argument expand-dir\nIn practice the function expand-dir would probably not be defined within the widget where modify-current-argument is called. \n26.7.3 Styles\nThe behavior of several of the above widgets can be controlled by the use of the zstyle mechanism. In particular, widgets that interact with the completion system pass along their context to any completions that they invoke. \nbreak-keys \nThis style is used by the incremental-complete-word widget. Its value should be a pattern, and all keys matching this pattern will cause the widget to stop incremental completion without the key having any further effect. Like all styles used directly by incremental-complete-word, this style is looked up using the context ‘:incremental’. \ncompleter \nThe incremental-complete-word and insert-and-predict widgets set up their top-level context name before calling completion. This allows one to define different sets of completer functions for normal completion and for these widgets. For example, to use completion, approximation and correction for normal completion, completion and correction for incremental completion and only completion for prediction one could use: \nzstyle ':completion:*' completer \\ \n        _complete _correct _approximate\nzstyle ':completion:incremental:*' completer \\ \n        _complete _correct\nzstyle ':completion:predict:*' completer \\ \n        _complete\nIt is a good idea to restrict the completers used in prediction, because they may be automatically invoked as you type. The _list and _menu completers should never be used with prediction. The _approximate, _correct, _expand, and _match completers may be used, but be aware that they may change characters anywhere in the word behind the cursor, so you need to watch carefully that the result is what you intended. \ncursor \nThe insert-and-predict widget uses this style, in the context ‘:predict’, to decide where to place the cursor after completion has been tried. Values are: \ncomplete \nThe cursor is left where it was when completion finished, but only if it is after a character equal to the one just inserted by the user. If it is after another character, this value is the same as ‘key’. \nkey \nThe cursor is left after the nth occurrence of the character just inserted, where n is the number of times that character appeared in the word before completion was attempted. In short, this has the effect of leaving the cursor after the character just typed even if the completion code found out that no other characters need to be inserted at that position. \nAny other value for this style unconditionally leaves the cursor at the position where the completion code left it. \nlist \nWhen using the incremental-complete-word widget, this style says if the matches should be listed on every key press (if they fit on the screen). Use the context prefix ‘:completion:incremental’. \nThe insert-and-predict widget uses this style to decide if the completion should be shown even if there is only one possible completion. This is done if the value of this style is the string always. In this case the context is ‘:predict’ (not ‘:completion:predict’). \nmatch \nThis style is used by smart-insert-last-word to provide a pattern (using full EXTENDED_GLOB syntax) that matches an interesting word. The context is the name of the widget to which smart-insert-last-word is bound (see above). The default behavior of smart-insert-last-word is equivalent to: \nzstyle :insert-last-word match '*[[:alpha:]/\\\\]*'\nHowever, you might want to include words that contain spaces: \nzstyle :insert-last-word match '*[[:alpha:][:space:]/\\\\]*'\nOr include numbers as long as the word is at least two characters long: \nzstyle :insert-last-word match '*([[:digit:]]?|[[:alpha:]/\\\\])*'\nThe above example causes redirections like \"2>\" to be included. \nprompt \nThe incremental-complete-word widget shows the value of this style in the status line during incremental completion. The string value may contain any of the following substrings in the manner of the PS1 and other prompt parameters: \n%c \nReplaced by the name of the completer function that generated the matches (without the leading underscore). \n%l \nWhen the list style is set, replaced by ‘...’ if the list of matches is too long to fit on the screen and with an empty string otherwise. If the list style is ‘false’ or not set, ‘%l’ is always removed. \n%n \nReplaced by the number of matches generated. \n%s \nReplaced by ‘-no match-’, ‘-no prefix-’, or an empty string if there is no completion matching the word on the line, if the matches have no common prefix different from the word on the line, or if there is such a common prefix, respectively. \n%u \nReplaced by the unambiguous part of all matches, if there is any, and if it is different from the word on the line. \nLike ‘break-keys’, this uses the ‘:incremental’ context. \nstop-keys \nThis style is used by the incremental-complete-word widget. Its value is treated similarly to the one for the break-keys style (and uses the same context: ‘:incremental’). However, in this case all keys matching the pattern given as its value will stop incremental completion and will then execute their usual function. \ntoggle \nThis boolean style is used by predict-on and its related widgets in the context ‘:predict’. If set to one of the standard ‘true’ values, predictive typing is automatically toggled off in situations where it is unlikely to be useful, such as when editing a multi-line buffer or after moving into the middle of a line and then deleting a character. The default is to leave prediction turned on until an explicit call to predict-off. \nverbose \nThis boolean style is used by predict-on and its related widgets in the context ‘:predict’. If set to one of the standard ‘true’ values, these widgets display a message below the prompt when the predictive state is toggled. This is most useful in combination with the toggle style. The default does not display these messages. \nwidget \nThis style is similar to the command style: For widget functions that use zle to call other widgets, this style can sometimes be used to override the widget which is called. The context for this style is the name of the calling widget (not the name of the calling function, because one function may be bound to multiple widget names). \nzstyle :copy-earlier-word widget smart-insert-last-word\nCheck the documentation for the calling widget or function to determine whether the widget style is used. \n26.8 Exception Handling\nTwo functions are provided to enable zsh to provide exception handling in a form that should be familiar from other languages. \nthrow exception \nThe function throw throws the named exception. The name is an arbitrary string and is only used by the throw and catch functions. An exception is for the most part treated the same as a shell error, i.e. an unhandled exception will cause the shell to abort all processing in a function or script and to return to the top level in an interactive shell. \ncatch exception-pattern \nThe function catch returns status zero if an exception was thrown and the pattern exception-pattern matches its name. Otherwise it returns status 1. exception-pattern is a standard shell pattern, respecting the current setting of the EXTENDED_GLOB option. An alias catch is also defined to prevent the argument to the function from matching filenames, so patterns may be used unquoted. Note that as exceptions are not fundamentally different from other shell errors it is possible to catch shell errors by using an empty string as the exception name. The shell variable CAUGHT is set by catch to the name of the exception caught. It is possible to rethrow an exception by calling the throw function again once an exception has been caught. \nThe functions are designed to be used together with the always construct described in Complex Commands. This is important as only this construct provides the required support for exceptions. A typical example is as follows. \n{\n  # \"try\" block\n  # ... nested code here calls \"throw MyExcept\"\n} always {\n  # \"always\" block\n  if catch MyExcept; then\n    print \"Caught exception MyExcept\"\n  elif catch ''; then\n    print \"Caught a shell error.  Propagating...\"\n    throw ''\n  fi\n  # Other exceptions are not handled but may be caught further\n  # up the call stack.\n}\nIf all exceptions should be caught, the following idiom might be preferable. \n{\n  # ... nested code here throws an exception\n} always {\n  if catch *; then\n    case $CAUGHT in\n      (MyExcept)\n      print \"Caught my own exception\"\n      ;;\n      (*)\n      print \"Caught some other exception\"\n      ;;\n    esac\n  fi\n}\nIn common with exception handling in other languages, the exception may be thrown by code deeply nested inside the ‘try’ block. However, note that it must be thrown inside the current shell, not in a subshell forked for a pipeline, parenthesised current-shell construct, or some form of command or process substitution. \nThe system internally uses the shell variable EXCEPTION to record the name of the exception between throwing and catching. One drawback of this scheme is that if the exception is not handled the variable EXCEPTION remains set and may be incorrectly recognised as the name of an exception if a shell error subsequently occurs. Adding unset EXCEPTION at the start of the outermost layer of any code that uses exception handling will eliminate this problem. \n26.9 MIME Functions\nThree functions are available to provide handling of files recognised by extension, for example to dispatch a file text.ps when executed as a command to an appropriate viewer. \nzsh-mime-setup [ -fv ] [ -l [ suffix ... ] ] zsh-mime-handler [ -l ] command argument ... \nThese two functions use the files ~/.mime.types and /etc/mime.types, which associate types and extensions, as well as ~/.mailcap and /etc/mailcap files, which associate types and the programs that handle them. These are provided on many systems with the Multimedia Internet Mail Extensions. \nTo enable the system, the function zsh-mime-setup should be autoloaded and run. This allows files with extensions to be treated as executable; such files be completed by the function completion system. The function zsh-mime-handler should not need to be called by the user. \nThe system works by setting up suffix aliases with ‘alias -s’. Suffix aliases already installed by the user will not be overwritten. \nFor suffixes defined in lower case, upper case variants will also automatically be handled (e.g. PDF is automatically handled if handling for the suffix pdf is defined), but not vice versa. \nRepeated calls to zsh-mime-setup do not override the existing mapping between suffixes and executable files unless the option -f is given. Note, however, that this does not override existing suffix aliases assigned to handlers other than zsh-mime-handler. \nCalling zsh-mime-setup with the option -l lists the existing mappings without altering them. Suffixes to list (which may contain pattern characters that should be quoted from immediate interpretation on the command line) may be given as additional arguments, otherwise all suffixes are listed. \nCalling zsh-mime-setup with the option -v causes verbose output to be shown during the setup operation. \nThe system respects the mailcap flags needsterminal and copiousoutput; see mailcap(4) or mailcap(5) (the man page’s name varies across platforms). \nThe functions use the following styles, which are defined with the zstyle builtin command (The zsh/zutil Module). They should be defined before zsh-mime-setup is run. The contexts used all start with :mime:, with additional components in some cases. It is recommended that a trailing * (suitably quoted) be appended to style patterns in case the system is extended in future. Some examples are given below. \nFor files that have multiple suffixes, e.g. .pdf.gz, where the context includes the suffix it will be looked up starting with the longest possible suffix until a match for the style is found. For example, if .pdf.gz produces a match for the handler, that will be used; otherwise the handler for .gz will be used. Note that, owing to the way suffix aliases work, it is always required that there be a handler for the shortest possible suffix, so in this example .pdf.gz can only be handled if .gz is also handled (though not necessarily in the same way). Alternatively, if no handling for .gz on its own is needed, simply adding the command \nalias -s gz=zsh-mime-handler\nto the initialisation code is sufficient; .gz will not be handled on its own, but may be in combination with other suffixes. \ncurrent-shell \nIf this boolean style is true, the mailcap handler for the context in question is run using the eval builtin instead of by starting a new sh process. This is more efficient, but may not work in the occasional cases where the mailcap handler uses strict POSIX syntax. \ndisown \nIf this boolean style is true, mailcap handlers started in the background will be disowned, i.e. not subject to job control within the parent shell. Such handlers nearly always produce their own windows, so the only likely harmful side effect of setting the style is that it becomes harder to kill jobs from within the shell. \nexecute-as-is \nThis style gives a list of patterns to be matched against files passed for execution with a handler program. If the file matches the pattern, the entire command line is executed in its current form, with no handler. This is useful for files which might have suffixes but nonetheless be executable in their own right. If the style is not set, the pattern *(*) *(/) is used; hence executable files are executed directly and not passed to a handler, and the option AUTO_CD may be used to change to directories that happen to have MIME suffixes. \nexecute-never \nThis style is useful in combination with execute-as-is. It is set to an array of patterns corresponding to full paths to files that should never be treated as executable, even if the file passed to the MIME handler matches execute-as-is. This is useful for file systems that don’t handle execute permission or that contain executables from another operating system. For example, if /mnt/windows is a Windows mount, then \nzstyle ':mime:*' execute-never '/mnt/windows/*'\nwill ensure that any files found in that area will be executed as MIME types even if they are executable. As this example shows, the complete file name is matched against the pattern, regardless of how the file was passed to the handler. The file is resolved to a full path using the :P modifier described in Modifiers; this means that symbolic links are resolved where possible, so that links into other file systems behave in the correct fashion. \nfile-path \nUsed if the style find-file-in-path is true for the same context. Set to an array of directories that are used for searching for the file to be handled; the default is the command path given by the special parameter path. The shell option PATH_DIRS is respected; if that is set, the appropriate path will be searched even if the name of the file to be handled as it appears on the command line contains a ‘/’. The full context is :mime:.suffix:, as described for the style handler. \nfind-file-in-path \nIf set, allows files whose names do not contain absolute paths to be searched for in the command path or the path specified by the file-path style. If the file is not found in the path, it is looked for locally (whether or not the current directory is in the path); if it is not found locally, the handler will abort unless the handle-nonexistent style is set. Files found in the path are tested as described for the style execute-as-is. The full context is :mime:.suffix:, as described for the style handler. \nflags \nDefines flags to go with a handler; the context is as for the handler style, and the format is as for the flags in mailcap. \nhandle-nonexistent \nBy default, arguments that don’t correspond to files are not passed to the MIME handler in order to prevent it from intercepting commands found in the path that happen to have suffixes. This style may be set to an array of extended glob patterns for arguments that will be passed to the handler even if they don’t exist. If it is not explicitly set it defaults to [[:alpha:]]#:/* which allows URLs to be passed to the MIME handler even though they don’t exist in that format in the file system. The full context is :mime:.suffix:, as described for the style handler. \nhandler \nSpecifies a handler for a suffix; the suffix is given by the context as :mime:.suffix:, and the format of the handler is exactly that in mailcap. Note in particular the ‘.’ and trailing colon to distinguish this use of the context. This overrides any handler specified by the mailcap files. If the handler requires a terminal, the flags style should be set to include the word needsterminal, or if the output is to be displayed through a pager (but not if the handler is itself a pager), it should include copiousoutput. \nmailcap \nA list of files in the format of ~/.mailcap and /etc/mailcap to be read during setup, replacing the default list which consists of those two files. The context is :mime:. A + in the list will be replaced by the default files. \nmailcap-priorities \nThis style is used to resolve multiple mailcap entries for the same MIME type. It consists of an array of the following elements, in descending order of priority; later entries will be used if earlier entries are unable to resolve the entries being compared. If none of the tests resolve the entries, the first entry encountered is retained. \nfiles \nThe order of files (entries in the mailcap style) read. Earlier files are preferred. (Note this does not resolve entries in the same file.) \npriority \nThe priority flag from the mailcap entry. The priority is an integer from 0 to 9 with the default value being 5. \nflags \nThe test given by the mailcap-prio-flags option is used to resolve entries. \nplace \nLater entries are preferred; as the entries are strictly ordered, this test always succeeds. \nNote that as this style is handled during initialisation, the context is always :mime:, with no discrimination by suffix. \nmailcap-prio-flags \nThis style is used when the keyword flags is encountered in the list of tests specified by the mailcap-priorities style. It should be set to a list of patterns, each of which is tested against the flags specified in the mailcap entry (in other words, the sets of assignments found with some entries in the mailcap file). Earlier patterns in the list are preferred to later ones, and matched patterns are preferred to unmatched ones. \nmime-types \nA list of files in the format of ~/.mime.types and /etc/mime.types to be read during setup, replacing the default list which consists of those two files. The context is :mime:. A + in the list will be replaced by the default files. \nnever-background \nIf this boolean style is set, the handler for the given context is always run in the foreground, even if the flags provided in the mailcap entry suggest it need not be (for example, it doesn’t require a terminal). \npager \nIf set, will be used instead of $PAGER or more to handle suffixes where the copiousoutput flag is set. The context is as for handler, i.e. :mime:.suffix: for handling a file with the given suffix. \nExamples: \nzstyle ':mime:*' mailcap ~/.mailcap /usr/local/etc/mailcap\nzstyle ':mime:.txt:' handler less %s\nzstyle ':mime:.txt:' flags needsterminal\nWhen zsh-mime-setup is subsequently run, it will look for mailcap entries in the two files given. Files of suffix .txt will be handled by running ‘less file.txt’. The flag needsterminal is set to show that this program must run attached to a terminal. \nAs there are several steps to dispatching a command, the following should be checked if attempting to execute a file by extension .ext does not have the expected effect. \nThe command ‘alias -s ext’ should show ‘ps=zsh-mime-handler’. If it shows something else, another suffix alias was already installed and was not overwritten. If it shows nothing, no handler was installed: this is most likely because no handler was found in the .mime.types and mailcap combination for .ext files. In that case, appropriate handling should be added to ~/.mime.types and mailcap. \nIf the extension is handled by zsh-mime-handler but the file is not opened correctly, either the handler defined for the type is incorrect, or the flags associated with it are in appropriate. Running zsh-mime-setup -l will show the handler and, if there are any, the flags. A %s in the handler is replaced by the file (suitably quoted if necessary). Check that the handler program listed lists and can be run in the way shown. Also check that the flags needsterminal or copiousoutput are set if the handler needs to be run under a terminal; the second flag is used if the output should be sent to a pager. An example of a suitable mailcap entry for such a program is: \ntext/html; /usr/bin/lynx '%s'; needsterminal\nRunning ‘zsh-mime-handler -l command line’ prints the command line that would be executed, simplified to remove the effect of any flags, and quoted so that the output can be run as a complete zsh command line. This is used by the completion system to decide how to complete after a file handled by zsh-mime-setup. \npick-web-browser \nThis function is separate from the two MIME functions described above and can be assigned directly to a suffix: \nautoload -U pick-web-browser\nalias -s html=pick-web-browser\nIt is provided as an intelligent front end to dispatch a web browser. It may be run as either a function or a shell script. The status 255 is returned if no browser could be started. \nVarious styles are available to customize the choice of browsers: \nbrowser-style \nThe value of the style is an array giving preferences in decreasing order for the type of browser to use. The values of elements may be \nrunning \nUse a GUI browser that is already running when an X Window display is available. The browsers listed in the x-browsers style are tried in order until one is found; if it is, the file will be displayed in that browser, so the user may need to check whether it has appeared. If no running browser is found, one is not started. Browsers other than Firefox, Opera and Konqueror are assumed to understand the Mozilla syntax for opening a URL remotely. \nx \nStart a new GUI browser when an X Window display is available. Search for the availability of one of the browsers listed in the x-browsers style and start the first one that is found. No check is made for an already running browser. \ntty \nStart a terminal-based browser. Search for the availability of one of the browsers listed in the tty-browsers style and start the first one that is found. \nIf the style is not set the default running x tty is used. \nx-browsers \nAn array in decreasing order of preference of browsers to use when running under the X Window System. The array consists of the command name under which to start the browser. They are looked up in the context :mime: (which may be extended in future, so appending ‘*’ is recommended). For example, \nzstyle ':mime:*' x-browsers opera konqueror firefox\nspecifies that pick-web-browser should first look for a running instance of Opera, Konqueror or Firefox, in that order, and if it fails to find any should attempt to start Opera. The default is firefox mozilla netscape opera konqueror. \ntty-browsers \nAn array similar to x-browsers, except that it gives browsers to use when no X Window display is available. The default is elinks links lynx. \ncommand \nIf it is set this style is used to pick the command used to open a page for a browser. The context is :mime:browser:new:$browser: to start a new browser or :mime:browser:running:$browser: to open a URL in a browser already running on the current X display, where $browser is the value matched in the x-browsers or tty-browsers style. The escape sequence %b in the style’s value will be replaced by the browser, while %u will be replaced by the URL. If the style is not set, the default for all new instances is equivalent to %b %u and the defaults for using running browsers are equivalent to the values kfmclient openURL %u for Konqueror, firefox -new-tab %u for Firefox, opera -newpage %u for Opera, and %b -remote \"openUrl(%u)\" for all others. \n26.10 Mathematical Functions\nzcalc [ -erf ] [ expression ... ] \nA reasonably powerful calculator based on zsh’s arithmetic evaluation facility. The syntax is similar to that of formulae in most programming languages; see Arithmetic Evaluation for details. \nNon-programmers should note that, as in many other programming languages, expressions involving only integers (whether constants without a ‘.’, variables containing such constants as strings, or variables declared to be integers) are by default evaluated using integer arithmetic, which is not how an ordinary desk calculator operates. To force floating point operation, pass the option -f; see further notes below. \nIf the file ~/.zcalcrc exists it will be sourced inside the function once it is set up and about to process the command line. This can be used, for example, to set shell options; emulate -L zsh and setopt extendedglob are in effect at this point. Any failure to source the file if it exists is treated as fatal. As with other initialisation files, the directory $ZDOTDIR is used instead of $HOME if it is set. \nThe mathematical library zsh/mathfunc will be loaded if it is available; see The zsh/mathfunc Module. The mathematical functions correspond to the raw system libraries, so trigonometric functions are evaluated using radians, and so on. \nEach line typed is evaluated as an expression. The prompt shows a number, which corresponds to a positional parameter where the result of that calculation is stored. For example, the result of the calculation on the line preceded by ‘4> ’ is available as $4. The last value calculated is available as ans. Full command line editing, including the history of previous calculations, is available; the history is saved in the file ~/.zcalc_history. To exit, enter a blank line or type ‘:q’ on its own (‘q’ is allowed for historical compatibility). \nA line ending with a single backslash is treated in the same fashion as it is in command line editing: the backslash is removed, the function prompts for more input (the prompt is preceded by ‘...’ to indicate this), and the lines are combined into one to get the final result. In addition, if the input so far contains more open than close parentheses zcalc will prompt for more input. \nIf arguments are given to zcalc on start up, they are used to prime the first few positional parameters. A visual indication of this is given when the calculator starts. \nThe constants PI (3.14159...) and E (2.71828...) are provided. Parameter assignment is possible, but note that all parameters will be put into the global namespace unless the :local special command is used. The function creates local variables whose names start with _, so users should avoid doing so. The variables ans (the last answer) and stack (the stack in RPN mode) may be referred to directly; stack is an array but elements of it are numeric. Various other special variables are used locally with their standard meaning, for example compcontext, match, mbegin, mend, psvar. \nThe output base can be initialised by passing the option ‘-#base’, for example ‘zcalc -#16’ (the ‘#’ may have to be quoted, depending on the globbing options set). \nIf the option ‘-e’ is set, the function runs non-interactively: the arguments are treated as expressions to be evaluated as if entered interactively line by line. \nIf the option ‘-f’ is set, all numbers are treated as floating point, hence for example the expression ‘3/4’ evaluates to 0.75 rather than 0. Options must appear in separate words. \nIf the option ‘-r’ is set, RPN (Reverse Polish Notation) mode is entered. This has various additional properties: \nStack \nEvaluated values are maintained in a stack; this is contained in an array named stack with the most recent value in ${stack[1]}. \nOperators and functions \nIf the line entered matches an operator (+, -, *, /, **, ^, | or &) or a function supplied by the zsh/mathfunc library, the bottom element or elements of the stack are popped to use as the argument or arguments. The higher elements of stack (least recent) are used as earlier arguments. The result is then pushed into ${stack[1]}. \nExpressions \nOther expressions are evaluated normally, printed, and added to the stack as numeric values. The syntax within expressions on a single line is normal shell arithmetic (not RPN). \nStack listing \nIf an integer follows the option -r with no space, then on every evaluation that many elements of the stack, where available, are printed instead of just the most recent result. Hence, for example, zcalc -r4 shows $stack[4] to $stack[1] each time results are printed. \nDuplication: = \nThe pseudo-operator = causes the most recent element of the stack to be duplicated onto the stack. \npop \nThe pseudo-function pop causes the most recent element of the stack to be popped. A ‘>’ on its own has the same effect. \n>ident \nThe expression > followed (with no space) by a shell identifier causes the most recent element of the stack to be popped and assigned to the variable with that name. The variable is local to the zcalc function. \n<ident \nThe expression < followed (with no space) by a shell identifier causes the value of the variable with that name to be pushed onto the stack. ident may be an integer, in which case the previous result with that number (as shown before the > in the standard zcalc prompt) is put on the stack. \nExchange: xy \nThe pseudo-function xy causes the most recent two elements of the stack to be exchanged. ‘<>’ has the same effect. \nThe prompt is configurable via the parameter ZCALCPROMPT, which undergoes standard prompt expansion. The index of the current entry is stored locally in the first element of the array psvar, which can be referred to in ZCALCPROMPT as ‘%1v’. The default prompt is ‘%1v> ’. \nThe variable ZCALC_ACTIVE is set within the function and can be tested by nested functions; it has the value rpn if RPN mode is active, else 1. \nA few special commands are available; these are introduced by a colon. For backward compatibility, the colon may be omitted for certain commands. Completion is available if compinit has been run. \nThe output precision may be specified within zcalc by special commands familiar from many calculators. \n:norm \nThe default output format. It corresponds to the printf %g specification. Typically this shows six decimal digits. \n:sci digits \nScientific notation, corresponding to the printf %g output format with the precision given by digits. This produces either fixed point or exponential notation depending on the value output. \n:fix digits \nFixed point notation, corresponding to the printf %f output format with the precision given by digits. \n:eng digits \nExponential notation, corresponding to the printf %E output format with the precision given by digits. \n:raw \nRaw output: this is the default form of the output from a math evaluation. This may show more precision than the number actually possesses. \nOther special commands: \n:!line... \nExecute line... as a normal shell command line. Note that it is executed in the context of the function, i.e. with local variables. Space is optional after :!. \n:local arg ... \nDeclare variables local to the function. Other variables may be used, too, but they will be taken from or put into the global scope. \n:function name [ body ] \nDefine a mathematical function or (with no body) delete it. :function may be abbreviated to :func or simply :f. The name may contain the same characters as a shell function name. The function is defined using zmathfuncdef, see below. \nNote that zcalc takes care of all quoting. Hence for example: \ndefines a function to cube the sole argument. Functions so defined, or indeed any functions defined directly or indirectly using functions -M, are available to execute by typing only the name on the line in RPN mode; this pops the appropriate number of arguments off the stack to pass to the function, i.e. 1 in the case of the example cube function. If there are optional arguments only the mandatory arguments are supplied by this means. \n[#base] \nThis is not a special command, rather part of normal arithmetic syntax; however, when this form appears on a line by itself the default output radix is set to base. Use, for example, ‘[#16]’ to display hexadecimal output preceded by an indication of the base, or ‘[##16]’ just to display the raw number in the given base. Bases themselves are always specified in decimal. ‘[#]’ restores the normal output format. Note that setting an output base suppresses floating point output; use ‘[#]’ to return to normal operation. \n$var \nPrint out the value of var literally; does not affect the calculation. To use the value of var, omit the leading ‘$’. \nSee the comments in the function for a few extra tips. \nmin(arg, ...) max(arg, ...) sum(arg, ...) zmathfunc \nThe function zmathfunc defines the three mathematical functions min, max, and sum. The functions min and max take one or more arguments. The function sum takes zero or more arguments. Arguments can be of different types (ints and floats). \nNot to be confused with the zsh/mathfunc module, described in The zsh/mathfunc Module. \nzmathfuncdef [ mathfunc [ body ] ] \nA convenient front end to functions -M. \nWith two arguments, define a mathematical function named mathfunc which can be used in any form of arithmetic evaluation. body is a mathematical expression to implement the function. It may contain references to position parameters $1, $2, ... to refer to mandatory parameters and ${1:-defvalue} ... to refer to optional parameters. Note that the forms must be strictly adhered to for the function to calculate the correct number of arguments. The implementation is held in a shell function named zsh_math_func_mathfunc; usually the user will not need to refer to the shell function directly. Any existing function of the same name is silently replaced. \nWith one argument, remove the mathematical function mathfunc as well as the shell function implementation. \nWith no arguments, list all mathfunc functions in a form suitable for restoring the definition. The functions have not necessarily been defined by zmathfuncdef. \n26.11 User Configuration Functions\nThe zsh/newuser module comes with a function to aid in configuring shell options for new users. If the module is installed, this function can also be run by hand. It is available even if the module’s default behaviour, namely running the function for a new user logging in without startup files, is inhibited. \nzsh-newuser-install [ -f ] \nThe function presents the user with various options for customizing their initialization scripts. Currently only ~/.zshrc is handled. $ZDOTDIR/.zshrc is used instead if the parameter ZDOTDIR is set; this provides a way for the user to configure a file without altering an existing .zshrc. \nBy default the function exits immediately if it finds any of the files .zshenv, .zprofile, .zshrc, or .zlogin in the appropriate directory. The option -f is required in order to force the function to continue. Note this may happen even if .zshrc itself does not exist. \nAs currently configured, the function will exit immediately if the user has root privileges; this behaviour cannot be overridden. \nOnce activated, the function’s behaviour is supposed to be self-explanatory. Menus are present allowing the user to alter the value of options and parameters. Suggestions for improvements are always welcome. \nWhen the script exits, the user is given the opportunity to save the new file or not; changes are not irreversible until this point. However, the script is careful to restrict changes to the file only to a group marked by the lines ‘# Lines configured by zsh-newuser-install’ and ‘# End of lines configured by zsh-newuser-install’. In addition, the old version of .zshrc is saved to a file with the suffix .zni appended. \nIf the function edits an existing .zshrc, it is up to the user to ensure that the changes made will take effect. For example, if control usually returns early from the existing .zshrc the lines will not be executed; or a later initialization file may override options or parameters, and so on. The function itself does not attempt to detect any such conflicts. \n26.12 Other Functions\nThere are a large number of helpful functions in the Functions/Misc directory of the zsh distribution. Most are very simple and do not require documentation here, but a few are worthy of special mention. \n26.12.1 Descriptions\ncolors \nThis function initializes several associative arrays to map color names to (and from) the ANSI standard eight-color terminal codes. These are used by the prompt theme system (Prompt Themes). You seldom should need to run colors more than once. \nThe eight base colors are: black, red, green, yellow, blue, magenta, cyan, and white. Each of these has codes for foreground and background. In addition there are seven intensity attributes: bold, faint, standout, underline, blink, reverse, and conceal. Finally, there are seven codes used to negate attributes: none (reset all attributes to the defaults), normal (neither bold nor faint), no-standout, no-underline, no-blink, no-reverse, and no-conceal. \nSome terminals do not support all combinations of colors and intensities. \nThe associative arrays are: \ncolor colour \nMap all the color names to their integer codes, and integer codes to the color names. The eight base names map to the foreground color codes, as do names prefixed with ‘fg-’, such as ‘fg-red’. Names prefixed with ‘bg-’, such as ‘bg-blue’, refer to the background codes. The reverse mapping from code to color yields base name for foreground codes and the bg- form for backgrounds. \nAlthough it is a misnomer to call them ‘colors’, these arrays also map the other fourteen attributes from names to codes and codes to names. \nfg fg_bold fg_no_bold \nMap the eight basic color names to ANSI terminal escape sequences that set the corresponding foreground text properties. The fg sequences change the color without changing the eight intensity attributes. \nbg bg_bold bg_no_bold \nMap the eight basic color names to ANSI terminal escape sequences that set the corresponding background properties. The bg sequences change the color without changing the eight intensity attributes. \nIn addition, the scalar parameters reset_color and bold_color are set to the ANSI terminal escapes that turn off all attributes and turn on bold intensity, respectively. \nfned [ -x num ] name \nSame as zed -f. This function does not appear in the zsh distribution, but can be created by linking zed to the name fned in some directory in your fpath. \nhisted [ [ name ] size ] \nSame as zed -h. This function does not appear in the zsh distribution, but can be created by linking zed to the name histed in some directory in your fpath. \nis-at-least needed [ present ] \nPerform a greater-than-or-equal-to comparison of two strings having the format of a zsh version number; that is, a string of numbers and text with segments separated by dots or dashes. If the present string is not provided, $ZSH_VERSION is used. Segments are paired left-to-right in the two strings with leading non-number parts ignored. If one string has fewer segments than the other, the missing segments are considered zero. \nThis is useful in startup files to set options and other state that are not available in all versions of zsh. \nis-at-least 3.1.6-15 && setopt NO_GLOBAL_RCS\nis-at-least 3.1.0 && setopt HIST_REDUCE_BLANKS\nis-at-least 2.6-17 || print \"You can't use is-at-least here.\"\nnslookup [ arg ... ] \nThis wrapper function for the nslookup command requires the zsh/zpty module (see The zsh/zpty Module). It behaves exactly like the standard nslookup except that it provides customizable prompts (including a right-side prompt) and completion of nslookup commands, host names, etc. (if you use the function-based completion system). Completion styles may be set with the context prefix ‘:completion:nslookup’. \nSee also the pager, prompt and rprompt styles below. \nregexp-replace var regexp replace \nUse regular expressions to perform a global search and replace operation on a variable. POSIX extended regular expressions (ERE) are used, unless the option RE_MATCH_PCRE has been set, in which case Perl-compatible regular expressions are used (this requires the shell to be linked against the pcre library). \nvar is the name of the variable containing the string to be matched. The variable will be modified directly by the function. The variables MATCH, MBEGIN, MEND, match, mbegin, mend should be avoided as these are used by the regular expression code. \nregexp is the regular expression to match against the string. \nreplace is the replacement text. This can contain parameter, command and arithmetic expressions which will be replaced: in particular, a reference to $MATCH will be replaced by the text matched by the pattern. \nThe return status is 0 if at least one match was performed, else 1. \nNote that if using POSIX EREs, the ^ or word boundary operators (where available) may not work properly. \nrun-help cmd \nThis function is designed to be invoked by the run-help ZLE widget, in place of the default alias. See ‘Accessing On-Line Help’ (Utilities) for setup instructions. \nIn the discussion which follows, if cmd is a file system path, it is first reduced to its rightmost component (the file name). \nHelp is first sought by looking for a file named cmd in the directory named by the HELPDIR parameter. If no file is found, an assistant function, alias, or command named run-help-cmd is sought. If found, the assistant is executed with the rest of the current command line (everything after the command name cmd) as its arguments. When neither file nor assistant is found, the external command ‘man cmd’ is run. \nAn example assistant for the \"ssh\" command: \nrun-help-ssh() {\n    emulate -LR zsh\n    local -a args\n    # Delete the \"-l username\" option\n    zparseopts -D -E -a args l:\n    # Delete other options, leaving: host command\n    args=(${@:#-*})\n    if [[ ${#args} -lt 2 ]]; then\n        man ssh\n    else\n        run-help $args[2]\n    fi\n}\nSeveral of these assistants are provided in the Functions/Misc directory. These must be autoloaded, or placed as executable scripts in your search path, in order to be found and used by run-help. \nrun-help-btrfs run-help-git run-help-ip run-help-openssl run-help-p4 run-help-sudo run-help-svk run-help-svn \nAssistant functions for the btrfs, git, ip, openssl, p4, sudo, svk, and svn, commands. \ntetris \nZsh was once accused of not being as complete as Emacs, because it lacked a Tetris game. This function was written to refute this vicious slander. \nThis function must be used as a ZLE widget: \nautoload -U tetris\nzle -N tetris\nbindkey keys tetris\nTo start a game, execute the widget by typing the keys. Whatever command line you were editing disappears temporarily, and your keymap is also temporarily replaced by the Tetris control keys. The previous editor state is restored when you quit the game (by pressing ‘q’) or when you lose. \nIf you quit in the middle of a game, the next invocation of the tetris widget will continue where you left off. If you lost, it will start a new game. \ntetriscurses \nThis is a port of the above to zcurses. The input handling is improved a bit so that moving a block sideways doesn’t automatically advance a timestep, and the graphics use unicode block graphics. \nThis version does not save the game state between invocations, and is not invoked as a widget, but rather as: \nautoload -U tetriscurses\ntetriscurses\nzargs [ option ... -- ] [ input ... ] [ -- command [ arg ... ] ] \nThis function has a similar purpose to GNU xargs. Instead of reading lines of arguments from the standard input, it takes them from the command line. This is useful because zsh, especially with recursive glob operators, often can construct a command line for a shell function that is longer than can be accepted by an external command. \nThe option list represents options of the zargs command itself, which are the same as those of xargs. The input list is the collection of strings (often file names) that become the arguments of the command, analogous to the standard input of xargs. Finally, the arg list consists of those arguments (usually options) that are passed to the command each time it runs. The arg list precedes the elements from the input list in each run. If no command is provided, then no arg list may be provided, and in that event the default command is ‘print’ with arguments ‘-r --’. \nFor example, to get a long ls listing of all non-hidden plain files in the current directory or its subdirectories: \nautoload -U zargs\nzargs -- **/*(.) -- ls -ld --\nThe first and third occurrences of ‘--’ are used to mark the end of options for zargs and ls respectively to guard against filenames starting with ‘-’, while the second is used to separate the list of files from the command to run (‘ls -ld –’). \nThe first ‘--’ would also be needed if there was a chance the list might be empty as in: \nzargs -r -- ./*.back(#qN) -- rm -f\nIn the event that the string ‘--’ is or may be an input, the -e option may be used to change the end-of-inputs marker. Note that this does not change the end-of-options marker. For example, to use ‘..’ as the marker: \nzargs -e.. -- **/*(.) .. ls -ld --\nThis is a good choice in that example because no plain file can be named ‘..’, but the best end-marker depends on the circumstances. \nThe options -i, -I, -l, -L, and -n differ slightly from their usage in xargs. There are no input lines for zargs to count, so -l and -L count through the input list, and -n counts the number of arguments passed to each execution of command, including any arg list. Also, any time -i or -I is used, each input is processed separately as if by ‘-L 1’. \nFor details of the other zargs options, see the xargs(1) man page (but note the difference in function between zargs and xargs) or run zargs with the --help option. \nzed [ -f [ -x num ] ] name zed [ -h [ name ] size ] zed -b \nThis function uses the ZLE editor to edit a file or function. \nOnly one name argument is allowed. If the -f option is given, the name is taken to be that of a function; if the function is marked for autoloading, zed searches for it in the fpath and loads it. Note that functions edited this way are installed into the current shell, but not written back to the autoload file. In this case the -x option specifies that leading tabs indenting the function according to syntax should be converted into the given number of spaces; ‘-x 2’ is consistent with the layout of functions distributed with the shell. \nWithout -f, name is the path name of the file to edit, which need not exist; it is created on write, if necessary. With -h, the file is presumed to contain history events. \nWhen no file name is provided for -h the current shell history is edited in place. The history is renumbered when zed exits successfully. \nWhen editing history, multi-line events must have a trailing backslash on every line before the last. \nWhile editing, the function sets the main keymap to zed and the vi command keymap to zed-vicmd. These will be copied from the existing main and vicmd keymaps if they do not exist the first time zed is run. They can be used to provide special key bindings used only in zed. \nIf it creates the keymap, zed rebinds the return key to insert a line break and ‘^X^W’ to accept the edit in the zed keymap, and binds ‘ZZ’ to accept the edit in the zed-vicmd keymap. \nThe bindings alone can be installed by running ‘zed -b’. This is suitable for putting into a startup file. Note that, if rerun, this will overwrite the existing zed and zed-vicmd keymaps. \nCompletion is available, and styles may be set with the context prefix ‘:completion:zed:’. \nA zle widget zed-set-file-name is available. This can be called by name from within zed using ‘\\ex zed-set-file-name’ or can be bound to a key in either of the zed or zed-vicmd keymaps after ‘zed -b’ has been run. When the widget is called, it prompts for a new name for the file being edited. When zed exits the file will be written under that name and the original file will be left alone. The widget has no effect when invoked from ‘zed -f’. The completion context is changed to ‘:completion:zed-set-file-name:’. When editing the current history with ‘zed -h’, the history is first updated and then the file is written, but the global setting of HISTFILE is not altered. \nWhile zed-set-file-name is running, zed uses the keymap zed-normal-keymap, which is linked from the main keymap in effect at the time zed initialised its bindings. (This is to make the return key operate normally.) The result is that if the main keymap has been changed, the widget won’t notice. This is not a concern for most users. \nzcp [ -finqQvwW ] srcpat dest zln [ -finqQsvwW ] srcpat dest \nSame as zmv -C and zmv -L, respectively. These functions do not appear in the zsh distribution, but can be created by linking zmv to the names zcp and zln in some directory in your fpath. \nzkbd \nSee ‘Keyboard Definition’ (Utilities). \nzmv [ -finqQsvwW ] [ -C | -L | -M | -{p|P} program ] [ -o optstring ] srcpat dest \nMove (usually, rename) files matching the pattern srcpat to corresponding files having names of the form given by dest, where srcpat contains parentheses surrounding patterns which will be replaced in turn by $1, $2, ... in dest. For example, \nrenames ‘foo.lis’ to ‘foo.txt’, ‘my.old.stuff.lis’ to ‘my.old.stuff.txt’, and so on. \nThe pattern is always treated as an EXTENDED_GLOB pattern. Any file whose name is not changed by the substitution is simply ignored. Any error (a substitution resulted in an empty string, two substitutions gave the same result, the destination was an existing regular file and -f was not given) causes the entire function to abort without doing anything. \nIn addition to pattern replacement, the variable $f can be referred to in the second (replacement) argument. This makes it possible to use variable substitution to alter the argument; see examples below. \nOptions: \n-f \nForce overwriting of destination files. Not currently passed down to the mv/cp/ln command due to vagaries of implementations (but you can use -o-f to do that). \n-i \nInteractive: show each line to be executed and ask the user whether to execute it. ‘Y’ or ‘y’ will execute it, anything else will skip it. Note that you just need to type one character. \n-n \nNo execution: print what would happen, but don’t do it. \n-q \nTurn bare glob qualifiers off: now assumed by default, so this has no effect. \n-Q \nForce bare glob qualifiers on. Don’t turn this on unless you are actually using glob qualifiers in a pattern. \n-s \nSymbolic, passed down to ln; only works with -L. \n-v \nVerbose: print each command as it’s being executed. \n-w \nPick out wildcard parts of the pattern, as described above, and implicitly add parentheses for referring to them. \n-W \nJust like -w, with the addition of turning wildcards in the replacement pattern into sequential ${1} .. ${N} references. \n-C -L -M \nForce cp, ln or mv, respectively, regardless of the name of the function. \n-p program \nCall program instead of cp, ln or mv. Whatever it does, it should at least understand the form \nprogram -- oldname newname\nwhere oldname and newname are filenames generated by zmv. program will be split into words, so might be e.g. the name of an archive tool plus a copy or rename subcommand. \n-P program \nAs -p program, except that program does not accept a following -- to indicate the end of options. In this case filenames must already be in a sane form for the program in question. \n-o optstring \nThe optstring is split into words and passed down verbatim to the cp, ln or mv command called to perform the work. It should probably begin with a ‘-’. \nFurther examples: \nzmv -v '(* *)' '${1// /_}'\nFor any file in the current directory with at least one space in the name, replace every space by an underscore and display the commands executed. \nThis does exactly the same by referring to the file name stored in $f. \nFor more complete examples and other implementation details, see the zmv source file, usually located in one of the directories named in your fpath, or in Functions/Misc/zmv in the zsh distribution. \nzrecompile \nSee ‘Recompiling Functions’ (Utilities). \nzstyle+ context style value [ + subcontext style value ... ] \nThis makes defining styles a bit simpler by using a single ‘+’ as a special token that allows you to append a context name to the previously used context name. Like this: \nzstyle+ ':foo:bar' style1 value1 \\ \n       +':baz'     style2 value2 \\ \n       +':frob'    style3 value3\nThis defines style1 with value1 for the context :foo:bar as usual, but it also defines style2 with value2 for the context :foo:bar:baz and style3 with value3 for :foo:bar:frob. Any subcontext may be the empty string to re-use the first context unchanged. \n26.12.2 Styles\ninsert-tab \nThe zed function sets this style in context ‘:completion:zed:*’ to turn off completion when TAB is typed at the beginning of a line. You may override this by setting your own value for this context and style. \npager \nThe nslookup function looks up this style in the context ‘:nslookup’ to determine the program used to display output that does not fit on a single screen. \nprompt rprompt \nThe nslookup function looks up this style in the context ‘:nslookup’ to set the prompt and the right-side prompt, respectively. The usual expansions for the PS1 and RPS1 parameters may be used (see Prompt Expansion). \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-User-Contributions-html-User-Contributions-7nv85.html",
  "markdown": "# zsh: 26 User Contributions\n\n* * *\n\n## 26.1 Description\n\nThe Zsh source distribution includes a number of items contributed by the user community. These are not inherently a part of the shell, and some may not be available in every zsh installation. The most significant of these are documented here. For documentation on other contributed items such as shell functions, look for comments in the function source files.\n\n* * *\n\n## 26.2 Utilities\n\n* * *\n\n### 26.2.1 Accessing On-Line Help\n\nThe key sequence ESC h is normally bound by ZLE to execute the run-help widget (see [Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor)). This invokes the run-help command with the command word from the current input line as its argument. By default, run-help is an alias for the man command, so this often fails when the command word is a shell builtin or a user-defined function. By redefining the run-help alias, one can improve the on-line help provided by the shell.\n\nThe helpfiles utility, found in the Util directory of the distribution, is a Perl program that can be used to process the zsh manual to produce a separate help file for each shell builtin and for many other shell features as well. The autoloadable run-help function, found in Functions/Misc, searches for these helpfiles and performs several other tests to produce the most complete help possible for the command.\n\nHelp files are installed by default to a subdirectory of /usr/share/zsh or /usr/local/share/zsh.\n\nTo create your own help files with helpfiles, choose or create a directory where the individual command help files will reside. For example, you might choose ~/zsh\\_help. If you unpacked the zsh distribution in your home directory, you would use the commands:\n\nmkdir ~/zsh\\_help\nperl ~/zsh-5.9/Util/helpfiles ~/zsh\\_help\n\nThe HELPDIR parameter tells run-help where to look for the help files. When unset, it uses the default installation path. To use your own set of help files, set this to the appropriate path in one of your startup files:\n\nTo use the run-help function, you need to add lines something like the following to your .zshrc or equivalent startup file:\n\nunalias run-help\nautoload run-help\n\nNote that in order for ‘autoload run-help’ to work, the run-help file must be in one of the directories named in your fpath array (see [Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell)). This should already be the case if you have a standard zsh installation; if it is not, copy Functions/Misc/run-help to an appropriate directory.\n\n* * *\n\n### 26.2.2 Recompiling Functions\n\nIf you frequently edit your zsh functions, or periodically update your zsh installation to track the latest developments, you may find that function digests compiled with the zcompile builtin are frequently out of date with respect to the function source files. This is not usually a problem, because zsh always looks for the newest file when loading a function, but it may cause slower shell startup and function loading. Also, if a digest file is explicitly used as an element of fpath, zsh won’t check whether any of its source files has changed.\n\nThe zrecompile autoloadable function, found in Functions/Misc, can be used to keep function digests up to date.\n\nzrecompile \\[ \\-qt \\] \\[ name ... \\]\n\nzrecompile \\[ \\-qt \\] \\-p arg ... \\[ \\-\\- arg ... \\]\n\nThis tries to find \\*.zwc files and automatically re-compile them if at least one of the original files is newer than the compiled file. This works only if the names stored in the compiled files are full paths or are relative to the directory that contains the .zwc file.\n\nIn the first form, each name is the name of a compiled file or a directory containing \\*.zwc files that should be checked. If no arguments are given, the directories and \\*.zwc files in fpath are used.\n\nWhen \\-t is given, no compilation is performed, but a return status of zero (true) is set if there are files that need to be re-compiled and non-zero (false) otherwise. The \\-q option quiets the chatty output that describes what zrecompile is doing.\n\nWithout the \\-t option, the return status is zero if all files that needed re-compilation could be compiled and non-zero if compilation for at least one of the files failed.\n\nIf the \\-p option is given, the args are interpreted as one or more sets of arguments for zcompile, separated by ‘\\-\\-’. For example:\n\nzrecompile -p \\\\ \n           -R ~/.zshrc -- \\\\ \n           -M ~/.zcompdump -- \\\\ \n           ~/zsh/comp.zwc ~/zsh/Completion/\\*/\\_\\*\n\nThis compiles ~/.zshrc into ~/.zshrc.zwc if that doesn’t exist or if it is older than ~/.zshrc. The compiled file will be marked for reading instead of mapping. The same is done for ~/.zcompdump and ~/.zcompdump.zwc, but this compiled file is marked for mapping. The last line re-creates the file ~/zsh/comp.zwc if any of the files matching the given pattern is newer than it.\n\nWithout the \\-p option, zrecompile does not create function digests that do not already exist, nor does it add new functions to the digest.\n\nThe following shell loop is an example of a method for creating function digests for all functions in your fpath, assuming that you have write permission to the directories:\n\nfor ((i=1; i <= $#fpath; ++i)); do\n  dir=$fpath\\[i\\]\n  zwc=${dir:t}.zwc\n  if \\[\\[ $dir == (.|..) || $dir == (.|..)/\\* \\]\\]; then\n    continue\n  fi\n  files=($dir/\\*(N-.))\n  if \\[\\[ -w $dir:h && -n $files \\]\\]; then\n    files=(${${(M)files%/\\*/\\*}#/})\n    if ( cd $dir:h &&\n         zrecompile -p -U -z $zwc $files ); then\n      fpath\\[i\\]=$fpath\\[i\\].zwc\n    fi\n  fi\ndone\n\nThe \\-U and \\-z options are appropriate for functions in the default zsh installation fpath; you may need to use different options for your personal function directories.\n\nOnce the digests have been created and your fpath modified to refer to them, you can keep them up to date by running zrecompile with no arguments.\n\n* * *\n\n### 26.2.3 Keyboard Definition\n\nThe large number of possible combinations of keyboards, workstations, terminals, emulators, and window systems makes it impossible for zsh to have built-in key bindings for every situation. The zkbd utility, found in Functions/Misc, can help you quickly create key bindings for your configuration.\n\nRun zkbd either as an autoloaded function, or as a shell script:\n\nzsh -f ~/zsh-5.9/Functions/Misc/zkbd\n\nWhen you run zkbd, it first asks you to enter your terminal type; if the default it offers is correct, just press return. It then asks you to press a number of different keys to determine characteristics of your keyboard and terminal; zkbd warns you if it finds anything out of the ordinary, such as a Delete key that sends neither ^H nor ^?.\n\nThe keystrokes read by zkbd are recorded as a definition for an associative array named key, written to a file in the subdirectory .zkbd within either your HOME or ZDOTDIR directory. The name of the file is composed from the TERM, VENDOR and OSTYPE parameters, joined by hyphens.\n\nYou may read this file into your .zshrc or another startup file with the ‘source’ or ‘.’ commands, then reference the key parameter in bindkey commands, like this:\n\nsource ${ZDOTDIR:-$HOME}/.zkbd/$TERM-$VENDOR-$OSTYPE\n\\[\\[ -n ${key\\[Left\\]} \\]\\] && bindkey \"${key\\[Left\\]}\" backward-char\n\\[\\[ -n ${key\\[Right\\]} \\]\\] && bindkey \"${key\\[Right\\]}\" forward-char\n# etc.\n\nNote that in order for ‘autoload zkbd’ to work, the zkdb file must be in one of the directories named in your fpath array (see [Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell)). This should already be the case if you have a standard zsh installation; if it is not, copy Functions/Misc/zkbd to an appropriate directory.\n\n* * *\n\n### 26.2.4 Dumping Shell State\n\nOccasionally you may encounter what appears to be a bug in the shell, particularly if you are using a beta version of zsh or a development release. Usually it is sufficient to send a description of the problem to one of the zsh mailing lists (see [Mailing Lists](https://zsh.sourceforge.io/Doc/Release/Introduction.html#Mailing-Lists)), but sometimes one of the zsh developers will need to recreate your environment in order to track the problem down.\n\nThe script named reporter, found in the Util directory of the distribution, is provided for this purpose. (It is also possible to autoload reporter, but reporter is not installed in fpath by default.) This script outputs a detailed dump of the shell state, in the form of another script that can be read with ‘zsh -f’ to recreate that state.\n\nTo use reporter, read the script into your shell with the ‘.’ command and redirect the output into a file:\n\n. ~/zsh-5.9/Util/reporter > zsh.report\n\nYou should check the zsh.report file for any sensitive information such as passwords and delete them by hand before sending the script to the developers. Also, as the output can be voluminous, it’s best to wait for the developers to ask for this information before sending it.\n\nYou can also use reporter to dump only a subset of the shell state. This is sometimes useful for creating startup files for the first time. Most of the output from reporter is far more detailed than usually is necessary for a startup file, but the aliases, options, and zstyles states may be useful because they include only changes from the defaults. The bindings state may be useful if you have created any of your own keymaps, because reporter arranges to dump the keymap creation commands as well as the bindings for every keymap.\n\nAs is usual with automated tools, if you create a startup file with reporter, you should edit the results to remove unnecessary commands. Note that if you’re using the new completion system, you should _not_ dump the functions state to your startup files with reporter; use the compdump function instead (see [Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System)).\n\nreporter \\[ state ... \\]\n\nPrint to standard output the indicated subset of the current shell state. The state arguments may be one or more of:\n\nall\n\nOutput everything listed below.\n\naliases\n\nOutput alias definitions.\n\nbindings\n\nOutput ZLE key maps and bindings.\n\ncompletion\n\nOutput old-style compctl commands. New completion is covered by functions and zstyles.\n\nfunctions\n\nOutput autoloads and function definitions.\n\nlimits\n\nOutput limit commands.\n\noptions\n\nOutput setopt commands.\n\nstyles\n\nSame as zstyles.\n\nvariables\n\nOutput shell parameter assignments, plus export commands for any environment variables.\n\nzstyles\n\nOutput zstyle commands.\n\nIf the state is omitted, all is assumed.\n\nWith the exception of ‘all’, every state can be abbreviated by any prefix, even a single letter; thus a is the same as aliases, z is the same as zstyles, etc.\n\n* * *\n\n### 26.2.5 Manipulating Hook Functions\n\nadd-zsh-hook \\[ \\-L | \\-dD \\] \\[ \\-Uzk \\] hook function\n\nSeveral functions are special to the shell, as described in the section Special Functions, [Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions), in that they are automatically called at specific points during shell execution. Each has an associated array consisting of names of functions to be called at the same point; these are so-called ‘hook functions’. The shell function add-zsh-hook provides a simple way of adding or removing functions from the array.\n\nhook is one of chpwd, periodic, precmd, preexec, zshaddhistory, zshexit, or zsh\\_directory\\_name, the special functions in question. Note that zsh\\_directory\\_name is called in a different way from the other functions, but may still be manipulated as a hook.\n\nfunction is name of an ordinary shell function. If no options are given this will be added to the array of functions to be executed in the given context. Functions are invoked in the order they were added.\n\nIf the option \\-L is given, the current values for the hook arrays are listed with typeset.\n\nIf the option \\-d is given, the function is removed from the array of functions to be executed.\n\nIf the option \\-D is given, the function is treated as a pattern and any matching names of functions are removed from the array of functions to be executed.\n\nThe options \\-U, \\-z and \\-k are passed as arguments to autoload for function. For functions contributed with zsh, the options \\-Uz are appropriate.\n\nadd-zle-hook-widget \\[ \\-L | \\-dD \\] \\[ \\-Uzk \\] hook widgetname\n\nSeveral widget names are special to the line editor, as described in the section Special Widgets, [Zle Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Widgets), in that they are automatically called at specific points during editing. Unlike function hooks, these do not use a predefined array of other names to call at the same point; the shell function add-zle-hook-widget maintains a similar array and arranges for the special widget to invoke those additional widgets.\n\nhook is one of isearch-exit, isearch-update, line-pre-redraw, line-init, line-finish, history-line-set, or keymap-select, corresponding to each of the special widgets zle-isearch-exit, etc. The special widget names are also accepted as the hook argument.\n\nwidgetname is the name of a ZLE widget. If no options are given this is added to the array of widgets to be invoked in the given hook context. Widgets are invoked in the order they were added, with\n\nzle widgetname -Nw -f \"nolast\" -- \"$@\"\n\nNote that this means that the ‘WIDGET’ special parameter tracks the widgetname when the widget function is called, rather than tracking the name of the corresponding special hook widget.\n\nIf the option \\-d is given, the widgetname is removed from the array of widgets to be executed.\n\nIf the option \\-D is given, the widgetname is treated as a pattern and any matching names of widgets are removed from the array.\n\nIf widgetname does not name an existing widget when added to the array, it is assumed that a shell function also named widgetname is meant to provide the implementation of the widget. This name is therefore marked for autoloading, and the options \\-U, \\-z and \\-k are passed as arguments to autoload as with add-zsh-hook. The widget is also created with ‘zle -N widgetname’ to cause the corresponding function to be loaded the first time the hook is called.\n\nThe arrays of widgetname are currently maintained in zstyle contexts, one for each hook context, with a style of ‘widgets’. If the \\-L option is given, this set of styles is listed with ‘zstyle -L’. This implementation may change, and the special widgets that refer to the styles are created only if add-zle-hook-widget is called to add at least one widget, so if this function is used for any hooks, then all hooks should be managed only via this function.\n\n* * *\n\n## 26.3 Remembering Recent Directories\n\nThe function cdr allows you to change the working directory to a previous working directory from a list maintained automatically. It is similar in concept to the directory stack controlled by the pushd, popd and dirs builtins, but is more configurable, and as it stores all entries in files it is maintained across sessions and (by default) between terminal emulators in the current session. Duplicates are automatically removed, so that the list reflects the single most recent use of each directory.\n\nNote that the pushd directory stack is not actually modified or used by cdr unless you configure it to do so as described in the configuration section below.\n\n* * *\n\n### 26.3.1 Installation\n\nThe system works by means of a hook function that is called every time the directory changes. To install the system, autoload the required functions and use the add-zsh-hook function described above:\n\nautoload -Uz chpwd\\_recent\\_dirs cdr add-zsh-hook\nadd-zsh-hook chpwd chpwd\\_recent\\_dirs\n\nNow every time you change directly interactively, no matter which command you use, the directory to which you change will be remembered in most-recent-first order.\n\n* * *\n\n### 26.3.2 Use\n\nAll direct user interaction is via the cdr function.\n\nThe argument to cdr is a number N corresponding to the Nth most recently changed-to directory. 1 is the immediately preceding directory; the current directory is remembered but is not offered as a destination. Note that if you have multiple windows open 1 may refer to a directory changed to in another window; you can avoid this by having per-terminal files for storing directory as described for the recent-dirs-file style below.\n\nIf you set the recent-dirs-default style described below cdr will behave the same as cd if given a non-numeric argument, or more than one argument. The recent directory list is updated just the same however you change directory.\n\nIf the argument is omitted, 1 is assumed. This is similar to pushd’s behaviour of swapping the two most recent directories on the stack.\n\nCompletion for the argument to cdr is available if compinit has been run; menu selection is recommended, using:\n\nzstyle ':completion:\\*:\\*:cdr:\\*:\\*' menu selection\n\nto allow you to cycle through recent directories; the order is preserved, so the first choice is the most recent directory before the current one. The verbose style is also recommended to ensure the directory is shown; this style is on by default so no action is required unless you have changed it.\n\n* * *\n\n### 26.3.3 Options\n\nThe behaviour of cdr may be modified by the following options.\n\n\\-l\n\nlists the numbers and the corresponding directories in abbreviated form (i.e. with ~ substitution reapplied), one per line. The directories here are not quoted (this would only be an issue if a directory name contained a newline). This is used by the completion system.\n\n\\-r\n\nsets the variable reply to the current set of directories. Nothing is printed and the directory is not changed.\n\n\\-e\n\nallows you to edit the list of directories, one per line. The list can be edited to any extent you like; no sanity checking is performed. Completion is available. No quoting is necessary (except for newlines, where I have in any case no sympathy); directories are in unabbreviated form and contain an absolute path, i.e. they start with /. Usually the first entry should be left as the current directory.\n\n\\-p ’pattern’\n\nPrunes any items in the directory list that match the given extended glob pattern; the pattern needs to be quoted from immediate expansion on the command line. The pattern is matched against each completely expanded file name in the list; the full string must match, so wildcards at the end (e.g. ’\\*removeme\\*’) are needed to remove entries with a given substring.\n\nIf output is to a terminal, then the function will print the new list after pruning and prompt for confirmation by the user. This output and confirmation step can be skipped by using \\-P instead of \\-p.\n\n* * *\n\n### 26.3.4 Configuration\n\nConfiguration is by means of the styles mechanism that should be familiar from completion; if not, see the description of the zstyle command in [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module). The context for setting styles should be ’:chpwd:\\*’ in case the meaning of the context is extended in future, for example:\n\nzstyle ':chpwd:\\*' recent-dirs-max 0\n\nsets the value of the recent-dirs-max style to 0. In practice the style name is specific enough that a context of ’\\*’ should be fine.\n\nAn exception is recent-dirs-insert, which is used exclusively by the completion system and so has the usual completion system context (’:completion:\\*’ if nothing more specific is needed), though again ’\\*’ should be fine in practice.\n\nrecent-dirs-default\n\nIf true, and the command is expecting a recent directory index, and either there is more than one argument or the argument is not an integer, then fall through to \"cd\". This allows the lazy to use only one command for directory changing. Completion recognises this, too; see recent-dirs-insert for how to control completion when this option is in use.\n\nrecent-dirs-file\n\nThe file where the list of directories is saved. The default is ${ZDOTDIR:-$HOME}/.chpwd-recent-dirs, i.e. this is in your home directory unless you have set the variable ZDOTDIR to point somewhere else. Directory names are saved in $’...’ quoted form, so each line in the file can be supplied directly to the shell as an argument.\n\nThe value of this style may be an array. In this case, the first file in the list will always be used for saving directories while any other files are left untouched. When reading the recent directory list, if there are fewer than the maximum number of entries in the first file, the contents of later files in the array will be appended with duplicates removed from the list shown. The contents of the two files are not sorted together, i.e. all the entries in the first file are shown first. The special value + can appear in the list to indicate the default file should be read at that point. This allows effects like the following:\n\nzstyle ':chpwd:\\*' recent-dirs-file \\\\ \n~/.chpwd-recent-dirs-${TTY##\\*/} +\n\nRecent directories are read from a file numbered according to the terminal. If there are insufficient entries the list is supplemented from the default file.\n\nIt is possible to use zstyle -e to make the directory configurable at run time:\n\nzstyle -e ':chpwd:\\*' recent-dirs-file pick-recent-dirs-file\npick-recent-dirs-file() {\n  if \\[\\[ $PWD = ~/text/writing(|/\\*) \\]\\]; then\n    reply=(~/.chpwd-recent-dirs-writing)\n  else\n    reply=(+)\n  fi\n}\n\nIn this example, if the current directory is ~/text/writing or a directory under it, then use a special file for saving recent directories, else use the default.\n\nrecent-dirs-insert\n\nUsed by completion. If recent-dirs-default is true, then setting this to true causes the actual directory, rather than its index, to be inserted on the command line; this has the same effect as using the corresponding index, but makes the history clearer and the line easier to edit. With this setting, if part of an argument was already typed, normal directory completion rather than recent directory completion is done; this is because recent directory completion is expected to be done by cycling through entries menu fashion.\n\nIf the value of the style is always, then only recent directories will be completed; in that case, use the cd command when you want to complete other directories.\n\nIf the value is fallback, recent directories will be tried first, then normal directory completion is performed if recent directory completion failed to find a match.\n\nFinally, if the value is both then both sets of completions are presented; the usual tag mechanism can be used to distinguish results, with recent directories tagged as recent-dirs. Note that the recent directories inserted are abbreviated with directory names where appropriate.\n\nrecent-dirs-max\n\nThe maximum number of directories to save to the file. If this is zero or negative there is no maximum. The default is 20. Note this includes the current directory, which isn’t offered, so the highest number of directories you will be offered is one less than the maximum.\n\nrecent-dirs-prune\n\nThis style is an array determining what directories should (or should not) be added to the recent list. Elements of the array can include:\n\nparent\n\nPrune parents (more accurately, ancestors) from the recent list. If present, changing directly down by any number of directories causes the current directory to be overwritten. For example, changing from ~pws to ~pws/some/other/dir causes ~pws not to be left on the recent directory stack. This only applies to direct changes to descendant directories; earlier directories on the list are not pruned. For example, changing from ~pws/yet/another to ~pws/some/other/dir does not cause ~pws to be pruned.\n\npattern:pattern\n\nGives a zsh pattern for directories that should not be added to the recent list (if not already there). This element can be repeated to add different patterns. For example, ’pattern:/tmp(|/\\*)’ stops /tmp or its descendants from being added. The EXTENDED\\_GLOB option is always turned on for these patterns.\n\nrecent-dirs-pushd\n\nIf set to true, cdr will use pushd instead of cd to change the directory, so the directory is saved on the directory stack. As the directory stack is completely separate from the list of files saved by the mechanism used in this file there is no obvious reason to do this.\n\n* * *\n\n### 26.3.5 Use with dynamic directory naming\n\nIt is possible to refer to recent directories using the dynamic directory name syntax by using the supplied function zsh\\_directory\\_name\\_cdr a hook:\n\nautoload -Uz add-zsh-hook\nadd-zsh-hook -Uz zsh\\_directory\\_name zsh\\_directory\\_name\\_cdr\n\nWhen this is done, ~\\[1\\] will refer to the most recent directory other than $PWD, and so on. Completion after ~\\[... also works.\n\n* * *\n\n### 26.3.6 Details of directory handling\n\nThis section is for the curious or confused; most users will not need to know this information.\n\nRecent directories are saved to a file immediately and hence are preserved across sessions. Note currently no file locking is applied: the list is updated immediately on interactive commands and nowhere else (unlike history), and it is assumed you are only going to change directory in one window at once. This is not safe on shared accounts, but in any case the system has limited utility when someone else is changing to a different set of directories behind your back.\n\nTo make this a little safer, only directory changes instituted from the command line, either directly or indirectly through shell function calls (but not through subshells, evals, traps, completion functions and the like) are saved. Shell functions should use cd -q or pushd -q to avoid side effects if the change to the directory is to be invisible at the command line. See the contents of the function chpwd\\_recent\\_dirs for more details.\n\n* * *\n\n## 26.4 Abbreviated dynamic references to directories\n\nThe dynamic directory naming system is described in the subsection _Dynamic named directories_ of [Filename Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Expansion). In this, a reference to ~\\[...\\] is expanded by a function found by the hooks mechanism.\n\nThe contributed function zsh\\_directory\\_name\\_generic provides a system allowing the user to refer to directories with only a limited amount of new code. It supports all three of the standard interfaces for directory naming: converting from a name to a directory, converting in the reverse direction to find a short name, and completion of names.\n\nThe main feature of this function is a path-like syntax, combining abbreviations at multiple levels separated by \":\". As an example, ~\\[g:p:s\\] might specify:\n\ng\n\nThe top level directory for your git area. This first component has to match, or the function will return indicating another directory name hook function should be tried.\n\np\n\nThe name of a project within your git area.\n\ns\n\nThe source area within that project.\n\nThis allows you to collapse references to long hierarchies to a very compact form, particularly if the hierarchies are similar across different areas of the disk.\n\nName components may be completed: if a description is shown at the top of the list of completions, it includes the path to which previous components expand, while the description for an individual completion shows the path segment it would add. No additional configuration is needed for this as the completion system is aware of the dynamic directory name mechanism.\n\n* * *\n\n### 26.4.1 Usage\n\nTo use the function, first define a wrapper function for your specific case. We’ll assume it’s to be autoloaded. This can have any name but we’ll refer to it as zdn\\_mywrapper. This wrapper function will define various variables and then call this function with the same arguments that the wrapper function gets. This configuration is described below.\n\nThen arrange for the wrapper to be run as a zsh\\_directory\\_name hook:\n\nautoload -Uz add-zsh-hook zsh\\_directory\\_name\\_generic zdn\\_mywrapper\nadd-zsh-hook -U zsh\\_directory\\_name zdn\\_mywrapper\n\n* * *\n\n### 26.4.2 Configuration\n\nThe wrapper function should define a local associative array zdn\\_top. Alternatively, this can be set with a style called mapping. The context for the style is :zdn:wrapper-name where wrapper-name is the function calling zsh\\_directory\\_name\\_generic; for example:\n\nzstyle :zdn:zdn\\_mywrapper: mapping zdn\\_mywrapper\\_top\n\nThe keys in this associative array correspond to the first component of the name. The values are matching directories. They may have an optional suffix with a slash followed by a colon and the name of a variable in the same format to give the next component. (The slash before the colon is to disambiguate the case where a colon is needed in the path for a drive. There is otherwise no syntax for escaping this, so path components whose names start with a colon are not supported.) A special component :default: specifies a variable in the form /:var (the path section is ignored and so is usually empty) that will be used for the next component if no variable is given for the path. Variables referred to within zdn\\_top have the same format as zdn\\_top itself, but contain relative paths.\n\nFor example,\n\nlocal -A zdn\\_top=(\n  g   ~/git\n  ga  ~/alternate/git\n  gs  /scratch/$USER/git/:second2\n  :default: /:second1\n)\n\nThis specifies the behaviour of a directory referred to as ~\\[g:...\\] or ~\\[ga:...\\] or ~\\[gs:...\\]. Later path components are optional; in that case ~\\[g\\] expands to ~/git, and so on. gs expands to /scratch/$USER/git and uses the associative array second2 to match the second component; g and ga use the associative array second1 to match the second component.\n\nWhen expanding a name to a directory, if the first component is not g or ga or gs, it is not an error; the function simply returns 1 so that a later hook function can be tried. However, matching the first component commits the function, so if a later component does not match, an error is printed (though this still does not stop later hooks from being executed).\n\nFor components after the first, a relative path is expected, but note that multiple levels may still appear. Here is an example of second1:\n\nlocal -A second1=(\n  p   myproject\n  s   somproject\n  os  otherproject/subproject/:third\n)\n\nThe path as found from zdn\\_top is extended with the matching directory, so ~\\[g:p\\] becomes ~/git/myproject. The slash between is added automatically (it’s not possible to have a later component modify the name of a directory already matched). Only os specifies a variable for a third component, and there’s no :default:, so it’s an error to use a name like ~\\[g:p:x\\] or ~\\[ga:s:y\\] because there’s nowhere to look up the x or y.\n\nThe associative arrays need to be visible within this function; the generic function therefore uses internal variable names beginning \\_zdn\\_ in order to avoid clashes. Note that the variable reply needs to be passed back to the shell, so should not be local in the calling function.\n\nThe function does not test whether directories assembled by component actually exist; this allows the system to work across automounted file systems. The error from the command trying to use a non-existent directory should be sufficient to indicate the problem.\n\n* * *\n\n### 26.4.3 Complete example\n\nHere is a full fictitious but usable autoloadable definition of the example function defined by the code above. So ~\\[gs:p:s\\] expands to /scratch/$USER/git/myscratchproject/top/srcdir (with $USER also expanded).\n\nlocal -A zdn\\_top=(\n  g   ~/git\n  ga  ~/alternate/git\n  gs  /scratch/$USER/git/:second2\n  :default: /:second1\n)\n\nlocal -A second1=(\n  p   myproject\n  s   somproject\n  os  otherproject/subproject/:third\n)\n\nlocal -A second2=(\n  p   myscratchproject\n  s   somescratchproject\n)\n\nlocal -A third=(\n  s   top/srcdir\n  d   top/documentation\n)\n\n# autoload not needed if you did this at initialisation...\nautoload -Uz zsh\\_directory\\_name\\_generic\nzsh\\_directory\\_name\\_generic \"$@\n\nIt is also possible to use global associative arrays, suitably named, and set the style for the context of your wrapper function to refer to this. Then your set up code would contain the following:\n\ntypeset -A zdn\\_mywrapper\\_top=(...)\n# ... and so on for other associative arrays ...\nzstyle ':zdn:zdn\\_mywrapper:' mapping zdn\\_mywrapper\\_top\nautoload -Uz add-zsh-hook zsh\\_directory\\_name\\_generic zdn\\_mywrapper\nadd-zsh-hook -U zsh\\_directory\\_name zdn\\_mywrapper\n\nand the function zdn\\_mywrapper would contain only the following:\n\nzsh\\_directory\\_name\\_generic \"$@\"\n\n* * *\n\n## 26.5 Gathering information from version control systems\n\nIn a lot of cases, it is nice to automatically retrieve information from version control systems (VCSs), such as subversion, CVS or git, to be able to provide it to the user; possibly in the user’s prompt. So that you can instantly tell which branch you are currently on, for example.\n\nIn order to do that, you may use the vcs\\_info function.\n\nThe following VCSs are supported, showing the abbreviated name by which they are referred to within the system:\n\nBazaar (bzr)\n\n[https://bazaar.canonical.com/](https://bazaar.canonical.com/)\n\nCodeville (cdv)\n\n[http://freecode.com/projects/codeville/](http://freecode.com/projects/codeville/)\n\nConcurrent Versioning System (cvs)\n\n[https://www.nongnu.org/cvs/](https://www.nongnu.org/cvs/)\n\nDarcs (darcs)\n\n[http://darcs.net/](http://darcs.net/)\n\nFossil (fossil)\n\n[https://fossil-scm.org/](https://fossil-scm.org/)\n\nGit (git)\n\n[https://git-scm.com/](https://git-scm.com/)\n\nGNU arch (tla)\n\n[https://www.gnu.org/software/gnu-arch/](https://www.gnu.org/software/gnu-arch/)\n\nMercurial (hg)\n\n[https://www.mercurial-scm.org/](https://www.mercurial-scm.org/)\n\nMonotone (mtn)\n\n[https://monotone.ca/](https://monotone.ca/)\n\nPerforce (p4)\n\n[https://www.perforce.com/](https://www.perforce.com/)\n\nSubversion (svn)\n\n[https://subversion.apache.org/](https://subversion.apache.org/)\n\nSVK (svk)\n\n[https://svk.bestpractical.com/](https://svk.bestpractical.com/)\n\nThere is also support for the patch management system quilt ([https://savannah.nongnu.org/projects/quilt](https://savannah.nongnu.org/projects/quilt)). See [Quilt Support](#vcs_005finfo-Quilt-Support) below for details.\n\nTo load vcs\\_info:\n\nIt can be used in any existing prompt, because it does not require any specific $psvar entries to be available.\n\n* * *\n\n### 26.5.1 Quickstart\n\nTo get this feature working quickly (including colors), you can do the following (assuming, you loaded vcs\\_info properly - see above):\n\nzstyle ':vcs\\_info:\\*' actionformats \\\\ \n    '%F{5}(%f%s%F{5})%F{3}-%F{5}\\[%F{2}%b%F{3}|%F{1}%a%F{5}\\]%f '\nzstyle ':vcs\\_info:\\*' formats       \\\\ \n    '%F{5}(%f%s%F{5})%F{3}-%F{5}\\[%F{2}%b%F{5}\\]%f '\nzstyle ':vcs\\_info:(sv\\[nk\\]|bzr):\\*' branchformat '%b%F{1}:%F{3}%r'\nprecmd () { vcs\\_info }\nPS1='%F{5}\\[%F{2}%n%F{5}\\] %F{3}%3~ ${vcs\\_info\\_msg\\_0\\_}%f%# '\n\nObviously, the last two lines are there for demonstration. You need to call vcs\\_info from your precmd function. Once that is done you need a _single quoted_ ’${vcs\\_info\\_msg\\_0\\_}’ in your prompt.\n\nTo be able to use ’${vcs\\_info\\_msg\\_0\\_}’ directly in your prompt like this, you will need to have the PROMPT\\_SUBST option enabled.\n\nNow call the vcs\\_info\\_printsys utility from the command line:\n\n% vcs\\_info\\_printsys\n## list of supported version control backends:\n## disabled systems are prefixed by a hash sign (#)\nbzr\ncdv\ncvs\ndarcs\nfossil\ngit\nhg\nmtn\np4\nsvk\nsvn\ntla\n## flavours (cannot be used in the enable or disable styles; they\n## are enabled and disabled with their master \\[git-svn -> git\\])\n## they \\*can\\* be used in contexts: ':vcs\\_info:git-svn:\\*'.\ngit-p4\ngit-svn\nhg-git\nhg-hgsubversion\nhg-hgsvn\n\nYou may not want all of these because there is no point in running the code to detect systems you do not use. So there is a way to disable some backends altogether:\n\nzstyle ':vcs\\_info:\\*' disable bzr cdv darcs mtn svk tla\n\nYou may also pick a few from that list and enable only those:\n\nzstyle ':vcs\\_info:\\*' enable git cvs svn\n\nIf you rerun vcs\\_info\\_printsys after one of these commands, you will see the backends listed in the disable style (or backends not in the enable style - if you used that) marked as disabled by a hash sign. That means the detection of these systems is skipped _completely_. No wasted time there.\n\n* * *\n\n### 26.5.2 Configuration\n\nThe vcs\\_info feature can be configured via zstyle.\n\nFirst, the context in which we are working:\n\n:vcs\\_info:vcs-string:user-context:repo-root-name\n\nvcs-string\n\nis one of: git, git-svn, git-p4, hg, hg-git, hg-hgsubversion, hg-hgsvn, darcs, bzr, cdv, mtn, svn, cvs, svk, tla, p4 or fossil. This is followed by ‘.quilt-quilt-mode’ in Quilt mode (see [Quilt Support](#vcs_005finfo-Quilt-Support) for details) and by ‘+hook-name’ while hooks are active (see [Hooks in vcs\\_info](#vcs_005finfo-Hooks) for details).\n\nCurrently, hooks in quilt mode don’t add the ‘.quilt-quilt-mode’ information. This may change in the future.\n\nuser-context\n\nis a freely configurable string, assignable by the user as the first argument to vcs\\_info (see its description below).\n\nrepo-root-name\n\nis the name of a repository in which you want a style to match. So, if you want a setting specific to /usr/src/zsh, with that being a CVS checkout, you can set repo-root-name to zsh to make it so.\n\nThere are three special values for vcs-string: The first is named \\-init-, that is in effect as long as there was no decision what VCS backend to use. The second is \\-preinit-; it is used _before_ vcs\\_info is run, when initializing the data exporting variables. The third special value is formats and is used by the vcs\\_info\\_lastmsg for looking up its styles.\n\nThe initial value of repo-root-name is \\-all- and it is replaced with the actual name, as soon as it is known. Only use this part of the context for defining the formats, actionformats or branchformat styles, as it is guaranteed that repo-root-name is set up correctly for these only. For all other styles, just use ’\\*’ instead.\n\nThere are two pre-defined values for user-context:\n\ndefault\n\nthe one used if none is specified\n\ncommand\n\nused by vcs\\_info\\_lastmsg to lookup its styles\n\nYou can of course use ’:vcs\\_info:\\*’ to match all VCSs in all user-contexts at once.\n\nThis is a description of all styles that are looked up.\n\nformats\n\nA list of formats, used when actionformats is not used (which is most of the time).\n\nactionformats\n\nA list of formats, used if there is a special action going on in your current repository; like an interactive rebase or a merge conflict.\n\nbranchformat\n\nSome backends replace %b in the formats and actionformats styles above, not only by a branch name but also by a revision number. This style lets you modify how that string should look.\n\nnvcsformats\n\nThese \"formats\" are set when we didn’t detect a version control system for the current directory or vcs\\_info was disabled. This is useful if you want vcs\\_info to completely take over the generation of your prompt. You would do something like PS1=’${vcs\\_info\\_msg\\_0\\_}’ to accomplish that.\n\nhgrevformat\n\nhg uses both a hash and a revision number to reference a specific changeset in a repository. With this style you can format the revision string (see branchformat) to include either or both. It’s only useful when get-revision is true. Note, the full 40-character revision id is not available (except when using the use-simple option) because executing hg more than once per prompt is too slow; you may customize this behavior using hooks.\n\nmax-exports\n\nDefines the maximum number of vcs\\_info\\_msg\\_\\*\\_ variables vcs\\_info will set.\n\nenable\n\nA list of backends you want to use. Checked in the \\-init- context. If this list contains an item called NONE no backend is used at all and vcs\\_info will do nothing. If this list contains ALL, vcs\\_info will use all known backends. Only with ALL in enable will the disable style have any effect. ALL and NONE are case insensitive.\n\ndisable\n\nA list of VCSs you don’t want vcs\\_info to test for repositories (checked in the \\-init- context, too). Only used if enable contains ALL.\n\ndisable-patterns\n\nA list of patterns that are checked against $PWD. If a pattern matches, vcs\\_info will be disabled. This style is checked in the :vcs\\_info:-init-:\\*:-all- context.\n\nSay, ~/.zsh is a directory under version control, in which you do not want vcs\\_info to be active, do:\n\nzstyle ':vcs\\_info:\\*' disable-patterns \"${(b)HOME}/.zsh(|/\\*)\"\n\nuse-quilt\n\nIf enabled, the quilt support code is active in ‘addon’ mode. See [Quilt Support](#vcs_005finfo-Quilt-Support) for details.\n\nquilt-standalone\n\nIf enabled, ‘standalone’ mode detection is attempted if no VCS is active in a given directory. See [Quilt Support](#vcs_005finfo-Quilt-Support) for details.\n\nquilt-patch-dir\n\nOverwrite the value of the $QUILT\\_PATCHES environment variable. See [Quilt Support](#vcs_005finfo-Quilt-Support) for details.\n\nquiltcommand\n\nWhen quilt itself is called in quilt support, the value of this style is used as the command name.\n\ncheck-for-changes\n\nIf enabled, this style causes the %c and %u format escapes to show when the working directory has uncommitted changes. The strings displayed by these escapes can be controlled via the stagedstr and unstagedstr styles. The only backends that currently support this option are git, hg, and bzr (the latter two only support unstaged).\n\nFor this style to be evaluated with the hg backend, the get-revision style needs to be set and the use-simple style needs to be unset. The latter is the default; the former is not.\n\nWith the bzr backend, _lightweight checkouts_ only honor this style if the use-server style is set.\n\nNote, the actions taken if this style is enabled are potentially expensive (read: they may be slow, depending on how big the current repository is). Therefore, it is disabled by default.\n\ncheck-for-staged-changes\n\nThis style is like check-for-changes, but it never checks the worktree files, only the metadata in the .${vcs} dir. Therefore, this style initializes only the %c escape (with stagedstr) but not the %u escape. This style is faster than check-for-changes.\n\nIn the git backend, this style checks for changes in the index. Other backends do not currently implement this style.\n\nThis style is disabled by default.\n\nstagedstr\n\nThis string will be used in the %c escape if there are staged changes in the repository.\n\nunstagedstr\n\nThis string will be used in the %u escape if there are unstaged changes in the repository.\n\ncommand\n\nThis style causes vcs\\_info to use the supplied string as the command to use as the VCS’s binary. Note, that setting this in ’:vcs\\_info:\\*’ is not a good idea.\n\nIf the value of this style is empty (which is the default), the used binary name is the name of the backend in use (e.g. svn is used in an svn repository).\n\nThe repo-root-name part in the context is always the default \\-all- when this style is looked up.\n\nFor example, this style can be used to use binaries from non-default installation directories. Assume, git is installed in /usr/bin but your sysadmin installed a newer version in /usr/local/bin. Instead of changing the order of your $PATH parameter, you can do this:\n\nzstyle ':vcs\\_info:git:\\*:-all-' command /usr/local/bin/git\n\nuse-server\n\nThis is used by the Perforce backend (p4) to decide if it should contact the Perforce server to find out if a directory is managed by Perforce. This is the only reliable way of doing this, but runs the risk of a delay if the server name cannot be found. If the server (more specifically, the host:port pair describing the server) cannot be contacted, its name is put into the associative array vcs\\_info\\_p4\\_dead\\_servers and is not contacted again during the session until it is removed by hand. If you do not set this style, the p4 backend is only usable if you have set the environment variable P4CONFIG to a file name and have corresponding files in the root directories of each Perforce client. See comments in the function VCS\\_INFO\\_detect\\_p4 for more detail.\n\nThe Bazaar backend (bzr) uses this to permit contacting the server about lightweight checkouts, see the check-for-changes style.\n\nuse-simple\n\nIf there are two different ways of gathering information, you can select the simpler one by setting this style to true; the default is to use the not-that-simple code, which is potentially a lot slower but might be more accurate in all possible cases. This style is used by the bzr, hg, and git backends. In the case of hg it will invoke the external hexdump program to parse the binary dirstate cache file; this method will not return the local revision number.\n\nget-revision\n\nIf set to true, vcs\\_info goes the extra mile to figure out the revision of a repository’s work tree (currently for the git and hg backends, where this kind of information is not always vital). For git, the hash value of the currently checked out commit is available via the %i expansion. With hg, the local revision number and the corresponding global hash are available via %i.\n\nget-mq\n\nIf set to true, the hg backend will look for a Mercurial Queue (mq) patch directory. Information will be available via the ‘%m’ replacement.\n\nget-bookmarks\n\nIf set to true, the hg backend will try to get a list of current bookmarks. They will be available via the ‘%m’ replacement.\n\nThe default is to generate a comma-separated list of all bookmark names that refer to the currently checked out revision. If a bookmark is active, its name is suffixed an asterisk and placed first in the list.\n\nuse-prompt-escapes\n\nDetermines if we assume that the assembled string from vcs\\_info includes prompt escapes. (Used by vcs\\_info\\_lastmsg.)\n\ndebug\n\nEnable debugging output to track possible problems. Currently this style is only used by vcs\\_info’s hooks system.\n\nhooks\n\nA list style that defines hook-function names. See [Hooks in vcs\\_info](#vcs_005finfo-Hooks) below for details.\n\npatch-format\n\nnopatch-format\n\nThis pair of styles format the patch information used by the %m expando in formats and actionformats for the git and hg backends. The value is subject to certain %\\-expansions described below. The expanded value is made available in the global backend\\_misc array as ${backend\\_misc\\[patches\\]} (also if a set-patch-format hook is used).\n\nget-unapplied\n\nThis boolean style controls whether a backend should attempt to gather a list of unapplied patches (for example with Mercurial Queue patches).\n\nUsed by the quilt, hg, and git backends.\n\nThe default values for these styles in all contexts are:\n\nformats\n\n\" (%s)-\\[%b\\]%u%c-\"\n\nactionformats\n\n\" (%s)-\\[%b|%a\\]%u%c-\"\n\nbranchformat\n\n\"%b:%r\" (for bzr, svn, svk and hg)\n\nnvcsformats\n\n\"\"\n\nhgrevformat\n\n\"%r:%h\"\n\nmax-exports\n\n2\n\nenable\n\nALL\n\ndisable\n\n(empty list)\n\ndisable-patterns\n\n(empty list)\n\ncheck-for-changes\n\nfalse\n\ncheck-for-staged-changes\n\nfalse\n\nstagedstr\n\n(string: \"S\")\n\nunstagedstr\n\n(string: \"U\")\n\ncommand\n\n(empty string)\n\nuse-server\n\nfalse\n\nuse-simple\n\nfalse\n\nget-revision\n\nfalse\n\nget-mq\n\ntrue\n\nget-bookmarks\n\nfalse\n\nuse-prompt-escapes\n\ntrue\n\ndebug\n\nfalse\n\nhooks\n\n(empty list)\n\nuse-quilt\n\nfalse\n\nquilt-standalone\n\nfalse\n\nquilt-patch-dir\n\nempty - use $QUILT\\_PATCHES\n\nquiltcommand\n\nquilt\n\npatch-format\n\nbackend dependent\n\nnopatch-format\n\nbackend dependent\n\nget-unapplied\n\nfalse\n\nIn normal formats and actionformats the following replacements are done:\n\n%s\n\nThe VCS in use (git, hg, svn, etc.).\n\n%b\n\nInformation about the current branch.\n\n%a\n\nAn identifier that describes the action. Only makes sense in actionformats.\n\n%i\n\nThe current revision number or identifier. For hg the hgrevformat style may be used to customize the output.\n\n%c\n\nThe string from the stagedstr style if there are staged changes in the repository.\n\n%u\n\nThe string from the unstagedstr style if there are unstaged changes in the repository.\n\n%R\n\nThe base directory of the repository.\n\n%r\n\nThe repository name. If %R is /foo/bar/repoXY, %r is repoXY.\n\n%S\n\nA subdirectory within a repository. If $PWD is /foo/bar/repoXY/beer/tasty, %S is beer/tasty.\n\n%m\n\nA \"misc\" replacement. It is at the discretion of the backend to decide what this replacement expands to.\n\nThe hg and git backends use this expando to display patch information. hg sources patch information from the mq extensions; git from in-progress rebase and cherry-pick operations and from the stgit extension. The patch-format and nopatch-format styles control the generated string. The former is used when at least one patch from the patch queue has been applied, and the latter otherwise.\n\nThe hg backend displays bookmark information in this expando (in addition to mq information). See the get-mq and get-bookmarks styles. Both of these styles may be enabled at the same time. If both are enabled, both resulting strings will be shown separated by a semicolon (that cannot currently be customized).\n\nThe quilt ‘standalone’ backend sets this expando to the same value as the %Q expando.\n\n%Q\n\nQuilt series information. When quilt is used (either in ‘addon’ mode or as a ‘standalone’ backend), this expando is set to the quilt series’ patch-format string. The set-patch-format hook and nopatch-format style are honoured.\n\nSee [Quilt Support](#vcs_005finfo-Quilt-Support) below for details.\n\nIn branchformat these replacements are done:\n\n%b\n\nThe branch name. For hg, the branch name can include a topic name.\n\n%r\n\nThe current revision number or the hgrevformat style for hg.\n\nIn hgrevformat these replacements are done:\n\n%r\n\nThe current local revision number.\n\n%h\n\nThe current global revision identifier.\n\nIn patch-format and nopatch-format these replacements are done:\n\n%p\n\nThe name of the top-most applied patch; may be overridden by the applied-string hook.\n\n%u\n\nThe number of unapplied patches; may be overridden by the unapplied-string hook.\n\n%n\n\nThe number of applied patches.\n\n%c\n\nThe number of unapplied patches.\n\n%a\n\nThe number of all patches (%a = %n + %c).\n\n%g\n\nThe names of active mq guards (hg backend).\n\n%G\n\nThe number of active mq guards (hg backend).\n\nNot all VCS backends have to support all replacements. For nvcsformats no replacements are performed at all, it is just a string.\n\n* * *\n\n### 26.5.3 Oddities\n\nIf you want to use the %b (bold off) prompt expansion in formats, which expands %b itself, use %%b. That will cause the vcs\\_info expansion to replace %%b with %b, so that zsh’s prompt expansion mechanism can handle it. Similarly, to hand down %b from branchformat, use %%%%b. Sorry for this inconvenience, but it cannot be easily avoided. Luckily we do not clash with a lot of prompt expansions and this only needs to be done for those.\n\nWhen one of the gen-applied-string, gen-unapplied-string, and set-patch-format hooks is defined, applying %\\-escaping (‘foo=${foo//’%’/%%}’) to the interpolated values for use in the prompt is the responsibility of those hooks (jointly); when neither of those hooks is defined, vcs\\_info handles escaping by itself. We regret this coupling, but it was required for backwards compatibility.\n\n* * *\n\n### 26.5.4 Quilt Support\n\nQuilt is not a version control system, therefore this is not implemented as a backend. It can help keeping track of a series of patches. People use it to keep a set of changes they want to use on top of software packages (which is tightly integrated into the package build process - the Debian project does this for a large number of packages). Quilt can also help individual developers keep track of their own patches on top of real version control systems.\n\nThe vcs\\_info integration tries to support both ways of using quilt by having two slightly different modes of operation: ‘addon’ mode and ‘standalone’ mode).\n\nQuilt integration is off by default; to enable it, set the use-quilt style, and add %Q to your formats or actionformats style:\n\nzstyle ':vcs\\_info:\\*' use-quilt true\n\nStyles looked up from the Quilt support code include ‘.quilt-quilt-mode’ in the vcs-string part of the context, where quilt-mode is either addon or standalone. Example: :vcs\\_info:git.quilt-addon:default:repo-root-name.\n\nFor ‘addon’ mode to become active vcs\\_info must have already detected a real version control system controlling the directory. If that is the case, a directory that holds quilt’s patches needs to be found. That directory is configurable via the ‘QUILT\\_PATCHES’ environment variable. If that variable exists its value is used, otherwise the value ‘patches’ is assumed. The value from $QUILT\\_PATCHES can be overwritten using the ‘quilt-patch-dir’ style. (Note: you can use vcs\\_info to keep the value of $QUILT\\_PATCHES correct all the time via the post-quilt hook).\n\nWhen the directory in question is found, quilt is assumed to be active. To gather more information, vcs\\_info looks for a directory called ‘.pc’; Quilt uses that directory to track its current state. If this directory does not exist we know that quilt has not done anything to the working directory (read: no patches have been applied yet).\n\nIf patches are applied, vcs\\_info will try to find out which. If you want to know which patches of a series are not yet applied, you need to activate the get-unapplied style in the appropriate context.\n\nvcs\\_info allows for very detailed control over how the gathered information is presented (see [Configuration](#vcs_005finfo-Configuration) and [Hooks in vcs\\_info](#vcs_005finfo-Hooks)), all of which are documented below. Note there are a number of other patch tracking systems that work on top of a certain version control system (like stgit for git, or mq for hg); the configuration for systems like that are generally configured the same way as the quilt support.\n\nIf the quilt support is working in ‘addon’ mode, the produced string is available as a simple format replacement (%Q to be precise), which can be used in formats and actionformats; see below for details).\n\nIf, on the other hand, the support code is working in ‘standalone’ mode, vcs\\_info will pretend as if quilt were an actual version control system. That means that the version control system identifier (which otherwise would be something like ‘svn’ or ‘cvs’) will be set to ‘\\-quilt-’. This has implications on the used style context where this identifier is the second element. vcs\\_info will have filled in a proper value for the \"repository’s\" root directory and the string containing the information about quilt’s state will be available as the ‘misc’ replacement (and %Q for compatibility with ‘addon’ mode).\n\nWhat is left to discuss is how ‘standalone’ mode is detected. The detection itself is a series of searches for directories. You can have this detection enabled all the time in every directory that is not otherwise under version control. If you know there is only a limited set of trees where you would like vcs\\_info to try and look for Quilt in ‘standalone’ mode to minimise the amount of searching on every call to vcs\\_info, there are a number of ways to do that:\n\nEssentially, ‘standalone’ mode detection is controlled by a style called ‘quilt-standalone’. It is a string style and its value can have different effects. The simplest values are: ‘always’ to run detection every time vcs\\_info is run, and ‘never’ to turn the detection off entirely.\n\nIf the value of quilt-standalone is something else, it is interpreted differently. If the value is the name of a scalar variable the value of that variable is checked and that value is used in the same ‘always’/‘never’ way as described above.\n\nIf the value of quilt-standalone is an array, the elements of that array are used as directory names under which you want the detection to be active.\n\nIf quilt-standalone is an associative array, the keys are taken as directory names under which you want the detection to be active, but only if the corresponding value is the string ‘true’.\n\nLast, but not least, if the value of quilt-standalone is the name of a function, the function is called without arguments and the return value decides whether detection should be active. A ‘0’ return value is true; a non-zero return value is interpreted as false.\n\nNote, if there is both a function and a variable by the name of quilt-standalone, the function will take precedence.\n\n* * *\n\n### 26.5.5 Function Descriptions (Public API)\n\nvcs\\_info \\[user-context\\]\n\nThe main function, that runs all backends and assembles all data into ${vcs\\_info\\_msg\\_\\*\\_}. This is the function you want to call from precmd if you want to include up-to-date information in your prompt (see [Variable Description](#vcs_005finfo-Variables) below). If an argument is given, that string will be used instead of default in the user-context field of the style context.\n\nvcs\\_info\\_hookadd\n\nStatically registers a number of functions to a given hook. The hook needs to be given as the first argument; what follows is a list of hook-function names to register to the hook. The ‘+vi-’ prefix needs to be left out here. See [Hooks in vcs\\_info](#vcs_005finfo-Hooks) below for details.\n\nvcs\\_info\\_hookdel\n\nRemove hook-functions from a given hook. The hook needs to be given as the first non-option argument; what follows is a list of hook-function names to un-register from the hook. If ‘\\-a’ is used as the first argument, all occurrences of the functions are unregistered. Otherwise only the last occurrence is removed (if a function was registered to a hook more than once). The ‘+vi-’ prefix needs to be left out here. See [Hooks in vcs\\_info](#vcs_005finfo-Hooks) below for details.\n\nvcs\\_info\\_lastmsg\n\nOutputs the current values of ${vcs\\_info\\_msg\\_\\*\\_}. Takes into account the value of the use-prompt-escapes style in ’:vcs\\_info:formats:command:-all-’. It also only prints max-exports values.\n\nvcs\\_info\\_printsys \\[user-context\\]\n\nPrints a list of all supported version control systems. Useful to find out possible contexts (and which of them are enabled) or values for the disable style.\n\nvcs\\_info\\_setsys\n\nInitializes vcs\\_info’s internal list of available backends. With this function, you can add support for new VCSs without restarting the shell.\n\nAll functions named VCS\\_INFO\\_\\* are for internal use only.\n\n* * *\n\n### 26.5.6 Variable Description\n\n${vcs\\_info\\_msg\\_N\\_} (Note the trailing underscore)\n\nWhere N is an integer, e.g., vcs\\_info\\_msg\\_0\\_. These variables are the storage for the informational message the last vcs\\_info call has assembled. These are strongly connected to the formats, actionformats and nvcsformats styles described above. Those styles are lists. The first member of that list gets expanded into ${vcs\\_info\\_msg\\_0\\_}, the second into ${vcs\\_info\\_msg\\_1\\_} and the Nth into ${vcs\\_info\\_msg\\_N-1\\_}. (See the max-exports style above.)\n\nAll variables named VCS\\_INFO\\_\\* are for internal use only.\n\n* * *\n\n### 26.5.7 Hooks in vcs\\_info\n\nHooks are places in vcs\\_info where you can run your own code. That code can communicate with the code that called it and through that, change the system’s behaviour.\n\nFor configuration, hooks change the style context:\n\n:vcs\\_info:vcs-string+hook-name:user-context:repo-root-name\n\nTo register functions to a hook, you need to list them in the hooks style in the appropriate context.\n\nExample:\n\nzstyle ':vcs\\_info:\\*+foo:\\*' hooks bar baz\n\nThis registers functions to the hook ‘foo’ for all backends. In order to avoid namespace problems, all registered function names are prepended by a ‘+vi-’, so the actual functions called for the ‘foo’ hook are ‘+vi-bar’ and ‘+vi-baz’.\n\nIf you would like to register a function to a hook regardless of the current context, you may use the vcs\\_info\\_hookadd function. To remove a function that was added like that, the vcs\\_info\\_hookdel function can be used.\n\nIf something seems weird, you can enable the ‘debug’ boolean style in the proper context and the hook-calling code will print what it tried to execute and whether the function in question existed.\n\nWhen you register more than one function to a hook, all functions are executed one after another until one function returns non-zero or until all functions have been called. Context-sensitive hook functions are executed before statically registered ones (the ones added by vcs\\_info\\_hookadd).\n\nYou may pass data between functions via an associative array, user\\_data. For example:\n\n+vi-git-myfirsthook(){\n    user\\_data\\[myval\\]=$myval\n}\n+vi-git-mysecondhook(){\n    # do something with ${user\\_data\\[myval\\]}\n}\n\nThere are a number of variables that are special in hook contexts:\n\nret\n\nThe return value that the hooks system will return to the caller. The default is an integer ‘zero’. If and how a changed ret value changes the execution of the caller depends on the specific hook. See the hook documentation below for details.\n\nhook\\_com\n\nAn associated array which is used for bidirectional communication from the caller to hook functions. The used keys depend on the specific hook.\n\ncontext\n\nThe active context of the hook. Functions that wish to change this variable should make it local scope first.\n\nvcs\n\nThe current VCS after it was detected. The same values as in the enable/disable style are used. Available in all hooks except start-up.\n\nFinally, the full list of currently available hooks:\n\nstart-up\n\nCalled after starting vcs\\_info but before the VCS in this directory is determined. It can be used to deactivate vcs\\_info temporarily if necessary. When ret is set to 1, vcs\\_info aborts and does nothing; when set to 2, vcs\\_info sets up everything as if no version control were active and exits.\n\npre-get-data\n\nSame as start-up but after the VCS was detected.\n\ngen-hg-bookmark-string\n\nCalled in the Mercurial backend when a bookmark string is generated; the get-revision and get-bookmarks styles must be true.\n\nThis hook gets the names of the Mercurial bookmarks that vcs\\_info collected from ‘hg’.\n\nIf a bookmark is active, the key ${hook\\_com\\[hg-active-bookmark\\]} is set to its name. The key is otherwise unset.\n\nWhen setting ret to non-zero, the string in ${hook\\_com\\[hg-bookmark-string\\]} will be used in the %m escape in formats and actionformats and will be available in the global backend\\_misc array as ${backend\\_misc\\[bookmarks\\]}.\n\ngen-applied-string\n\nCalled in the git (with stgit or during rebase or merge), and hg (with mq) backends and in quilt support when the applied-string is generated; the use-quilt zstyle must be true for quilt (the mq and stgit backends are active by default).\n\nThe arguments to this hook describe applied patches in the opposite order, which means that the first argument is the top-most patch and so forth.\n\nWhen the patches’ log messages can be extracted, those are embedded within each argument after a space, so each argument is of the form ‘patch-name first line of the log message’, where patch-name contains no whitespace. The mq backend passes arguments of the form ‘patch name’, with possible embedded spaces, but without extracting the patch’s log message.\n\nWhen setting ret to non-zero, the string in ${hook\\_com\\[applied-string\\]} will be available as %p in the patch-format and nopatch-format styles. This hook is, in concert with set-patch-format, responsible for %\\-escaping that value for use in the prompt. (See [Oddities](#vcs_005finfo-Oddities).)\n\nThe quilt backend passes to this hook the inputs ${hook\\_com\\[quilt-patches-dir\\]} and, if it has been determined, ${hook\\_com\\[quilt-pc-dir\\]}.\n\ngen-unapplied-string\n\nCalled in the git (with stgit or during rebase), and hg (with mq) backend and in quilt support when the unapplied-string is generated; the get-unapplied style must be true.\n\nThis hook gets the names of all unapplied patches which vcs\\_info in order, which means that the first argument is the patch next-in-line to be applied and so forth.\n\nThe format of each argument is as for gen-applied-string, above.\n\nWhen setting ret to non-zero, the string in ${hook\\_com\\[unapplied-string\\]} will be available as %u in the patch-format and nopatch-format styles. This hook is, in concert with set-patch-format, responsible for %\\-escaping that value for use in the prompt. (See [Oddities](#vcs_005finfo-Oddities).)\n\nThe quilt backend passes to this hook the inputs ${hook\\_com\\[quilt-patches-dir\\]} and, if it has been determined, ${hook\\_com\\[quilt-pc-dir\\]}.\n\ngen-mqguards-string\n\nCalled in the hg backend when guards-string is generated; the get-mq style must be true (default).\n\nThis hook gets the names of any active mq guards.\n\nWhen setting ret to non-zero, the string in ${hook\\_com\\[guards-string\\]} will be used in the %g escape in the patch-format and nopatch-format styles.\n\nno-vcs\n\nThis hooks is called when no version control system was detected.\n\nThe ‘hook\\_com’ parameter is not used.\n\npost-backend\n\nCalled as soon as the backend has finished collecting information.\n\nThe ‘hook\\_com’ keys available are as for the set-message hook.\n\npost-quilt\n\nCalled after the quilt support is done. The following information is passed as arguments to the hook: 1. the quilt-support mode (‘addon’ or ‘standalone’); 2. the directory that contains the patch series; 3. the directory that holds quilt’s status information (the ‘.pc’ directory) or the string \"-nopc-\" if that directory wasn’t found.\n\nThe ‘hook\\_com’ parameter is not used.\n\nset-branch-format\n\nCalled before ‘branchformat’ is set. The only argument to the hook is the format that is configured at this point.\n\nThe ‘hook\\_com’ keys considered are ‘branch’ and ‘revision’. They are set to the values figured out so far by vcs\\_info and any change will be used directly when the actual replacement is done.\n\nIf ret is set to non-zero, the string in ${hook\\_com\\[branch-replace\\]} will be used unchanged as the ‘%b’ replacement in the variables set by vcs\\_info.\n\nset-hgrev-format\n\nCalled before a ‘hgrevformat’ is set. The only argument to the hook is the format that is configured at this point.\n\nThe ‘hook\\_com’ keys considered are ‘hash’ and ‘localrev’. They are set to the values figured out so far by vcs\\_info and any change will be used directly when the actual replacement is done.\n\nIf ret is set to non-zero, the string in ${hook\\_com\\[rev-replace\\]} will be used unchanged as the ‘%i’ replacement in the variables set by vcs\\_info.\n\npre-addon-quilt\n\nThis hook is used when vcs\\_info’s quilt functionality is active in \"addon\" mode (quilt used on top of a real version control system). It is activated right before any quilt specific action is taken.\n\nSetting the ‘ret’ variable in this hook to a non-zero value avoids any quilt specific actions from being run at all.\n\nset-patch-format\n\nThis hook is used to control some of the possible expansions in patch-format and nopatch-format styles with patch queue systems such as quilt, mqueue and the like.\n\nThis hook is used in the git, hg and quilt backends.\n\nThe hook allows the control of the %p (${hook\\_com\\[applied\\]}) and %u (${hook\\_com\\[unapplied\\]}) expansion in all backends that use the hook. With the mercurial backend, the %g (${hook\\_com\\[guards\\]}) expansion is controllable in addition to that.\n\nIf ret is set to non-zero, the string in ${hook\\_com\\[patch-replace\\]} will be used unchanged instead of an expanded format from patch-format or nopatch-format.\n\nThis hook is, in concert with the gen-applied-string or gen-unapplied-string hooks if they are defined, responsible for %\\-escaping the final patch-format value for use in the prompt. (See [Oddities](#vcs_005finfo-Oddities).)\n\nThe quilt backend passes to this hook the inputs ${hook\\_com\\[quilt-patches-dir\\]} and, if it has been determined, ${hook\\_com\\[quilt-pc-dir\\]}.\n\nset-message\n\nCalled each time before a ‘vcs\\_info\\_msg\\_N\\_’ message is set. It takes two arguments; the first being the ‘N’ in the message variable name, the second is the currently configured formats or actionformats.\n\nThere are a number of ‘hook\\_com’ keys, that are used here: ‘action’, ‘branch’, ‘base’, ‘base-name’, ‘subdir’, ‘staged’, ‘unstaged’, ‘revision’, ‘misc’, ‘vcs’ and one ‘miscN’ entry for each backend-specific data field (N starting at zero). They are set to the values figured out so far by vcs\\_info and any change will be used directly when the actual replacement is done.\n\nSince this hook is triggered multiple times (once for each configured formats or actionformats), each of the ‘hook\\_com’ keys mentioned above (except for the miscN entries) has an ‘\\_orig’ counterpart, so even if you changed a value to your liking you can still get the original value in the next run. Changing the ‘\\_orig’ values is probably not a good idea.\n\nIf ret is set to non-zero, the string in ${hook\\_com\\[message\\]} will be used unchanged as the message by vcs\\_info.\n\nIf all of this sounds rather confusing, take a look at [Examples](#vcs_005finfo-Examples) and also in the Misc/vcs\\_info-examples file in the Zsh source. They contain some explanatory code.\n\n* * *\n\n### 26.5.8 Examples\n\nDon’t use vcs\\_info at all (even though it’s in your prompt):\n\nzstyle ':vcs\\_info:\\*' enable NONE\n\nDisable the backends for bzr and svk:\n\nzstyle ':vcs\\_info:\\*' disable bzr svk\n\nDisable everything _but_ bzr and svk:\n\nzstyle ':vcs\\_info:\\*' enable bzr svk\n\nProvide a special formats for git:\n\nzstyle ':vcs\\_info:git:\\*' formats       ' GIT, BABY! \\[%b\\]'\nzstyle ':vcs\\_info:git:\\*' actionformats ' GIT ACTION! \\[%b|%a\\]'\n\nAll %x expansion in all sorts of formats (formats, actionformats, branchformat, you name it) are done using the ‘zformat’ builtin from the ‘zsh/zutil’ module. That means you can do everything with these %x items what zformat supports. In particular, if you want something that is really long to have a fixed width, like a hash in a mercurial branchformat, you can do this: %12.12i. That’ll shrink the 40 character hash to its 12 leading characters. The form is actually ‘%min.maxx’. More is possible. See [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module) for details.\n\nUse the quicker bzr backend\n\nzstyle ':vcs\\_info:bzr:\\*' use-simple true\n\nIf you do use use-simple, please report if it does ‘the-right-thing\\[tm\\]’.\n\nDisplay the revision number in yellow for bzr and svn:\n\nzstyle ':vcs\\_info:(svn|bzr):\\*' \\\\ \n       branchformat '%b%%F{yellow}:%r'\n\nThe doubled percent sign is explained in [Oddities](#vcs_005finfo-Oddities).\n\nAlternatively, one can use the raw colour codes directly:\n\nzstyle ':vcs\\_info:(svn|bzr):\\*' \\\\ \n       branchformat '%b%{'${fg\\[yellow\\]}'%}:%r'\n\nNormally when a variable is interpolated into a format string, the variable needs to be %\\-escaped. In this example we skipped that because we assume the value of ${fg\\[yellow\\]} doesn’t contain any % signs.\n\nMake sure you enclose the color codes in %{...%} if you want to use the string provided by vcs\\_info in prompts.\n\nHere is how to print the VCS information as a command (not in a prompt):\n\nvcsi() { vcs\\_info interactive; vcs\\_info\\_lastmsg }\n\nThis way, you can even define different formats for output via vcs\\_info\\_lastmsg in the ’:vcs\\_info:\\*:interactive:\\*’ namespace.\n\nNow as promised, some code that uses hooks: say, you’d like to replace the string ‘svn’ by ‘subversion’ in vcs\\_info’s %s formats replacement.\n\nFirst, we will tell vcs\\_info to call a function when populating the message variables with the gathered information:\n\nzstyle ':vcs\\_info:\\*+set-message:\\*' hooks svn2subversion\n\nNothing happens. Which is reasonable, since we didn’t define the actual function yet. To see what the hooks subsystem is trying to do, enable the ‘debug’ style:\n\nzstyle ':vcs\\_info:\\*+\\*:\\*' debug true\n\nThat should give you an idea what is going on. Specifically, the function that we are looking for is ‘+vi-svn2subversion’. Note, the ‘+vi-’ prefix. So, everything is in order, just as documented. When you are done checking out the debugging output, disable it again:\n\nzstyle ':vcs\\_info:\\*+\\*:\\*' debug false\n\nNow, let’s define the function:\n\nfunction +vi-svn2subversion() {\n    \\[\\[ ${hook\\_com\\[vcs\\_orig\\]} == svn \\]\\] && hook\\_com\\[vcs\\]=subversion\n}\n\nSimple enough. And it could have even been simpler, if only we had registered our function in a less generic context. If we do it only in the ‘svn’ backend’s context, we don’t need to test which the active backend is:\n\nzstyle ':vcs\\_info:svn+set-message:\\*' hooks svn2subversion\n\nfunction +vi-svn2subversion() {\n    hook\\_com\\[vcs\\]=subversion\n}\n\nAnd finally a little more elaborate example, that uses a hook to create a customised bookmark string for the hg backend.\n\nAgain, we start off by registering a function:\n\nzstyle ':vcs\\_info:hg+gen-hg-bookmark-string:\\*' hooks hgbookmarks\n\nAnd then we define the ‘+vi-hgbookmarks’ function:\n\nfunction +vi-hgbookmarks() {\n    # The default is to connect all bookmark names by\n    # commas. This mixes things up a little.\n    # Imagine, there's one type of bookmarks that is\n    # special to you. Say, because it's \\*your\\* work.\n    # Those bookmarks look always like this: \"sh/\\*\"\n    # (because your initials are sh, for example).\n    # This makes the bookmarks string use only those\n    # bookmarks. If there's more than one, it\n    # concatenates them using commas.\n    # The bookmarks returned by \\`hg' are available in\n    # the function's positional parameters.\n    local s=\"${(Mj:,:)@:#sh/\\*}\"\n    # Now, the communication with the code that calls\n    # the hook functions is done via the hook\\_com\\[\\]\n    # hash. The key at which the \\`gen-hg-bookmark-string'\n    # hook looks is \\`hg-bookmark-string'. So:\n    hook\\_com\\[hg-bookmark-string\\]=$s\n    # And to signal that we want to use the string we\n    # just generated, set the special variable \\`ret' to\n    # something other than the default zero:\n    ret=1\n    return 0\n}\n\nSome longer examples and code snippets which might be useful are available in the examples file located at Misc/vcs\\_info-examples in the Zsh source directory.\n\nThis concludes our guided tour through zsh’s vcs\\_info.\n\n* * *\n\n## 26.6 Prompt Themes\n\n* * *\n\n### 26.6.1 Installation\n\nYou should make sure all the functions from the Functions/Prompts directory of the source distribution are available; they all begin with the string ‘prompt\\_’ except for the special function ‘promptinit’. You also need the ‘colors’ and ‘add-zsh-hook’ functions from Functions/Misc. All these functions may already be installed on your system; if not, you will need to find them and copy them. The directory should appear as one of the elements of the fpath array (this should already be the case if they were installed), and at least the function promptinit should be autoloaded; it will autoload the rest. Finally, to initialize the use of the system you need to call the promptinit function. The following code in your .zshrc will arrange for this; assume the functions are stored in the directory ~/myfns:\n\nfpath=(~/myfns $fpath)\nautoload -U promptinit\npromptinit\n\n* * *\n\n### 26.6.2 Theme Selection\n\nUse the prompt command to select your preferred theme. This command may be added to your .zshrc following the call to promptinit in order to start zsh with a theme already selected.\n\nprompt \\[ \\-c | \\-l \\]\n\nprompt \\[ \\-p | \\-h \\] \\[ theme ... \\]\n\nprompt \\[ \\-s \\] theme \\[ arg ... \\]\n\nSet or examine the prompt theme. With no options and a theme argument, the theme with that name is set as the current theme. The available themes are determined at run time; use the \\-l option to see a list. The special theme ‘random’ selects at random one of the available themes and sets your prompt to that.\n\nIn some cases the theme may be modified by one or more arguments, which should be given after the theme name. See the help for each theme for descriptions of these arguments.\n\nOptions are:\n\n\\-c\n\nShow the currently selected theme and its parameters, if any.\n\n\\-l\n\nList all available prompt themes.\n\n\\-p\n\nPreview the theme named by theme, or all themes if no theme is given.\n\n\\-h\n\nShow help for the theme named by theme, or for the prompt function if no theme is given.\n\n\\-s\n\nSet theme as the current theme and save state.\n\nprompt\\_theme\\_setup\n\nEach available theme has a setup function which is called by the prompt function to install that theme. This function may define other functions as necessary to maintain the prompt, including functions used to preview the prompt or provide help for its use. You should not normally call a theme’s setup function directly.\n\n* * *\n\n### 26.6.3 Utility Themes\n\nprompt off\n\nThe theme ‘off’ sets all the prompt variables to minimal values with no special effects.\n\nprompt default\n\nThe theme ‘default’ sets all prompt variables to the same state as if an interactive zsh was started with no initialization files.\n\nprompt restore\n\nThe special theme ‘restore’ erases all theme settings and sets prompt variables to their state before the first time the ‘prompt’ function was run, provided each theme has properly defined its cleanup (see below).\n\nNote that you can undo ‘prompt off’ and ‘prompt default’ with ‘prompt restore’, but a second restore does not undo the first.\n\n* * *\n\n### 26.6.4 Writing Themes\n\nThe first step for adding your own theme is to choose a name for it, and create a file ‘prompt\\_name\\_setup’ in a directory in your fpath, such as ~/myfns in the example above. The file should at minimum contain assignments for the prompt variables that your theme wishes to modify. By convention, themes use PS1, PS2, RPS1, etc., rather than the longer PROMPT and RPROMPT.\n\nThe file is autoloaded as a function in the current shell context, so it may contain any necessary commands to customize your theme, including defining additional functions. To make some complex tasks easier, your setup function may also do any of the following:\n\nAssign prompt\\_opts\n\nThe array prompt\\_opts may be assigned any of \"bang\", \"cr\", \"percent\", \"sp\", and/or \"subst\" as values. The corresponding setopts (promptbang, etc.) are turned on, all other prompt-related options are turned off. The prompt\\_opts array preserves setopts even beyond the scope of localoptions, should your function need that.\n\nModify hooks\n\nUse of add-zsh-hook and add-zle-hook-widget is recommended (see the Manipulating Hook Functions section above). All hooks that follow the naming pattern prompt\\_theme\\_hook are automatically removed when the prompt theme changes or is disabled.\n\nDeclare cleanup\n\nIf your function makes any other changes that should be undone when the theme is disabled, your setup function may call\n\nwhere command should be suitably quoted. If your theme is ever disabled or replaced by another, command is executed with eval. You may declare more than one such cleanup hook.\n\nDefine preview\n\nDefine or autoload a function prompt\\_name\\_preview to display a simulated version of your prompt. A simple default previewer is defined by promptinit for themes that do not define their own. This preview function is called by ‘prompt -p’.\n\nProvide help\n\nDefine or autoload a function prompt\\_name\\_help to display documentation or help text for your theme. This help function is called by ‘prompt -h’.\n\n* * *\n\n## 26.7 ZLE Functions\n\n* * *\n\n### 26.7.1 Widgets\n\nThese functions all implement user-defined ZLE widgets (see [Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor)) which can be bound to keystrokes in interactive shells. To use them, your .zshrc should contain lines of the form\n\nautoload function\nzle -N function\n\nfollowed by an appropriate bindkey command to associate the function with a key sequence. Suggested bindings are described below.\n\nbash-style word functions\n\nIf you are looking for functions to implement moving over and editing words in the manner of bash, where only alphanumeric characters are considered word characters, you can use the functions described in the next section. The following is sufficient:\n\nautoload -U select-word-style\nselect-word-style bash\n\nforward-word-match, backward-word-match\n\nkill-word-match, backward-kill-word-match\n\ntranspose-words-match, capitalize-word-match\n\nup-case-word-match, down-case-word-match\n\ndelete-whole-word-match, select-word-match\n\nselect-word-style, match-word-context, match-words-by-style\n\nThe first eight ‘\\-match’ functions are drop-in replacements for the builtin widgets without the suffix. By default they behave in a similar way. However, by the use of styles and the function select-word-style, the way words are matched can be altered. select-word-match is intended to be used as a text object in vi mode but with custom word styles. For comparison, the widgets described in [Text Objects](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Text-Objects) use fixed definitions of words, compatible with the vim editor.\n\nThe simplest way of configuring the functions is to use select-word-style, which can either be called as a normal function with the appropriate argument, or invoked as a user-defined widget that will prompt for the first character of the word style to be used. The first time it is invoked, the first eight \\-match functions will automatically replace the builtin versions, so they do not need to be loaded explicitly.\n\nThe word styles available are as follows. Only the first character is examined.\n\nbash\n\nWord characters are alphanumeric characters only.\n\nnormal\n\nAs in normal shell operation: word characters are alphanumeric characters plus any characters present in the string given by the parameter $WORDCHARS.\n\nshell\n\nWords are complete shell command arguments, possibly including complete quoted strings, or any tokens special to the shell.\n\nwhitespace\n\nWords are any set of characters delimited by whitespace.\n\ndefault\n\nRestore the default settings; this is usually the same as ‘normal’.\n\nAll but ‘default’ can be input as an upper case character, which has the same effect but with subword matching turned on. In this case, words with upper case characters are treated specially: each separate run of upper case characters, or an upper case character followed by any number of other characters, is considered a word. The style subword-range can supply an alternative character range to the default ‘\\[:upper:\\]’; the value of the style is treated as the contents of a ‘\\[...\\]’ pattern (note that the outer brackets should not be supplied, only those surrounding named ranges).\n\nMore control can be obtained using the zstyle command, as described in [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module). Each style is looked up in the context :zle:widget where widget is the name of the user-defined widget, not the name of the function implementing it, so in the case of the definitions supplied by select-word-style the appropriate contexts are :zle:forward-word, and so on. The function select-word-style itself always defines styles for the context ‘:zle:\\*’ which can be overridden by more specific (longer) patterns as well as explicit contexts.\n\nThe style word-style specifies the rules to use. This may have the following values.\n\nnormal\n\nUse the standard shell rules, i.e. alphanumerics and $WORDCHARS, unless overridden by the styles word-chars or word-class.\n\nspecified\n\nSimilar to normal, but _only_ the specified characters, and not also alphanumerics, are considered word characters.\n\nunspecified\n\nThe negation of specified. The given characters are those which will _not_ be considered part of a word.\n\nshell\n\nWords are obtained by using the syntactic rules for generating shell command arguments. In addition, special tokens which are never command arguments such as ‘()’ are also treated as words.\n\nwhitespace\n\nWords are whitespace-delimited strings of characters.\n\nThe first three of those rules usually use $WORDCHARS, but the value in the parameter can be overridden by the style word-chars, which works in exactly the same way as $WORDCHARS. In addition, the style word-class uses character class syntax to group characters and takes precedence over word-chars if both are set. The word-class style does not include the surrounding brackets of the character class; for example, ‘\\-:\\[:alnum:\\]’ is a valid word-class to include all alphanumerics plus the characters ‘\\-’ and ‘:’. Be careful including ‘\\]’, ‘^’ and ‘\\-’ as these are special inside character classes.\n\nword-style may also have ‘\\-subword’ appended to its value to turn on subword matching, as described above.\n\nThe style skip-chars is mostly useful for transpose-words and similar functions. If set, it gives a count of characters starting at the cursor position which will not be considered part of the word and are treated as space, regardless of what they actually are. For example, if\n\nzstyle ':zle:transpose-words' skip-chars 1\n\nhas been set, and transpose-words-match is called with the cursor on the X of fooXbar, where X can be any character, then the resulting expression is barXfoo.\n\nFiner grained control can be obtained by setting the style word-context to an array of pairs of entries. Each pair of entries consists of a pattern and a subcontext. The shell argument the cursor is on is matched against each pattern in turn until one matches; if it does, the context is extended by a colon and the corresponding subcontext. Note that the test is made against the original word on the line, with no stripping of quotes. Special handling is done between words: the current context is examined and if it contains the string between the word is set to a single space; else if it is contains the string back, the word before the cursor is considered, else the word after cursor is considered. Some examples are given below.\n\nThe style skip-whitespace-first is only used with the forward-word widget. If it is set to true, then forward-word skips any non-word-characters, followed by any non-word-characters: this is similar to the behaviour of other word-orientated widgets, and also that used by other editors, however it differs from the standard zsh behaviour. When using select-word-style the widget is set in the context :zle:\\* to true if the word style is bash and false otherwise. It may be overridden by setting it in the more specific context :zle:forward-word\\*.\n\nIt is possible to create widgets with specific behaviour by defining a new widget implemented by the appropriate generic function, then setting a style for the context of the specific widget. For example, the following defines a widget backward-kill-space-word using backward-kill-word-match, the generic widget implementing backward-kill-word behaviour, and ensures that the new widget always implements space-delimited behaviour.\n\nzle -N backward-kill-space-word backward-kill-word-match\nzstyle :zle:backward-kill-space-word word-style space\n\nThe widget backward-kill-space-word can now be bound to a key.\n\nHere are some further examples of use of the styles, actually taken from the simplified interface in select-word-style:\n\nzstyle ':zle:\\*' word-style standard\nzstyle ':zle:\\*' word-chars ''\n\nImplements bash-style word handling for all widgets, i.e. only alphanumerics are word characters; equivalent to setting the parameter WORDCHARS empty for the given context.\n\nstyle ':zle:\\*kill\\*' word-style space\n\nUses space-delimited words for widgets with the word ‘kill’ in the name. Neither of the styles word-chars nor word-class is used in this case.\n\nHere are some examples of use of the word-context style to extend the context.\n\nzstyle ':zle:\\*' word-context \\\\ \n       \"\\*/\\*\" filename \"\\[\\[:space:\\]\\]\" whitespace\nzstyle ':zle:transpose-words:whitespace' word-style shell\nzstyle ':zle:transpose-words:filename' word-style normal\nzstyle ':zle:transpose-words:filename' word-chars ''\n\nThis provides two different ways of using transpose-words depending on whether the cursor is on whitespace between words or on a filename, here any word containing a /. On whitespace, complete arguments as defined by standard shell rules will be transposed. In a filename, only alphanumerics will be transposed. Elsewhere, words will be transposed using the default style for :zle:transpose-words.\n\nThe word matching and all the handling of zstyle settings is actually implemented by the function match-words-by-style. This can be used to create new user-defined widgets. The calling function should set the local parameter curcontext to :zle:widget, create the local parameter matched\\_words and call match-words-by-style with no arguments. On return, matched\\_words will be set to an array with the elements: (1) the start of the line (2) the word before the cursor (3) any non-word characters between that word and the cursor (4) any non-word character at the cursor position plus any remaining non-word characters before the next word, including all characters specified by the skip-chars style, (5) the word at or following the cursor (6) any non-word characters following that word (7) the remainder of the line. Any of the elements may be an empty string; the calling function should test for this to decide whether it can perform its function.\n\nIf the variable matched\\_words is defined by the caller to match-words-by-style as an associative array (local -A matched\\_words), then the seven values given above should be retrieved from it as elements named start, word-before-cursor, ws-before-cursor, ws-after-cursor, word-after-cursor, ws-after-word, and end. In addition the element is-word-start is 1 if the cursor is on the start of a word or subword, or on white space before it (the cases can be distinguished by testing the ws-after-cursor element) and 0 otherwise. This form is recommended for future compatibility.\n\nIt is possible to pass options with arguments to match-words-by-style to override the use of styles. The options are:\n\n\\-w\n\nword-style\n\n\\-s\n\nskip-chars\n\n\\-c\n\nword-class\n\n\\-C\n\nword-chars\n\n\\-r\n\nsubword-range\n\nFor example, match-words-by-style -w shell -c 0 may be used to extract the command argument around the cursor.\n\nThe word-context style is implemented by the function match-word-context. This should not usually need to be called directly.\n\nbracketed-paste-magic\n\nThe bracketed-paste widget (see [Miscellaneous](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Miscellaneous) in [Standard Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets)) inserts pasted text literally into the editor buffer rather than interpret it as keystrokes. This disables some common usages where the self-insert widget is replaced in order to accomplish some extra processing. An example is the contributed url-quote-magic widget described below.\n\nThe bracketed-paste-magic widget is meant to replace bracketed-paste with a wrapper that re-enables these self-insert actions, and other actions as selected by zstyles. Therefore this widget is installed with\n\nautoload -Uz bracketed-paste-magic\nzle -N bracketed-paste bracketed-paste-magic\n\nOther than enabling some widget processing, bracketed-paste-magic attempts to replicate bracketed-paste as faithfully as possible.\n\nThe following zstyles may be set to control processing of pasted text. All are looked up in the context ‘:bracketed-paste-magic’.\n\nactive-widgets\n\nA list of patterns matching widget names that should be activated during the paste. All other key sequences are processed as self-insert-unmeta. The default is ‘self-\\*’ so any user-defined widgets named with that prefix are active along with the builtin self-insert.\n\nIf this style is not set (explicitly deleted) or set to an empty value, no widgets are active and the pasted text is inserted literally. If the value includes ‘undefined-key’, any unknown sequences are discarded from the pasted text.\n\ninactive-keys\n\nThe inverse of active-widgets, a list of key sequences that always use self-insert-unmeta even when bound to an active widget. Note that this is a list of literal key sequences, not patterns.\n\npaste-init\n\nA list of function names, called in widget context (but not as widgets). The functions are called in order until one of them returns a non-zero status. The parameter ‘PASTED’ contains the initial state of the pasted text. All other ZLE parameters such as ‘BUFFER’ have their normal values and side-effects, and full history is available, so for example paste-init functions may move words from BUFFER into PASTED to make those words visible to the active-widgets.\n\nA non-zero return from a paste-init function does _not_ prevent the paste itself from proceeding.\n\nLoading bracketed-paste-magic defines backward-extend-paste, a helper function for use in paste-init.\n\nzstyle :bracketed-paste-magic paste-init \\\\ \n       backward-extend-paste\n\nWhen a paste would insert into the middle of a word or append text to a word already on the line, backward-extend-paste moves the prefix from LBUFFER into PASTED so that the active-widgets see the full word so far. This may be useful with url-quote-magic.\n\npaste-finish\n\nAnother list of function names called in order until one returns non-zero. These functions are called _after_ the pasted text has been processed by the active-widgets, but _before_ it is inserted into ‘BUFFER’. ZLE parameters have their normal values and side-effects.\n\nA non-zero return from a paste-finish function does _not_ prevent the paste itself from proceeding.\n\nLoading bracketed-paste-magic also defines quote-paste, a helper function for use in paste-finish.\n\nzstyle :bracketed-paste-magic paste-finish \\\\ \n       quote-paste\nzstyle :bracketed-paste-magic:finish quote-style \\\\ \n       qqq\n\nWhen the pasted text is inserted into BUFFER, it is quoted per the quote-style value. To forcibly turn off the built-in numeric prefix quoting of bracketed-paste, use:\n\nzstyle :bracketed-paste-magic:finish quote-style \\\\ \n       none\n\n_Important:_ During active-widgets processing of the paste (after paste-init and before paste-finish), BUFFER starts empty and history is restricted, so cursor motions, etc., may not pass outside of the pasted content. Text assigned to BUFFER by the active widgets is copied back into PASTED before paste-finish.\n\ncopy-earlier-word\n\nThis widget works like a combination of insert-last-word and copy-prev-shell-word. Repeated invocations of the widget retrieve earlier words on the relevant history line. With a numeric argument N, insert the Nth word from the history line; N may be negative to count from the end of the line.\n\nIf insert-last-word has been used to retrieve the last word on a previous history line, repeated invocations will replace that word with earlier words from the same line.\n\nOtherwise, the widget applies to words on the line currently being edited. The widget style can be set to the name of another widget that should be called to retrieve words. This widget must accept the same three arguments as insert-last-word.\n\ncycle-completion-positions\n\nAfter inserting an unambiguous string into the command line, the new function based completion system may know about multiple places in this string where characters are missing or differ from at least one of the possible matches. It will then place the cursor on the position it considers to be the most interesting one, i.e. the one where one can disambiguate between as many matches as possible with as little typing as possible.\n\nThis widget allows the cursor to be easily moved to the other interesting spots. It can be invoked repeatedly to cycle between all positions reported by the completion system.\n\ndelete-whole-word-match\n\nThis is another function which works like the \\-match functions described immediately above, i.e. using styles to decide the word boundaries. However, it is not a replacement for any existing function.\n\nThe basic behaviour is to delete the word around the cursor. There is no numeric argument handling; only the single word around the cursor is considered. If the widget contains the string kill, the removed text will be placed in the cutbuffer for future yanking. This can be obtained by defining kill-whole-word-match as follows:\n\nzle -N kill-whole-word-match delete-whole-word-match\n\nand then binding the widget kill-whole-word-match.\n\nup-line-or-beginning-search, down-line-or-beginning-search\n\nThese widgets are similar to the builtin functions up-line-or-search and down-line-or-search: if in a multiline buffer they move up or down within the buffer, otherwise they search for a history line matching the start of the current line. In this case, however, they search for a line which matches the current line up to the current cursor position, in the manner of history-beginning-search-backward and \\-forward, rather than the first word on the line.\n\nedit-command-line\n\nEdit the command line using your visual editor, as in ksh.\n\nbindkey -M vicmd v edit-command-line\n\nThe editor to be used can also be specified using the editor style in the context of the widget. It is specified as an array of command and arguments:\n\nzstyle :zle:edit-command-line editor gvim -f\n\nexpand-absolute-path\n\nExpand the file name under the cursor to an absolute path, resolving symbolic links. Where possible, the initial path segment is turned into a named directory or reference to a user’s home directory.\n\nhistory-search-end\n\nThis function implements the widgets history-beginning-search-backward-end and history-beginning-search-forward-end. These commands work by first calling the corresponding builtin widget (see [History Control](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#History-Control)) and then moving the cursor to the end of the line. The original cursor position is remembered and restored before calling the builtin widget a second time, so that the same search is repeated to look farther through the history.\n\nAlthough you autoload only one function, the commands to use it are slightly different because it implements two widgets.\n\nzle -N history-beginning-search-backward-end \\\\ \n       history-search-end\nzle -N history-beginning-search-forward-end \\\\ \n       history-search-end\nbindkey '\\\\e^P' history-beginning-search-backward-end\nbindkey '\\\\e^N' history-beginning-search-forward-end\n\nhistory-beginning-search-menu\n\nThis function implements yet another form of history searching. The text before the cursor is used to select lines from the history, as for history-beginning-search-backward except that all matches are shown in a numbered menu. Typing the appropriate digits inserts the full history line. Note that leading zeroes must be typed (they are only shown when necessary for removing ambiguity). The entire history is searched; there is no distinction between forwards and backwards.\n\nWith a numeric argument, the search is not anchored to the start of the line; the string typed by the use may appear anywhere in the line in the history.\n\nIf the widget name contains ‘\\-end’ the cursor is moved to the end of the line inserted. If the widget name contains ‘\\-space’ any space in the text typed is treated as a wildcard and can match anything (hence a leading space is equivalent to giving a numeric argument). Both forms can be combined, for example:\n\nzle -N history-beginning-search-menu-space-end \\\\ \n       history-beginning-search-menu\n\nhistory-pattern-search\n\nThe function history-pattern-search implements widgets which prompt for a pattern with which to search the history backwards or forwards. The pattern is in the usual zsh format, however the first character may be ^ to anchor the search to the start of the line, and the last character may be $ to anchor the search to the end of the line. If the search was not anchored to the end of the line the cursor is positioned just after the pattern found.\n\nThe commands to create bindable widgets are similar to those in the example immediately above:\n\nautoload -U history-pattern-search\nzle -N history-pattern-search-backward history-pattern-search\nzle -N history-pattern-search-forward history-pattern-search\n\nincarg\n\nTyping the keystrokes for this widget with the cursor placed on or to the left of an integer causes that integer to be incremented by one. With a numeric argument, the number is incremented by the amount of the argument (decremented if the numeric argument is negative). The shell parameter incarg may be set to change the default increment to something other than one.\n\nincremental-complete-word\n\nThis allows incremental completion of a word. After starting this command, a list of completion choices can be shown after every character you type, which you can delete with ^H or DEL. Pressing return accepts the completion so far and returns you to normal editing (that is, the command line is _not_ immediately executed). You can hit TAB to do normal completion, ^G to abort back to the state when you started, and ^D to list the matches.\n\nThis works only with the new function based completion system.\n\nbindkey '^Xi' incremental-complete-word\n\ninsert-composed-char\n\nThis function allows you to compose characters that don’t appear on the keyboard to be inserted into the command line. The command is followed by two keys corresponding to ASCII characters (there is no prompt). For accented characters, the two keys are a base character followed by a code for the accent, while for other special characters the two characters together form a mnemonic for the character to be inserted. The two-character codes are a subset of those given by RFC 1345 (see for example [http://www.faqs.org/rfcs/rfc1345.html](http://www.faqs.org/rfcs/rfc1345.html)).\n\nThe function may optionally be followed by up to two characters which replace one or both of the characters read from the keyboard; if both characters are supplied, no input is read. For example, insert-composed-char a: can be used within a widget to insert an a with umlaut into the command line. This has the advantages over use of a literal character that it is more portable.\n\nFor best results zsh should have been built with support for multibyte characters (configured with –enable-multibyte); however, the function works for the limited range of characters available in single-byte character sets such as ISO-8859-1.\n\nThe character is converted into the local representation and inserted into the command line at the cursor position. (The conversion is done within the shell, using whatever facilities the C library provides.) With a numeric argument, the character and its code are previewed in the status line\n\nThe function may be run outside zle in which case it prints the character (together with a newline) to standard output. Input is still read from keystrokes.\n\nSee insert-unicode-char for an alternative way of inserting Unicode characters using their hexadecimal character number.\n\nThe set of accented characters is reasonably complete up to Unicode character U+0180, the set of special characters less so. However, it is very sporadic from that point. Adding new characters is easy, however; see the function define-composed-chars. Please send any additions to zsh-workers@zsh.org.\n\nThe codes for the second character when used to accent the first are as follows. Note that not every character can take every accent.\n\n!\n\nGrave.\n\n’\n\nAcute.\n\n\\>\n\nCircumflex.\n\n?\n\nTilde. (This is not ~ as RFC 1345 does not assume that character is present on the keyboard.)\n\n\\-\n\nMacron. (A horizontal bar over the base character.)\n\n(\n\nBreve. (A shallow dish shape over the base character.)\n\n.\n\nDot above the base character, or in the case of i no dot, or in the case of L and l a centered dot.\n\n:\n\nDiaeresis (Umlaut).\n\nc\n\nCedilla.\n\n\\_\n\nUnderline, however there are currently no underlined characters.\n\n/\n\nStroke through the base character.\n\n\"\n\nDouble acute (only supported on a few letters).\n\n;\n\nOgonek. (A little forward facing hook at the bottom right of the character.)\n\n<\n\nCaron. (A little v over the letter.)\n\n0\n\nCircle over the base character.\n\n2\n\nHook over the base character.\n\n9\n\nHorn over the base character.\n\nThe most common characters from the Arabic, Cyrillic, Greek and Hebrew alphabets are available; consult RFC 1345 for the appropriate sequences. In addition, a set of two letter codes not in RFC 1345 are available for the double-width characters corresponding to ASCII characters from ! to ~ (0x21 to 0x7e) by preceding the character with ^, for example ^A for a double-width A.\n\nThe following other two-character sequences are understood.\n\nASCII characters\n\nThese are already present on most keyboards:\n\n<(\n\nLeft square bracket\n\n//\n\nBackslash (solidus)\n\n)>\n\nRight square bracket\n\n(!\n\nLeft brace (curly bracket)\n\n!!\n\nVertical bar (pipe symbol)\n\n!)\n\nRight brace (curly bracket)\n\n’?\n\nTilde\n\nSpecial letters\n\nCharacters found in various variants of the Latin alphabet:\n\nss\n\nEszett (scharfes S)\n\nD-, d-\n\nEth\n\nTH, th\n\nThorn\n\nkk\n\nKra\n\n’n\n\n’n\n\nNG, ng\n\nNg\n\nOI, oi\n\nOi\n\nyr\n\nyr\n\nED\n\nezh\n\nCurrency symbols\n\nCt\n\nCent\n\nPd\n\nPound sterling (also lira and others)\n\nCu\n\nCurrency\n\nYe\n\nYen\n\nEu\n\nEuro (N.B. not in RFC 1345)\n\nPunctuation characters\n\nReferences to \"right\" quotes indicate the shape (like a 9 rather than 6) rather than their grammatical use. (For example, a \"right\" low double quote is used to open quotations in German.)\n\n!I\n\nInverted exclamation mark\n\nBB\n\nBroken vertical bar\n\nSE\n\nSection\n\nCo\n\nCopyright\n\n\\-a\n\nSpanish feminine ordinal indicator\n\n<<\n\nLeft guillemet\n\n\\-\\-\n\nSoft hyphen\n\nRg\n\nRegistered trade mark\n\nPI\n\nPilcrow (paragraph)\n\n\\-o\n\nSpanish masculine ordinal indicator\n\n\\>>\n\nRight guillemet\n\n?I\n\nInverted question mark\n\n\\-1\n\nHyphen\n\n\\-N\n\nEn dash\n\n\\-M\n\nEm dash\n\n\\-3\n\nHorizontal bar\n\n:3\n\nVertical ellipsis\n\n.3\n\nHorizontal midline ellipsis\n\n!2\n\nDouble vertical line\n\n\\=2\n\nDouble low line\n\n’6\n\nLeft single quote\n\n’9\n\nRight single quote\n\n.9\n\n\"Right\" low quote\n\n9’\n\nReversed \"right\" quote\n\n\"6\n\nLeft double quote\n\n\"9\n\nRight double quote\n\n:9\n\n\"Right\" low double quote\n\n9\"\n\nReversed \"right\" double quote\n\n/-\n\nDagger\n\n/=\n\nDouble dagger\n\nMathematical symbols\n\nDG\n\nDegree\n\n\\-2, +-, \\-+\n\n\\- sign, +/- sign, -/+ sign\n\n2S\n\nSuperscript 2\n\n3S\n\nSuperscript 3\n\n1S\n\nSuperscript 1\n\nMy\n\nMicro\n\n.M\n\nMiddle dot\n\n14\n\nQuarter\n\n12\n\nHalf\n\n34\n\nThree quarters\n\n\\*X\n\nMultiplication\n\n\\-:\n\nDivision\n\n%0\n\nPer mille\n\nFA, TE, /0\n\nFor all, there exists, empty set\n\ndP, DE, NB\n\nPartial derivative, delta (increment), del (nabla)\n\n(-, \\-)\n\nElement of, contains\n\n\\*P, +Z\n\nProduct, sum\n\n\\*-, Ob, Sb\n\nAsterisk, ring, bullet\n\nRT, 0(, 00\n\nRoot sign, proportional to, infinity\n\nOther symbols\n\ncS, cH, cD, cC\n\nCard suits: spades, hearts, diamonds, clubs\n\nMd, M8, M2, Mb, Mx, MX\n\nMusical notation: crotchet (quarter note), quaver (eighth note), semiquavers (sixteenth notes), flag sign, natural sign, sharp sign\n\nFm, Ml\n\nFemale, male\n\nAccents on their own\n\n’>\n\nCircumflex (same as caret, ^)\n\n’!\n\nGrave (same as backtick, ‘)\n\n’,\n\nCedilla\n\n’:\n\nDiaeresis (Umlaut)\n\n’m\n\nMacron\n\n”\n\nAcute\n\ninsert-files\n\nThis function allows you type a file pattern, and see the results of the expansion at each step. When you hit return, all expansions are inserted into the command line.\n\nbindkey '^Xf' insert-files\n\ninsert-unicode-char\n\nWhen first executed, the user inputs a set of hexadecimal digits. This is terminated with another call to insert-unicode-char. The digits are then turned into the corresponding Unicode character. For example, if the widget is bound to ^XU, the character sequence ‘^XU 4 c ^XU’ inserts L (Unicode U+004c).\n\nSee insert-composed-char for a way of inserting characters using a two-character mnemonic.\n\nnarrow-to-region \\[ \\-p pre \\] \\[ \\-P post \\]\n\n                 \\[ \\-S statepm | \\-R statepm | \\[ \\-l lbufvar \\] \\[ \\-r rbufvar \\] \\]\n\n                 \\[ \\-n \\] \\[ start end \\]\n\nnarrow-to-region-invisible\n\nNarrow the editable portion of the buffer to the region between the cursor and the mark, which may be in either order. The region may not be empty.\n\nnarrow-to-region may be used as a widget or called as a function from a user-defined widget; by default, the text outside the editable area remains visible. A recursive-edit is performed and the original widening status is then restored. Various options and arguments are available when it is called as a function.\n\nThe options \\-p pretext and \\-P posttext may be used to replace the text before and after the display for the duration of the function; either or both may be an empty string.\n\nIf the option \\-n is also given, pretext or posttext will only be inserted if there is text before or after the region respectively which will be made invisible.\n\nTwo numeric arguments may be given which will be used instead of the cursor and mark positions.\n\nThe option \\-S statepm is used to narrow according to the other options while saving the original state in the parameter with name statepm, while the option \\-R statepm is used to restore the state from the parameter; note in both cases the _name_ of the parameter is required. In the second case, other options and arguments are irrelevant. When this method is used, no recursive-edit is performed; the calling widget should call this function with the option \\-S, perform its own editing on the command line or pass control to the user via ‘zle recursive-edit’, then call this function with the option \\-R. The argument statepm must be a suitable name for an ordinary parameter, except that parameters beginning with the prefix \\_ntr\\_ are reserved for use within narrow-to-region. Typically the parameter will be local to the calling function.\n\nThe options \\-l lbufvar and \\-r rbufvar may be used to specify parameters where the widget will store the resulting text from the operation. The parameter lbufvar will contain LBUFFER and rbufvar will contain RBUFFER. Neither of these two options may be used with \\-S or \\-R.\n\nnarrow-to-region-invisible is a simple widget which calls narrow-to-region with arguments which replace any text outside the region with ‘...’. It does not take any arguments.\n\nThe display is restored (and the widget returns) upon any zle command which would usually cause the line to be accepted or aborted. Hence an additional such command is required to accept or abort the current line.\n\nThe return status of both widgets is zero if the line was accepted, else non-zero.\n\nHere is a trivial example of a widget using this feature.\n\nlocal state\nnarrow-to-region -p $'Editing restricted region\\\\n' \\\\ \n  -P '' -S state\nzle recursive-edit\nnarrow-to-region -R state\n\npredict-on\n\nThis set of functions implements predictive typing using history search. After predict-on, typing characters causes the editor to look backward in the history for the first line beginning with what you have typed so far. After predict-off, editing returns to normal for the line found. In fact, you often don’t even need to use predict-off, because if the line doesn’t match something in the history, adding a key performs standard completion, and then inserts itself if no completions were found. However, editing in the middle of a line is liable to confuse prediction; see the toggle style below.\n\nWith the function based completion system (which is needed for this), you should be able to type TAB at almost any point to advance the cursor to the next ‘‘interesting’’ character position (usually the end of the current word, but sometimes somewhere in the middle of the word). And of course as soon as the entire line is what you want, you can accept with return, without needing to move the cursor to the end first.\n\nThe first time predict-on is used, it creates several additional widget functions:\n\ndelete-backward-and-predict\n\nReplaces the backward-delete-char widget. You do not need to bind this yourself.\n\ninsert-and-predict\n\nImplements predictive typing by replacing the self-insert widget. You do not need to bind this yourself.\n\npredict-off\n\nTurns off predictive typing.\n\nAlthough you autoload only the predict-on function, it is necessary to create a keybinding for predict-off as well.\n\nzle -N predict-on\nzle -N predict-off\nbindkey '^X^Z' predict-on\nbindkey '^Z' predict-off\n\nread-from-minibuffer\n\nThis is most useful when called as a function from inside a widget, but will work correctly as a widget in its own right. It prompts for a value below the current command line; a value may be input using all of the standard zle operations (and not merely the restricted set available when executing, for example, execute-named-cmd). The value is then returned to the calling function in the parameter $REPLY and the editing buffer restored to its previous state. If the read was aborted by a keyboard break (typically ^G), the function returns status 1 and $REPLY is not set.\n\nIf one argument is supplied to the function it is taken as a prompt, otherwise ‘? ’ is used. If two arguments are supplied, they are the prompt and the initial value of $LBUFFER, and if a third argument is given it is the initial value of $RBUFFER. This provides a default value and starting cursor placement. Upon return the entire buffer is the value of $REPLY.\n\nOne option is available: ‘\\-k num’ specifies that num characters are to be read instead of a whole line. The line editor is not invoked recursively in this case, so depending on the terminal settings the input may not be visible, and only the input keys are placed in $REPLY, not the entire buffer. Note that unlike the read builtin num must be given; there is no default.\n\nThe name is a slight misnomer, as in fact the shell’s own minibuffer is not used. Hence it is still possible to call executed-named-cmd and similar functions while reading a value.\n\nreplace-argument, replace-argument-edit\n\nThe function replace-argument can be used to replace a command line argument in the current command line or, if the current command line is empty, in the last command line executed (the new command line is not executed). Arguments are as delimited by standard shell syntax,\n\nIf a numeric argument is given, that specifies the argument to be replaced. 0 means the command name, as in history expansion. A negative numeric argument counts backward from the last word.\n\nIf no numeric argument is given, the current argument is replaced; this is the last argument if the previous history line is being used.\n\nThe function prompts for a replacement argument.\n\nIf the widget contains the string edit, for example is defined as\n\nzle -N replace-argument-edit replace-argument\n\nthen the function presents the current value of the argument for editing, otherwise the editing buffer for the replacement is initially empty.\n\nreplace-string, replace-pattern\n\nreplace-string-again, replace-pattern-again\n\nThe function replace-string implements three widgets. If defined under the same name as the function, it prompts for two strings; the first (source) string will be replaced by the second everywhere it occurs in the line editing buffer.\n\nIf the widget name contains the word ‘pattern’, for example by defining the widget using the command ‘zle -N replace-pattern replace-string’, then the matching is performed using zsh patterns. All zsh extended globbing patterns can be used in the source string; note that unlike filename generation the pattern does not need to match an entire word, nor do glob qualifiers have any effect. In addition, the replacement string can contain parameter or command substitutions. Furthermore, a ‘&’ in the replacement string will be replaced with the matched source string, and a backquoted digit ‘\\\\N’ will be replaced by the Nth parenthesised expression matched. The form ‘\\\\{N}’ may be used to protect the digit from following digits.\n\nIf the widget instead contains the word ‘regex’ (or ‘regexp’), then the matching is performed using regular expressions, respecting the setting of the option RE\\_MATCH\\_PCRE (see the description of the function regexp-replace below). The special replacement facilities described above for pattern matching are available.\n\nBy default the previous source or replacement string will not be offered for editing. However, this feature can be activated by setting the style edit-previous in the context :zle:widget (for example, :zle:replace-string) to true. In addition, a positive numeric argument forces the previous values to be offered, a negative or zero argument forces them not to be.\n\nThe function replace-string-again can be used to repeat the previous replacement; no prompting is done. As with replace-string, if the name of the widget contains the word ‘pattern’ or ‘regex’, pattern or regular expression matching is performed, else a literal string replacement. Note that the previous source and replacement text are the same whether pattern, regular expression or string matching is used.\n\nIn addition, replace-string shows the previous replacement above the prompt, so long as there was one during the current session; if the source string is empty, that replacement will be repeated without the widget prompting for a replacement string.\n\nFor example, starting from the line:\n\nprint This line contains fan and fond\n\nand invoking replace-pattern with the source string ‘f(?)n’ and the replacement string ‘c\\\\1r’ produces the not very useful line:\n\nprint This line contains car and cord\n\nThe range of the replacement string can be limited by using the narrow-to-region-invisible widget. One limitation of the current version is that undo will cycle through changes to the replacement and source strings before undoing the replacement itself.\n\nsend-invisible\n\nThis is similar to read-from-minibuffer in that it may be called as a function from a widget or as a widget of its own, and interactively reads input from the keyboard. However, the input being typed is concealed and a string of asterisks (‘\\*’) is shown instead. The value is saved in the parameter $INVISIBLE to which a reference is inserted into the editing buffer at the restored cursor position. If the read was aborted by a keyboard break (typically ^G) or another escape from editing such as push-line, $INVISIBLE is set to empty and the original buffer is restored unchanged.\n\nIf one argument is supplied to the function it is taken as a prompt, otherwise ‘Non-echoed text: ’ is used (as in emacs). If a second and third argument are supplied they are used to begin and end the reference to $INVISIBLE that is inserted into the buffer. The default is to open with ${, then INVISIBLE, and close with }, but many other effects are possible.\n\nsmart-insert-last-word\n\nThis function may replace the insert-last-word widget, like so:\n\nzle -N insert-last-word smart-insert-last-word\n\nWith a numeric argument, or when passed command line arguments in a call from another widget, it behaves like insert-last-word, except that words in comments are ignored when INTERACTIVE\\_COMMENTS is set.\n\nOtherwise, the rightmost ‘‘interesting’’ word from the previous command is found and inserted. The default definition of ‘‘interesting’’ is that the word contains at least one alphabetic character, slash, or backslash. This definition may be overridden by use of the match style. The context used to look up the style is the widget name, so usually the context is :insert-last-word. However, you can bind this function to different widgets to use different patterns:\n\nzle -N insert-last-assignment smart-insert-last-word\nzstyle :insert-last-assignment match '\\[\\[:alpha:\\]\\]\\[\\]\\[\\[:alnum:\\]\\]#=\\*'\nbindkey '\\\\e=' insert-last-assignment\n\nIf no interesting word is found and the auto-previous style is set to a true value, the search continues upward through the history. When auto-previous is unset or false (the default), the widget must be invoked repeatedly in order to search earlier history lines.\n\ntranspose-lines\n\nOnly useful with a multi-line editing buffer; the lines here are lines within the current on-screen buffer, not history lines. The effect is similar to the function of the same name in Emacs.\n\nTranspose the current line with the previous line and move the cursor to the start of the next line. Repeating this (which can be done by providing a positive numeric argument) has the effect of moving the line above the cursor down by a number of lines.\n\nWith a negative numeric argument, requires two lines above the cursor. These two lines are transposed and the cursor moved to the start of the previous line. Using a numeric argument less than -1 has the effect of moving the line above the cursor up by minus that number of lines.\n\nurl-quote-magic\n\nThis widget replaces the built-in self-insert to make it easier to type URLs as command line arguments. As you type, the input character is analyzed and, if it may need quoting, the current word is checked for a URI scheme. If one is found and the current word is not already in quotes, a backslash is inserted before the input character.\n\nStyles to control quoting behavior:\n\nurl-metas\n\nThis style is looked up in the context ‘:url-quote-magic:scheme’ (where scheme is that of the current URL, e.g. \"ftp\"). The value is a string listing the characters to be treated as globbing metacharacters when appearing in a URL using that scheme. The default is to quote all zsh extended globbing characters, excluding ’<’ and ’\\>’ but including braces (as in brace expansion). See also url-seps.\n\nurl-seps\n\nLike url-metas, but lists characters that should be considered command separators, redirections, history references, etc. The default is to quote the standard set of shell separators, excluding those that overlap with the extended globbing characters, but including ’<’ and ’\\>’ and the first character of $histchars.\n\nurl-globbers\n\nThis style is looked up in the context ‘:url-quote-magic’. The values form a list of command names that are expected to do their own globbing on the URL string. This implies that they are aliased to use the ‘noglob’ modifier. When the first word on the line matches one of the values _and_ the URL refers to a local file (see url-local-schema), only the url-seps characters are quoted; the url-metas are left alone, allowing them to affect command-line parsing, completion, etc. The default values are a literal ‘noglob’ plus (when the zsh/parameter module is available) any commands aliased to the helper function ‘urlglobber’ or its alias ‘globurl’.\n\nurl-local-schema\n\nThis style is always looked up in the context ‘:urlglobber’, even though it is used by both url-quote-magic and urlglobber. The values form a list of URI schema that should be treated as referring to local files by their real local path names, as opposed to files which are specified relative to a web-server-defined document root. The defaults are \"ftp\" and \"file\".\n\nurl-other-schema\n\nLike url-local-schema, but lists all other URI schema upon which urlglobber and url-quote-magic should act. If the URI on the command line does not have a scheme appearing either in this list or in url-local-schema, it is not magically quoted. The default values are \"http\", \"https\", and \"ftp\". When a scheme appears both here and in url-local-schema, it is quoted differently depending on whether the command name appears in url-globbers.\n\nLoading url-quote-magic also defines a helper function ‘urlglobber’ and aliases ‘globurl’ to ‘noglob urlglobber’. This function takes a local URL apart, attempts to pattern-match the local file portion of the URL path, and then puts the results back into URL format again.\n\nvi-pipe\n\nThis function reads a movement command from the keyboard and then prompts for an external command. The part of the buffer covered by the movement is piped to the external command and then replaced by the command’s output. If the movement command is bound to vi-pipe, the current line is used.\n\nThe function serves as an example for reading a vi movement command from within a user-defined widget.\n\nwhich-command\n\nThis function is a drop-in replacement for the builtin widget which-command. It has enhanced behaviour, in that it correctly detects whether or not the command word needs to be expanded as an alias; if so, it continues tracing the command word from the expanded alias until it reaches the command that will be executed.\n\nThe style whence is available in the context :zle:$WIDGET; this may be set to an array to give the command and options that will be used to investigate the command word found. The default is whence -c.\n\nzcalc-auto-insert\n\nThis function is useful together with the zcalc function described in [Mathematical Functions](#Mathematical-Functions). It should be bound to a key representing a binary operator such as ‘+’, ‘\\-’, ‘\\*’ or ‘/’. When running in zcalc, if the key occurs at the start of the line or immediately following an open parenthesis, the text \"ans \" is inserted before the representation of the key itself. This allows easy use of the answer from the previous calculation in the current line. The text to be inserted before the symbol typed can be modified by setting the variable ZCALC\\_AUTO\\_INSERT\\_PREFIX.\n\nHence, for example, typing ‘+12’ followed by return adds 12 to the previous result.\n\nIf zcalc is in RPN mode (\\-r option) the effect of this binding is automatically suppressed as operators alone on a line are meaningful.\n\nWhen not in zcalc, the key simply inserts the symbol itself.\n\n* * *\n\n### 26.7.2 Utility Functions\n\nThese functions are useful in constructing widgets. They should be loaded with ‘autoload -U function’ and called as indicated from user-defined widgets.\n\nsplit-shell-arguments\n\nThis function splits the line currently being edited into shell arguments and whitespace. The result is stored in the array reply. The array contains all the parts of the line in order, starting with any whitespace before the first argument, and finishing with any whitespace after the last argument. Hence (so long as the option KSH\\_ARRAYS is not set) whitespace is given by odd indices in the array and arguments by even indices. Note that no stripping of quotes is done; joining together all the elements of reply in order is guaranteed to produce the original line.\n\nThe parameter REPLY is set to the index of the word in reply which contains the character after the cursor, where the first element has index 1. The parameter REPLY2 is set to the index of the character under the cursor in that word, where the first character has index 1.\n\nHence reply, REPLY and REPLY2 should all be made local to the enclosing function.\n\nSee the function modify-current-argument, described below, for an example of how to call this function.\n\nmodify-current-argument \\[ expr-using-$ARG | func \\]\n\nThis function provides a simple method of allowing user-defined widgets to modify the command line argument under the cursor (or immediately to the left of the cursor if the cursor is between arguments).\n\nThe argument can be an expression which when evaluated operates on the shell parameter ARG, which will have been set to the command line argument under the cursor. The expression should be suitably quoted to prevent it being evaluated too early.\n\nAlternatively, if the argument does not contain the string ARG, it is assumed to be a shell function, to which the current command line argument is passed as the only argument. The function should set the variable REPLY to the new value for the command line argument. If the function returns non-zero status, so does the calling function.\n\nFor example, a user-defined widget containing the following code converts the characters in the argument under the cursor into all upper case:\n\nmodify-current-argument '${(U)ARG}'\n\nThe following strips any quoting from the current word (whether backslashes or one of the styles of quotes), and replaces it with single quoting throughout:\n\nmodify-current-argument '${(qq)${(Q)ARG}}'\n\nThe following performs directory expansion on the command line argument and replaces it by the absolute path:\n\nexpand-dir() {\n  REPLY=${~1}\n  REPLY=${REPLY:a}\n}\nmodify-current-argument expand-dir\n\nIn practice the function expand-dir would probably not be defined within the widget where modify-current-argument is called.\n\n* * *\n\n### 26.7.3 Styles\n\nThe behavior of several of the above widgets can be controlled by the use of the zstyle mechanism. In particular, widgets that interact with the completion system pass along their context to any completions that they invoke.\n\nbreak-keys\n\nThis style is used by the incremental-complete-word widget. Its value should be a pattern, and all keys matching this pattern will cause the widget to stop incremental completion without the key having any further effect. Like all styles used directly by incremental-complete-word, this style is looked up using the context ‘:incremental’.\n\ncompleter\n\nThe incremental-complete-word and insert-and-predict widgets set up their top-level context name before calling completion. This allows one to define different sets of completer functions for normal completion and for these widgets. For example, to use completion, approximation and correction for normal completion, completion and correction for incremental completion and only completion for prediction one could use:\n\nzstyle ':completion:\\*' completer \\\\ \n        \\_complete \\_correct \\_approximate\nzstyle ':completion:incremental:\\*' completer \\\\ \n        \\_complete \\_correct\nzstyle ':completion:predict:\\*' completer \\\\ \n        \\_complete\n\nIt is a good idea to restrict the completers used in prediction, because they may be automatically invoked as you type. The \\_list and \\_menu completers should never be used with prediction. The \\_approximate, \\_correct, \\_expand, and \\_match completers may be used, but be aware that they may change characters anywhere in the word behind the cursor, so you need to watch carefully that the result is what you intended.\n\ncursor\n\nThe insert-and-predict widget uses this style, in the context ‘:predict’, to decide where to place the cursor after completion has been tried. Values are:\n\ncomplete\n\nThe cursor is left where it was when completion finished, but only if it is after a character equal to the one just inserted by the user. If it is after another character, this value is the same as ‘key’.\n\nkey\n\nThe cursor is left after the nth occurrence of the character just inserted, where n is the number of times that character appeared in the word before completion was attempted. In short, this has the effect of leaving the cursor after the character just typed even if the completion code found out that no other characters need to be inserted at that position.\n\nAny other value for this style unconditionally leaves the cursor at the position where the completion code left it.\n\nlist\n\nWhen using the incremental-complete-word widget, this style says if the matches should be listed on every key press (if they fit on the screen). Use the context prefix ‘:completion:incremental’.\n\nThe insert-and-predict widget uses this style to decide if the completion should be shown even if there is only one possible completion. This is done if the value of this style is the string always. In this case the context is ‘:predict’ (_not_ ‘:completion:predict’).\n\nmatch\n\nThis style is used by smart-insert-last-word to provide a pattern (using full EXTENDED\\_GLOB syntax) that matches an interesting word. The context is the name of the widget to which smart-insert-last-word is bound (see above). The default behavior of smart-insert-last-word is equivalent to:\n\nzstyle :insert-last-word match '\\*\\[\\[:alpha:\\]/\\\\\\\\\\]\\*'\n\nHowever, you might want to include words that contain spaces:\n\nzstyle :insert-last-word match '\\*\\[\\[:alpha:\\]\\[:space:\\]/\\\\\\\\\\]\\*'\n\nOr include numbers as long as the word is at least two characters long:\n\nzstyle :insert-last-word match '\\*(\\[\\[:digit:\\]\\]?|\\[\\[:alpha:\\]/\\\\\\\\\\])\\*'\n\nThe above example causes redirections like \"2>\" to be included.\n\nprompt\n\nThe incremental-complete-word widget shows the value of this style in the status line during incremental completion. The string value may contain any of the following substrings in the manner of the PS1 and other prompt parameters:\n\n%c\n\nReplaced by the name of the completer function that generated the matches (without the leading underscore).\n\n%l\n\nWhen the list style is set, replaced by ‘...’ if the list of matches is too long to fit on the screen and with an empty string otherwise. If the list style is ‘false’ or not set, ‘%l’ is always removed.\n\n%n\n\nReplaced by the number of matches generated.\n\n%s\n\nReplaced by ‘\\-no match-’, ‘\\-no prefix-’, or an empty string if there is no completion matching the word on the line, if the matches have no common prefix different from the word on the line, or if there is such a common prefix, respectively.\n\n%u\n\nReplaced by the unambiguous part of all matches, if there is any, and if it is different from the word on the line.\n\nLike ‘break-keys’, this uses the ‘:incremental’ context.\n\nstop-keys\n\nThis style is used by the incremental-complete-word widget. Its value is treated similarly to the one for the break-keys style (and uses the same context: ‘:incremental’). However, in this case all keys matching the pattern given as its value will stop incremental completion and will then execute their usual function.\n\ntoggle\n\nThis boolean style is used by predict-on and its related widgets in the context ‘:predict’. If set to one of the standard ‘true’ values, predictive typing is automatically toggled off in situations where it is unlikely to be useful, such as when editing a multi-line buffer or after moving into the middle of a line and then deleting a character. The default is to leave prediction turned on until an explicit call to predict-off.\n\nverbose\n\nThis boolean style is used by predict-on and its related widgets in the context ‘:predict’. If set to one of the standard ‘true’ values, these widgets display a message below the prompt when the predictive state is toggled. This is most useful in combination with the toggle style. The default does not display these messages.\n\nwidget\n\nThis style is similar to the command style: For widget functions that use zle to call other widgets, this style can sometimes be used to override the widget which is called. The context for this style is the name of the calling widget (_not_ the name of the calling function, because one function may be bound to multiple widget names).\n\nzstyle :copy-earlier-word widget smart-insert-last-word\n\nCheck the documentation for the calling widget or function to determine whether the widget style is used.\n\n* * *\n\n## 26.8 Exception Handling\n\nTwo functions are provided to enable zsh to provide exception handling in a form that should be familiar from other languages.\n\nthrow exception\n\nThe function throw throws the named exception. The name is an arbitrary string and is only used by the throw and catch functions. An exception is for the most part treated the same as a shell error, i.e. an unhandled exception will cause the shell to abort all processing in a function or script and to return to the top level in an interactive shell.\n\ncatch exception-pattern\n\nThe function catch returns status zero if an exception was thrown and the pattern exception-pattern matches its name. Otherwise it returns status 1. exception-pattern is a standard shell pattern, respecting the current setting of the EXTENDED\\_GLOB option. An alias catch is also defined to prevent the argument to the function from matching filenames, so patterns may be used unquoted. Note that as exceptions are not fundamentally different from other shell errors it is possible to catch shell errors by using an empty string as the exception name. The shell variable CAUGHT is set by catch to the name of the exception caught. It is possible to rethrow an exception by calling the throw function again once an exception has been caught.\n\nThe functions are designed to be used together with the always construct described in [Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands). This is important as only this construct provides the required support for exceptions. A typical example is as follows.\n\n{\n  # \"try\" block\n  # ... nested code here calls \"throw MyExcept\"\n} always {\n  # \"always\" block\n  if catch MyExcept; then\n    print \"Caught exception MyExcept\"\n  elif catch ''; then\n    print \"Caught a shell error.  Propagating...\"\n    throw ''\n  fi\n  # Other exceptions are not handled but may be caught further\n  # up the call stack.\n}\n\nIf all exceptions should be caught, the following idiom might be preferable.\n\n{\n  # ... nested code here throws an exception\n} always {\n  if catch \\*; then\n    case $CAUGHT in\n      (MyExcept)\n      print \"Caught my own exception\"\n      ;;\n      (\\*)\n      print \"Caught some other exception\"\n      ;;\n    esac\n  fi\n}\n\nIn common with exception handling in other languages, the exception may be thrown by code deeply nested inside the ‘try’ block. However, note that it must be thrown inside the current shell, not in a subshell forked for a pipeline, parenthesised current-shell construct, or some form of command or process substitution.\n\nThe system internally uses the shell variable EXCEPTION to record the name of the exception between throwing and catching. One drawback of this scheme is that if the exception is not handled the variable EXCEPTION remains set and may be incorrectly recognised as the name of an exception if a shell error subsequently occurs. Adding unset EXCEPTION at the start of the outermost layer of any code that uses exception handling will eliminate this problem.\n\n* * *\n\n## 26.9 MIME Functions\n\nThree functions are available to provide handling of files recognised by extension, for example to dispatch a file text.ps when executed as a command to an appropriate viewer.\n\nzsh-mime-setup \\[ \\-fv \\] \\[ \\-l \\[ suffix ... \\] \\]\n\nzsh-mime-handler \\[ \\-l \\] command argument ...\n\nThese two functions use the files ~/.mime.types and /etc/mime.types, which associate types and extensions, as well as ~/.mailcap and /etc/mailcap files, which associate types and the programs that handle them. These are provided on many systems with the Multimedia Internet Mail Extensions.\n\nTo enable the system, the function zsh-mime-setup should be autoloaded and run. This allows files with extensions to be treated as executable; such files be completed by the function completion system. The function zsh-mime-handler should not need to be called by the user.\n\nThe system works by setting up suffix aliases with ‘alias -s’. Suffix aliases already installed by the user will not be overwritten.\n\nFor suffixes defined in lower case, upper case variants will also automatically be handled (e.g. PDF is automatically handled if handling for the suffix pdf is defined), but not vice versa.\n\nRepeated calls to zsh-mime-setup do not override the existing mapping between suffixes and executable files unless the option \\-f is given. Note, however, that this does not override existing suffix aliases assigned to handlers other than zsh-mime-handler.\n\nCalling zsh-mime-setup with the option \\-l lists the existing mappings without altering them. Suffixes to list (which may contain pattern characters that should be quoted from immediate interpretation on the command line) may be given as additional arguments, otherwise all suffixes are listed.\n\nCalling zsh-mime-setup with the option \\-v causes verbose output to be shown during the setup operation.\n\nThe system respects the mailcap flags needsterminal and copiousoutput; see mailcap(4) or mailcap(5) (the man page’s name varies across platforms).\n\nThe functions use the following styles, which are defined with the zstyle builtin command ([The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module)). They should be defined before zsh-mime-setup is run. The contexts used all start with :mime:, with additional components in some cases. It is recommended that a trailing \\* (suitably quoted) be appended to style patterns in case the system is extended in future. Some examples are given below.\n\nFor files that have multiple suffixes, e.g. .pdf.gz, where the context includes the suffix it will be looked up starting with the longest possible suffix until a match for the style is found. For example, if .pdf.gz produces a match for the handler, that will be used; otherwise the handler for .gz will be used. Note that, owing to the way suffix aliases work, it is always required that there be a handler for the shortest possible suffix, so in this example .pdf.gz can only be handled if .gz is also handled (though not necessarily in the same way). Alternatively, if no handling for .gz on its own is needed, simply adding the command\n\nalias -s gz=zsh-mime-handler\n\nto the initialisation code is sufficient; .gz will not be handled on its own, but may be in combination with other suffixes.\n\ncurrent-shell\n\nIf this boolean style is true, the mailcap handler for the context in question is run using the eval builtin instead of by starting a new sh process. This is more efficient, but may not work in the occasional cases where the mailcap handler uses strict POSIX syntax.\n\ndisown\n\nIf this boolean style is true, mailcap handlers started in the background will be disowned, i.e. not subject to job control within the parent shell. Such handlers nearly always produce their own windows, so the only likely harmful side effect of setting the style is that it becomes harder to kill jobs from within the shell.\n\nexecute-as-is\n\nThis style gives a list of patterns to be matched against files passed for execution with a handler program. If the file matches the pattern, the entire command line is executed in its current form, with no handler. This is useful for files which might have suffixes but nonetheless be executable in their own right. If the style is not set, the pattern \\*(\\*) \\*(/) is used; hence executable files are executed directly and not passed to a handler, and the option AUTO\\_CD may be used to change to directories that happen to have MIME suffixes.\n\nexecute-never\n\nThis style is useful in combination with execute-as-is. It is set to an array of patterns corresponding to full paths to files that should never be treated as executable, even if the file passed to the MIME handler matches execute-as-is. This is useful for file systems that don’t handle execute permission or that contain executables from another operating system. For example, if /mnt/windows is a Windows mount, then\n\nzstyle ':mime:\\*' execute-never '/mnt/windows/\\*'\n\nwill ensure that any files found in that area will be executed as MIME types even if they are executable. As this example shows, the complete file name is matched against the pattern, regardless of how the file was passed to the handler. The file is resolved to a full path using the :P modifier described in [Modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Modifiers); this means that symbolic links are resolved where possible, so that links into other file systems behave in the correct fashion.\n\nfile-path\n\nUsed if the style find-file-in-path is true for the same context. Set to an array of directories that are used for searching for the file to be handled; the default is the command path given by the special parameter path. The shell option PATH\\_DIRS is respected; if that is set, the appropriate path will be searched even if the name of the file to be handled as it appears on the command line contains a ‘/’. The full context is :mime:.suffix:, as described for the style handler.\n\nfind-file-in-path\n\nIf set, allows files whose names do not contain absolute paths to be searched for in the command path or the path specified by the file-path style. If the file is not found in the path, it is looked for locally (whether or not the current directory is in the path); if it is not found locally, the handler will abort unless the handle-nonexistent style is set. Files found in the path are tested as described for the style execute-as-is. The full context is :mime:.suffix:, as described for the style handler.\n\nflags\n\nDefines flags to go with a handler; the context is as for the handler style, and the format is as for the flags in mailcap.\n\nhandle-nonexistent\n\nBy default, arguments that don’t correspond to files are not passed to the MIME handler in order to prevent it from intercepting commands found in the path that happen to have suffixes. This style may be set to an array of extended glob patterns for arguments that will be passed to the handler even if they don’t exist. If it is not explicitly set it defaults to \\[\\[:alpha:\\]\\]#:/\\* which allows URLs to be passed to the MIME handler even though they don’t exist in that format in the file system. The full context is :mime:.suffix:, as described for the style handler.\n\nhandler\n\nSpecifies a handler for a suffix; the suffix is given by the context as :mime:.suffix:, and the format of the handler is exactly that in mailcap. Note in particular the ‘.’ and trailing colon to distinguish this use of the context. This overrides any handler specified by the mailcap files. If the handler requires a terminal, the flags style should be set to include the word needsterminal, or if the output is to be displayed through a pager (but not if the handler is itself a pager), it should include copiousoutput.\n\nmailcap\n\nA list of files in the format of ~/.mailcap and /etc/mailcap to be read during setup, replacing the default list which consists of those two files. The context is :mime:. A + in the list will be replaced by the default files.\n\nmailcap-priorities\n\nThis style is used to resolve multiple mailcap entries for the same MIME type. It consists of an array of the following elements, in descending order of priority; later entries will be used if earlier entries are unable to resolve the entries being compared. If none of the tests resolve the entries, the first entry encountered is retained.\n\nfiles\n\nThe order of files (entries in the mailcap style) read. Earlier files are preferred. (Note this does not resolve entries in the same file.)\n\npriority\n\nThe priority flag from the mailcap entry. The priority is an integer from 0 to 9 with the default value being 5.\n\nflags\n\nThe test given by the mailcap-prio-flags option is used to resolve entries.\n\nplace\n\nLater entries are preferred; as the entries are strictly ordered, this test always succeeds.\n\nNote that as this style is handled during initialisation, the context is always :mime:, with no discrimination by suffix.\n\nmailcap-prio-flags\n\nThis style is used when the keyword flags is encountered in the list of tests specified by the mailcap-priorities style. It should be set to a list of patterns, each of which is tested against the flags specified in the mailcap entry (in other words, the sets of assignments found with some entries in the mailcap file). Earlier patterns in the list are preferred to later ones, and matched patterns are preferred to unmatched ones.\n\nmime-types\n\nA list of files in the format of ~/.mime.types and /etc/mime.types to be read during setup, replacing the default list which consists of those two files. The context is :mime:. A + in the list will be replaced by the default files.\n\nnever-background\n\nIf this boolean style is set, the handler for the given context is always run in the foreground, even if the flags provided in the mailcap entry suggest it need not be (for example, it doesn’t require a terminal).\n\npager\n\nIf set, will be used instead of $PAGER or more to handle suffixes where the copiousoutput flag is set. The context is as for handler, i.e. :mime:.suffix: for handling a file with the given suffix.\n\nExamples:\n\nzstyle ':mime:\\*' mailcap ~/.mailcap /usr/local/etc/mailcap\nzstyle ':mime:.txt:' handler less %s\nzstyle ':mime:.txt:' flags needsterminal\n\nWhen zsh-mime-setup is subsequently run, it will look for mailcap entries in the two files given. Files of suffix .txt will be handled by running ‘less file.txt’. The flag needsterminal is set to show that this program must run attached to a terminal.\n\nAs there are several steps to dispatching a command, the following should be checked if attempting to execute a file by extension .ext does not have the expected effect.\n\nThe command ‘alias -s ext’ should show ‘ps=zsh-mime-handler’. If it shows something else, another suffix alias was already installed and was not overwritten. If it shows nothing, no handler was installed: this is most likely because no handler was found in the .mime.types and mailcap combination for .ext files. In that case, appropriate handling should be added to ~/.mime.types and mailcap.\n\nIf the extension is handled by zsh-mime-handler but the file is not opened correctly, either the handler defined for the type is incorrect, or the flags associated with it are in appropriate. Running zsh-mime-setup -l will show the handler and, if there are any, the flags. A %s in the handler is replaced by the file (suitably quoted if necessary). Check that the handler program listed lists and can be run in the way shown. Also check that the flags needsterminal or copiousoutput are set if the handler needs to be run under a terminal; the second flag is used if the output should be sent to a pager. An example of a suitable mailcap entry for such a program is:\n\ntext/html; /usr/bin/lynx '%s'; needsterminal\n\nRunning ‘zsh-mime-handler -l command line’ prints the command line that would be executed, simplified to remove the effect of any flags, and quoted so that the output can be run as a complete zsh command line. This is used by the completion system to decide how to complete after a file handled by zsh-mime-setup.\n\npick-web-browser\n\nThis function is separate from the two MIME functions described above and can be assigned directly to a suffix:\n\nautoload -U pick-web-browser\nalias -s html=pick-web-browser\n\nIt is provided as an intelligent front end to dispatch a web browser. It may be run as either a function or a shell script. The status 255 is returned if no browser could be started.\n\nVarious styles are available to customize the choice of browsers:\n\nbrowser-style\n\nThe value of the style is an array giving preferences in decreasing order for the type of browser to use. The values of elements may be\n\nrunning\n\nUse a GUI browser that is already running when an X Window display is available. The browsers listed in the x-browsers style are tried in order until one is found; if it is, the file will be displayed in that browser, so the user may need to check whether it has appeared. If no running browser is found, one is not started. Browsers other than Firefox, Opera and Konqueror are assumed to understand the Mozilla syntax for opening a URL remotely.\n\nx\n\nStart a new GUI browser when an X Window display is available. Search for the availability of one of the browsers listed in the x-browsers style and start the first one that is found. No check is made for an already running browser.\n\ntty\n\nStart a terminal-based browser. Search for the availability of one of the browsers listed in the tty-browsers style and start the first one that is found.\n\nIf the style is not set the default running x tty is used.\n\nx-browsers\n\nAn array in decreasing order of preference of browsers to use when running under the X Window System. The array consists of the command name under which to start the browser. They are looked up in the context :mime: (which may be extended in future, so appending ‘\\*’ is recommended). For example,\n\nzstyle ':mime:\\*' x-browsers opera konqueror firefox\n\nspecifies that pick-web-browser should first look for a running instance of Opera, Konqueror or Firefox, in that order, and if it fails to find any should attempt to start Opera. The default is firefox mozilla netscape opera konqueror.\n\ntty-browsers\n\nAn array similar to x-browsers, except that it gives browsers to use when no X Window display is available. The default is elinks links lynx.\n\ncommand\n\nIf it is set this style is used to pick the command used to open a page for a browser. The context is :mime:browser:new:$browser: to start a new browser or :mime:browser:running:$browser: to open a URL in a browser already running on the current X display, where $browser is the value matched in the x-browsers or tty-browsers style. The escape sequence %b in the style’s value will be replaced by the browser, while %u will be replaced by the URL. If the style is not set, the default for all new instances is equivalent to %b %u and the defaults for using running browsers are equivalent to the values kfmclient openURL %u for Konqueror, firefox -new-tab %u for Firefox, opera -newpage %u for Opera, and %b -remote \"openUrl(%u)\" for all others.\n\n* * *\n\n## 26.10 Mathematical Functions\n\nzcalc \\[ \\-erf \\] \\[ expression ... \\]\n\nA reasonably powerful calculator based on zsh’s arithmetic evaluation facility. The syntax is similar to that of formulae in most programming languages; see [Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) for details.\n\nNon-programmers should note that, as in many other programming languages, expressions involving only integers (whether constants without a ‘.’, variables containing such constants as strings, or variables declared to be integers) are by default evaluated using integer arithmetic, which is not how an ordinary desk calculator operates. To force floating point operation, pass the option \\-f; see further notes below.\n\nIf the file ~/.zcalcrc exists it will be sourced inside the function once it is set up and about to process the command line. This can be used, for example, to set shell options; emulate -L zsh and setopt extendedglob are in effect at this point. Any failure to source the file if it exists is treated as fatal. As with other initialisation files, the directory $ZDOTDIR is used instead of $HOME if it is set.\n\nThe mathematical library zsh/mathfunc will be loaded if it is available; see [The zsh/mathfunc Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fmathfunc-Module). The mathematical functions correspond to the raw system libraries, so trigonometric functions are evaluated using radians, and so on.\n\nEach line typed is evaluated as an expression. The prompt shows a number, which corresponds to a positional parameter where the result of that calculation is stored. For example, the result of the calculation on the line preceded by ‘4> ’ is available as $4. The last value calculated is available as ans. Full command line editing, including the history of previous calculations, is available; the history is saved in the file ~/.zcalc\\_history. To exit, enter a blank line or type ‘:q’ on its own (‘q’ is allowed for historical compatibility).\n\nA line ending with a single backslash is treated in the same fashion as it is in command line editing: the backslash is removed, the function prompts for more input (the prompt is preceded by ‘...’ to indicate this), and the lines are combined into one to get the final result. In addition, if the input so far contains more open than close parentheses zcalc will prompt for more input.\n\nIf arguments are given to zcalc on start up, they are used to prime the first few positional parameters. A visual indication of this is given when the calculator starts.\n\nThe constants PI (3.14159...) and E (2.71828...) are provided. Parameter assignment is possible, but note that all parameters will be put into the global namespace unless the :local special command is used. The function creates local variables whose names start with \\_, so users should avoid doing so. The variables ans (the last answer) and stack (the stack in RPN mode) may be referred to directly; stack is an array but elements of it are numeric. Various other special variables are used locally with their standard meaning, for example compcontext, match, mbegin, mend, psvar.\n\nThe output base can be initialised by passing the option ‘\\-#base’, for example ‘zcalc -#16’ (the ‘#’ may have to be quoted, depending on the globbing options set).\n\nIf the option ‘\\-e’ is set, the function runs non-interactively: the arguments are treated as expressions to be evaluated as if entered interactively line by line.\n\nIf the option ‘\\-f’ is set, all numbers are treated as floating point, hence for example the expression ‘3/4’ evaluates to 0.75 rather than 0. Options must appear in separate words.\n\nIf the option ‘\\-r’ is set, RPN (Reverse Polish Notation) mode is entered. This has various additional properties:\n\nStack\n\nEvaluated values are maintained in a stack; this is contained in an array named stack with the most recent value in ${stack\\[1\\]}.\n\nOperators and functions\n\nIf the line entered matches an operator (+, \\-, \\*, /, \\*\\*, ^, | or &) or a function supplied by the zsh/mathfunc library, the bottom element or elements of the stack are popped to use as the argument or arguments. The higher elements of stack (least recent) are used as earlier arguments. The result is then pushed into ${stack\\[1\\]}.\n\nExpressions\n\nOther expressions are evaluated normally, printed, and added to the stack as numeric values. The syntax within expressions on a single line is normal shell arithmetic (not RPN).\n\nStack listing\n\nIf an integer follows the option \\-r with no space, then on every evaluation that many elements of the stack, where available, are printed instead of just the most recent result. Hence, for example, zcalc -r4 shows $stack\\[4\\] to $stack\\[1\\] each time results are printed.\n\nDuplication: \\=\n\nThe pseudo-operator \\= causes the most recent element of the stack to be duplicated onto the stack.\n\npop\n\nThe pseudo-function pop causes the most recent element of the stack to be popped. A ‘\\>’ on its own has the same effect.\n\n\\>ident\n\nThe expression \\> followed (with no space) by a shell identifier causes the most recent element of the stack to be popped and assigned to the variable with that name. The variable is local to the zcalc function.\n\n<ident\n\nThe expression < followed (with no space) by a shell identifier causes the value of the variable with that name to be pushed onto the stack. ident may be an integer, in which case the previous result with that number (as shown before the \\> in the standard zcalc prompt) is put on the stack.\n\nExchange: xy\n\nThe pseudo-function xy causes the most recent two elements of the stack to be exchanged. ‘<>’ has the same effect.\n\nThe prompt is configurable via the parameter ZCALCPROMPT, which undergoes standard prompt expansion. The index of the current entry is stored locally in the first element of the array psvar, which can be referred to in ZCALCPROMPT as ‘%1v’. The default prompt is ‘%1v> ’.\n\nThe variable ZCALC\\_ACTIVE is set within the function and can be tested by nested functions; it has the value rpn if RPN mode is active, else 1.\n\nA few special commands are available; these are introduced by a colon. For backward compatibility, the colon may be omitted for certain commands. Completion is available if compinit has been run.\n\nThe output precision may be specified within zcalc by special commands familiar from many calculators.\n\n:norm\n\nThe default output format. It corresponds to the printf %g specification. Typically this shows six decimal digits.\n\n:sci digits\n\nScientific notation, corresponding to the printf %g output format with the precision given by digits. This produces either fixed point or exponential notation depending on the value output.\n\n:fix digits\n\nFixed point notation, corresponding to the printf %f output format with the precision given by digits.\n\n:eng digits\n\nExponential notation, corresponding to the printf %E output format with the precision given by digits.\n\n:raw\n\nRaw output: this is the default form of the output from a math evaluation. This may show more precision than the number actually possesses.\n\nOther special commands:\n\n:!line...\n\nExecute line... as a normal shell command line. Note that it is executed in the context of the function, i.e. with local variables. Space is optional after :!.\n\n:local arg ...\n\nDeclare variables local to the function. Other variables may be used, too, but they will be taken from or put into the global scope.\n\n:function name \\[ body \\]\n\nDefine a mathematical function or (with no body) delete it. :function may be abbreviated to :func or simply :f. The name may contain the same characters as a shell function name. The function is defined using zmathfuncdef, see below.\n\nNote that zcalc takes care of all quoting. Hence for example:\n\ndefines a function to cube the sole argument. Functions so defined, or indeed any functions defined directly or indirectly using functions -M, are available to execute by typing only the name on the line in RPN mode; this pops the appropriate number of arguments off the stack to pass to the function, i.e. 1 in the case of the example cube function. If there are optional arguments only the mandatory arguments are supplied by this means.\n\n\\[#base\\]\n\nThis is not a special command, rather part of normal arithmetic syntax; however, when this form appears on a line by itself the default output radix is set to base. Use, for example, ‘\\[#16\\]’ to display hexadecimal output preceded by an indication of the base, or ‘\\[##16\\]’ just to display the raw number in the given base. Bases themselves are always specified in decimal. ‘\\[#\\]’ restores the normal output format. Note that setting an output base suppresses floating point output; use ‘\\[#\\]’ to return to normal operation.\n\n$var\n\nPrint out the value of var literally; does not affect the calculation. To use the value of var, omit the leading ‘$’.\n\nSee the comments in the function for a few extra tips.\n\nmin(arg, ...)\n\nmax(arg, ...)\n\nsum(arg, ...)\n\nzmathfunc\n\nThe function zmathfunc defines the three mathematical functions min, max, and sum. The functions min and max take one or more arguments. The function sum takes zero or more arguments. Arguments can be of different types (ints and floats).\n\nNot to be confused with the zsh/mathfunc module, described in [The zsh/mathfunc Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fmathfunc-Module).\n\nzmathfuncdef \\[ mathfunc \\[ body \\] \\]\n\nA convenient front end to functions -M.\n\nWith two arguments, define a mathematical function named mathfunc which can be used in any form of arithmetic evaluation. body is a mathematical expression to implement the function. It may contain references to position parameters $1, $2, ... to refer to mandatory parameters and ${1:-defvalue} ... to refer to optional parameters. Note that the forms must be strictly adhered to for the function to calculate the correct number of arguments. The implementation is held in a shell function named zsh\\_math\\_func\\_mathfunc; usually the user will not need to refer to the shell function directly. Any existing function of the same name is silently replaced.\n\nWith one argument, remove the mathematical function mathfunc as well as the shell function implementation.\n\nWith no arguments, list all mathfunc functions in a form suitable for restoring the definition. The functions have not necessarily been defined by zmathfuncdef.\n\n* * *\n\n## 26.11 User Configuration Functions\n\nThe zsh/newuser module comes with a function to aid in configuring shell options for new users. If the module is installed, this function can also be run by hand. It is available even if the module’s default behaviour, namely running the function for a new user logging in without startup files, is inhibited.\n\nzsh-newuser-install \\[ \\-f \\]\n\nThe function presents the user with various options for customizing their initialization scripts. Currently only ~/.zshrc is handled. $ZDOTDIR/.zshrc is used instead if the parameter ZDOTDIR is set; this provides a way for the user to configure a file without altering an existing .zshrc.\n\nBy default the function exits immediately if it finds any of the files .zshenv, .zprofile, .zshrc, or .zlogin in the appropriate directory. The option \\-f is required in order to force the function to continue. Note this may happen even if .zshrc itself does not exist.\n\nAs currently configured, the function will exit immediately if the user has root privileges; this behaviour cannot be overridden.\n\nOnce activated, the function’s behaviour is supposed to be self-explanatory. Menus are present allowing the user to alter the value of options and parameters. Suggestions for improvements are always welcome.\n\nWhen the script exits, the user is given the opportunity to save the new file or not; changes are not irreversible until this point. However, the script is careful to restrict changes to the file only to a group marked by the lines ‘\\# Lines configured by zsh-newuser-install’ and ‘\\# End of lines configured by zsh-newuser-install’. In addition, the old version of .zshrc is saved to a file with the suffix .zni appended.\n\nIf the function edits an existing .zshrc, it is up to the user to ensure that the changes made will take effect. For example, if control usually returns early from the existing .zshrc the lines will not be executed; or a later initialization file may override options or parameters, and so on. The function itself does not attempt to detect any such conflicts.\n\n* * *\n\n## 26.12 Other Functions\n\nThere are a large number of helpful functions in the Functions/Misc directory of the zsh distribution. Most are very simple and do not require documentation here, but a few are worthy of special mention.\n\n* * *\n\n### 26.12.1 Descriptions\n\ncolors\n\nThis function initializes several associative arrays to map color names to (and from) the ANSI standard eight-color terminal codes. These are used by the prompt theme system ([Prompt Themes](#Prompt-Themes)). You seldom should need to run colors more than once.\n\nThe eight base colors are: black, red, green, yellow, blue, magenta, cyan, and white. Each of these has codes for foreground and background. In addition there are seven intensity attributes: bold, faint, standout, underline, blink, reverse, and conceal. Finally, there are seven codes used to negate attributes: none (reset all attributes to the defaults), normal (neither bold nor faint), no-standout, no-underline, no-blink, no-reverse, and no-conceal.\n\nSome terminals do not support all combinations of colors and intensities.\n\nThe associative arrays are:\n\ncolor\n\ncolour\n\nMap all the color names to their integer codes, and integer codes to the color names. The eight base names map to the foreground color codes, as do names prefixed with ‘fg-’, such as ‘fg-red’. Names prefixed with ‘bg-’, such as ‘bg-blue’, refer to the background codes. The reverse mapping from code to color yields base name for foreground codes and the bg- form for backgrounds.\n\nAlthough it is a misnomer to call them ‘colors’, these arrays also map the other fourteen attributes from names to codes and codes to names.\n\nfg\n\nfg\\_bold\n\nfg\\_no\\_bold\n\nMap the eight basic color names to ANSI terminal escape sequences that set the corresponding foreground text properties. The fg sequences change the color without changing the eight intensity attributes.\n\nbg\n\nbg\\_bold\n\nbg\\_no\\_bold\n\nMap the eight basic color names to ANSI terminal escape sequences that set the corresponding background properties. The bg sequences change the color without changing the eight intensity attributes.\n\nIn addition, the scalar parameters reset\\_color and bold\\_color are set to the ANSI terminal escapes that turn off all attributes and turn on bold intensity, respectively.\n\nfned \\[ \\-x num \\] name\n\nSame as zed -f. This function does not appear in the zsh distribution, but can be created by linking zed to the name fned in some directory in your fpath.\n\nhisted \\[ \\[ name \\] size \\]\n\nSame as zed -h. This function does not appear in the zsh distribution, but can be created by linking zed to the name histed in some directory in your fpath.\n\nis-at-least needed \\[ present \\]\n\nPerform a greater-than-or-equal-to comparison of two strings having the format of a zsh version number; that is, a string of numbers and text with segments separated by dots or dashes. If the present string is not provided, $ZSH\\_VERSION is used. Segments are paired left-to-right in the two strings with leading non-number parts ignored. If one string has fewer segments than the other, the missing segments are considered zero.\n\nThis is useful in startup files to set options and other state that are not available in all versions of zsh.\n\nis-at-least 3.1.6-15 && setopt NO\\_GLOBAL\\_RCS\nis-at-least 3.1.0 && setopt HIST\\_REDUCE\\_BLANKS\nis-at-least 2.6-17 || print \"You can't use is-at-least here.\"\n\nnslookup \\[ arg ... \\]\n\nThis wrapper function for the nslookup command requires the zsh/zpty module (see [The zsh/zpty Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzpty-Module)). It behaves exactly like the standard nslookup except that it provides customizable prompts (including a right-side prompt) and completion of nslookup commands, host names, etc. (if you use the function-based completion system). Completion styles may be set with the context prefix ‘:completion:nslookup’.\n\nSee also the pager, prompt and rprompt styles below.\n\nregexp-replace var regexp replace\n\nUse regular expressions to perform a global search and replace operation on a variable. POSIX extended regular expressions (ERE) are used, unless the option RE\\_MATCH\\_PCRE has been set, in which case Perl-compatible regular expressions are used (this requires the shell to be linked against the pcre library).\n\nvar is the name of the variable containing the string to be matched. The variable will be modified directly by the function. The variables MATCH, MBEGIN, MEND, match, mbegin, mend should be avoided as these are used by the regular expression code.\n\nregexp is the regular expression to match against the string.\n\nreplace is the replacement text. This can contain parameter, command and arithmetic expressions which will be replaced: in particular, a reference to $MATCH will be replaced by the text matched by the pattern.\n\nThe return status is 0 if at least one match was performed, else 1.\n\nNote that if using POSIX EREs, the ^ or word boundary operators (where available) may not work properly.\n\nrun-help cmd\n\nThis function is designed to be invoked by the run-help ZLE widget, in place of the default alias. See ‘Accessing On-Line Help’ ([Utilities](#Utilities)) for setup instructions.\n\nIn the discussion which follows, if cmd is a file system path, it is first reduced to its rightmost component (the file name).\n\nHelp is first sought by looking for a file named cmd in the directory named by the HELPDIR parameter. If no file is found, an assistant function, alias, or command named run-help-cmd is sought. If found, the assistant is executed with the rest of the current command line (everything after the command name cmd) as its arguments. When neither file nor assistant is found, the external command ‘man cmd’ is run.\n\nAn example assistant for the \"ssh\" command:\n\nrun-help-ssh() {\n    emulate -LR zsh\n    local -a args\n    # Delete the \"-l username\" option\n    zparseopts -D -E -a args l:\n    # Delete other options, leaving: host command\n    args=(${@:#-\\*})\n    if \\[\\[ ${#args} -lt 2 \\]\\]; then\n        man ssh\n    else\n        run-help $args\\[2\\]\n    fi\n}\n\nSeveral of these assistants are provided in the Functions/Misc directory. These must be autoloaded, or placed as executable scripts in your search path, in order to be found and used by run-help.\n\nrun-help-btrfs\n\nrun-help-git\n\nrun-help-ip\n\nrun-help-openssl\n\nrun-help-p4\n\nrun-help-sudo\n\nrun-help-svk\n\nrun-help-svn\n\nAssistant functions for the btrfs, git, ip, openssl, p4, sudo, svk, and svn, commands.\n\ntetris\n\nZsh was once accused of not being as complete as Emacs, because it lacked a Tetris game. This function was written to refute this vicious slander.\n\nThis function must be used as a ZLE widget:\n\nautoload -U tetris\nzle -N tetris\nbindkey keys tetris\n\nTo start a game, execute the widget by typing the keys. Whatever command line you were editing disappears temporarily, and your keymap is also temporarily replaced by the Tetris control keys. The previous editor state is restored when you quit the game (by pressing ‘q’) or when you lose.\n\nIf you quit in the middle of a game, the next invocation of the tetris widget will continue where you left off. If you lost, it will start a new game.\n\ntetriscurses\n\nThis is a port of the above to zcurses. The input handling is improved a bit so that moving a block sideways doesn’t automatically advance a timestep, and the graphics use unicode block graphics.\n\nThis version does not save the game state between invocations, and is not invoked as a widget, but rather as:\n\nautoload -U tetriscurses\ntetriscurses\n\nzargs \\[ option ... \\-\\- \\] \\[ input ... \\] \\[ \\-\\- command \\[ arg ... \\] \\]\n\nThis function has a similar purpose to GNU xargs. Instead of reading lines of arguments from the standard input, it takes them from the command line. This is useful because zsh, especially with recursive glob operators, often can construct a command line for a shell function that is longer than can be accepted by an external command.\n\nThe option list represents options of the zargs command itself, which are the same as those of xargs. The input list is the collection of strings (often file names) that become the arguments of the command, analogous to the standard input of xargs. Finally, the arg list consists of those arguments (usually options) that are passed to the command each time it runs. The arg list precedes the elements from the input list in each run. If no command is provided, then no arg list may be provided, and in that event the default command is ‘print’ with arguments ‘\\-r -\\-’.\n\nFor example, to get a long ls listing of all non-hidden plain files in the current directory or its subdirectories:\n\nautoload -U zargs\nzargs -- \\*\\*/\\*(.) -- ls -ld --\n\nThe first and third occurrences of ‘\\-\\-’ are used to mark the end of options for zargs and ls respectively to guard against filenames starting with ‘\\-’, while the second is used to separate the list of files from the command to run (‘ls -ld –’).\n\nThe first ‘\\-\\-’ would also be needed if there was a chance the list might be empty as in:\n\nzargs -r -- ./\\*.back(#qN) -- rm -f\n\nIn the event that the string ‘\\-\\-’ is or may be an input, the \\-e option may be used to change the end-of-inputs marker. Note that this does _not_ change the end-of-options marker. For example, to use ‘..’ as the marker:\n\nzargs -e.. -- \\*\\*/\\*(.) .. ls -ld --\n\nThis is a good choice in that example because no plain file can be named ‘..’, but the best end-marker depends on the circumstances.\n\nThe options \\-i, \\-I, \\-l, \\-L, and \\-n differ slightly from their usage in xargs. There are no input lines for zargs to count, so \\-l and \\-L count through the input list, and \\-n counts the number of arguments passed to each execution of command, _including_ any arg list. Also, any time \\-i or \\-I is used, each input is processed separately as if by ‘\\-L 1’.\n\nFor details of the other zargs options, see the xargs(1) man page (but note the difference in function between zargs and xargs) or run zargs with the \\-\\-help option.\n\nzed \\[ \\-f \\[ \\-x num \\] \\] name\n\nzed \\[ \\-h \\[ name \\] size \\]\n\nzed -b\n\nThis function uses the ZLE editor to edit a file or function.\n\nOnly one name argument is allowed. If the \\-f option is given, the name is taken to be that of a function; if the function is marked for autoloading, zed searches for it in the fpath and loads it. Note that functions edited this way are installed into the current shell, but _not_ written back to the autoload file. In this case the \\-x option specifies that leading tabs indenting the function according to syntax should be converted into the given number of spaces; ‘\\-x 2’ is consistent with the layout of functions distributed with the shell.\n\nWithout \\-f, name is the path name of the file to edit, which need not exist; it is created on write, if necessary. With \\-h, the file is presumed to contain history events.\n\nWhen no file name is provided for \\-h the current shell history is edited in place. The history is renumbered when zed exits successfully.\n\nWhen editing history, multi-line events must have a trailing backslash on every line before the last.\n\nWhile editing, the function sets the main keymap to zed and the vi command keymap to zed-vicmd. These will be copied from the existing main and vicmd keymaps if they do not exist the first time zed is run. They can be used to provide special key bindings used only in zed.\n\nIf it creates the keymap, zed rebinds the return key to insert a line break and ‘^X^W’ to accept the edit in the zed keymap, and binds ‘ZZ’ to accept the edit in the zed-vicmd keymap.\n\nThe bindings alone can be installed by running ‘zed -b’. This is suitable for putting into a startup file. Note that, if rerun, this will overwrite the existing zed and zed-vicmd keymaps.\n\nCompletion is available, and styles may be set with the context prefix ‘:completion:zed:’.\n\nA zle widget zed-set-file-name is available. This can be called by name from within zed using ‘\\\\ex zed-set-file-name’ or can be bound to a key in either of the zed or zed-vicmd keymaps after ‘zed -b’ has been run. When the widget is called, it prompts for a new name for the file being edited. When zed exits the file will be written under that name and the original file will be left alone. The widget has no effect when invoked from ‘zed -f’. The completion context is changed to ‘:completion:zed-set-file-name:’. When editing the current history with ‘zed -h’, the history is first updated and then the file is written, but the global setting of HISTFILE is not altered.\n\nWhile zed-set-file-name is running, zed uses the keymap zed-normal-keymap, which is linked from the main keymap in effect at the time zed initialised its bindings. (This is to make the return key operate normally.) The result is that if the main keymap has been changed, the widget won’t notice. This is not a concern for most users.\n\nzcp \\[ \\-finqQvwW \\] srcpat dest\n\nzln \\[ \\-finqQsvwW \\] srcpat dest\n\nSame as zmv -C and zmv -L, respectively. These functions do not appear in the zsh distribution, but can be created by linking zmv to the names zcp and zln in some directory in your fpath.\n\nzkbd\n\nSee ‘Keyboard Definition’ ([Utilities](#Utilities)).\n\nzmv \\[ \\-finqQsvwW \\] \\[ \\-C | \\-L | \\-M | -{p|P} program \\] \\[ \\-o optstring \\]\n\n    srcpat dest\n\nMove (usually, rename) files matching the pattern srcpat to corresponding files having names of the form given by dest, where srcpat contains parentheses surrounding patterns which will be replaced in turn by $1, $2, ... in dest. For example,\n\nrenames ‘foo.lis’ to ‘foo.txt’, ‘my.old.stuff.lis’ to ‘my.old.stuff.txt’, and so on.\n\nThe pattern is always treated as an EXTENDED\\_GLOB pattern. Any file whose name is not changed by the substitution is simply ignored. Any error (a substitution resulted in an empty string, two substitutions gave the same result, the destination was an existing regular file and \\-f was not given) causes the entire function to abort without doing anything.\n\nIn addition to pattern replacement, the variable $f can be referred to in the second (replacement) argument. This makes it possible to use variable substitution to alter the argument; see examples below.\n\nOptions:\n\n\\-f\n\nForce overwriting of destination files. Not currently passed down to the mv/cp/ln command due to vagaries of implementations (but you can use \\-o-f to do that).\n\n\\-i\n\nInteractive: show each line to be executed and ask the user whether to execute it. ‘Y’ or ‘y’ will execute it, anything else will skip it. Note that you just need to type one character.\n\n\\-n\n\nNo execution: print what would happen, but don’t do it.\n\n\\-q\n\nTurn bare glob qualifiers off: now assumed by default, so this has no effect.\n\n\\-Q\n\nForce bare glob qualifiers on. Don’t turn this on unless you are actually using glob qualifiers in a pattern.\n\n\\-s\n\nSymbolic, passed down to ln; only works with \\-L.\n\n\\-v\n\nVerbose: print each command as it’s being executed.\n\n\\-w\n\nPick out wildcard parts of the pattern, as described above, and implicitly add parentheses for referring to them.\n\n\\-W\n\nJust like \\-w, with the addition of turning wildcards in the replacement pattern into sequential ${1} .. ${N} references.\n\n\\-C\n\n\\-L\n\n\\-M\n\nForce cp, ln or mv, respectively, regardless of the name of the function.\n\n\\-p program\n\nCall program instead of cp, ln or mv. Whatever it does, it should at least understand the form\n\nprogram \\-\\- oldname newname\n\nwhere oldname and newname are filenames generated by zmv. program will be split into words, so might be e.g. the name of an archive tool plus a copy or rename subcommand.\n\n\\-P program\n\nAs \\-p program, except that program does not accept a following \\-\\- to indicate the end of options. In this case filenames must already be in a sane form for the program in question.\n\n\\-o optstring\n\nThe optstring is split into words and passed down verbatim to the cp, ln or mv command called to perform the work. It should probably begin with a ‘\\-’.\n\nFurther examples:\n\nzmv -v '(\\* \\*)' '${1// /\\_}'\n\nFor any file in the current directory with at least one space in the name, replace every space by an underscore and display the commands executed.\n\nThis does exactly the same by referring to the file name stored in $f.\n\nFor more complete examples and other implementation details, see the zmv source file, usually located in one of the directories named in your fpath, or in Functions/Misc/zmv in the zsh distribution.\n\nzrecompile\n\nSee ‘Recompiling Functions’ ([Utilities](#Utilities)).\n\nzstyle+ context style value \\[ + subcontext style value ... \\]\n\nThis makes defining styles a bit simpler by using a single ‘+’ as a special token that allows you to append a context name to the previously used context name. Like this:\n\nzstyle+ ':foo:bar' style1 value1 \\\\ \n       +':baz'     style2 value2 \\\\ \n       +':frob'    style3 value3\n\nThis defines style1 with value1 for the context :foo:bar as usual, but it also defines style2 with value2 for the context :foo:bar:baz and style3 with value3 for :foo:bar:frob. Any subcontext may be the empty string to re-use the first context unchanged.\n\n* * *\n\n### 26.12.2 Styles\n\ninsert-tab\n\nThe zed function _sets_ this style in context ‘:completion:zed:\\*’ to turn off completion when TAB is typed at the beginning of a line. You may override this by setting your own value for this context and style.\n\npager\n\nThe nslookup function looks up this style in the context ‘:nslookup’ to determine the program used to display output that does not fit on a single screen.\n\nprompt\n\nrprompt\n\nThe nslookup function looks up this style in the context ‘:nslookup’ to set the prompt and the right-side prompt, respectively. The usual expansions for the PS1 and RPS1 parameters may be used (see [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion)).\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 723,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-User-Contributions-html-User-Contributions-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-User-Contributions-html-User-Contributions-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-User-Contributions-html-User-Contributions-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-User-Contributions-html-User-Contributions-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-User-Contributions-html-User-Contributions-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 200535,
      "readableText": 235115,
      "none": 300877,
      "readableTextIfPossible": 235115,
      "result": 235115,
      "markdown": 182601
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor",
    "loadedTime": "2025-05-08T06:51:26.429Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor",
    "title": "zsh: 18 Zsh Line Editor",
    "description": "zsh: 18 Zsh Line Editor",
    "author": null,
    "keywords": "zsh: 18 Zsh Line Editor",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:24 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-28714\"",
      "expires": "Thu, 08 May 2025 06:52:24 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70743cea736d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 18 Zsh Line Editor\n18.1 Description\nIf the ZLE option is set (which it is by default in interactive shells) and the shell input is attached to the terminal, the user is able to edit command lines. \nThere are two display modes. The first, multiline mode, is the default. It only works if the TERM parameter is set to a valid terminal type that can move the cursor up. The second, single line mode, is used if TERM is invalid or incapable of moving the cursor up, or if the SINGLE_LINE_ZLE option is set. This mode is similar to ksh, and uses no termcap sequences. If TERM is \"emacs\", the ZLE option will be unset by default. \nThe parameters BAUD, COLUMNS, and LINES are also used by the line editor. See Parameters Used By The Shell. \nThe parameter zle_highlight is also used by the line editor; see Character Highlighting. Highlighting of special characters and the region between the cursor and the mark (as set with set-mark-command in Emacs mode, or by visual-mode in Vi mode) is enabled by default; consult this reference for more information. Irascible conservatives will wish to know that all highlighting may be disabled by the following setting: \nIn many places, references are made to the numeric argument. This can by default be entered in emacs mode by holding the alt key and typing a number, or pressing escape before each digit, and in vi command mode by typing the number before entering a command. Generally the numeric argument causes the next command entered to be repeated the specified number of times, unless otherwise noted below; this is implemented by the digit-argument widget. See also Argumentsfor some other ways the numeric argument can be modified. \n18.2 Keymaps\nA keymap in ZLE contains a set of bindings between key sequences and ZLE commands. The empty key sequence cannot be bound. \nThere can be any number of keymaps at any time, and each keymap has one or more names. If all of a keymap’s names are deleted, it disappears. bindkey can be used to manipulate keymap names. \nInitially, there are eight keymaps: \nemacs \nEMACS emulation \nviins \nvi emulation - insert mode \nvicmd \nvi emulation - command mode \nviopp \nvi emulation - operator pending \nvisual \nvi emulation - selection active \nisearch \nincremental search mode \ncommand \nread a command name \n.safe \nfallback keymap \nThe ‘.safe’ keymap is special. It can never be altered, and the name can never be removed. However, it can be linked to other names, which can be removed. In the future other special keymaps may be added; users should avoid using names beginning with ‘.’ for their own keymaps. \nIn addition to these names, either ‘emacs’ or ‘viins’ is also linked to the name ‘main’. If one of the VISUAL or EDITOR environment variables contain the string ‘vi’ when the shell starts up then it will be ‘viins’, otherwise it will be ‘emacs’. bindkey’s -e and -v options provide a convenient way to override this default choice. \nWhen the editor starts up, it will select the ‘main’ keymap. If that keymap doesn’t exist, it will use ‘.safe’ instead. \nIn the ‘.safe’ keymap, each single key is bound to self-insert, except for ^J (line feed) and ^M (return) which are bound to accept-line. This is deliberately not pleasant to use; if you are using it, it means you deleted the main keymap, and you should put it back. \n18.2.1 Reading Commands\nWhen ZLE is reading a command from the terminal, it may read a sequence that is bound to some command and is also a prefix of a longer bound string. In this case ZLE will wait a certain time to see if more characters are typed, and if not (or they don’t match any longer string) it will execute the binding. This timeout is defined by the KEYTIMEOUT parameter; its default is 0.4 sec. There is no timeout if the prefix string is not itself bound to a command. \nThe key timeout is also applied when ZLE is reading the bytes from a multibyte character string when it is in the appropriate mode. (This requires that the shell was compiled with multibyte mode enabled; typically also the locale has characters with the UTF-8 encoding, although any multibyte encoding known to the operating system is supported.) If the second or a subsequent byte is not read within the timeout period, the shell acts as if ? were typed and resets the input state. \nAs well as ZLE commands, key sequences can be bound to other strings, by using ‘bindkey -s’. When such a sequence is read, the replacement string is pushed back as input, and the command reading process starts again using these fake keystrokes. This input can itself invoke further replacement strings, but in order to detect loops the process will be stopped if there are twenty such replacements without a real command being read. \nA key sequence typed by the user can be turned into a command name for use in user-defined widgets with the read-command widget, described in Miscellaneous below. \n18.2.2 Local Keymaps\nWhile for normal editing a single keymap is used exclusively, in many modes a local keymap allows for some keys to be customised. For example, in an incremental search mode, a binding in the isearch keymap will override a binding in the main keymap but all keys that are not overridden can still be used. \nIf a key sequence is defined in a local keymap, it will hide a key sequence in the global keymap that is a prefix of that sequence. An example of this occurs with the binding of iw in viopp as this hides the binding of i in vicmd. However, a longer sequence in the global keymap that shares the same prefix can still apply so for example the binding of ^Xa in the global keymap will be unaffected by the binding of ^Xb in the local keymap. \n18.3 Zle Builtins\nThe ZLE module contains three related builtin commands. The bindkey command manipulates keymaps and key bindings; the vared command invokes ZLE on the value of a shell parameter; and the zle command manipulates editing widgets and allows command line access to ZLE commands from within shell functions. \nbindkey [ options ] -l [ -L ] [ keymap ... ] bindkey [ options ] -d bindkey [ options ] -D keymap ... bindkey [ options ] -A old-keymap new-keymap bindkey [ options ] -N new-keymap [ old-keymap ] bindkey [ options ] -m bindkey [ options ] -r in-string ... bindkey [ options ] -s in-string out-string ... bindkey [ options ] in-string command ... bindkey [ options ] [ in-string ] \nbindkey’s options can be divided into three categories: keymap selection for the current command, operation selection, and others. The keymap selection options are: \n-e \nSelects keymap ‘emacs’ for any operations by the current command, and also links ‘emacs’ to ‘main’ so that it is selected by default the next time the editor starts. \n-v \nSelects keymap ‘viins’ for any operations by the current command, and also links ‘viins’ to ‘main’ so that it is selected by default the next time the editor starts. \n-a \nSelects keymap ‘vicmd’ for any operations by the current command. \n-M keymap \nThe keymap specifies a keymap name that is selected for any operations by the current command. \nIf a keymap selection is required and none of the options above are used, the ‘main’ keymap is used. Some operations do not permit a keymap to be selected, namely: \n-l \nList all existing keymap names; if any arguments are given, list just those keymaps. \nIf the -L option is also used, list in the form of bindkey commands to create or link the keymaps. ‘bindkey -lL main’ shows which keymap is linked to ‘main’, if any, and hence if the standard emacs or vi emulation is in effect. This option does not show the .safe keymap because it cannot be created in that fashion; however, neither is ‘bindkey -lL .safe’ reported as an error, it simply outputs nothing. \n-d \nDelete all existing keymaps and reset to the default state. \n-D keymap ... \nDelete the named keymaps. \n-A old-keymap new-keymap \nMake the new-keymap name an alias for old-keymap, so that both names refer to the same keymap. The names have equal standing; if either is deleted, the other remains. If there is already a keymap with the new-keymap name, it is deleted. \n-N new-keymap [ old-keymap ] \nCreate a new keymap, named new-keymap. If a keymap already has that name, it is deleted. If an old-keymap name is given, the new keymap is initialized to be a duplicate of it, otherwise the new keymap will be empty. \nTo use a newly created keymap, it should be linked to main. Hence the sequence of commands to create and use a new keymap ‘mymap’ initialized from the emacs keymap (which remains unchanged) is: \nbindkey -N mymap emacs\nbindkey -A mymap main\nNote that while ‘bindkey -A newmap main’ will work when newmap is emacs or viins, it will not work for vicmd, as switching from vi insert to command mode becomes impossible. \nThe following operations act on the ‘main’ keymap if no keymap selection option was given: \n-m \nAdd the built-in set of meta-key bindings to the selected keymap. Only keys that are unbound or bound to self-insert are affected. \n-r in-string ... \nUnbind the specified in-strings in the selected keymap. This is exactly equivalent to binding the strings to undefined-key. \nWhen -R is also used, interpret the in-strings as ranges. \nWhen -p is also used, the in-strings specify prefixes. Any binding that has the given in-string as a prefix, not including the binding for the in-string itself, if any, will be removed. For example, \nwill remove all bindings in the vi-insert keymap beginning with an escape character (probably cursor keys), but leave the binding for the escape character itself (probably vi-cmd-mode). This is incompatible with the option -R. \n-s in-string out-string ... \nBind each in-string to each out-string. When in-string is typed, out-string will be pushed back and treated as input to the line editor. When -R is also used, interpret the in-strings as ranges. \nNote that both in-string and out-string are subject to the same form of interpretation, as described below. \nin-string command ... \nBind each in-string to each command. When -R is used, interpret the in-strings as ranges. \n[ in-string ] \nList key bindings. If an in-string is specified, the binding of that string in the selected keymap is displayed. Otherwise, all key bindings in the selected keymap are displayed. (As a special case, if the -e or -v option is used alone, the keymap is not displayed - the implicit linking of keymaps is the only thing that happens.) \nWhen the option -p is used, the in-string must be present. The listing shows all bindings which have the given key sequence as a prefix, not including any bindings for the key sequence itself. \nWhen the -L option is used, the list is in the form of bindkey commands to create the key bindings. \nWhen the -R option is used as noted above, a valid range consists of two characters, with an optional ‘-’ between them. All characters between the two specified, inclusive, are bound as specified. \nFor either in-string or out-string, the following escape sequences are recognised: \n\\a \nbell character \n\\b \nbackspace \n\\e, \\E \nescape \n\\f \nform feed \n\\n \nlinefeed (newline) \n\\r \ncarriage return \n\\t \nhorizontal tab \n\\v \nvertical tab \n\\NNN \ncharacter code in octal \n\\xNN \ncharacter code in hexadecimal \n\\uNNNN \nunicode character code in hexadecimal \n\\UNNNNNNNN \nunicode character code in hexadecimal \n\\M[-]X \ncharacter with meta bit set \n\\C[-]X \ncontrol character \n^X \ncontrol character \nIn all other cases, ‘\\’ escapes the following character. Delete is written as ‘^?’. Note that ‘\\M^?’ and ‘^\\M?’ are not the same, and that (unlike emacs), the bindings ‘\\M-X’ and ‘\\eX’ are entirely distinct, although they are initialized to the same bindings by ‘bindkey -m’. \nvared [ -Aacghe ] [ -p prompt ] [ -r rprompt ] [ -M main-keymap ] [ -m vicmd-keymap ] [ -i init-widget ] [ -f finish-widget ] [ -t tty ] name \nThe value of the parameter name is loaded into the edit buffer, and the line editor is invoked. When the editor exits, name is set to the string value returned by the editor. When the -c flag is given, the parameter is created if it doesn’t already exist. The -a flag may be given with -c to create an array parameter, or the -A flag to create an associative array. If the type of an existing parameter does not match the type to be created, the parameter is unset and recreated. The -g flag may be given to suppress warnings from the WARN_CREATE_GLOBAL and WARN_NESTED_VAR options. \nIf an array or array slice is being edited, separator characters as defined in $IFS will be shown quoted with a backslash, as will backslashes themselves. Conversely, when the edited text is split into an array, a backslash quotes an immediately following separator character or backslash; no other special handling of backslashes, or any handling of quotes, is performed. \nIndividual elements of existing array or associative array parameters may be edited by using subscript syntax on name. New elements are created automatically, even without -c. \nIf the -p flag is given, the following string will be taken as the prompt to display at the left. If the -r flag is given, the following string gives the prompt to display at the right. If the -h flag is specified, the history can be accessed from ZLE. If the -e flag is given, typing ^D (Control-D) on an empty line causes vared to exit immediately with a non-zero return value. \nThe -M option gives a keymap to link to the main keymap during editing, and the -m option gives a keymap to link to the vicmd keymap during editing. For vi-style editing, this allows a pair of keymaps to override viins and vicmd. For emacs-style editing, only -M is normally needed but the -m option may still be used. On exit, the previous keymaps will be restored. \nVared calls the usual ‘zle-line-init’ and ‘zle-line-finish’ hooks before and after it takes control. Using the -i and -f options, it is possible to replace these with other custom widgets. \nIf ‘-t tty’ is given, tty is the name of a terminal device to be used instead of the default /dev/tty. If tty does not refer to a terminal an error is reported. \nzle zle -l [ -L | -a ] [ string ... ] zle -D widget ... zle -A old-widget new-widget zle -N widget [ function ] zle -f flag [ flag... ] zle -C widget completion-widget function zle -R [ -c ] [ display-string ] [ string ... ] zle -M string zle -U string zle -K keymap zle -F [ -L | -w ] [ fd [ handler ] ] zle -I zle -T [ tc function | -r tc | -L ] zle widget [ -n num ] [ -f flag ] [ -Nw ] [ -K keymap ] args ... \nThe zle builtin performs a number of different actions concerning ZLE. \nWith no options and no arguments, only the return status will be set. It is zero if ZLE is currently active and widgets could be invoked using this builtin command and non-zero otherwise. Note that even if non-zero status is returned, zle may still be active as part of the completion system; this does not allow direct calls to ZLE widgets. \nOtherwise, which operation it performs depends on its options: \n-l [ -L | -a ] [ string ] \nList all existing user-defined widgets. If the -L option is used, list in the form of zle commands to create the widgets. \nWhen combined with the -a option, all widget names are listed, including the builtin ones. In this case the -L option is ignored. \nIf at least one string is given, and -a is present or -L is not used, nothing will be printed. The return status will be zero if all strings are names of existing widgets and non-zero if at least one string is not a name of a defined widget. If -a is also present, all widget names are used for the comparison including builtin widgets, else only user-defined widgets are used. \nIf at least one string is present and the -L option is used, user-defined widgets matching any string are listed in the form of zle commands to create the widgets. \n-D widget ... \nDelete the named widgets. \n-A old-widget new-widget \nMake the new-widget name an alias for old-widget, so that both names refer to the same widget. The names have equal standing; if either is deleted, the other remains. If there is already a widget with the new-widget name, it is deleted. \n-N widget [ function ] \nCreate a user-defined widget. If there is already a widget with the specified name, it is overwritten. When the new widget is invoked from within the editor, the specified shell function is called. If no function name is specified, it defaults to the same name as the widget. For further information, see Zle Widgets. \n-f flag [ flag... ] \nSet various flags on the running widget. Possible values for flag are: \nyank for indicating that the widget has yanked text into the buffer. If the widget is wrapping an existing internal widget, no further action is necessary, but if it has inserted the text manually, then it should also take care to set YANK_START and YANK_END correctly. yankbefore does the same but is used when the yanked text appears after the cursor. \nkill for indicating that text has been killed into the cutbuffer. When repeatedly invoking a kill widget, text is appended to the cutbuffer instead of replacing it, but when wrapping such widgets, it is necessary to call ‘zle -f kill’ to retain this effect. \nvichange for indicating that the widget represents a vi change that can be repeated as a whole with ‘vi-repeat-change’. The flag should be set early in the function before inspecting the value of NUMERIC or invoking other widgets. This has no effect for a widget invoked from insert mode. If insert mode is active when the widget finishes, the change extends until next returning to command mode. \n-C widget completion-widget function \nCreate a user-defined completion widget named widget. The completion widget will behave like the built-in completion-widget whose name is given as completion-widget. To generate the completions, the shell function function will be called. For further information, see Completion Widgets. \n-R [ -c ] [ display-string ] [ string ... ] \nRedisplay the command line. If a display-string is given and not empty, this is shown in the status line (immediately below the line being edited). \nIf the optional strings are given they are listed below the prompt in the same way as completion lists are printed. If no strings are given but the -c option is used such a list is cleared. \nNote that immediately after returning from running widgets, the command line will be redisplayed and the strings displayed will be erased. Therefore, this option is only useful for widgets that do not exit immediately after using it. \nThis command can safely be called outside user defined widgets; if zle is active, the display will be refreshed, while if zle is not active, the command has no effect. In this case there will usually be no other arguments. \nThe status is zero if zle was active, else one. \n-M string \nAs with the -R option, the string will be displayed below the command line; unlike the -R option, the string will not be put into the status line but will instead be printed normally below the prompt. This means that the string will still be displayed after the widget returns (until it is overwritten by subsequent commands). \n-U string \nThis pushes the characters in the string onto the input stack of ZLE. After the widget currently executed finishes ZLE will behave as if the characters in the string were typed by the user. \nAs ZLE uses a stack, if this option is used repeatedly the last string pushed onto the stack will be processed first. However, the characters in each string will be processed in the order in which they appear in the string. \n-K keymap \nSelects the keymap named keymap. An error message will be displayed if there is no such keymap. \nThis keymap selection affects the interpretation of following keystrokes within this invocation of ZLE. Any following invocation (e.g., the next command line) will start as usual with the ‘main’ keymap selected. \n-F [ -L | -w ] [ fd [ handler ] ] \nOnly available if your system supports one of the ‘poll’ or ‘select’ system calls; most modern systems do. \nInstalls handler (the name of a shell function) to handle input from file descriptor fd. Installing a handler for an fd which is already handled causes the existing handler to be replaced. Any number of handlers for any number of readable file descriptors may be installed. Note that zle makes no attempt to check whether this fd is actually readable when installing the handler. The user must make their own arrangements for handling the file descriptor when zle is not active. \nWhen zle is attempting to read data, it will examine both the terminal and the list of handled fd’s. If data becomes available on a handled fd, zle calls handler with the fd which is ready for reading as the first argument. Under normal circumstances this is the only argument, but if an error was detected, a second argument provides details: ‘hup’ for a disconnect, ‘nval’ for a closed or otherwise invalid descriptor, or ‘err’ for any other condition. Systems that support only the ‘select’ system call always use ‘err’. \nIf the option -w is also given, the handler is instead a line editor widget, typically a shell function made into a widget using ‘zle -N’. In that case handler can use all the facilities of zle to update the current editing line. Note, however, that as handling fd takes place at a low level changes to the display will not automatically appear; the widget should call ‘zle -R’ to force redisplay. As of this writing, widget handlers only support a single argument and thus are never passed a string for error state, so widgets must be prepared to test the descriptor themselves. \nIf either type of handler produces output to the terminal, it should call ‘zle -I’ before doing so (see below). Handlers should not attempt to read from the terminal. \nIf no handler is given, but an fd is present, any handler for that fd is removed. If there is none, an error message is printed and status 1 is returned. \nIf no arguments are given, or the -L option is supplied, a list of handlers is printed in a form which can be stored for later execution. \nAn fd (but not a handler) may optionally be given with the -L option; in this case, the function will list the handler if any, else silently return status 1. \nNote that this feature should be used with care. Activity on one of the fd’s which is not properly handled can cause the terminal to become unusable. Removing an fd handler from within a signal trap may cause unpredictable behavior. \nHere is a simple example of using this feature. A connection to a remote TCP port is created using the ztcp command; see The zsh/net/tcp Module. Then a handler is installed which simply prints out any data which arrives on this connection. Note that ‘select’ will indicate that the file descriptor needs handling if the remote side has closed the connection; we handle that by testing for a failed read. \nif ztcp pwspc 2811; then\n  tcpfd=$REPLY\n  handler() {\n    zle -I\n    local line\n    if ! read -r line <&$1; then\n      # select marks this fd if we reach EOF,\n      # so handle this specially.\n      print \"[Read on fd $1 failed, removing.]\" >&2\n      zle -F $1\n      return 1\n    fi\n    print -r - $line\n  }\n  zle -F $tcpfd handler\nfi\n-I \nUnusually, this option is most useful outside ordinary widget functions, though it may be used within if normal output to the terminal is required. It invalidates the current zle display in preparation for output; typically this will be from a trap function. It has no effect if zle is not active. When a trap exits, the shell checks to see if the display needs restoring, hence the following will print output in such a way as not to disturb the line being edited: \nTRAPUSR1() {\n  # Invalidate zle display\n  [[ -o zle ]] && zle -I\n  # Show output\n  print Hello\n}\nIn general, the trap function may need to test whether zle is active before using this method (as shown in the example), since the zsh/zle module may not even be loaded; if it is not, the command can be skipped. \nIt is possible to call ‘zle -I’ several times before control is returned to the editor; the display will only be invalidated the first time to minimise disruption. \nNote that there are normally better ways of manipulating the display from within zle widgets; see, for example, ‘zle -R’ above. \nThe returned status is zero if zle was invalidated, even though this may have been by a previous call to ‘zle -I’ or by a system notification. To test if a zle widget may be called at this point, execute zle with no arguments and examine the return status. \n-T \nThis is used to add, list or remove internal transformations on the processing performed by the line editor. It is typically used only for debugging or testing and is therefore of little interest to the general user. \n‘zle -T transformation func’ specifies that the given transformation (see below) is effected by shell function func. \n‘zle -Tr transformation’ removes the given transformation if it was present (it is not an error if none was). \n‘zle -TL’ can be used to list all transformations currently in operation. \nCurrently the only transformation is tc. This is used instead of outputting termcap codes to the terminal. When the transformation is in operation the shell function is passed the termcap code that would be output as its first argument; if the operation required a numeric argument, that is passed as a second argument. The function should set the shell variable REPLY to the transformed termcap code. Typically this is used to produce some simply formatted version of the code and optional argument for debugging or testing. Note that this transformation is not applied to other non-printing characters such as carriage returns and newlines. \nwidget [ -n num ] [ -f flag ] [ -Nw ] [ -K keymap ] args ... \nInvoke the specified widget. This can only be done when ZLE is active; normally this will be within a user-defined widget. \nWith the options -n and -N, the current numeric argument will be saved and then restored after the call to widget; ‘-n num’ sets the numeric argument temporarily to num, while ‘-N’ sets it to the default, i.e. as if there were none. \nWith the option -K, keymap will be used as the current keymap during the execution of the widget. The previous keymap will be restored when the widget exits. \nNormally, calling a widget in this way does not set the special parameter WIDGET and related parameters, so that the environment appears as if the top-level widget called by the user were still active. With the option -w, WIDGET and related parameters are set to reflect the widget being executed by the zle call. \nNormally, when widget returns the special parameter LASTWIDGET will point to it. This can be inhibited by passing the option -f nolast. \nAny further arguments will be passed to the widget; note that as standard argument handling is performed, any general argument list should be preceded by --. If it is a shell function, these are passed down as positional parameters; for builtin widgets it is up to the widget in question what it does with them. Currently arguments are only handled by the incremental-search commands, the history-search-forward and -backward and the corresponding functions prefixed by vi-, and by universal-argument. No error is flagged if the command does not use the arguments, or only uses some of them. \nThe return status reflects the success or failure of the operation carried out by the widget, or if it is a user-defined widget the return status of the shell function. \nA non-zero return status causes the shell to beep when the widget exits, unless the BEEP options was unset or the widget was called via the zle command. Thus if a user defined widget requires an immediate beep, it should call the beep widget directly. \n18.4 Zle Widgets\nAll actions in the editor are performed by ‘widgets’. A widget’s job is simply to perform some small action. The ZLE commands that key sequences in keymaps are bound to are in fact widgets. Widgets can be user-defined or built in. \nThe standard widgets built into ZLE are listed in Standard Widgets. Other built-in widgets can be defined by other modules (see Zsh Modules). Each built-in widget has two names: its normal canonical name, and the same name preceded by a ‘.’. The ‘.’ name is special: it can’t be rebound to a different widget. This makes the widget available even when its usual name has been redefined. \nUser-defined widgets are defined using ‘zle -N’, and implemented as shell functions. When the widget is executed, the corresponding shell function is executed, and can perform editing (or other) actions. It is recommended that user-defined widgets should not have names starting with ‘.’. \n18.5 User-Defined Widgets\nUser-defined widgets, being implemented as shell functions, can execute any normal shell command. They can also run other widgets (whether built-in or user-defined) using the zle builtin command. The standard input of the function is redirected from /dev/null to prevent external commands from unintentionally blocking ZLE by reading from the terminal, but read -k or read -q can be used to read characters. Finally, they can examine and edit the ZLE buffer being edited by reading and setting the special parameters described below. \nThese special parameters are always available in widget functions, but are not in any way special outside ZLE. If they have some normal value outside ZLE, that value is temporarily inaccessible, but will return when the widget function exits. These special parameters in fact have local scope, like parameters created in a function using local. \nInside completion widgets and traps called while ZLE is active, these parameters are available read-only. \nNote that the parameters appear as local to any ZLE widget in which they appear. Hence if it is desired to override them this needs to be done within a nested function: \nwidget-function() {\n  # $WIDGET here refers to the special variable\n  # that is local inside widget-function\n  () {\n     # This anonymous nested function allows WIDGET\n     # to be used as a local variable.  The -h\n     # removes the special status of the variable.\n     local -h WIDGET\n  }\n}\nBUFFER (scalar) \nThe entire contents of the edit buffer. If it is written to, the cursor remains at the same offset, unless that would put it outside the buffer. \nBUFFERLINES (integer) \nThe number of screen lines needed for the edit buffer currently displayed on screen (i.e. without any changes to the preceding parameters done after the last redisplay); read-only. \nCONTEXT (scalar) \nThe context in which zle was called to read a line; read-only. One of the values: \nstart \nThe start of a command line (at prompt PS1). \ncont \nA continuation to a command line (at prompt PS2). \nselect \nIn a select loop (at prompt PS3). \nvared \nEditing a variable in vared. \nCURSOR (integer) \nThe offset of the cursor, within the edit buffer. This is in the range 0 to $#BUFFER, and is by definition equal to $#LBUFFER. Attempts to move the cursor outside the buffer will result in the cursor being moved to the appropriate end of the buffer. \nCUTBUFFER (scalar) \nThe last item cut using one of the ‘kill-’ commands; the string which the next yank would insert in the line. Later entries in the kill ring are in the array killring. Note that the command ‘zle copy-region-as-kill string’ can be used to set the text of the cut buffer from a shell function and cycle the kill ring in the same way as interactively killing text. \nHISTNO (integer) \nThe current history number. Setting this has the same effect as moving up or down in the history to the corresponding history line. An attempt to set it is ignored if the line is not stored in the history. Note this is not the same as the parameter HISTCMD, which always gives the number of the history line being added to the main shell’s history. HISTNO refers to the line being retrieved within zle. \nISEARCHMATCH_ACTIVE (integer) ISEARCHMATCH_START (integer) ISEARCHMATCH_END (integer) \nISEARCHMATCH_ACTIVE indicates whether a part of the BUFFER is currently matched by an incremental search pattern. ISEARCHMATCH_START and ISEARCHMATCH_END give the location of the matched part and are in the same units as CURSOR. They are only valid for reading when ISEARCHMATCH_ACTIVE is non-zero. \nAll parameters are read-only. \nKEYMAP (scalar) \nThe name of the currently selected keymap; read-only. \nKEYS (scalar) \nThe keys typed to invoke this widget, as a literal string; read-only. \nKEYS_QUEUED_COUNT (integer) \nThe number of bytes pushed back to the input queue and therefore available for reading immediately before any I/O is done; read-only. See also PENDING; the two values are distinct. \nkillring (array) \nThe array of previously killed items, with the most recently killed first. This gives the items that would be retrieved by a yank-pop in the same order. Note, however, that the most recently killed item is in $CUTBUFFER; $killring shows the array of previous entries. \nThe default size for the kill ring is eight, however the length may be changed by normal array operations. Any empty string in the kill ring is ignored by the yank-pop command, hence the size of the array effectively sets the maximum length of the kill ring, while the number of non-zero strings gives the current length, both as seen by the user at the command line. \nLASTABORTEDSEARCH (scalar) \nThe last search string used by an interactive search that was aborted by the user (status 3 returned by the search widget). \nLASTSEARCH (scalar) \nThe last search string used by an interactive search; read-only. This is set even if the search failed (status 0, 1 or 2 returned by the search widget), but not if it was aborted by the user. \nLASTWIDGET (scalar) \nThe name of the last widget that was executed; read-only. \nLBUFFER (scalar) \nThe part of the buffer that lies to the left of the cursor position. If it is assigned to, only that part of the buffer is replaced, and the cursor remains between the new $LBUFFER and the old $RBUFFER. \nMARK (integer) \nLike CURSOR, but for the mark. With vi-mode operators that wait for a movement command to select a region of text, setting MARK allows the selection to extend in both directions from the initial cursor position. \nNUMERIC (integer) \nThe numeric argument. If no numeric argument was given, this parameter is unset. When this is set inside a widget function, builtin widgets called with the zle builtin command will use the value assigned. If it is unset inside a widget function, builtin widgets called behave as if no numeric argument was given. \nPENDING (integer) \nThe number of bytes pending for input, i.e. the number of bytes which have already been typed and can immediately be read. On systems where the shell is not able to get this information, this parameter will always have a value of zero. Read-only. See also KEYS_QUEUED_COUNT; the two values are distinct. \nPREBUFFER (scalar) \nIn a multi-line input at the secondary prompt, this read-only parameter contains the contents of the lines before the one the cursor is currently in. \nPREDISPLAY (scalar) \nText to be displayed before the start of the editable text buffer. This does not have to be a complete line; to display a complete line, a newline must be appended explicitly. The text is reset on each new invocation (but not recursive invocation) of zle. \nPOSTDISPLAY (scalar) \nText to be displayed after the end of the editable text buffer. This does not have to be a complete line; to display a complete line, a newline must be prepended explicitly. The text is reset on each new invocation (but not recursive invocation) of zle. \nRBUFFER (scalar) \nThe part of the buffer that lies to the right of the cursor position. If it is assigned to, only that part of the buffer is replaced, and the cursor remains between the old $LBUFFER and the new $RBUFFER. \nREGION_ACTIVE (integer) \nIndicates if the region is currently active. It can be assigned 0 or 1 to deactivate and activate the region respectively. A value of 2 activates the region in line-wise mode with the highlighted text extending for whole lines only; see Character Highlighting. \nregion_highlight (array) \nEach element of this array may be set to a string that describes highlighting for an arbitrary region of the command line that will take effect the next time the command line is redisplayed. Highlighting of the non-editable parts of the command line in PREDISPLAY and POSTDISPLAY are possible, but note that the P flag is needed for character indexing to include PREDISPLAY. \nEach string consists of the following whitespace-separated parts: \nOptionally, a ‘P’ to signify that the start and end offset that follow include any string set by the PREDISPLAY special parameter; this is needed if the predisplay string itself is to be highlighted. Whitespace between the ‘P’ and the start offset is optional. \nA start offset in the same units as CURSOR. \nAn end offset in the same units as CURSOR. \nA highlight specification in the same format as used for contexts in the parameter zle_highlight, see Character Highlighting; for example, standout or fg=red,bold. \nOptionally, a string of the form ‘memo=token’. The token consists of everything between the ‘=’ and the next whitespace, comma, NUL, or the end of the string. The token is preserved verbatim but not parsed in any way. \nPlugins may use this to identify array elements they have added: for example, a plugin might set token to its (the plugin’s) name and then use ‘region_highlight=( ${region_highlight:#*memo=token} )’ in order to remove array elements it have added. \n(This example uses the ‘${name:#pattern}’ array-grepping syntax described in Parameter Expansion.) \nFor example, \nregion_highlight=(\"P0 20 bold memo=foobar\")\nspecifies that the first twenty characters of the text including any predisplay string should be highlighted in bold. \nNote that the effect of region_highlight is not saved and disappears as soon as the line is accepted. \nNote that zsh 5.8 and older do not support the ‘memo=token’ field and may misparse the third (highlight specification) field when a memo is given. \nThe final highlighting on the command line depends on both region_highlight and zle_highlight; see Character Highlighting for details. \nregisters (associative array) \nThe contents of each of the vi register buffers. These are typically set using vi-set-buffer followed by a delete, change or yank command. \nSUFFIX_ACTIVE (integer) SUFFIX_START (integer) SUFFIX_END (integer) \nSUFFIX_ACTIVE indicates whether an auto-removable completion suffix is currently active. SUFFIX_START and SUFFIX_END give the location of the suffix and are in the same units as CURSOR. They are only valid for reading when SUFFIX_ACTIVE is non-zero. \nAll parameters are read-only. \nUNDO_CHANGE_NO (integer) \nA number representing the state of the undo history. The only use of this is passing as an argument to the undo widget in order to undo back to the recorded point. Read-only. \nUNDO_LIMIT_NO (integer) \nA number corresponding to an existing change in the undo history; compare UNDO_CHANGE_NO. If this is set to a value greater than zero, the undo command will not allow the line to be undone beyond the given change number. It is still possible to use ‘zle undo change’ in a widget to undo beyond that point; in that case, it will not be possible to undo at all until UNDO_LIMIT_NO is reduced. Set to 0 to disable the limit. \nA typical use of this variable in a widget function is as follows (note the additional function scope is required): \n() {\n  local UNDO_LIMIT_NO=$UNDO_CHANGE_NO\n  # Perform some form of recursive edit.\n}\nWIDGET (scalar) \nThe name of the widget currently being executed; read-only. \nWIDGETFUNC (scalar) \nThe name of the shell function that implements a widget defined with either zle -N or zle -C. In the former case, this is the second argument to the zle -N command that defined the widget, or the first argument if there was no second argument. In the latter case this is the third argument to the zle -C command that defined the widget. Read-only. \nWIDGETSTYLE (scalar) \nDescribes the implementation behind the completion widget currently being executed; the second argument that followed zle -C when the widget was defined. This is the name of a builtin completion widget. For widgets defined with zle -N this is set to the empty string. Read-only. \nYANK_ACTIVE (integer) YANK_START (integer) YANK_END (integer) \nYANK_ACTIVE indicates whether text has just been yanked (pasted) into the buffer. YANK_START and YANK_END give the location of the pasted text and are in the same units as CURSOR. They are only valid for reading when YANK_ACTIVE is non-zero. They can also be assigned by widgets that insert text in a yank-like fashion, for example wrappers of bracketed-paste. See also zle -f. \nYANK_ACTIVE is read-only. \nZLE_RECURSIVE (integer) \nUsually zero, but incremented inside any instance of recursive-edit. Hence indicates the current recursion level. \nZLE_RECURSIVE is read-only. \nZLE_STATE (scalar) \nContains a set of space-separated words that describe the current zle state. \nCurrently, the states shown are the insert mode as set by the overwrite-mode or vi-replace widgets and whether history commands will visit imported entries as controlled by the set-local-history widget. The string contains ‘insert’ if characters to be inserted on the command line move existing characters to the right or ‘overwrite’ if characters to be inserted overwrite existing characters. It contains ‘localhistory’ if only local history commands will be visited or ‘globalhistory’ if imported history commands will also be visited. \nThe substrings are sorted in alphabetical order so that if you want to test for two specific substrings in a future-proof way, you can do match by doing: \nif [[ $ZLE_STATE == *globalhistory*insert* ]]; then ...; fi\n18.5.1 Special Widgets\nThere are a few user-defined widgets which are special to the shell. If they do not exist, no special action is taken. The environment provided is identical to that for any other editing widget. \nzle-isearch-exit \nExecuted at the end of incremental search at the point where the isearch prompt is removed from the display. See zle-isearch-update for an example. \nzle-isearch-update \nExecuted within incremental search when the display is about to be redrawn. Additional output below the incremental search prompt can be generated by using ‘zle -M’ within the widget. For example, \nzle-isearch-update() { zle -M \"Line $HISTNO\"; }\nzle -N zle-isearch-update\nNote the line output by ‘zle -M’ is not deleted on exit from incremental search. This can be done from a zle-isearch-exit widget: \nzle-isearch-exit() { zle -M \"\"; }\nzle -N zle-isearch-exit\nzle-line-pre-redraw \nExecuted whenever the input line is about to be redrawn, providing an opportunity to update the region_highlight array. \nzle-line-init \nExecuted every time the line editor is started to read a new line of input. The following example puts the line editor into vi command mode when it starts up. \nzle-line-init() { zle -K vicmd; }\nzle -N zle-line-init\n(The command inside the function sets the keymap directly; it is equivalent to zle vi-cmd-mode.) \nzle-line-finish \nThis is similar to zle-line-init but is executed every time the line editor has finished reading a line of input. \nzle-history-line-set \nExecuted when the history line changes. \nzle-keymap-select \nExecuted every time the keymap changes, i.e. the special parameter KEYMAP is set to a different value, while the line editor is active. Initialising the keymap when the line editor starts does not cause the widget to be called. \nThe value $KEYMAP within the function reflects the new keymap. The old keymap is passed as the sole argument. \nThis can be used for detecting switches between the vi command (vicmd) and insert (usually main) keymaps. \n18.6 Standard Widgets\nThe following is a list of all the standard widgets, and their default bindings in emacs mode, vi command mode and vi insert mode (the ‘emacs’, ‘vicmd’ and ‘viins’ keymaps, respectively). \nNote that cursor keys are bound to movement keys in all three keymaps; the shell assumes that the cursor keys send the key sequences reported by the terminal-handling library (termcap or terminfo). The key sequences shown in the list are those based on the VT100, common on many modern terminals, but in fact these are not necessarily bound. In the case of the viins keymap, the initial escape character of the sequences serves also to return to the vicmd keymap: whether this happens is determined by the KEYTIMEOUT parameter, see Parameters. \n18.6.1 Movement\nvi-backward-blank-word (unbound) (B) (unbound) \nMove backward one word, where a word is defined as a series of non-blank characters. \nvi-backward-blank-word-end (unbound) (gE) (unbound) \nMove to the end of the previous word, where a word is defined as a series of non-blank characters. \nbackward-char (^B ESC-[D) (unbound) (unbound) \nMove backward one character. \nvi-backward-char (unbound) (^H h ^?) (ESC-[D) \nMove backward one character, without changing lines. \nbackward-word (ESC-B ESC-b) (unbound) (unbound) \nMove to the beginning of the previous word. \nemacs-backward-word \nMove to the beginning of the previous word. \nvi-backward-word (unbound) (b) (unbound) \nMove to the beginning of the previous word, vi-style. \nvi-backward-word-end (unbound) (ge) (unbound) \nMove to the end of the previous word, vi-style. \nbeginning-of-line (^A) (unbound) (unbound) \nMove to the beginning of the line. If already at the beginning of the line, move to the beginning of the previous line, if any. \nvi-beginning-of-line \nMove to the beginning of the line, without changing lines. \ndown-line (unbound) (unbound) (unbound) \nMove down a line in the buffer. \nend-of-line (^E) (unbound) (unbound) \nMove to the end of the line. If already at the end of the line, move to the end of the next line, if any. \nvi-end-of-line (unbound) ($) (unbound) \nMove to the end of the line. If an argument is given to this command, the cursor will be moved to the end of the line (argument - 1) lines down. \nvi-forward-blank-word (unbound) (W) (unbound) \nMove forward one word, where a word is defined as a series of non-blank characters. \nvi-forward-blank-word-end (unbound) (E) (unbound) \nMove to the end of the current word, or, if at the end of the current word, to the end of the next word, where a word is defined as a series of non-blank characters. \nforward-char (^F ESC-[C) (unbound) (unbound) \nMove forward one character. \nvi-forward-char (unbound) (space l) (ESC-[C) \nMove forward one character. \nvi-find-next-char (^X^F) (f) (unbound) \nRead a character from the keyboard, and move to the next occurrence of it in the line. \nvi-find-next-char-skip (unbound) (t) (unbound) \nRead a character from the keyboard, and move to the position just before the next occurrence of it in the line. \nvi-find-prev-char (unbound) (F) (unbound) \nRead a character from the keyboard, and move to the previous occurrence of it in the line. \nvi-find-prev-char-skip (unbound) (T) (unbound) \nRead a character from the keyboard, and move to the position just after the previous occurrence of it in the line. \nvi-first-non-blank (unbound) (^) (unbound) \nMove to the first non-blank character in the line. \nvi-forward-word (unbound) (w) (unbound) \nMove forward one word, vi-style. \nforward-word (ESC-F ESC-f) (unbound) (unbound) \nMove to the beginning of the next word. The editor’s idea of a word is specified with the WORDCHARS parameter. \nemacs-forward-word \nMove to the end of the next word. \nvi-forward-word-end (unbound) (e) (unbound) \nMove to the end of the next word. \nvi-goto-column (ESC-|) (|) (unbound) \nMove to the column specified by the numeric argument. \nvi-goto-mark (unbound) (‘) (unbound) \nMove to the specified mark. \nvi-goto-mark-line (unbound) (’) (unbound) \nMove to beginning of the line containing the specified mark. \nvi-repeat-find (unbound) (;) (unbound) \nRepeat the last vi-find command. \nvi-rev-repeat-find (unbound) (,) (unbound) \nRepeat the last vi-find command in the opposite direction. \nup-line (unbound) (unbound) (unbound) \nMove up a line in the buffer. \n18.6.2 History Control\nbeginning-of-buffer-or-history (ESC-<) (gg) (unbound) \nMove to the beginning of the buffer, or if already there, move to the first event in the history list. \nbeginning-of-line-hist \nMove to the beginning of the line. If already at the beginning of the buffer, move to the previous history line. \nbeginning-of-history \nMove to the first event in the history list. \ndown-line-or-history (^N ESC-[B) (j) (ESC-[B) \nMove down a line in the buffer, or if already at the bottom line, move to the next event in the history list. \nvi-down-line-or-history (unbound) (+) (unbound) \nMove down a line in the buffer, or if already at the bottom line, move to the next event in the history list. Then move to the first non-blank character on the line. \ndown-line-or-search \nMove down a line in the buffer, or if already at the bottom line, search forward in the history for a line beginning with the first word in the buffer. \nIf called from a function by the zle command with arguments, the first argument is taken as the string for which to search, rather than the first word in the buffer. \ndown-history (unbound) (^N) (unbound) \nMove to the next event in the history list. \nhistory-beginning-search-backward \nSearch backward in the history for a line beginning with the current line up to the cursor. This leaves the cursor in its original position. \nend-of-buffer-or-history (ESC->) (unbound) (unbound) \nMove to the end of the buffer, or if already there, move to the last event in the history list. \nend-of-line-hist \nMove to the end of the line. If already at the end of the buffer, move to the next history line. \nend-of-history \nMove to the last event in the history list. \nvi-fetch-history (unbound) (G) (unbound) \nFetch the history line specified by the numeric argument. This defaults to the current history line (i.e. the one that isn’t history yet). \nhistory-incremental-search-backward (^R ^Xr) (unbound) (unbound) \nSearch backward incrementally for a specified string. The search is case-insensitive if the search string does not have uppercase letters and no numeric argument was given. The string may begin with ‘^’ to anchor the search to the beginning of the line. When called from a user-defined function returns the following statuses: 0, if the search succeeded; 1, if the search failed; 2, if the search term was a bad pattern; 3, if the search was aborted by the send-break command. \nA restricted set of editing functions is available in the mini-buffer. Keys are looked up in the special isearch keymap, and if not found there in the main keymap (note that by default the isearch keymap is empty). An interrupt signal, as defined by the stty setting, will stop the search and go back to the original line. An undefined key will have the same effect. Note that the following always perform the same task within incremental searches and cannot be replaced by user defined widgets, nor can the set of functions be extended. The supported functions are: \naccept-and-hold accept-and-infer-next-history accept-line accept-line-and-down-history \nPerform the usual function after exiting incremental search. The command line displayed is executed. \nbackward-delete-char vi-backward-delete-char \nBack up one place in the search history. If the search has been repeated this does not immediately erase a character in the minibuffer. \naccept-search \nExit incremental search, retaining the command line but performing no further action. Note that this function is not bound by default and has no effect outside incremental search. \nbackward-delete-word backward-kill-word vi-backward-kill-word \nBack up one character in the minibuffer; if multiple searches have been performed since the character was inserted the search history is rewound to the point just before the character was entered. Hence this has the effect of repeating backward-delete-char. \nclear-screen \nClear the screen, remaining in incremental search mode. \nhistory-incremental-search-backward \nFind the next occurrence of the contents of the mini-buffer. If the mini-buffer is empty, the most recent previously used search string is reinstated. \nhistory-incremental-search-forward \nInvert the sense of the search. \nmagic-space \nInserts a non-magical space. \nquoted-insert vi-quoted-insert \nQuote the character to insert into the minibuffer. \nredisplay \nRedisplay the command line, remaining in incremental search mode. \nvi-cmd-mode \nSelect the ‘vicmd’ keymap; the ‘main’ keymap (insert mode) will be selected initially. \nIn addition, the modifications that were made while in vi insert mode are merged to form a single undo event. \nvi-repeat-search vi-rev-repeat-search \nRepeat the search. The direction of the search is indicated in the mini-buffer. \nAny character that is not bound to one of the above functions, or self-insert or self-insert-unmeta, will cause the mode to be exited. The character is then looked up and executed in the keymap in effect at that point. \nWhen called from a widget function by the zle command, the incremental search commands can take a string argument. This will be treated as a string of keys, as for arguments to the bindkey command, and used as initial input for the command. Any characters in the string which are unused by the incremental search will be silently ignored. For example, \nzle history-incremental-search-backward forceps\nwill search backwards for forceps, leaving the minibuffer containing the string ‘forceps’. \nhistory-incremental-search-forward (^S ^Xs) (unbound) (unbound) \nSearch forward incrementally for a specified string. The search is case-insensitive if the search string does not have uppercase letters and no numeric argument was given. The string may begin with ‘^’ to anchor the search to the beginning of the line. The functions available in the mini-buffer are the same as for history-incremental-search-backward. \nhistory-incremental-pattern-search-backward history-incremental-pattern-search-forward \nThese widgets behave similarly to the corresponding widgets with no -pattern, but the search string typed by the user is treated as a pattern, respecting the current settings of the various options affecting pattern matching. See Filename Generation for a description of patterns. If no numeric argument was given lowercase letters in the search string may match uppercase letters in the history. The string may begin with ‘^’ to anchor the search to the beginning of the line. \nThe prompt changes to indicate an invalid pattern; this may simply indicate the pattern is not yet complete. \nNote that only non-overlapping matches are reported, so an expression with wildcards may return fewer matches on a line than are visible by inspection. \nhistory-search-backward (ESC-P ESC-p) (unbound) (unbound) \nSearch backward in the history for a line beginning with the first word in the buffer. \nIf called from a function by the zle command with arguments, the first argument is taken as the string for which to search, rather than the first word in the buffer. \nvi-history-search-backward (unbound) (/) (unbound) \nSearch backward in the history for a specified string. The string may begin with ‘^’ to anchor the search to the beginning of the line. \nA restricted set of editing functions is available in the mini-buffer. An interrupt signal, as defined by the stty setting, will stop the search. The functions available in the mini-buffer are: accept-line, backward-delete-char, vi-backward-delete-char, backward-kill-word, vi-backward-kill-word, clear-screen, redisplay, quoted-insert and vi-quoted-insert. \nvi-cmd-mode is treated the same as accept-line, and magic-space is treated as a space. Any other character that is not bound to self-insert or self-insert-unmeta will beep and be ignored. If the function is called from vi command mode, the bindings of the current insert mode will be used. \nIf called from a function by the zle command with arguments, the first argument is taken as the string for which to search, rather than the first word in the buffer. \nhistory-search-forward (ESC-N ESC-n) (unbound) (unbound) \nSearch forward in the history for a line beginning with the first word in the buffer. \nIf called from a function by the zle command with arguments, the first argument is taken as the string for which to search, rather than the first word in the buffer. \nvi-history-search-forward (unbound) (?) (unbound) \nSearch forward in the history for a specified string. The string may begin with ‘^’ to anchor the search to the beginning of the line. The functions available in the mini-buffer are the same as for vi-history-search-backward. Argument handling is also the same as for that command. \ninfer-next-history (^X^N) (unbound) (unbound) \nSearch in the history list for a line matching the current one and fetch the event following it. \ninsert-last-word (ESC-_ ESC-.) (unbound) (unbound) \nInsert the last word from the previous history event at the cursor position. If a positive numeric argument is given, insert that word from the end of the previous history event. If the argument is zero or negative insert that word from the left (zero inserts the previous command word). Repeating this command replaces the word just inserted with the last word from the history event prior to the one just used; numeric arguments can be used in the same way to pick a word from that event. \nWhen called from a shell function invoked from a user-defined widget, the command can take one to three arguments. The first argument specifies a history offset which applies to successive calls to this widget: if it is -1, the default behaviour is used, while if it is 1, successive calls will move forwards through the history. The value 0 can be used to indicate that the history line examined by the previous execution of the command will be reexamined. Note that negative numbers should be preceded by a ‘--’ argument to avoid confusing them with options. \nIf two arguments are given, the second specifies the word on the command line in normal array index notation (as a more natural alternative to the numeric argument). Hence 1 is the first word, and -1 (the default) is the last word. \nIf a third argument is given, its value is ignored, but it is used to signify that the history offset is relative to the current history line, rather than the one remembered after the previous invocations of insert-last-word. \nFor example, the default behaviour of the command corresponds to \nzle insert-last-word -- -1 -1\nwhile the command \nzle insert-last-word -- -1 1 -\nalways copies the first word of the line in the history immediately before the line being edited. This has the side effect that later invocations of the widget will be relative to that line. \nvi-repeat-search (unbound) (n) (unbound) \nRepeat the last vi history search. \nvi-rev-repeat-search (unbound) (N) (unbound) \nRepeat the last vi history search, but in reverse. \nup-line-or-history (^P ESC-[A) (k) (ESC-[A) \nMove up a line in the buffer, or if already at the top line, move to the previous event in the history list. \nvi-up-line-or-history (unbound) (-) (unbound) \nMove up a line in the buffer, or if already at the top line, move to the previous event in the history list. Then move to the first non-blank character on the line. \nup-line-or-search \nMove up a line in the buffer, or if already at the top line, search backward in the history for a line beginning with the first word in the buffer. \nIf called from a function by the zle command with arguments, the first argument is taken as the string for which to search, rather than the first word in the buffer. \nup-history (unbound) (^P) (unbound) \nMove to the previous event in the history list. \nhistory-beginning-search-forward \nSearch forward in the history for a line beginning with the current line up to the cursor. This leaves the cursor in its original position. \nset-local-history \nBy default, history movement commands visit the imported lines as well as the local lines. This widget lets you toggle this on and off, or set it with the numeric argument. Zero for both local and imported lines and nonzero for only local lines. \n18.6.3 Modifying Text\nvi-add-eol (unbound) (A) (unbound) \nMove to the end of the line and enter insert mode. \nvi-add-next (unbound) (a) (unbound) \nEnter insert mode after the current cursor position, without changing lines. \nbackward-delete-char (^H ^?) (unbound) (unbound) \nDelete the character behind the cursor. \nvi-backward-delete-char (unbound) (X) (^H) \nDelete the character behind the cursor, without changing lines. If in insert mode, this won’t delete past the point where insert mode was last entered. \nbackward-delete-word \nDelete the word behind the cursor. \nbackward-kill-line \nKill from the beginning of the line to the cursor position. \nbackward-kill-word (^W ESC-^H ESC-^?) (unbound) (unbound) \nKill the word behind the cursor. \nvi-backward-kill-word (unbound) (unbound) (^W) \nKill the word behind the cursor, without going past the point where insert mode was last entered. \ncapitalize-word (ESC-C ESC-c) (unbound) (unbound) \nCapitalize the current word and move past it. \nvi-change (unbound) (c) (unbound) \nRead a movement command from the keyboard, and kill from the cursor position to the endpoint of the movement. Then enter insert mode. If the command is vi-change, change the current line. \nFor compatibility with vi, if the command is vi-forward-word or vi-forward-blank-word, the whitespace after the word is not included. If you prefer the more consistent behaviour with the whitespace included use the following key binding: \nvi-change-eol (unbound) (C) (unbound) \nKill to the end of the line and enter insert mode. \nvi-change-whole-line (unbound) (S) (unbound) \nKill the current line and enter insert mode. \ncopy-region-as-kill (ESC-W ESC-w) (unbound) (unbound) \nCopy the area from the cursor to the mark to the kill buffer. \nIf called from a ZLE widget function in the form ‘zle copy-region-as-kill string’ then string will be taken as the text to copy to the kill buffer. The cursor, the mark and the text on the command line are not used in this case. \ncopy-prev-word (ESC-^_) (unbound) (unbound) \nDuplicate the word to the left of the cursor. \ncopy-prev-shell-word \nLike copy-prev-word, but the word is found by using shell parsing, whereas copy-prev-word looks for blanks. This makes a difference when the word is quoted and contains spaces. \nvi-delete (unbound) (d) (unbound) \nRead a movement command from the keyboard, and kill from the cursor position to the endpoint of the movement. If the command is vi-delete, kill the current line. \ndelete-char \nDelete the character under the cursor. \nvi-delete-char (unbound) (x) (unbound) \nDelete the character under the cursor, without going past the end of the line. \ndelete-word \nDelete the current word. \ndown-case-word (ESC-L ESC-l) (unbound) (unbound) \nConvert the current word to all lowercase and move past it. \nvi-down-case (unbound) (gu) (unbound) \nRead a movement command from the keyboard, and convert all characters from the cursor position to the endpoint of the movement to lowercase. If the movement command is vi-down-case, swap the case of all characters on the current line. \nkill-word (ESC-D ESC-d) (unbound) (unbound) \nKill the current word. \ngosmacs-transpose-chars \nExchange the two characters behind the cursor. \nvi-indent (unbound) (>) (unbound) \nIndent a number of lines. \nvi-insert (unbound) (i) (unbound) \nEnter insert mode. \nvi-insert-bol (unbound) (I) (unbound) \nMove to the first non-blank character on the line and enter insert mode. \nvi-join (^X^J) (J) (unbound) \nJoin the current line with the next one. \nkill-line (^K) (unbound) (unbound) \nKill from the cursor to the end of the line. If already on the end of the line, kill the newline character. \nvi-kill-line (unbound) (unbound) (^U) \nKill from the cursor back to wherever insert mode was last entered. \nvi-kill-eol (unbound) (D) (unbound) \nKill from the cursor to the end of the line. \nkill-region \nKill from the cursor to the mark. \nkill-buffer (^X^K) (unbound) (unbound) \nKill the entire buffer. \nkill-whole-line (^U) (unbound) (unbound) \nKill the current line. \nvi-match-bracket (^X^B) (%) (unbound) \nMove to the bracket character (one of {}, () or []) that matches the one under the cursor. If the cursor is not on a bracket character, move forward without going past the end of the line to find one, and then go to the matching bracket. \nvi-open-line-above (unbound) (O) (unbound) \nOpen a line above the cursor and enter insert mode. \nvi-open-line-below (unbound) (o) (unbound) \nOpen a line below the cursor and enter insert mode. \nvi-oper-swap-case (unbound) (g~) (unbound) \nRead a movement command from the keyboard, and swap the case of all characters from the cursor position to the endpoint of the movement. If the movement command is vi-oper-swap-case, swap the case of all characters on the current line. \noverwrite-mode (^X^O) (unbound) (unbound) \nToggle between overwrite mode and insert mode. \nvi-put-before (unbound) (P) (unbound) \nInsert the contents of the kill buffer before the cursor. If the kill buffer contains a sequence of lines (as opposed to characters), paste it above the current line. \nvi-put-after (unbound) (p) (unbound) \nInsert the contents of the kill buffer after the cursor. If the kill buffer contains a sequence of lines (as opposed to characters), paste it below the current line. \nput-replace-selection (unbound) (unbound) (unbound) \nReplace the contents of the current region or selection with the contents of the kill buffer. If the kill buffer contains a sequence of lines (as opposed to characters), the current line will be split by the pasted lines. \nquoted-insert (^V) (unbound) (unbound) \nInsert the next character typed into the buffer literally. An interrupt character will not be inserted. \nvi-quoted-insert (unbound) (unbound) (^Q ^V) \nDisplay a ‘^’ at the cursor position, and insert the next character typed into the buffer literally. An interrupt character will not be inserted. \nquote-line (ESC-’) (unbound) (unbound) \nQuote the current line; that is, put a ‘’’ character at the beginning and the end, and convert all ‘’’ characters to ‘’\\’’’. \nquote-region (ESC-\") (unbound) (unbound) \nQuote the region from the cursor to the mark. \nvi-replace (unbound) (R) (unbound) \nEnter overwrite mode. \nvi-repeat-change (unbound) (.) (unbound) \nRepeat the last vi mode text modification. If a count was used with the modification, it is remembered. If a count is given to this command, it overrides the remembered count, and is remembered for future uses of this command. The cut buffer specification is similarly remembered. \nvi-replace-chars (unbound) (r) (unbound) \nReplace the character under the cursor with a character read from the keyboard. \nself-insert (printable characters) (unbound) (printable characters and some control characters) \nInsert a character into the buffer at the cursor position. \nself-insert-unmeta (ESC-^I ESC-^J ESC-^M) (unbound) (unbound) \nInsert a character into the buffer after stripping the meta bit and converting ^M to ^J. \nvi-substitute (unbound) (s) (unbound) \nSubstitute the next character(s). \nvi-swap-case (unbound) (~) (unbound) \nSwap the case of the character under the cursor and move past it. \ntranspose-chars (^T) (unbound) (unbound) \nExchange the two characters to the left of the cursor if at end of line, else exchange the character under the cursor with the character to the left. \ntranspose-words (ESC-T ESC-t) (unbound) (unbound) \nExchange the current word with the one before it. \nWith a positive numeric argument N, the word around the cursor, or following it if the cursor is between words, is transposed with the preceding N words. The cursor is put at the end of the resulting group of words. \nWith a negative numeric argument -N, the effect is the same as using a positive argument N except that the original cursor position is retained, regardless of how the words are rearranged. \nvi-unindent (unbound) (<) (unbound) \nUnindent a number of lines. \nvi-up-case (unbound) (gU) (unbound) \nRead a movement command from the keyboard, and convert all characters from the cursor position to the endpoint of the movement to lowercase. If the movement command is vi-up-case, swap the case of all characters on the current line. \nup-case-word (ESC-U ESC-u) (unbound) (unbound) \nConvert the current word to all caps and move past it. \nyank (^Y) (unbound) (unbound) \nInsert the contents of the kill buffer at the cursor position. \nyank-pop (ESC-y) (unbound) (unbound) \nRemove the text just yanked, rotate the kill-ring (the history of previously killed text) and yank the new top. Only works following yank, vi-put-before, vi-put-after or yank-pop. \nvi-yank (unbound) (y) (unbound) \nRead a movement command from the keyboard, and copy the region from the cursor position to the endpoint of the movement into the kill buffer. If the command is vi-yank, copy the current line. \nvi-yank-whole-line (unbound) (Y) (unbound) \nCopy the current line into the kill buffer. \nvi-yank-eol \nCopy the region from the cursor position to the end of the line into the kill buffer. Arguably, this is what Y should do in vi, but it isn’t what it actually does. \n18.6.4 Arguments\ndigit-argument (ESC-0..ESC-9) (1-9) (unbound) \nStart a new numeric argument, or add to the current one. See also vi-digit-or-beginning-of-line. This only works if bound to a key sequence ending in a decimal digit. \nInside a widget function, a call to this function treats the last key of the key sequence which called the widget as the digit. \nneg-argument (ESC--) (unbound) (unbound) \nChanges the sign of the following argument. \nuniversal-argument \nMultiply the argument of the next command by 4. Alternatively, if this command is followed by an integer (positive or negative), use that as the argument for the next command. Thus digits cannot be repeated using this command. For example, if this command occurs twice, followed immediately by forward-char, move forward sixteen spaces; if instead it is followed by -2, then forward-char, move backward two spaces. \nInside a widget function, if passed an argument, i.e. ‘zle universal-argument num’, the numeric argument will be set to num; this is equivalent to ‘NUMERIC=num’. \nargument-base \nUse the existing numeric argument as a numeric base, which must be in the range 2 to 36 inclusive. Subsequent use of digit-argument and universal-argument will input a new numeric argument in the given base. The usual hexadecimal convention is used: the letter a or A corresponds to 10, and so on. Arguments in bases requiring digits from 10 upwards are more conveniently input with universal-argument, since ESC-a etc. are not usually bound to digit-argument. \nThe function can be used with a command argument inside a user-defined widget. The following code sets the base to 16 and lets the user input a hexadecimal argument until a key out of the digit range is typed: \nzle argument-base 16\nzle universal-argument\n18.6.5 Completion\naccept-and-menu-complete \nIn a menu completion, insert the current completion into the buffer, and advance to the next possible completion. \ncomplete-word \nAttempt completion on the current word. \ndelete-char-or-list (^D) (unbound) (unbound) \nDelete the character under the cursor. If the cursor is at the end of the line, list possible completions for the current word. \nexpand-cmd-path \nExpand the current command to its full pathname. \nexpand-or-complete (TAB) (unbound) (TAB) \nAttempt shell expansion on the current word. If that fails, attempt completion. \nexpand-or-complete-prefix \nAttempt shell expansion on the current word up to cursor. \nexpand-history (ESC-space ESC-!) (unbound) (unbound) \nPerform history expansion on the edit buffer. \nexpand-word (^X*) (unbound) (unbound) \nAttempt shell expansion on the current word. \nlist-choices (ESC-^D) (^D =) (^D) \nList possible completions for the current word. \nlist-expand (^Xg ^XG) (^G) (^G) \nList the expansion of the current word. \nmagic-space \nPerform history expansion and insert a space into the buffer. This is intended to be bound to space. \nmenu-complete \nLike complete-word, except that menu completion is used. See the MENU_COMPLETE option. \nmenu-expand-or-complete \nLike expand-or-complete, except that menu completion is used. \nreverse-menu-complete \nPerform menu completion, like menu-complete, except that if a menu completion is already in progress, move to the previous completion rather than the next. \nend-of-list \nWhen a previous completion displayed a list below the prompt, this widget can be used to move the prompt below the list. \n18.6.6 Miscellaneous\naccept-and-hold (ESC-A ESC-a) (unbound) (unbound) \nPush the contents of the buffer on the buffer stack and execute it. \naccept-and-infer-next-history \nExecute the contents of the buffer. Then search the history list for a line matching the current one and push the event following onto the buffer stack. \naccept-line (^J ^M) (^J ^M) (^J ^M) \nFinish editing the buffer. Normally this causes the buffer to be executed as a shell command. \naccept-line-and-down-history (^O) (unbound) (unbound) \nExecute the current line, and push the next history event on the buffer stack. \nauto-suffix-remove \nIf the previous action added a suffix (space, slash, etc.) to the word on the command line, remove it. Otherwise do nothing. Removing the suffix ends any active menu completion or menu selection. \nThis widget is intended to be called from user-defined widgets to enforce a desired suffix-removal behavior. \nauto-suffix-retain \nIf the previous action added a suffix (space, slash, etc.) to the word on the command line, force it to be preserved. Otherwise do nothing. Retaining the suffix ends any active menu completion or menu selection. \nThis widget is intended to be called from user-defined widgets to enforce a desired suffix-preservation behavior. \nbeep \nBeep, unless the BEEP option is unset. \nbracketed-paste (^[[200~) (^[[200~) (^[[200~) \nThis widget is invoked when text is pasted to the terminal emulator. It is not intended to be bound to actual keys but instead to the special sequence generated by the terminal emulator when text is pasted. \nWhen invoked interactively, the pasted text is inserted to the buffer and placed in the cutbuffer. If a numeric argument is given, shell quoting will be applied to the pasted text before it is inserted. \nWhen a named buffer is specified with vi-set-buffer (\"x), the pasted text is stored in that named buffer but not inserted. \nWhen called from a widget function as ‘bracketed-paste name‘, the pasted text is assigned to the variable name and no other processing is done. \nSee also the zle_bracketed_paste parameter. \nvi-cmd-mode (^X^V) (unbound) (^[) \nEnter command mode; that is, select the ‘vicmd’ keymap. Yes, this is bound by default in emacs mode. \nvi-caps-lock-panic \nHang until any lowercase key is pressed. This is for vi users without the mental capacity to keep track of their caps lock key (like the author). \nclear-screen (^L ESC-^L) (^L) (^L) \nClear the screen and redraw the prompt. \ndeactivate-region \nMake the current region inactive. This disables vim-style visual selection mode if it is active. \ndescribe-key-briefly \nReads a key sequence, then prints the function bound to that sequence. \nexchange-point-and-mark (^X^X) (unbound) (unbound) \nExchange the cursor position (point) with the position of the mark. Unless a negative numeric argument is given, the region between point and mark is activated so that it can be highlighted. If a zero numeric argument is given, the region is activated but point and mark are not swapped. \nexecute-named-cmd (ESC-x) (:) (unbound) \nRead the name of an editor command and execute it. Aliasing this widget with ‘zle -A’ or replacing it with ‘zle -N’ has no effect when interpreting key bindings, but ‘zle execute-named-cmd’ will invoke such an alias or replacement. \nA restricted set of editing functions is available in the mini-buffer. Keys are looked up in the special command keymap, and if not found there in the main keymap. An interrupt signal, as defined by the stty setting, will abort the function. Note that the following always perform the same task within the executed-named-cmd environment and cannot be replaced by user defined widgets, nor can the set of functions be extended. The allowed functions are: backward-delete-char, vi-backward-delete-char, clear-screen, redisplay, quoted-insert, vi-quoted-insert, backward-kill-word, vi-backward-kill-word, kill-whole-line, vi-kill-line, backward-kill-line, list-choices, delete-char-or-list, complete-word, accept-line, expand-or-complete and expand-or-complete-prefix. \nkill-region kills the last word, and vi-cmd-mode is treated the same as accept-line. The space and tab characters, if not bound to one of these functions, will complete the name and then list the possibilities if the AUTO_LIST option is set. Any other character that is not bound to self-insert or self-insert-unmeta will beep and be ignored. The bindings of the current insert mode will be used. \nCurrently this command may not be redefined or called by name. \nexecute-last-named-cmd (ESC-z) (unbound) (unbound) \nRedo the last function executed with execute-named-cmd. \nLike execute-named-cmd, this command may not be redefined, but it may be called by name. \nget-line (ESC-G ESC-g) (unbound) (unbound) \nPop the top line off the buffer stack and insert it at the cursor position. \npound-insert (unbound) (#) (unbound) \nIf there is no # character at the beginning of the buffer, add one to the beginning of each line. If there is one, remove a # from each line that has one. In either case, accept the current line. The INTERACTIVE_COMMENTS option must be set for this to have any usefulness. \nvi-pound-insert \nIf there is no # character at the beginning of the current line, add one. If there is one, remove it. The INTERACTIVE_COMMENTS option must be set for this to have any usefulness. \npush-input \nPush the entire current multiline construct onto the buffer stack and return to the top-level (PS1) prompt. If the current parser construct is only a single line, this is exactly like push-line. Next time the editor starts up or is popped with get-line, the construct will be popped off the top of the buffer stack and loaded into the editing buffer. \npush-line (^Q ESC-Q ESC-q) (unbound) (unbound) \nPush the current buffer onto the buffer stack and clear the buffer. Next time the editor starts up, the buffer will be popped off the top of the buffer stack and loaded into the editing buffer. \npush-line-or-edit \nAt the top-level (PS1) prompt, equivalent to push-line. At a secondary (PS2) prompt, move the entire current multiline construct into the editor buffer. The latter is equivalent to push-input followed by get-line. \nread-command \nOnly useful from a user-defined widget. A keystroke is read just as in normal operation, but instead of the command being executed the name of the command that would be executed is stored in the shell parameter REPLY. This can be used as the argument of a future zle command. If the key sequence is not bound, status 1 is returned; typically, however, REPLY is set to undefined-key to indicate a useless key sequence. \nrecursive-edit \nOnly useful from a user-defined widget. At this point in the function, the editor regains control until one of the standard widgets which would normally cause zle to exit (typically an accept-line caused by hitting the return key) is executed. Instead, control returns to the user-defined widget. The status returned is non-zero if the return was caused by an error, but the function still continues executing and hence may tidy up. This makes it safe for the user-defined widget to alter the command line or key bindings temporarily. \nThe following widget, caps-lock, serves as an example. \nself-insert-ucase() {\n  LBUFFER+=${(U)KEYS[-1]}\n}\n\ninteger stat\n\nzle -N self-insert self-insert-ucase\nzle -A caps-lock save-caps-lock\nzle -A accept-line caps-lock\n\nzle recursive-edit\nstat=$?\n\nzle -A .self-insert self-insert\nzle -A save-caps-lock caps-lock\nzle -D save-caps-lock\n\n(( stat )) && zle send-break\n\nreturn $stat\nThis causes typed letters to be inserted capitalised until either accept-line (i.e. typically the return key) is typed or the caps-lock widget is invoked again; the later is handled by saving the old definition of caps-lock as save-caps-lock and then rebinding it to invoke accept-line. Note that an error from the recursive edit is detected as a non-zero return status and propagated by using the send-break widget. \nredisplay (unbound) (^R) (^R) \nRedisplays the edit buffer. \nreset-prompt (unbound) (unbound) (unbound) \nForce the prompts on both the left and right of the screen to be re-expanded, then redisplay the edit buffer. This reflects changes both to the prompt variables themselves and changes in the expansion of the values (for example, changes in time or directory, or changes to the value of variables referred to by the prompt). \nOtherwise, the prompt is only expanded each time zle starts, and when the display has been interrupted by output from another part of the shell (such as a job notification) which causes the command line to be reprinted. \nreset-prompt doesn’t alter the special parameter LASTWIDGET. \nsend-break (^G ESC-^G) (unbound) (unbound) \nAbort the current editor function, e.g. execute-named-command, or the editor itself, e.g. if you are in vared. Otherwise abort the parsing of the current line; in this case the aborted line is available in the shell variable ZLE_LINE_ABORTED. If the editor is aborted from within vared, the variable ZLE_VARED_ABORTED is set. \nrun-help (ESC-H ESC-h) (unbound) (unbound) \nPush the buffer onto the buffer stack, and execute the command ‘run-help cmd’, where cmd is the current command. run-help is normally aliased to man. \nvi-set-buffer (unbound) (\") (unbound) \nSpecify a buffer to be used in the following command. There are 37 buffers that can be specified: the 26 ‘named’ buffers \"a to \"z, the ‘yank’ buffer \"0, the nine ‘queued’ buffers \"1 to \"9 and the ‘black hole’ buffer \"_. The named buffers can also be specified as \"A to \"Z. \nWhen a buffer is specified for a cut, change or yank command, the text concerned replaces the previous contents of the specified buffer. If a named buffer is specified using a capital, the newly cut text is appended to the buffer instead of overwriting it. When using the \"_ buffer, nothing happens. This can be useful for deleting text without affecting any buffers. \nIf no buffer is specified for a cut or change command, \"1 is used, and the contents of \"1 to \"8 are each shifted along one buffer; the contents of \"9 is lost. If no buffer is specified for a yank command, \"0 is used. Finally, a paste command without a specified buffer will paste the text from the most recent command regardless of any buffer that might have been used with that command. \nWhen called from a widget function by the zle command, the buffer can optionally be specified with an argument. For example, \nvi-set-mark (unbound) (m) (unbound) \nSet the specified mark at the cursor position. \nset-mark-command (^@) (unbound) (unbound) \nSet the mark at the cursor position. If called with a negative numeric argument, do not set the mark but deactivate the region so that it is no longer highlighted (it is still usable for other purposes). Otherwise the region is marked as active. \nspell-word (ESC-$ ESC-S ESC-s) (unbound) (unbound) \nAttempt spelling correction on the current word. \nsplit-undo \nBreaks the undo sequence at the current change. This is useful in vi mode as changes made in insert mode are coalesced on entering command mode. Similarly, undo will normally revert as one all the changes made by a user-defined widget. \nundefined-key \nThis command is executed when a key sequence that is not bound to any command is typed. By default it beeps. \nundo (^_ ^Xu ^X^U) (u) (unbound) \nIncrementally undo the last text modification. When called from a user-defined widget, takes an optional argument indicating a previous state of the undo history as returned by the UNDO_CHANGE_NO variable; modifications are undone until that state is reached, subject to any limit imposed by the UNDO_LIMIT_NO variable. \nNote that when invoked from vi command mode, the full prior change made in insert mode is reverted, the changes having been merged when command mode was selected. \nredo (unbound) (^R) (unbound) \nIncrementally redo undone text modifications. \nvi-undo-change (unbound) (unbound) (unbound) \nUndo the last text modification. If repeated, redo the modification. \nvisual-mode (unbound) (v) (unbound) \nToggle vim-style visual selection mode. If line-wise visual mode is currently enabled then it is changed to being character-wise. If used following an operator, it forces the subsequent movement command to be treated as a character-wise movement. \nvisual-line-mode (unbound) (V) (unbound) \nToggle vim-style line-wise visual selection mode. If character-wise visual mode is currently enabled then it is changed to being line-wise. If used following an operator, it forces the subsequent movement command to be treated as a line-wise movement. \nwhat-cursor-position (^X=) (ga) (unbound) \nPrint the character under the cursor, its code as an octal, decimal and hexadecimal number, the current cursor position within the buffer and the column of the cursor in the current line. \nwhere-is \nRead the name of an editor command and print the listing of key sequences that invoke the specified command. A restricted set of editing functions is available in the mini-buffer. Keys are looked up in the special command keymap, and if not found there in the main keymap. \nwhich-command (ESC-?) (unbound) (unbound) \nPush the buffer onto the buffer stack, and execute the command ‘which-command cmd’. where cmd is the current command. which-command is normally aliased to whence. \nvi-digit-or-beginning-of-line (unbound) (0) (unbound) \nIf the last command executed was a digit as part of an argument, continue the argument. Otherwise, execute vi-beginning-of-line. \n18.6.7 Text Objects\nText objects are commands that can be used to select a block of text according to some criteria. They are a feature of the vim text editor and so are primarily intended for use with vi operators or from visual selection mode. However, they can also be used from vi-insert or emacs mode. Key bindings listed below apply to the viopp and visual keymaps. \nselect-a-blank-word (aW) \nSelect a word including adjacent blanks, where a word is defined as a series of non-blank characters. With a numeric argument, multiple words will be selected. \nselect-a-shell-word (aa) \nSelect the current command argument applying the normal rules for quoting. \nselect-a-word (aw) \nSelect a word including adjacent blanks, using the normal vi-style word definition. With a numeric argument, multiple words will be selected. \nselect-in-blank-word (iW) \nSelect a word, where a word is defined as a series of non-blank characters. With a numeric argument, multiple words will be selected. \nselect-in-shell-word (ia) \nSelect the current command argument applying the normal rules for quoting. If the argument begins and ends with matching quote characters, these are not included in the selection. \nselect-in-word (iw) \nSelect a word, using the normal vi-style word definition. With a numeric argument, multiple words will be selected. \n18.7 Character Highlighting\nThe line editor has the ability to highlight characters or regions of the line that have a particular significance. This is controlled by the array parameter zle_highlight, if it has been set by the user. \nIf the parameter contains the single entry none all highlighting is turned off. Note the parameter is still expected to be an array. \nOtherwise each entry of the array should consist of a word indicating a context for highlighting, then a colon, then a comma-separated list of the types of highlighting to apply in that context. \nThe contexts available for highlighting are the following: \ndefault \nAny text within the command line not affected by any other highlighting. Text outside the editable area of the command line is not affected. \nisearch \nWhen one of the incremental history search widgets is active, the area of the command line matched by the search string or pattern. \nregion \nThe currently selected text. In emacs terminology, this is referred to as the region and is bounded by the cursor (point) and the mark. The region is only highlighted if it is active, which is the case after the mark is modified with set-mark-command or exchange-point-and-mark. Note that whether or not the region is active has no effect on its use within emacs style widgets, it simply determines whether it is highlighted. In vi mode, the region corresponds to selected text in visual mode. \nspecial \nIndividual characters that have no direct printable representation but are shown in a special manner by the line editor. These characters are described below. \nsuffix \nThis context is used in completion for characters that are marked as suffixes that will be removed if the completion ends at that point, the most obvious example being a slash (/) after a directory name. Note that suffix removal is configurable; the circumstances under which the suffix will be removed may differ for different completions. \npaste \nFollowing a command to paste text, the characters that were inserted. \nWhen region_highlight is set, the contexts that describe a region — isearch, region, suffix, and paste — are applied first, then region_highlight is applied, then the remaining zle_highlight contexts are applied. If a particular character is affected by multiple specifications, the last specification wins. \nzle_highlight may contain additional fields for controlling how terminal sequences to change colours are output. Each of the following is followed by a colon and a string in the same form as for key bindings. This will not be necessary for the vast majority of terminals as the defaults shown in parentheses are widely used. \nfg_start_code (\\e[3) \nThe start of the escape sequence for the foreground colour. This is followed by one to three ASCII digits representing the colour. Only used for palette colors, i.e. not 24-bit colors specified via a color triplet. \nfg_default_code (9) \nThe number to use instead of the colour to reset the default foreground colour. \nfg_end_code (m) \nThe end of the escape sequence for the foreground colour. \nbg_start_code (\\e[4) \nThe start of the escape sequence for the background colour. See fg_start_code above. \nbg_default_code (9) \nThe number to use instead of the colour to reset the default background colour. \nbg_end_code (m) \nThe end of the escape sequence for the background colour. \nThe available types of highlighting are the following. Note that not all types of highlighting are available on all terminals: \nnone \nNo highlighting is applied to the given context. It is not useful for this to appear with other types of highlighting; it is used to override a default. \nfg=colour \nThe foreground colour should be set to colour, a decimal integer, the name of one of the eight most widely-supported colours or as a ‘#’ followed by an RGB triplet in hexadecimal format. \nNot all terminals support this and, of those that do, not all provide facilities to test the support, hence the user should decide based on the terminal type. Most terminals support the colours black, red, green, yellow, blue, magenta, cyan and white, which can be set by name. In addition. default may be used to set the terminal’s default foreground colour. Abbreviations are allowed; b or bl selects black. Some terminals may generate additional colours if the bold attribute is also present. \nOn recent terminals and on systems with an up-to-date terminal database the number of colours supported may be tested by the command ‘echotc Co’; if this succeeds, it indicates a limit on the number of colours which will be enforced by the line editor. The number of colours is in any case limited to 256 (i.e. the range 0 to 255). \nSome modern terminal emulators have support for 24-bit true colour (16 million colours). In this case, the hex triplet format can be used. This consists of a ‘#’ followed by either a three or six digit hexadecimal number describing the red, green and blue components of the colour. Hex triplets can also be used with 88 and 256 colour terminals via the zsh/nearcolor module (see The zsh/nearcolor Module). \nColour is also known as color. \nbg=colour \nThe background colour should be set to colour. This works similarly to the foreground colour, except the background is not usually affected by the bold attribute. \nbold \nThe characters in the given context are shown in a bold font. Not all terminals distinguish bold fonts. \nstandout \nThe characters in the given context are shown in the terminal’s standout mode. The actual effect is specific to the terminal; on many terminals it is inverse video. On some such terminals, where the cursor does not blink it appears with standout mode negated, making it less than clear where the cursor actually is. On such terminals one of the other effects may be preferable for highlighting the region and matched search string. \nunderline \nThe characters in the given context are shown underlined. Some terminals show the foreground in a different colour instead; in this case whitespace will not be highlighted. \nThe characters described above as ‘special’ are as follows. The formatting described here is used irrespective of whether the characters are highlighted: \nASCII control characters \nControl characters in the ASCII range are shown as ‘^’ followed by the base character. \nUnprintable multibyte characters \nThis item applies to control characters not in the ASCII range, plus other characters as follows. If the MULTIBYTE option is in effect, multibyte characters not in the ASCII character set that are reported as having zero width are treated as combining characters when the option COMBINING_CHARS is on. If the option is off, or if a character appears where a combining character is not valid, the character is treated as unprintable. \nUnprintable multibyte characters are shown as a hexadecimal number between angle brackets. The number is the code point of the character in the wide character set; this may or may not be Unicode, depending on the operating system. \nInvalid multibyte characters \nIf the MULTIBYTE option is in effect, any sequence of one or more bytes that does not form a valid character in the current character set is treated as a series of bytes each shown as a special character. This case can be distinguished from other unprintable characters as the bytes are represented as two hexadecimal digits between angle brackets, as distinct from the four or eight digits that are used for unprintable characters that are nonetheless valid in the current character set. \nNot all systems support this: for it to work, the system’s representation of wide characters must be code values from the Universal Character Set, as defined by IS0 10646 (also known as Unicode). \nWrapped double-width characters \nWhen a double-width character appears in the final column of a line, it is instead shown on the next line. The empty space left in the original position is highlighted as a special character. \nIf zle_highlight is not set or no value applies to a particular context, the defaults applied are equivalent to \nzle_highlight=(region:standout special:standout\nsuffix:bold isearch:underline paste:standout)\ni.e. both the region and special characters are shown in standout mode. \nWithin widgets, arbitrary regions may be highlighted by setting the special array parameter region_highlight; see Zle Widgets. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Line-Editor-html-Zsh-Line-Editor-hdesy.html",
  "markdown": "# zsh: 18 Zsh Line Editor\n\n* * *\n\n## 18.1 Description\n\nIf the ZLE option is set (which it is by default in interactive shells) and the shell input is attached to the terminal, the user is able to edit command lines.\n\nThere are two display modes. The first, multiline mode, is the default. It only works if the TERM parameter is set to a valid terminal type that can move the cursor up. The second, single line mode, is used if TERM is invalid or incapable of moving the cursor up, or if the SINGLE\\_LINE\\_ZLE option is set. This mode is similar to ksh, and uses no termcap sequences. If TERM is \"emacs\", the ZLE option will be unset by default.\n\nThe parameters BAUD, COLUMNS, and LINES are also used by the line editor. See [Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell).\n\nThe parameter zle\\_highlight is also used by the line editor; see [Character Highlighting](#Character-Highlighting). Highlighting of special characters and the region between the cursor and the mark (as set with set-mark-command in Emacs mode, or by visual-mode in Vi mode) is enabled by default; consult this reference for more information. Irascible conservatives will wish to know that all highlighting may be disabled by the following setting:\n\nIn many places, references are made to the numeric argument. This can by default be entered in emacs mode by holding the alt key and typing a number, or pressing escape before each digit, and in vi command mode by typing the number before entering a command. Generally the numeric argument causes the next command entered to be repeated the specified number of times, unless otherwise noted below; this is implemented by the digit-argument widget. See also [Arguments](#Arguments)for some other ways the numeric argument can be modified.\n\n* * *\n\n## 18.2 Keymaps\n\nA keymap in ZLE contains a set of bindings between key sequences and ZLE commands. The empty key sequence cannot be bound.\n\nThere can be any number of keymaps at any time, and each keymap has one or more names. If all of a keymap’s names are deleted, it disappears. bindkey can be used to manipulate keymap names.\n\nInitially, there are eight keymaps:\n\nemacs\n\nEMACS emulation\n\nviins\n\nvi emulation - insert mode\n\nvicmd\n\nvi emulation - command mode\n\nviopp\n\nvi emulation - operator pending\n\nvisual\n\nvi emulation - selection active\n\nisearch\n\nincremental search mode\n\ncommand\n\nread a command name\n\n.safe\n\nfallback keymap\n\nThe ‘.safe’ keymap is special. It can never be altered, and the name can never be removed. However, it can be linked to other names, which can be removed. In the future other special keymaps may be added; users should avoid using names beginning with ‘.’ for their own keymaps.\n\nIn addition to these names, either ‘emacs’ or ‘viins’ is also linked to the name ‘main’. If one of the VISUAL or EDITOR environment variables contain the string ‘vi’ when the shell starts up then it will be ‘viins’, otherwise it will be ‘emacs’. bindkey’s \\-e and \\-v options provide a convenient way to override this default choice.\n\nWhen the editor starts up, it will select the ‘main’ keymap. If that keymap doesn’t exist, it will use ‘.safe’ instead.\n\nIn the ‘.safe’ keymap, each single key is bound to self-insert, except for ^J (line feed) and ^M (return) which are bound to accept-line. This is deliberately not pleasant to use; if you are using it, it means you deleted the main keymap, and you should put it back.\n\n* * *\n\n### 18.2.1 Reading Commands\n\nWhen ZLE is reading a command from the terminal, it may read a sequence that is bound to some command and is also a prefix of a longer bound string. In this case ZLE will wait a certain time to see if more characters are typed, and if not (or they don’t match any longer string) it will execute the binding. This timeout is defined by the KEYTIMEOUT parameter; its default is 0.4 sec. There is no timeout if the prefix string is not itself bound to a command.\n\nThe key timeout is also applied when ZLE is reading the bytes from a multibyte character string when it is in the appropriate mode. (This requires that the shell was compiled with multibyte mode enabled; typically also the locale has characters with the UTF-8 encoding, although any multibyte encoding known to the operating system is supported.) If the second or a subsequent byte is not read within the timeout period, the shell acts as if ? were typed and resets the input state.\n\nAs well as ZLE commands, key sequences can be bound to other strings, by using ‘bindkey -s’. When such a sequence is read, the replacement string is pushed back as input, and the command reading process starts again using these fake keystrokes. This input can itself invoke further replacement strings, but in order to detect loops the process will be stopped if there are twenty such replacements without a real command being read.\n\nA key sequence typed by the user can be turned into a command name for use in user-defined widgets with the read-command widget, described in [Miscellaneous](#Miscellaneous) below.\n\n* * *\n\n### 18.2.2 Local Keymaps\n\nWhile for normal editing a single keymap is used exclusively, in many modes a local keymap allows for some keys to be customised. For example, in an incremental search mode, a binding in the isearch keymap will override a binding in the main keymap but all keys that are not overridden can still be used.\n\nIf a key sequence is defined in a local keymap, it will hide a key sequence in the global keymap that is a prefix of that sequence. An example of this occurs with the binding of iw in viopp as this hides the binding of i in vicmd. However, a longer sequence in the global keymap that shares the same prefix can still apply so for example the binding of ^Xa in the global keymap will be unaffected by the binding of ^Xb in the local keymap.\n\n* * *\n\n## 18.3 Zle Builtins\n\nThe ZLE module contains three related builtin commands. The bindkey command manipulates keymaps and key bindings; the vared command invokes ZLE on the value of a shell parameter; and the zle command manipulates editing widgets and allows command line access to ZLE commands from within shell functions.\n\nbindkey \\[ options \\] \\-l \\[ \\-L \\] \\[ keymap ... \\]\n\nbindkey \\[ options \\] \\-d\n\nbindkey \\[ options \\] \\-D keymap ...\n\nbindkey \\[ options \\] \\-A old-keymap new-keymap\n\nbindkey \\[ options \\] \\-N new-keymap \\[ old-keymap \\]\n\nbindkey \\[ options \\] \\-m\n\nbindkey \\[ options \\] \\-r in-string ...\n\nbindkey \\[ options \\] \\-s in-string out-string ...\n\nbindkey \\[ options \\] in-string command ...\n\nbindkey \\[ options \\] \\[ in-string \\]\n\nbindkey’s options can be divided into three categories: keymap selection for the current command, operation selection, and others. The keymap selection options are:\n\n\\-e\n\nSelects keymap ‘emacs’ for any operations by the current command, and also links ‘emacs’ to ‘main’ so that it is selected by default the next time the editor starts.\n\n\\-v\n\nSelects keymap ‘viins’ for any operations by the current command, and also links ‘viins’ to ‘main’ so that it is selected by default the next time the editor starts.\n\n\\-a\n\nSelects keymap ‘vicmd’ for any operations by the current command.\n\n\\-M keymap\n\nThe keymap specifies a keymap name that is selected for any operations by the current command.\n\nIf a keymap selection is required and none of the options above are used, the ‘main’ keymap is used. Some operations do not permit a keymap to be selected, namely:\n\n\\-l\n\nList all existing keymap names; if any arguments are given, list just those keymaps.\n\nIf the \\-L option is also used, list in the form of bindkey commands to create or link the keymaps. ‘bindkey -lL main’ shows which keymap is linked to ‘main’, if any, and hence if the standard emacs or vi emulation is in effect. This option does not show the .safe keymap because it cannot be created in that fashion; however, neither is ‘bindkey -lL .safe’ reported as an error, it simply outputs nothing.\n\n\\-d\n\nDelete all existing keymaps and reset to the default state.\n\n\\-D keymap ...\n\nDelete the named keymaps.\n\n\\-A old-keymap new-keymap\n\nMake the new-keymap name an alias for old-keymap, so that both names refer to the same keymap. The names have equal standing; if either is deleted, the other remains. If there is already a keymap with the new-keymap name, it is deleted.\n\n\\-N new-keymap \\[ old-keymap \\]\n\nCreate a new keymap, named new-keymap. If a keymap already has that name, it is deleted. If an old-keymap name is given, the new keymap is initialized to be a duplicate of it, otherwise the new keymap will be empty.\n\nTo use a newly created keymap, it should be linked to main. Hence the sequence of commands to create and use a new keymap ‘mymap’ initialized from the emacs keymap (which remains unchanged) is:\n\nbindkey -N mymap emacs\nbindkey -A mymap main\n\nNote that while ‘bindkey -A newmap main’ will work when newmap is emacs or viins, it will not work for vicmd, as switching from vi insert to command mode becomes impossible.\n\nThe following operations act on the ‘main’ keymap if no keymap selection option was given:\n\n\\-m\n\nAdd the built-in set of meta-key bindings to the selected keymap. Only keys that are unbound or bound to self-insert are affected.\n\n\\-r in-string ...\n\nUnbind the specified in-strings in the selected keymap. This is exactly equivalent to binding the strings to undefined-key.\n\nWhen \\-R is also used, interpret the in-strings as ranges.\n\nWhen \\-p is also used, the in-strings specify prefixes. Any binding that has the given in-string as a prefix, not including the binding for the in-string itself, if any, will be removed. For example,\n\nwill remove all bindings in the vi-insert keymap beginning with an escape character (probably cursor keys), but leave the binding for the escape character itself (probably vi-cmd-mode). This is incompatible with the option \\-R.\n\n\\-s in-string out-string ...\n\nBind each in-string to each out-string. When in-string is typed, out-string will be pushed back and treated as input to the line editor. When \\-R is also used, interpret the in-strings as ranges.\n\nNote that both in-string and out-string are subject to the same form of interpretation, as described below.\n\nin-string command ...\n\nBind each in-string to each command. When \\-R is used, interpret the in-strings as ranges.\n\n\\[ in-string \\]\n\nList key bindings. If an in-string is specified, the binding of that string in the selected keymap is displayed. Otherwise, all key bindings in the selected keymap are displayed. (As a special case, if the \\-e or \\-v option is used alone, the keymap is _not_ displayed - the implicit linking of keymaps is the only thing that happens.)\n\nWhen the option \\-p is used, the in-string must be present. The listing shows all bindings which have the given key sequence as a prefix, not including any bindings for the key sequence itself.\n\nWhen the \\-L option is used, the list is in the form of bindkey commands to create the key bindings.\n\nWhen the \\-R option is used as noted above, a valid range consists of two characters, with an optional ‘\\-’ between them. All characters between the two specified, inclusive, are bound as specified.\n\nFor either in-string or out-string, the following escape sequences are recognised:\n\n\\\\a\n\nbell character\n\n\\\\b\n\nbackspace\n\n\\\\e, \\\\E\n\nescape\n\n\\\\f\n\nform feed\n\n\\\\n\n\nlinefeed (newline)\n\n\\\\r\n\ncarriage return\n\n\\\\t\n\nhorizontal tab\n\n\\\\v\n\nvertical tab\n\n\\\\NNN\n\ncharacter code in octal\n\n\\\\xNN\n\ncharacter code in hexadecimal\n\n\\\\uNNNN\n\nunicode character code in hexadecimal\n\n\\\\UNNNNNNNN\n\nunicode character code in hexadecimal\n\n\\\\M\\[\\-\\]X\n\ncharacter with meta bit set\n\n\\\\C\\[\\-\\]X\n\ncontrol character\n\n^X\n\ncontrol character\n\nIn all other cases, ‘\\\\’ escapes the following character. Delete is written as ‘^?’. Note that ‘\\\\M^?’ and ‘^\\\\M?’ are not the same, and that (unlike emacs), the bindings ‘\\\\M-X’ and ‘\\\\eX’ are entirely distinct, although they are initialized to the same bindings by ‘bindkey -m’.\n\nvared \\[ \\-Aacghe \\] \\[ \\-p prompt \\] \\[ \\-r rprompt \\]\n\n      \\[ \\-M main-keymap \\] \\[ \\-m vicmd-keymap \\]\n\n      \\[ \\-i init-widget \\] \\[ \\-f finish-widget \\]\n\n      \\[ \\-t tty \\] name\n\nThe value of the parameter name is loaded into the edit buffer, and the line editor is invoked. When the editor exits, name is set to the string value returned by the editor. When the \\-c flag is given, the parameter is created if it doesn’t already exist. The \\-a flag may be given with \\-c to create an array parameter, or the \\-A flag to create an associative array. If the type of an existing parameter does not match the type to be created, the parameter is unset and recreated. The \\-g flag may be given to suppress warnings from the WARN\\_CREATE\\_GLOBAL and WARN\\_NESTED\\_VAR options.\n\nIf an array or array slice is being edited, separator characters as defined in $IFS will be shown quoted with a backslash, as will backslashes themselves. Conversely, when the edited text is split into an array, a backslash quotes an immediately following separator character or backslash; no other special handling of backslashes, or any handling of quotes, is performed.\n\nIndividual elements of existing array or associative array parameters may be edited by using subscript syntax on name. New elements are created automatically, even without \\-c.\n\nIf the \\-p flag is given, the following string will be taken as the prompt to display at the left. If the \\-r flag is given, the following string gives the prompt to display at the right. If the \\-h flag is specified, the history can be accessed from ZLE. If the \\-e flag is given, typing ^D (Control-D) on an empty line causes vared to exit immediately with a non-zero return value.\n\nThe \\-M option gives a keymap to link to the main keymap during editing, and the \\-m option gives a keymap to link to the vicmd keymap during editing. For vi-style editing, this allows a pair of keymaps to override viins and vicmd. For emacs-style editing, only \\-M is normally needed but the \\-m option may still be used. On exit, the previous keymaps will be restored.\n\nVared calls the usual ‘zle-line-init’ and ‘zle-line-finish’ hooks before and after it takes control. Using the \\-i and \\-f options, it is possible to replace these with other custom widgets.\n\nIf ‘\\-t tty’ is given, tty is the name of a terminal device to be used instead of the default /dev/tty. If tty does not refer to a terminal an error is reported.\n\nzle\n\nzle \\-l \\[ \\-L | \\-a \\] \\[ string ... \\]\n\nzle \\-D widget ...\n\nzle \\-A old-widget new-widget\n\nzle \\-N widget \\[ function \\]\n\nzle \\-f flag \\[ flag... \\]\n\nzle \\-C widget completion-widget function\n\nzle \\-R \\[ \\-c \\] \\[ display-string \\] \\[ string ... \\]\n\nzle \\-M string\n\nzle \\-U string\n\nzle \\-K keymap\n\nzle \\-F \\[ \\-L | \\-w \\] \\[ fd \\[ handler \\] \\]\n\nzle \\-I\n\nzle \\-T \\[ tc function | \\-r tc | \\-L \\]\n\nzle widget \\[ \\-n num \\] \\[ \\-f flag \\] \\[ \\-Nw \\] \\[ \\-K keymap \\] args ...\n\nThe zle builtin performs a number of different actions concerning ZLE.\n\nWith no options and no arguments, only the return status will be set. It is zero if ZLE is currently active and widgets could be invoked using this builtin command and non-zero otherwise. Note that even if non-zero status is returned, zle may still be active as part of the completion system; this does not allow direct calls to ZLE widgets.\n\nOtherwise, which operation it performs depends on its options:\n\n\\-l \\[ \\-L | \\-a \\] \\[ string \\]\n\nList all existing user-defined widgets. If the \\-L option is used, list in the form of zle commands to create the widgets.\n\nWhen combined with the \\-a option, all widget names are listed, including the builtin ones. In this case the \\-L option is ignored.\n\nIf at least one string is given, and \\-a is present or \\-L is not used, nothing will be printed. The return status will be zero if all strings are names of existing widgets and non-zero if at least one string is not a name of a defined widget. If \\-a is also present, all widget names are used for the comparison including builtin widgets, else only user-defined widgets are used.\n\nIf at least one string is present and the \\-L option is used, user-defined widgets matching any string are listed in the form of zle commands to create the widgets.\n\n\\-D widget ...\n\nDelete the named widgets.\n\n\\-A old-widget new-widget\n\nMake the new-widget name an alias for old-widget, so that both names refer to the same widget. The names have equal standing; if either is deleted, the other remains. If there is already a widget with the new-widget name, it is deleted.\n\n\\-N widget \\[ function \\]\n\nCreate a user-defined widget. If there is already a widget with the specified name, it is overwritten. When the new widget is invoked from within the editor, the specified shell function is called. If no function name is specified, it defaults to the same name as the widget. For further information, see [Zle Widgets](#Zle-Widgets).\n\n\\-f flag \\[ flag... \\]\n\nSet various flags on the running widget. Possible values for flag are:\n\nyank for indicating that the widget has yanked text into the buffer. If the widget is wrapping an existing internal widget, no further action is necessary, but if it has inserted the text manually, then it should also take care to set YANK\\_START and YANK\\_END correctly. yankbefore does the same but is used when the yanked text appears after the cursor.\n\nkill for indicating that text has been killed into the cutbuffer. When repeatedly invoking a kill widget, text is appended to the cutbuffer instead of replacing it, but when wrapping such widgets, it is necessary to call ‘zle -f kill’ to retain this effect.\n\nvichange for indicating that the widget represents a vi change that can be repeated as a whole with ‘vi-repeat-change’. The flag should be set early in the function before inspecting the value of NUMERIC or invoking other widgets. This has no effect for a widget invoked from insert mode. If insert mode is active when the widget finishes, the change extends until next returning to command mode.\n\n\\-C widget completion-widget function\n\nCreate a user-defined completion widget named widget. The completion widget will behave like the built-in completion-widget whose name is given as completion-widget. To generate the completions, the shell function function will be called. For further information, see [Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets).\n\n\\-R \\[ \\-c \\] \\[ display-string \\] \\[ string ... \\]\n\nRedisplay the command line. If a display-string is given and not empty, this is shown in the status line (immediately below the line being edited).\n\nIf the optional strings are given they are listed below the prompt in the same way as completion lists are printed. If no strings are given but the \\-c option is used such a list is cleared.\n\nNote that immediately after returning from running widgets, the command line will be redisplayed and the strings displayed will be erased. Therefore, this option is only useful for widgets that do not exit immediately after using it.\n\nThis command can safely be called outside user defined widgets; if zle is active, the display will be refreshed, while if zle is not active, the command has no effect. In this case there will usually be no other arguments.\n\nThe status is zero if zle was active, else one.\n\n\\-M string\n\nAs with the \\-R option, the string will be displayed below the command line; unlike the \\-R option, the string will not be put into the status line but will instead be printed normally below the prompt. This means that the string will still be displayed after the widget returns (until it is overwritten by subsequent commands).\n\n\\-U string\n\nThis pushes the characters in the string onto the input stack of ZLE. After the widget currently executed finishes ZLE will behave as if the characters in the string were typed by the user.\n\nAs ZLE uses a stack, if this option is used repeatedly the last string pushed onto the stack will be processed first. However, the characters in each string will be processed in the order in which they appear in the string.\n\n\\-K keymap\n\nSelects the keymap named keymap. An error message will be displayed if there is no such keymap.\n\nThis keymap selection affects the interpretation of following keystrokes within this invocation of ZLE. Any following invocation (e.g., the next command line) will start as usual with the ‘main’ keymap selected.\n\n\\-F \\[ \\-L | \\-w \\] \\[ fd \\[ handler \\] \\]\n\nOnly available if your system supports one of the ‘poll’ or ‘select’ system calls; most modern systems do.\n\nInstalls handler (the name of a shell function) to handle input from file descriptor fd. Installing a handler for an fd which is already handled causes the existing handler to be replaced. Any number of handlers for any number of readable file descriptors may be installed. Note that zle makes no attempt to check whether this fd is actually readable when installing the handler. The user must make their own arrangements for handling the file descriptor when zle is not active.\n\nWhen zle is attempting to read data, it will examine both the terminal and the list of handled fd’s. If data becomes available on a handled fd, zle calls handler with the fd which is ready for reading as the first argument. Under normal circumstances this is the only argument, but if an error was detected, a second argument provides details: ‘hup’ for a disconnect, ‘nval’ for a closed or otherwise invalid descriptor, or ‘err’ for any other condition. Systems that support only the ‘select’ system call always use ‘err’.\n\nIf the option \\-w is also given, the handler is instead a line editor widget, typically a shell function made into a widget using ‘zle -N’. In that case handler can use all the facilities of zle to update the current editing line. Note, however, that as handling fd takes place at a low level changes to the display will not automatically appear; the widget should call ‘zle -R’ to force redisplay. As of this writing, widget handlers only support a single argument and thus are never passed a string for error state, so widgets must be prepared to test the descriptor themselves.\n\nIf either type of handler produces output to the terminal, it should call ‘zle -I’ before doing so (see below). Handlers should not attempt to read from the terminal.\n\nIf no handler is given, but an fd is present, any handler for that fd is removed. If there is none, an error message is printed and status 1 is returned.\n\nIf no arguments are given, or the \\-L option is supplied, a list of handlers is printed in a form which can be stored for later execution.\n\nAn fd (but not a handler) may optionally be given with the \\-L option; in this case, the function will list the handler if any, else silently return status 1.\n\nNote that this feature should be used with care. Activity on one of the fd’s which is not properly handled can cause the terminal to become unusable. Removing an fd handler from within a signal trap may cause unpredictable behavior.\n\nHere is a simple example of using this feature. A connection to a remote TCP port is created using the ztcp command; see [The zsh/net/tcp Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fnet_002ftcp-Module). Then a handler is installed which simply prints out any data which arrives on this connection. Note that ‘select’ will indicate that the file descriptor needs handling if the remote side has closed the connection; we handle that by testing for a failed read.\n\nif ztcp pwspc 2811; then\n  tcpfd=$REPLY\n  handler() {\n    zle -I\n    local line\n    if ! read -r line <&$1; then\n      # select marks this fd if we reach EOF,\n      # so handle this specially.\n      print \"\\[Read on fd $1 failed, removing.\\]\" >&2\n      zle -F $1\n      return 1\n    fi\n    print -r - $line\n  }\n  zle -F $tcpfd handler\nfi\n\n\\-I\n\nUnusually, this option is most useful outside ordinary widget functions, though it may be used within if normal output to the terminal is required. It invalidates the current zle display in preparation for output; typically this will be from a trap function. It has no effect if zle is not active. When a trap exits, the shell checks to see if the display needs restoring, hence the following will print output in such a way as not to disturb the line being edited:\n\nTRAPUSR1() {\n  # Invalidate zle display\n  \\[\\[ -o zle \\]\\] && zle -I\n  # Show output\n  print Hello\n}\n\nIn general, the trap function may need to test whether zle is active before using this method (as shown in the example), since the zsh/zle module may not even be loaded; if it is not, the command can be skipped.\n\nIt is possible to call ‘zle -I’ several times before control is returned to the editor; the display will only be invalidated the first time to minimise disruption.\n\nNote that there are normally better ways of manipulating the display from within zle widgets; see, for example, ‘zle -R’ above.\n\nThe returned status is zero if zle was invalidated, even though this may have been by a previous call to ‘zle -I’ or by a system notification. To test if a zle widget may be called at this point, execute zle with no arguments and examine the return status.\n\n\\-T\n\nThis is used to add, list or remove internal transformations on the processing performed by the line editor. It is typically used only for debugging or testing and is therefore of little interest to the general user.\n\n‘zle -T transformation func’ specifies that the given transformation (see below) is effected by shell function func.\n\n‘zle -Tr transformation’ removes the given transformation if it was present (it is not an error if none was).\n\n‘zle -TL’ can be used to list all transformations currently in operation.\n\nCurrently the only transformation is tc. This is used instead of outputting termcap codes to the terminal. When the transformation is in operation the shell function is passed the termcap code that would be output as its first argument; if the operation required a numeric argument, that is passed as a second argument. The function should set the shell variable REPLY to the transformed termcap code. Typically this is used to produce some simply formatted version of the code and optional argument for debugging or testing. Note that this transformation is not applied to other non-printing characters such as carriage returns and newlines.\n\nwidget \\[ \\-n num \\] \\[ \\-f flag \\] \\[ \\-Nw \\] \\[ \\-K keymap \\] args ...\n\nInvoke the specified widget. This can only be done when ZLE is active; normally this will be within a user-defined widget.\n\nWith the options \\-n and \\-N, the current numeric argument will be saved and then restored after the call to widget; ‘\\-n num’ sets the numeric argument temporarily to num, while ‘\\-N’ sets it to the default, i.e. as if there were none.\n\nWith the option \\-K, keymap will be used as the current keymap during the execution of the widget. The previous keymap will be restored when the widget exits.\n\nNormally, calling a widget in this way does not set the special parameter WIDGET and related parameters, so that the environment appears as if the top-level widget called by the user were still active. With the option \\-w, WIDGET and related parameters are set to reflect the widget being executed by the zle call.\n\nNormally, when widget returns the special parameter LASTWIDGET will point to it. This can be inhibited by passing the option \\-f nolast.\n\nAny further arguments will be passed to the widget; note that as standard argument handling is performed, any general argument list should be preceded by \\-\\-. If it is a shell function, these are passed down as positional parameters; for builtin widgets it is up to the widget in question what it does with them. Currently arguments are only handled by the incremental-search commands, the history-search-forward and \\-backward and the corresponding functions prefixed by vi-, and by universal-argument. No error is flagged if the command does not use the arguments, or only uses some of them.\n\nThe return status reflects the success or failure of the operation carried out by the widget, or if it is a user-defined widget the return status of the shell function.\n\nA non-zero return status causes the shell to beep when the widget exits, unless the BEEP options was unset or the widget was called via the zle command. Thus if a user defined widget requires an immediate beep, it should call the beep widget directly.\n\n* * *\n\n## 18.4 Zle Widgets\n\nAll actions in the editor are performed by ‘widgets’. A widget’s job is simply to perform some small action. The ZLE commands that key sequences in keymaps are bound to are in fact widgets. Widgets can be user-defined or built in.\n\nThe standard widgets built into ZLE are listed in [Standard Widgets](#Standard-Widgets). Other built-in widgets can be defined by other modules (see [Zsh Modules](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Zsh-Modules)). Each built-in widget has two names: its normal canonical name, and the same name preceded by a ‘.’. The ‘.’ name is special: it can’t be rebound to a different widget. This makes the widget available even when its usual name has been redefined.\n\nUser-defined widgets are defined using ‘zle -N’, and implemented as shell functions. When the widget is executed, the corresponding shell function is executed, and can perform editing (or other) actions. It is recommended that user-defined widgets should not have names starting with ‘.’.\n\n* * *\n\n## 18.5 User-Defined Widgets\n\nUser-defined widgets, being implemented as shell functions, can execute any normal shell command. They can also run other widgets (whether built-in or user-defined) using the zle builtin command. The standard input of the function is redirected from /dev/null to prevent external commands from unintentionally blocking ZLE by reading from the terminal, but read -k or read -q can be used to read characters. Finally, they can examine and edit the ZLE buffer being edited by reading and setting the special parameters described below.\n\nThese special parameters are always available in widget functions, but are not in any way special outside ZLE. If they have some normal value outside ZLE, that value is temporarily inaccessible, but will return when the widget function exits. These special parameters in fact have local scope, like parameters created in a function using local.\n\nInside completion widgets and traps called while ZLE is active, these parameters are available read-only.\n\nNote that the parameters appear as local to any ZLE widget in which they appear. Hence if it is desired to override them this needs to be done within a nested function:\n\nwidget-function() {\n  # $WIDGET here refers to the special variable\n  # that is local inside widget-function\n  () {\n     # This anonymous nested function allows WIDGET\n     # to be used as a local variable.  The -h\n     # removes the special status of the variable.\n     local -h WIDGET\n  }\n}\n\nBUFFER (scalar)\n\nThe entire contents of the edit buffer. If it is written to, the cursor remains at the same offset, unless that would put it outside the buffer.\n\nBUFFERLINES (integer)\n\nThe number of screen lines needed for the edit buffer currently displayed on screen (i.e. without any changes to the preceding parameters done after the last redisplay); read-only.\n\nCONTEXT (scalar)\n\nThe context in which zle was called to read a line; read-only. One of the values:\n\nstart\n\nThe start of a command line (at prompt PS1).\n\ncont\n\nA continuation to a command line (at prompt PS2).\n\nselect\n\nIn a select loop (at prompt PS3).\n\nvared\n\nEditing a variable in vared.\n\nCURSOR (integer)\n\nThe offset of the cursor, within the edit buffer. This is in the range 0 to $#BUFFER, and is by definition equal to $#LBUFFER. Attempts to move the cursor outside the buffer will result in the cursor being moved to the appropriate end of the buffer.\n\nCUTBUFFER (scalar)\n\nThe last item cut using one of the ‘kill-’ commands; the string which the next yank would insert in the line. Later entries in the kill ring are in the array killring. Note that the command ‘zle copy-region-as-kill string’ can be used to set the text of the cut buffer from a shell function and cycle the kill ring in the same way as interactively killing text.\n\nHISTNO (integer)\n\nThe current history number. Setting this has the same effect as moving up or down in the history to the corresponding history line. An attempt to set it is ignored if the line is not stored in the history. Note this is not the same as the parameter HISTCMD, which always gives the number of the history line being added to the main shell’s history. HISTNO refers to the line being retrieved within zle.\n\nISEARCHMATCH\\_ACTIVE (integer)\n\nISEARCHMATCH\\_START (integer)\n\nISEARCHMATCH\\_END (integer)\n\nISEARCHMATCH\\_ACTIVE indicates whether a part of the BUFFER is currently matched by an incremental search pattern. ISEARCHMATCH\\_START and ISEARCHMATCH\\_END give the location of the matched part and are in the same units as CURSOR. They are only valid for reading when ISEARCHMATCH\\_ACTIVE is non-zero.\n\nAll parameters are read-only.\n\nKEYMAP (scalar)\n\nThe name of the currently selected keymap; read-only.\n\nKEYS (scalar)\n\nThe keys typed to invoke this widget, as a literal string; read-only.\n\nKEYS\\_QUEUED\\_COUNT (integer)\n\nThe number of bytes pushed back to the input queue and therefore available for reading immediately before any I/O is done; read-only. See also PENDING; the two values are distinct.\n\nkillring (array)\n\nThe array of previously killed items, with the most recently killed first. This gives the items that would be retrieved by a yank-pop in the same order. Note, however, that the most recently killed item is in $CUTBUFFER; $killring shows the array of previous entries.\n\nThe default size for the kill ring is eight, however the length may be changed by normal array operations. Any empty string in the kill ring is ignored by the yank-pop command, hence the size of the array effectively sets the maximum length of the kill ring, while the number of non-zero strings gives the current length, both as seen by the user at the command line.\n\nLASTABORTEDSEARCH (scalar)\n\nThe last search string used by an interactive search that was aborted by the user (status 3 returned by the search widget).\n\nLASTSEARCH (scalar)\n\nThe last search string used by an interactive search; read-only. This is set even if the search failed (status 0, 1 or 2 returned by the search widget), but not if it was aborted by the user.\n\nLASTWIDGET (scalar)\n\nThe name of the last widget that was executed; read-only.\n\nLBUFFER (scalar)\n\nThe part of the buffer that lies to the left of the cursor position. If it is assigned to, only that part of the buffer is replaced, and the cursor remains between the new $LBUFFER and the old $RBUFFER.\n\nMARK (integer)\n\nLike CURSOR, but for the mark. With vi-mode operators that wait for a movement command to select a region of text, setting MARK allows the selection to extend in both directions from the initial cursor position.\n\nNUMERIC (integer)\n\nThe numeric argument. If no numeric argument was given, this parameter is unset. When this is set inside a widget function, builtin widgets called with the zle builtin command will use the value assigned. If it is unset inside a widget function, builtin widgets called behave as if no numeric argument was given.\n\nPENDING (integer)\n\nThe number of bytes pending for input, i.e. the number of bytes which have already been typed and can immediately be read. On systems where the shell is not able to get this information, this parameter will always have a value of zero. Read-only. See also KEYS\\_QUEUED\\_COUNT; the two values are distinct.\n\nPREBUFFER (scalar)\n\nIn a multi-line input at the secondary prompt, this read-only parameter contains the contents of the lines before the one the cursor is currently in.\n\nPREDISPLAY (scalar)\n\nText to be displayed before the start of the editable text buffer. This does not have to be a complete line; to display a complete line, a newline must be appended explicitly. The text is reset on each new invocation (but not recursive invocation) of zle.\n\nPOSTDISPLAY (scalar)\n\nText to be displayed after the end of the editable text buffer. This does not have to be a complete line; to display a complete line, a newline must be prepended explicitly. The text is reset on each new invocation (but not recursive invocation) of zle.\n\nRBUFFER (scalar)\n\nThe part of the buffer that lies to the right of the cursor position. If it is assigned to, only that part of the buffer is replaced, and the cursor remains between the old $LBUFFER and the new $RBUFFER.\n\nREGION\\_ACTIVE (integer)\n\nIndicates if the region is currently active. It can be assigned 0 or 1 to deactivate and activate the region respectively. A value of 2 activates the region in line-wise mode with the highlighted text extending for whole lines only; see [Character Highlighting](#Character-Highlighting).\n\nregion\\_highlight (array)\n\nEach element of this array may be set to a string that describes highlighting for an arbitrary region of the command line that will take effect the next time the command line is redisplayed. Highlighting of the non-editable parts of the command line in PREDISPLAY and POSTDISPLAY are possible, but note that the P flag is needed for character indexing to include PREDISPLAY.\n\nEach string consists of the following whitespace-separated parts:\n\n*   Optionally, a ‘P’ to signify that the start and end offset that follow include any string set by the PREDISPLAY special parameter; this is needed if the predisplay string itself is to be highlighted. Whitespace between the ‘P’ and the start offset is optional.\n*   A start offset in the same units as CURSOR.\n*   An end offset in the same units as CURSOR.\n*   A highlight specification in the same format as used for contexts in the parameter zle\\_highlight, see [Character Highlighting](#Character-Highlighting); for example, standout or fg=red,bold.\n*   Optionally, a string of the form ‘memo=token’. The token consists of everything between the ‘\\=’ and the next whitespace, comma, NUL, or the end of the string. The token is preserved verbatim but not parsed in any way.\n    \n    Plugins may use this to identify array elements they have added: for example, a plugin might set token to its (the plugin’s) name and then use ‘region\\_highlight=( ${region\\_highlight:#\\*memo=token} )’ in order to remove array elements it have added.\n    \n    (This example uses the ‘${name:#pattern}’ array-grepping syntax described in [Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion).)\n    \n\nFor example,\n\nregion\\_highlight=(\"P0 20 bold memo=foobar\")\n\nspecifies that the first twenty characters of the text including any predisplay string should be highlighted in bold.\n\nNote that the effect of region\\_highlight is not saved and disappears as soon as the line is accepted.\n\nNote that zsh 5.8 and older do not support the ‘memo=token’ field and may misparse the third (highlight specification) field when a memo is given.\n\nThe final highlighting on the command line depends on both region\\_highlight and zle\\_highlight; see [Character Highlighting](#Character-Highlighting) for details.\n\nregisters (associative array)\n\nThe contents of each of the vi register buffers. These are typically set using vi-set-buffer followed by a delete, change or yank command.\n\nSUFFIX\\_ACTIVE (integer)\n\nSUFFIX\\_START (integer)\n\nSUFFIX\\_END (integer)\n\nSUFFIX\\_ACTIVE indicates whether an auto-removable completion suffix is currently active. SUFFIX\\_START and SUFFIX\\_END give the location of the suffix and are in the same units as CURSOR. They are only valid for reading when SUFFIX\\_ACTIVE is non-zero.\n\nAll parameters are read-only.\n\nUNDO\\_CHANGE\\_NO (integer)\n\nA number representing the state of the undo history. The only use of this is passing as an argument to the undo widget in order to undo back to the recorded point. Read-only.\n\nUNDO\\_LIMIT\\_NO (integer)\n\nA number corresponding to an existing change in the undo history; compare UNDO\\_CHANGE\\_NO. If this is set to a value greater than zero, the undo command will not allow the line to be undone beyond the given change number. It is still possible to use ‘zle undo change’ in a widget to undo beyond that point; in that case, it will not be possible to undo at all until UNDO\\_LIMIT\\_NO is reduced. Set to 0 to disable the limit.\n\nA typical use of this variable in a widget function is as follows (note the additional function scope is required):\n\n() {\n  local UNDO\\_LIMIT\\_NO=$UNDO\\_CHANGE\\_NO\n  # Perform some form of recursive edit.\n}\n\nWIDGET (scalar)\n\nThe name of the widget currently being executed; read-only.\n\nWIDGETFUNC (scalar)\n\nThe name of the shell function that implements a widget defined with either zle -N or zle -C. In the former case, this is the second argument to the zle -N command that defined the widget, or the first argument if there was no second argument. In the latter case this is the third argument to the zle -C command that defined the widget. Read-only.\n\nWIDGETSTYLE (scalar)\n\nDescribes the implementation behind the completion widget currently being executed; the second argument that followed zle -C when the widget was defined. This is the name of a builtin completion widget. For widgets defined with zle -N this is set to the empty string. Read-only.\n\nYANK\\_ACTIVE (integer)\n\nYANK\\_START (integer)\n\nYANK\\_END (integer)\n\nYANK\\_ACTIVE indicates whether text has just been yanked (pasted) into the buffer. YANK\\_START and YANK\\_END give the location of the pasted text and are in the same units as CURSOR. They are only valid for reading when YANK\\_ACTIVE is non-zero. They can also be assigned by widgets that insert text in a yank-like fashion, for example wrappers of bracketed-paste. See also zle -f.\n\nYANK\\_ACTIVE is read-only.\n\nZLE\\_RECURSIVE (integer)\n\nUsually zero, but incremented inside any instance of recursive-edit. Hence indicates the current recursion level.\n\nZLE\\_RECURSIVE is read-only.\n\nZLE\\_STATE (scalar)\n\nContains a set of space-separated words that describe the current zle state.\n\nCurrently, the states shown are the insert mode as set by the overwrite-mode or vi-replace widgets and whether history commands will visit imported entries as controlled by the set-local-history widget. The string contains ‘insert’ if characters to be inserted on the command line move existing characters to the right or ‘overwrite’ if characters to be inserted overwrite existing characters. It contains ‘localhistory’ if only local history commands will be visited or ‘globalhistory’ if imported history commands will also be visited.\n\nThe substrings are sorted in alphabetical order so that if you want to test for two specific substrings in a future-proof way, you can do match by doing:\n\nif \\[\\[ $ZLE\\_STATE == \\*globalhistory\\*insert\\* \\]\\]; then ...; fi\n\n* * *\n\n### 18.5.1 Special Widgets\n\nThere are a few user-defined widgets which are special to the shell. If they do not exist, no special action is taken. The environment provided is identical to that for any other editing widget.\n\nzle-isearch-exit\n\nExecuted at the end of incremental search at the point where the isearch prompt is removed from the display. See zle-isearch-update for an example.\n\nzle-isearch-update\n\nExecuted within incremental search when the display is about to be redrawn. Additional output below the incremental search prompt can be generated by using ‘zle -M’ within the widget. For example,\n\nzle-isearch-update() { zle -M \"Line $HISTNO\"; }\nzle -N zle-isearch-update\n\nNote the line output by ‘zle -M’ is not deleted on exit from incremental search. This can be done from a zle-isearch-exit widget:\n\nzle-isearch-exit() { zle -M \"\"; }\nzle -N zle-isearch-exit\n\nzle-line-pre-redraw\n\nExecuted whenever the input line is about to be redrawn, providing an opportunity to update the region\\_highlight array.\n\nzle-line-init\n\nExecuted every time the line editor is started to read a new line of input. The following example puts the line editor into vi command mode when it starts up.\n\nzle-line-init() { zle -K vicmd; }\nzle -N zle-line-init\n\n(The command inside the function sets the keymap directly; it is equivalent to zle vi-cmd-mode.)\n\nzle-line-finish\n\nThis is similar to zle-line-init but is executed every time the line editor has finished reading a line of input.\n\nzle-history-line-set\n\nExecuted when the history line changes.\n\nzle-keymap-select\n\nExecuted every time the keymap changes, i.e. the special parameter KEYMAP is set to a different value, while the line editor is active. Initialising the keymap when the line editor starts does not cause the widget to be called.\n\nThe value $KEYMAP within the function reflects the new keymap. The old keymap is passed as the sole argument.\n\nThis can be used for detecting switches between the vi command (vicmd) and insert (usually main) keymaps.\n\n* * *\n\n## 18.6 Standard Widgets\n\nThe following is a list of all the standard widgets, and their default bindings in emacs mode, vi command mode and vi insert mode (the ‘emacs’, ‘vicmd’ and ‘viins’ keymaps, respectively).\n\nNote that cursor keys are bound to movement keys in all three keymaps; the shell assumes that the cursor keys send the key sequences reported by the terminal-handling library (termcap or terminfo). The key sequences shown in the list are those based on the VT100, common on many modern terminals, but in fact these are not necessarily bound. In the case of the viins keymap, the initial escape character of the sequences serves also to return to the vicmd keymap: whether this happens is determined by the KEYTIMEOUT parameter, see [Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters).\n\n* * *\n\n### 18.6.1 Movement\n\nvi-backward-blank-word (unbound) (B) (unbound)\n\nMove backward one word, where a word is defined as a series of non-blank characters.\n\nvi-backward-blank-word-end (unbound) (gE) (unbound)\n\nMove to the end of the previous word, where a word is defined as a series of non-blank characters.\n\nbackward-char (^B ESC-\\[D) (unbound) (unbound)\n\nMove backward one character.\n\nvi-backward-char (unbound) (^H h ^?) (ESC-\\[D)\n\nMove backward one character, without changing lines.\n\nbackward-word (ESC-B ESC-b) (unbound) (unbound)\n\nMove to the beginning of the previous word.\n\nemacs-backward-word\n\nMove to the beginning of the previous word.\n\nvi-backward-word (unbound) (b) (unbound)\n\nMove to the beginning of the previous word, vi-style.\n\nvi-backward-word-end (unbound) (ge) (unbound)\n\nMove to the end of the previous word, vi-style.\n\nbeginning-of-line (^A) (unbound) (unbound)\n\nMove to the beginning of the line. If already at the beginning of the line, move to the beginning of the previous line, if any.\n\nvi-beginning-of-line\n\nMove to the beginning of the line, without changing lines.\n\ndown-line (unbound) (unbound) (unbound)\n\nMove down a line in the buffer.\n\nend-of-line (^E) (unbound) (unbound)\n\nMove to the end of the line. If already at the end of the line, move to the end of the next line, if any.\n\nvi-end-of-line (unbound) ($) (unbound)\n\nMove to the end of the line. If an argument is given to this command, the cursor will be moved to the end of the line (argument - 1) lines down.\n\nvi-forward-blank-word (unbound) (W) (unbound)\n\nMove forward one word, where a word is defined as a series of non-blank characters.\n\nvi-forward-blank-word-end (unbound) (E) (unbound)\n\nMove to the end of the current word, or, if at the end of the current word, to the end of the next word, where a word is defined as a series of non-blank characters.\n\nforward-char (^F ESC-\\[C) (unbound) (unbound)\n\nMove forward one character.\n\nvi-forward-char (unbound) (space l) (ESC-\\[C)\n\nMove forward one character.\n\nvi-find-next-char (^X^F) (f) (unbound)\n\nRead a character from the keyboard, and move to the next occurrence of it in the line.\n\nvi-find-next-char-skip (unbound) (t) (unbound)\n\nRead a character from the keyboard, and move to the position just before the next occurrence of it in the line.\n\nvi-find-prev-char (unbound) (F) (unbound)\n\nRead a character from the keyboard, and move to the previous occurrence of it in the line.\n\nvi-find-prev-char-skip (unbound) (T) (unbound)\n\nRead a character from the keyboard, and move to the position just after the previous occurrence of it in the line.\n\nvi-first-non-blank (unbound) (^) (unbound)\n\nMove to the first non-blank character in the line.\n\nvi-forward-word (unbound) (w) (unbound)\n\nMove forward one word, vi-style.\n\nforward-word (ESC-F ESC-f) (unbound) (unbound)\n\nMove to the beginning of the next word. The editor’s idea of a word is specified with the WORDCHARS parameter.\n\nemacs-forward-word\n\nMove to the end of the next word.\n\nvi-forward-word-end (unbound) (e) (unbound)\n\nMove to the end of the next word.\n\nvi-goto-column (ESC-|) (|) (unbound)\n\nMove to the column specified by the numeric argument.\n\nvi-goto-mark (unbound) (‘) (unbound)\n\nMove to the specified mark.\n\nvi-goto-mark-line (unbound) (’) (unbound)\n\nMove to beginning of the line containing the specified mark.\n\nvi-repeat-find (unbound) (;) (unbound)\n\nRepeat the last vi-find command.\n\nvi-rev-repeat-find (unbound) (,) (unbound)\n\nRepeat the last vi-find command in the opposite direction.\n\nup-line (unbound) (unbound) (unbound)\n\nMove up a line in the buffer.\n\n* * *\n\n### 18.6.2 History Control\n\nbeginning-of-buffer-or-history (ESC-<) (gg) (unbound)\n\nMove to the beginning of the buffer, or if already there, move to the first event in the history list.\n\nbeginning-of-line-hist\n\nMove to the beginning of the line. If already at the beginning of the buffer, move to the previous history line.\n\nbeginning-of-history\n\nMove to the first event in the history list.\n\ndown-line-or-history (^N ESC-\\[B) (j) (ESC-\\[B)\n\nMove down a line in the buffer, or if already at the bottom line, move to the next event in the history list.\n\nvi-down-line-or-history (unbound) (+) (unbound)\n\nMove down a line in the buffer, or if already at the bottom line, move to the next event in the history list. Then move to the first non-blank character on the line.\n\ndown-line-or-search\n\nMove down a line in the buffer, or if already at the bottom line, search forward in the history for a line beginning with the first word in the buffer.\n\nIf called from a function by the zle command with arguments, the first argument is taken as the string for which to search, rather than the first word in the buffer.\n\ndown-history (unbound) (^N) (unbound)\n\nMove to the next event in the history list.\n\nhistory-beginning-search-backward\n\nSearch backward in the history for a line beginning with the current line up to the cursor. This leaves the cursor in its original position.\n\nend-of-buffer-or-history (ESC->) (unbound) (unbound)\n\nMove to the end of the buffer, or if already there, move to the last event in the history list.\n\nend-of-line-hist\n\nMove to the end of the line. If already at the end of the buffer, move to the next history line.\n\nend-of-history\n\nMove to the last event in the history list.\n\nvi-fetch-history (unbound) (G) (unbound)\n\nFetch the history line specified by the numeric argument. This defaults to the current history line (i.e. the one that isn’t history yet).\n\nhistory-incremental-search-backward (^R ^Xr) (unbound) (unbound)\n\nSearch backward incrementally for a specified string. The search is case-insensitive if the search string does not have uppercase letters and no numeric argument was given. The string may begin with ‘^’ to anchor the search to the beginning of the line. When called from a user-defined function returns the following statuses: 0, if the search succeeded; 1, if the search failed; 2, if the search term was a bad pattern; 3, if the search was aborted by the send-break command.\n\nA restricted set of editing functions is available in the mini-buffer. Keys are looked up in the special isearch keymap, and if not found there in the main keymap (note that by default the isearch keymap is empty). An interrupt signal, as defined by the stty setting, will stop the search and go back to the original line. An undefined key will have the same effect. Note that the following always perform the same task within incremental searches and cannot be replaced by user defined widgets, nor can the set of functions be extended. The supported functions are:\n\naccept-and-hold\n\naccept-and-infer-next-history\n\naccept-line\n\naccept-line-and-down-history\n\nPerform the usual function after exiting incremental search. The command line displayed is executed.\n\nbackward-delete-char\n\nvi-backward-delete-char\n\nBack up one place in the search history. If the search has been repeated this does not immediately erase a character in the minibuffer.\n\naccept-search\n\nExit incremental search, retaining the command line but performing no further action. Note that this function is not bound by default and has no effect outside incremental search.\n\nbackward-delete-word\n\nbackward-kill-word\n\nvi-backward-kill-word\n\nBack up one character in the minibuffer; if multiple searches have been performed since the character was inserted the search history is rewound to the point just before the character was entered. Hence this has the effect of repeating backward-delete-char.\n\nclear-screen\n\nClear the screen, remaining in incremental search mode.\n\nhistory-incremental-search-backward\n\nFind the next occurrence of the contents of the mini-buffer. If the mini-buffer is empty, the most recent previously used search string is reinstated.\n\nhistory-incremental-search-forward\n\nInvert the sense of the search.\n\nmagic-space\n\nInserts a non-magical space.\n\nquoted-insert\n\nvi-quoted-insert\n\nQuote the character to insert into the minibuffer.\n\nredisplay\n\nRedisplay the command line, remaining in incremental search mode.\n\nvi-cmd-mode\n\nSelect the ‘vicmd’ keymap; the ‘main’ keymap (insert mode) will be selected initially.\n\nIn addition, the modifications that were made while in vi insert mode are merged to form a single undo event.\n\nvi-repeat-search\n\nvi-rev-repeat-search\n\nRepeat the search. The direction of the search is indicated in the mini-buffer.\n\nAny character that is not bound to one of the above functions, or self-insert or self-insert-unmeta, will cause the mode to be exited. The character is then looked up and executed in the keymap in effect at that point.\n\nWhen called from a widget function by the zle command, the incremental search commands can take a string argument. This will be treated as a string of keys, as for arguments to the bindkey command, and used as initial input for the command. Any characters in the string which are unused by the incremental search will be silently ignored. For example,\n\nzle history-incremental-search-backward forceps\n\nwill search backwards for forceps, leaving the minibuffer containing the string ‘forceps’.\n\nhistory-incremental-search-forward (^S ^Xs) (unbound) (unbound)\n\nSearch forward incrementally for a specified string. The search is case-insensitive if the search string does not have uppercase letters and no numeric argument was given. The string may begin with ‘^’ to anchor the search to the beginning of the line. The functions available in the mini-buffer are the same as for history-incremental-search-backward.\n\nhistory-incremental-pattern-search-backward\n\nhistory-incremental-pattern-search-forward\n\nThese widgets behave similarly to the corresponding widgets with no \\-pattern, but the search string typed by the user is treated as a pattern, respecting the current settings of the various options affecting pattern matching. See [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation) for a description of patterns. If no numeric argument was given lowercase letters in the search string may match uppercase letters in the history. The string may begin with ‘^’ to anchor the search to the beginning of the line.\n\nThe prompt changes to indicate an invalid pattern; this may simply indicate the pattern is not yet complete.\n\nNote that only non-overlapping matches are reported, so an expression with wildcards may return fewer matches on a line than are visible by inspection.\n\nhistory-search-backward (ESC-P ESC-p) (unbound) (unbound)\n\nSearch backward in the history for a line beginning with the first word in the buffer.\n\nIf called from a function by the zle command with arguments, the first argument is taken as the string for which to search, rather than the first word in the buffer.\n\nvi-history-search-backward (unbound) (/) (unbound)\n\nSearch backward in the history for a specified string. The string may begin with ‘^’ to anchor the search to the beginning of the line.\n\nA restricted set of editing functions is available in the mini-buffer. An interrupt signal, as defined by the stty setting, will stop the search. The functions available in the mini-buffer are: accept-line, backward-delete-char, vi-backward-delete-char, backward-kill-word, vi-backward-kill-word, clear-screen, redisplay, quoted-insert and vi-quoted-insert.\n\nvi-cmd-mode is treated the same as accept-line, and magic-space is treated as a space. Any other character that is not bound to self-insert or self-insert-unmeta will beep and be ignored. If the function is called from vi command mode, the bindings of the current insert mode will be used.\n\nIf called from a function by the zle command with arguments, the first argument is taken as the string for which to search, rather than the first word in the buffer.\n\nhistory-search-forward (ESC-N ESC-n) (unbound) (unbound)\n\nSearch forward in the history for a line beginning with the first word in the buffer.\n\nIf called from a function by the zle command with arguments, the first argument is taken as the string for which to search, rather than the first word in the buffer.\n\nvi-history-search-forward (unbound) (?) (unbound)\n\nSearch forward in the history for a specified string. The string may begin with ‘^’ to anchor the search to the beginning of the line. The functions available in the mini-buffer are the same as for vi-history-search-backward. Argument handling is also the same as for that command.\n\ninfer-next-history (^X^N) (unbound) (unbound)\n\nSearch in the history list for a line matching the current one and fetch the event following it.\n\ninsert-last-word (ESC-\\_ ESC-.) (unbound) (unbound)\n\nInsert the last word from the previous history event at the cursor position. If a positive numeric argument is given, insert that word from the end of the previous history event. If the argument is zero or negative insert that word from the left (zero inserts the previous command word). Repeating this command replaces the word just inserted with the last word from the history event prior to the one just used; numeric arguments can be used in the same way to pick a word from that event.\n\nWhen called from a shell function invoked from a user-defined widget, the command can take one to three arguments. The first argument specifies a history offset which applies to successive calls to this widget: if it is -1, the default behaviour is used, while if it is 1, successive calls will move forwards through the history. The value 0 can be used to indicate that the history line examined by the previous execution of the command will be reexamined. Note that negative numbers should be preceded by a ‘\\-\\-’ argument to avoid confusing them with options.\n\nIf two arguments are given, the second specifies the word on the command line in normal array index notation (as a more natural alternative to the numeric argument). Hence 1 is the first word, and -1 (the default) is the last word.\n\nIf a third argument is given, its value is ignored, but it is used to signify that the history offset is relative to the current history line, rather than the one remembered after the previous invocations of insert-last-word.\n\nFor example, the default behaviour of the command corresponds to\n\nzle insert-last-word -- -1 -1\n\nwhile the command\n\nzle insert-last-word -- -1 1 -\n\nalways copies the first word of the line in the history immediately before the line being edited. This has the side effect that later invocations of the widget will be relative to that line.\n\nvi-repeat-search (unbound) (n) (unbound)\n\nRepeat the last vi history search.\n\nvi-rev-repeat-search (unbound) (N) (unbound)\n\nRepeat the last vi history search, but in reverse.\n\nup-line-or-history (^P ESC-\\[A) (k) (ESC-\\[A)\n\nMove up a line in the buffer, or if already at the top line, move to the previous event in the history list.\n\nvi-up-line-or-history (unbound) (\\-) (unbound)\n\nMove up a line in the buffer, or if already at the top line, move to the previous event in the history list. Then move to the first non-blank character on the line.\n\nup-line-or-search\n\nMove up a line in the buffer, or if already at the top line, search backward in the history for a line beginning with the first word in the buffer.\n\nIf called from a function by the zle command with arguments, the first argument is taken as the string for which to search, rather than the first word in the buffer.\n\nup-history (unbound) (^P) (unbound)\n\nMove to the previous event in the history list.\n\nhistory-beginning-search-forward\n\nSearch forward in the history for a line beginning with the current line up to the cursor. This leaves the cursor in its original position.\n\nset-local-history\n\nBy default, history movement commands visit the imported lines as well as the local lines. This widget lets you toggle this on and off, or set it with the numeric argument. Zero for both local and imported lines and nonzero for only local lines.\n\n* * *\n\n### 18.6.3 Modifying Text\n\nvi-add-eol (unbound) (A) (unbound)\n\nMove to the end of the line and enter insert mode.\n\nvi-add-next (unbound) (a) (unbound)\n\nEnter insert mode after the current cursor position, without changing lines.\n\nbackward-delete-char (^H ^?) (unbound) (unbound)\n\nDelete the character behind the cursor.\n\nvi-backward-delete-char (unbound) (X) (^H)\n\nDelete the character behind the cursor, without changing lines. If in insert mode, this won’t delete past the point where insert mode was last entered.\n\nbackward-delete-word\n\nDelete the word behind the cursor.\n\nbackward-kill-line\n\nKill from the beginning of the line to the cursor position.\n\nbackward-kill-word (^W ESC-^H ESC-^?) (unbound) (unbound)\n\nKill the word behind the cursor.\n\nvi-backward-kill-word (unbound) (unbound) (^W)\n\nKill the word behind the cursor, without going past the point where insert mode was last entered.\n\ncapitalize-word (ESC-C ESC-c) (unbound) (unbound)\n\nCapitalize the current word and move past it.\n\nvi-change (unbound) (c) (unbound)\n\nRead a movement command from the keyboard, and kill from the cursor position to the endpoint of the movement. Then enter insert mode. If the command is vi-change, change the current line.\n\nFor compatibility with vi, if the command is vi-forward-word or vi-forward-blank-word, the whitespace after the word is not included. If you prefer the more consistent behaviour with the whitespace included use the following key binding:\n\nvi-change-eol (unbound) (C) (unbound)\n\nKill to the end of the line and enter insert mode.\n\nvi-change-whole-line (unbound) (S) (unbound)\n\nKill the current line and enter insert mode.\n\ncopy-region-as-kill (ESC-W ESC-w) (unbound) (unbound)\n\nCopy the area from the cursor to the mark to the kill buffer.\n\nIf called from a ZLE widget function in the form ‘zle copy-region-as-kill string’ then string will be taken as the text to copy to the kill buffer. The cursor, the mark and the text on the command line are not used in this case.\n\ncopy-prev-word (ESC-^\\_) (unbound) (unbound)\n\nDuplicate the word to the left of the cursor.\n\ncopy-prev-shell-word\n\nLike copy-prev-word, but the word is found by using shell parsing, whereas copy-prev-word looks for blanks. This makes a difference when the word is quoted and contains spaces.\n\nvi-delete (unbound) (d) (unbound)\n\nRead a movement command from the keyboard, and kill from the cursor position to the endpoint of the movement. If the command is vi-delete, kill the current line.\n\ndelete-char\n\nDelete the character under the cursor.\n\nvi-delete-char (unbound) (x) (unbound)\n\nDelete the character under the cursor, without going past the end of the line.\n\ndelete-word\n\nDelete the current word.\n\ndown-case-word (ESC-L ESC-l) (unbound) (unbound)\n\nConvert the current word to all lowercase and move past it.\n\nvi-down-case (unbound) (gu) (unbound)\n\nRead a movement command from the keyboard, and convert all characters from the cursor position to the endpoint of the movement to lowercase. If the movement command is vi-down-case, swap the case of all characters on the current line.\n\nkill-word (ESC-D ESC-d) (unbound) (unbound)\n\nKill the current word.\n\ngosmacs-transpose-chars\n\nExchange the two characters behind the cursor.\n\nvi-indent (unbound) (\\>) (unbound)\n\nIndent a number of lines.\n\nvi-insert (unbound) (i) (unbound)\n\nEnter insert mode.\n\nvi-insert-bol (unbound) (I) (unbound)\n\nMove to the first non-blank character on the line and enter insert mode.\n\nvi-join (^X^J) (J) (unbound)\n\nJoin the current line with the next one.\n\nkill-line (^K) (unbound) (unbound)\n\nKill from the cursor to the end of the line. If already on the end of the line, kill the newline character.\n\nvi-kill-line (unbound) (unbound) (^U)\n\nKill from the cursor back to wherever insert mode was last entered.\n\nvi-kill-eol (unbound) (D) (unbound)\n\nKill from the cursor to the end of the line.\n\nkill-region\n\nKill from the cursor to the mark.\n\nkill-buffer (^X^K) (unbound) (unbound)\n\nKill the entire buffer.\n\nkill-whole-line (^U) (unbound) (unbound)\n\nKill the current line.\n\nvi-match-bracket (^X^B) (%) (unbound)\n\nMove to the bracket character (one of {}, () or \\[\\]) that matches the one under the cursor. If the cursor is not on a bracket character, move forward without going past the end of the line to find one, and then go to the matching bracket.\n\nvi-open-line-above (unbound) (O) (unbound)\n\nOpen a line above the cursor and enter insert mode.\n\nvi-open-line-below (unbound) (o) (unbound)\n\nOpen a line below the cursor and enter insert mode.\n\nvi-oper-swap-case (unbound) (g~) (unbound)\n\nRead a movement command from the keyboard, and swap the case of all characters from the cursor position to the endpoint of the movement. If the movement command is vi-oper-swap-case, swap the case of all characters on the current line.\n\noverwrite-mode (^X^O) (unbound) (unbound)\n\nToggle between overwrite mode and insert mode.\n\nvi-put-before (unbound) (P) (unbound)\n\nInsert the contents of the kill buffer before the cursor. If the kill buffer contains a sequence of lines (as opposed to characters), paste it above the current line.\n\nvi-put-after (unbound) (p) (unbound)\n\nInsert the contents of the kill buffer after the cursor. If the kill buffer contains a sequence of lines (as opposed to characters), paste it below the current line.\n\nput-replace-selection (unbound) (unbound) (unbound)\n\nReplace the contents of the current region or selection with the contents of the kill buffer. If the kill buffer contains a sequence of lines (as opposed to characters), the current line will be split by the pasted lines.\n\nquoted-insert (^V) (unbound) (unbound)\n\nInsert the next character typed into the buffer literally. An interrupt character will not be inserted.\n\nvi-quoted-insert (unbound) (unbound) (^Q ^V)\n\nDisplay a ‘^’ at the cursor position, and insert the next character typed into the buffer literally. An interrupt character will not be inserted.\n\nquote-line (ESC-’) (unbound) (unbound)\n\nQuote the current line; that is, put a ‘’’ character at the beginning and the end, and convert all ‘’’ characters to ‘’\\\\’’’.\n\nquote-region (ESC-\") (unbound) (unbound)\n\nQuote the region from the cursor to the mark.\n\nvi-replace (unbound) (R) (unbound)\n\nEnter overwrite mode.\n\nvi-repeat-change (unbound) (.) (unbound)\n\nRepeat the last vi mode text modification. If a count was used with the modification, it is remembered. If a count is given to this command, it overrides the remembered count, and is remembered for future uses of this command. The cut buffer specification is similarly remembered.\n\nvi-replace-chars (unbound) (r) (unbound)\n\nReplace the character under the cursor with a character read from the keyboard.\n\nself-insert (printable characters) (unbound) (printable characters and some control characters)\n\nInsert a character into the buffer at the cursor position.\n\nself-insert-unmeta (ESC-^I ESC-^J ESC-^M) (unbound) (unbound)\n\nInsert a character into the buffer after stripping the meta bit and converting ^M to ^J.\n\nvi-substitute (unbound) (s) (unbound)\n\nSubstitute the next character(s).\n\nvi-swap-case (unbound) (~) (unbound)\n\nSwap the case of the character under the cursor and move past it.\n\ntranspose-chars (^T) (unbound) (unbound)\n\nExchange the two characters to the left of the cursor if at end of line, else exchange the character under the cursor with the character to the left.\n\ntranspose-words (ESC-T ESC-t) (unbound) (unbound)\n\nExchange the current word with the one before it.\n\nWith a positive numeric argument _N_, the word around the cursor, or following it if the cursor is between words, is transposed with the preceding _N_ words. The cursor is put at the end of the resulting group of words.\n\nWith a negative numeric argument _\\-N_, the effect is the same as using a positive argument _N_ except that the original cursor position is retained, regardless of how the words are rearranged.\n\nvi-unindent (unbound) (<) (unbound)\n\nUnindent a number of lines.\n\nvi-up-case (unbound) (gU) (unbound)\n\nRead a movement command from the keyboard, and convert all characters from the cursor position to the endpoint of the movement to lowercase. If the movement command is vi-up-case, swap the case of all characters on the current line.\n\nup-case-word (ESC-U ESC-u) (unbound) (unbound)\n\nConvert the current word to all caps and move past it.\n\nyank (^Y) (unbound) (unbound)\n\nInsert the contents of the kill buffer at the cursor position.\n\nyank-pop (ESC-y) (unbound) (unbound)\n\nRemove the text just yanked, rotate the kill-ring (the history of previously killed text) and yank the new top. Only works following yank, vi-put-before, vi-put-after or yank-pop.\n\nvi-yank (unbound) (y) (unbound)\n\nRead a movement command from the keyboard, and copy the region from the cursor position to the endpoint of the movement into the kill buffer. If the command is vi-yank, copy the current line.\n\nvi-yank-whole-line (unbound) (Y) (unbound)\n\nCopy the current line into the kill buffer.\n\nvi-yank-eol\n\nCopy the region from the cursor position to the end of the line into the kill buffer. Arguably, this is what Y should do in vi, but it isn’t what it actually does.\n\n* * *\n\n### 18.6.4 Arguments\n\ndigit-argument (ESC-0..ESC-9) (1\\-9) (unbound)\n\nStart a new numeric argument, or add to the current one. See also vi-digit-or-beginning-of-line. This only works if bound to a key sequence ending in a decimal digit.\n\nInside a widget function, a call to this function treats the last key of the key sequence which called the widget as the digit.\n\nneg-argument (ESC-\\-) (unbound) (unbound)\n\nChanges the sign of the following argument.\n\nuniversal-argument\n\nMultiply the argument of the next command by 4. Alternatively, if this command is followed by an integer (positive or negative), use that as the argument for the next command. Thus digits cannot be repeated using this command. For example, if this command occurs twice, followed immediately by forward-char, move forward sixteen spaces; if instead it is followed by \\-2, then forward-char, move backward two spaces.\n\nInside a widget function, if passed an argument, i.e. ‘zle universal-argument num’, the numeric argument will be set to num; this is equivalent to ‘NUMERIC=num’.\n\nargument-base\n\nUse the existing numeric argument as a numeric base, which must be in the range 2 to 36 inclusive. Subsequent use of digit-argument and universal-argument will input a new numeric argument in the given base. The usual hexadecimal convention is used: the letter a or A corresponds to 10, and so on. Arguments in bases requiring digits from 10 upwards are more conveniently input with universal-argument, since ESC-a etc. are not usually bound to digit-argument.\n\nThe function can be used with a command argument inside a user-defined widget. The following code sets the base to 16 and lets the user input a hexadecimal argument until a key out of the digit range is typed:\n\nzle argument-base 16\nzle universal-argument\n\n* * *\n\n### 18.6.5 Completion\n\naccept-and-menu-complete\n\nIn a menu completion, insert the current completion into the buffer, and advance to the next possible completion.\n\ncomplete-word\n\nAttempt completion on the current word.\n\ndelete-char-or-list (^D) (unbound) (unbound)\n\nDelete the character under the cursor. If the cursor is at the end of the line, list possible completions for the current word.\n\nexpand-cmd-path\n\nExpand the current command to its full pathname.\n\nexpand-or-complete (TAB) (unbound) (TAB)\n\nAttempt shell expansion on the current word. If that fails, attempt completion.\n\nexpand-or-complete-prefix\n\nAttempt shell expansion on the current word up to cursor.\n\nexpand-history (ESC-space ESC-!) (unbound) (unbound)\n\nPerform history expansion on the edit buffer.\n\nexpand-word (^X\\*) (unbound) (unbound)\n\nAttempt shell expansion on the current word.\n\nlist-choices (ESC-^D) (^D =) (^D)\n\nList possible completions for the current word.\n\nlist-expand (^Xg ^XG) (^G) (^G)\n\nList the expansion of the current word.\n\nmagic-space\n\nPerform history expansion and insert a space into the buffer. This is intended to be bound to space.\n\nmenu-complete\n\nLike complete-word, except that menu completion is used. See the MENU\\_COMPLETE option.\n\nmenu-expand-or-complete\n\nLike expand-or-complete, except that menu completion is used.\n\nreverse-menu-complete\n\nPerform menu completion, like menu-complete, except that if a menu completion is already in progress, move to the _previous_ completion rather than the next.\n\nend-of-list\n\nWhen a previous completion displayed a list below the prompt, this widget can be used to move the prompt below the list.\n\n* * *\n\n### 18.6.6 Miscellaneous\n\naccept-and-hold (ESC-A ESC-a) (unbound) (unbound)\n\nPush the contents of the buffer on the buffer stack and execute it.\n\naccept-and-infer-next-history\n\nExecute the contents of the buffer. Then search the history list for a line matching the current one and push the event following onto the buffer stack.\n\naccept-line (^J ^M) (^J ^M) (^J ^M)\n\nFinish editing the buffer. Normally this causes the buffer to be executed as a shell command.\n\naccept-line-and-down-history (^O) (unbound) (unbound)\n\nExecute the current line, and push the next history event on the buffer stack.\n\nauto-suffix-remove\n\nIf the previous action added a suffix (space, slash, etc.) to the word on the command line, remove it. Otherwise do nothing. Removing the suffix ends any active menu completion or menu selection.\n\nThis widget is intended to be called from user-defined widgets to enforce a desired suffix-removal behavior.\n\nauto-suffix-retain\n\nIf the previous action added a suffix (space, slash, etc.) to the word on the command line, force it to be preserved. Otherwise do nothing. Retaining the suffix ends any active menu completion or menu selection.\n\nThis widget is intended to be called from user-defined widgets to enforce a desired suffix-preservation behavior.\n\nbeep\n\nBeep, unless the BEEP option is unset.\n\nbracketed-paste (^\\[\\[200~) (^\\[\\[200~) (^\\[\\[200~)\n\nThis widget is invoked when text is pasted to the terminal emulator. It is not intended to be bound to actual keys but instead to the special sequence generated by the terminal emulator when text is pasted.\n\nWhen invoked interactively, the pasted text is inserted to the buffer and placed in the cutbuffer. If a numeric argument is given, shell quoting will be applied to the pasted text before it is inserted.\n\nWhen a named buffer is specified with vi-set-buffer (\"x), the pasted text is stored in that named buffer but not inserted.\n\nWhen called from a widget function as ‘bracketed-paste name‘, the pasted text is assigned to the variable name and no other processing is done.\n\nSee also the zle\\_bracketed\\_paste parameter.\n\nvi-cmd-mode (^X^V) (unbound) (^\\[)\n\nEnter command mode; that is, select the ‘vicmd’ keymap. Yes, this is bound by default in emacs mode.\n\nvi-caps-lock-panic\n\nHang until any lowercase key is pressed. This is for vi users without the mental capacity to keep track of their caps lock key (like the author).\n\nclear-screen (^L ESC-^L) (^L) (^L)\n\nClear the screen and redraw the prompt.\n\ndeactivate-region\n\nMake the current region inactive. This disables vim-style visual selection mode if it is active.\n\ndescribe-key-briefly\n\nReads a key sequence, then prints the function bound to that sequence.\n\nexchange-point-and-mark (^X^X) (unbound) (unbound)\n\nExchange the cursor position (point) with the position of the mark. Unless a negative numeric argument is given, the region between point and mark is activated so that it can be highlighted. If a zero numeric argument is given, the region is activated but point and mark are not swapped.\n\nexecute-named-cmd (ESC-x) (:) (unbound)\n\nRead the name of an editor command and execute it. Aliasing this widget with ‘zle -A’ or replacing it with ‘zle -N’ has no effect when interpreting key bindings, but ‘zle execute-named-cmd’ will invoke such an alias or replacement.\n\nA restricted set of editing functions is available in the mini-buffer. Keys are looked up in the special command keymap, and if not found there in the main keymap. An interrupt signal, as defined by the stty setting, will abort the function. Note that the following always perform the same task within the executed-named-cmd environment and cannot be replaced by user defined widgets, nor can the set of functions be extended. The allowed functions are: backward-delete-char, vi-backward-delete-char, clear-screen, redisplay, quoted-insert, vi-quoted-insert, backward-kill-word, vi-backward-kill-word, kill-whole-line, vi-kill-line, backward-kill-line, list-choices, delete-char-or-list, complete-word, accept-line, expand-or-complete and expand-or-complete-prefix.\n\nkill-region kills the last word, and vi-cmd-mode is treated the same as accept-line. The space and tab characters, if not bound to one of these functions, will complete the name and then list the possibilities if the AUTO\\_LIST option is set. Any other character that is not bound to self-insert or self-insert-unmeta will beep and be ignored. The bindings of the current insert mode will be used.\n\nCurrently this command may not be redefined or called by name.\n\nexecute-last-named-cmd (ESC-z) (unbound) (unbound)\n\nRedo the last function executed with execute-named-cmd.\n\nLike execute-named-cmd, this command may not be redefined, but it may be called by name.\n\nget-line (ESC-G ESC-g) (unbound) (unbound)\n\nPop the top line off the buffer stack and insert it at the cursor position.\n\npound-insert (unbound) (#) (unbound)\n\nIf there is no # character at the beginning of the buffer, add one to the beginning of each line. If there is one, remove a # from each line that has one. In either case, accept the current line. The INTERACTIVE\\_COMMENTS option must be set for this to have any usefulness.\n\nvi-pound-insert\n\nIf there is no # character at the beginning of the current line, add one. If there is one, remove it. The INTERACTIVE\\_COMMENTS option must be set for this to have any usefulness.\n\npush-input\n\nPush the entire current multiline construct onto the buffer stack and return to the top-level (PS1) prompt. If the current parser construct is only a single line, this is exactly like push-line. Next time the editor starts up or is popped with get-line, the construct will be popped off the top of the buffer stack and loaded into the editing buffer.\n\npush-line (^Q ESC-Q ESC-q) (unbound) (unbound)\n\nPush the current buffer onto the buffer stack and clear the buffer. Next time the editor starts up, the buffer will be popped off the top of the buffer stack and loaded into the editing buffer.\n\npush-line-or-edit\n\nAt the top-level (PS1) prompt, equivalent to push-line. At a secondary (PS2) prompt, move the entire current multiline construct into the editor buffer. The latter is equivalent to push-input followed by get-line.\n\nread-command\n\nOnly useful from a user-defined widget. A keystroke is read just as in normal operation, but instead of the command being executed the name of the command that would be executed is stored in the shell parameter REPLY. This can be used as the argument of a future zle command. If the key sequence is not bound, status 1 is returned; typically, however, REPLY is set to undefined-key to indicate a useless key sequence.\n\nrecursive-edit\n\nOnly useful from a user-defined widget. At this point in the function, the editor regains control until one of the standard widgets which would normally cause zle to exit (typically an accept-line caused by hitting the return key) is executed. Instead, control returns to the user-defined widget. The status returned is non-zero if the return was caused by an error, but the function still continues executing and hence may tidy up. This makes it safe for the user-defined widget to alter the command line or key bindings temporarily.\n\nThe following widget, caps-lock, serves as an example.\n\nself-insert-ucase() {\n  LBUFFER+=${(U)KEYS\\[-1\\]}\n}\n\ninteger stat\n\nzle -N self-insert self-insert-ucase\nzle -A caps-lock save-caps-lock\nzle -A accept-line caps-lock\n\nzle recursive-edit\nstat=$?\n\nzle -A .self-insert self-insert\nzle -A save-caps-lock caps-lock\nzle -D save-caps-lock\n\n(( stat )) && zle send-break\n\nreturn $stat\n\nThis causes typed letters to be inserted capitalised until either accept-line (i.e. typically the return key) is typed or the caps-lock widget is invoked again; the later is handled by saving the old definition of caps-lock as save-caps-lock and then rebinding it to invoke accept-line. Note that an error from the recursive edit is detected as a non-zero return status and propagated by using the send-break widget.\n\nredisplay (unbound) (^R) (^R)\n\nRedisplays the edit buffer.\n\nreset-prompt (unbound) (unbound) (unbound)\n\nForce the prompts on both the left and right of the screen to be re-expanded, then redisplay the edit buffer. This reflects changes both to the prompt variables themselves and changes in the expansion of the values (for example, changes in time or directory, or changes to the value of variables referred to by the prompt).\n\nOtherwise, the prompt is only expanded each time zle starts, and when the display has been interrupted by output from another part of the shell (such as a job notification) which causes the command line to be reprinted.\n\nreset-prompt doesn’t alter the special parameter LASTWIDGET.\n\nsend-break (^G ESC-^G) (unbound) (unbound)\n\nAbort the current editor function, e.g. execute-named-command, or the editor itself, e.g. if you are in vared. Otherwise abort the parsing of the current line; in this case the aborted line is available in the shell variable ZLE\\_LINE\\_ABORTED. If the editor is aborted from within vared, the variable ZLE\\_VARED\\_ABORTED is set.\n\nrun-help (ESC-H ESC-h) (unbound) (unbound)\n\nPush the buffer onto the buffer stack, and execute the command ‘run-help cmd’, where cmd is the current command. run-help is normally aliased to man.\n\nvi-set-buffer (unbound) (\") (unbound)\n\nSpecify a buffer to be used in the following command. There are 37 buffers that can be specified: the 26 ‘named’ buffers \"a to \"z, the ‘yank’ buffer \"0, the nine ‘queued’ buffers \"1 to \"9 and the ‘black hole’ buffer \"\\_. The named buffers can also be specified as \"A to \"Z.\n\nWhen a buffer is specified for a cut, change or yank command, the text concerned replaces the previous contents of the specified buffer. If a named buffer is specified using a capital, the newly cut text is appended to the buffer instead of overwriting it. When using the \"\\_ buffer, nothing happens. This can be useful for deleting text without affecting any buffers.\n\nIf no buffer is specified for a cut or change command, \"1 is used, and the contents of \"1 to \"8 are each shifted along one buffer; the contents of \"9 is lost. If no buffer is specified for a yank command, \"0 is used. Finally, a paste command without a specified buffer will paste the text from the most recent command regardless of any buffer that might have been used with that command.\n\nWhen called from a widget function by the zle command, the buffer can optionally be specified with an argument. For example,\n\nvi-set-mark (unbound) (m) (unbound)\n\nSet the specified mark at the cursor position.\n\nset-mark-command (^@) (unbound) (unbound)\n\nSet the mark at the cursor position. If called with a negative numeric argument, do not set the mark but deactivate the region so that it is no longer highlighted (it is still usable for other purposes). Otherwise the region is marked as active.\n\nspell-word (ESC-$ ESC-S ESC-s) (unbound) (unbound)\n\nAttempt spelling correction on the current word.\n\nsplit-undo\n\nBreaks the undo sequence at the current change. This is useful in vi mode as changes made in insert mode are coalesced on entering command mode. Similarly, undo will normally revert as one all the changes made by a user-defined widget.\n\nundefined-key\n\nThis command is executed when a key sequence that is not bound to any command is typed. By default it beeps.\n\nundo (^\\_ ^Xu ^X^U) (u) (unbound)\n\nIncrementally undo the last text modification. When called from a user-defined widget, takes an optional argument indicating a previous state of the undo history as returned by the UNDO\\_CHANGE\\_NO variable; modifications are undone until that state is reached, subject to any limit imposed by the UNDO\\_LIMIT\\_NO variable.\n\nNote that when invoked from vi command mode, the full prior change made in insert mode is reverted, the changes having been merged when command mode was selected.\n\nredo (unbound) (^R) (unbound)\n\nIncrementally redo undone text modifications.\n\nvi-undo-change (unbound) (unbound) (unbound)\n\nUndo the last text modification. If repeated, redo the modification.\n\nvisual-mode (unbound) (v) (unbound)\n\nToggle vim-style visual selection mode. If line-wise visual mode is currently enabled then it is changed to being character-wise. If used following an operator, it forces the subsequent movement command to be treated as a character-wise movement.\n\nvisual-line-mode (unbound) (V) (unbound)\n\nToggle vim-style line-wise visual selection mode. If character-wise visual mode is currently enabled then it is changed to being line-wise. If used following an operator, it forces the subsequent movement command to be treated as a line-wise movement.\n\nwhat-cursor-position (^X=) (ga) (unbound)\n\nPrint the character under the cursor, its code as an octal, decimal and hexadecimal number, the current cursor position within the buffer and the column of the cursor in the current line.\n\nwhere-is\n\nRead the name of an editor command and print the listing of key sequences that invoke the specified command. A restricted set of editing functions is available in the mini-buffer. Keys are looked up in the special command keymap, and if not found there in the main keymap.\n\nwhich-command (ESC-?) (unbound) (unbound)\n\nPush the buffer onto the buffer stack, and execute the command ‘which-command cmd’. where cmd is the current command. which-command is normally aliased to whence.\n\nvi-digit-or-beginning-of-line (unbound) (0) (unbound)\n\nIf the last command executed was a digit as part of an argument, continue the argument. Otherwise, execute vi-beginning-of-line.\n\n* * *\n\n### 18.6.7 Text Objects\n\nText objects are commands that can be used to select a block of text according to some criteria. They are a feature of the vim text editor and so are primarily intended for use with vi operators or from visual selection mode. However, they can also be used from vi-insert or emacs mode. Key bindings listed below apply to the viopp and visual keymaps.\n\nselect-a-blank-word (aW)\n\nSelect a word including adjacent blanks, where a word is defined as a series of non-blank characters. With a numeric argument, multiple words will be selected.\n\nselect-a-shell-word (aa)\n\nSelect the current command argument applying the normal rules for quoting.\n\nselect-a-word (aw)\n\nSelect a word including adjacent blanks, using the normal vi-style word definition. With a numeric argument, multiple words will be selected.\n\nselect-in-blank-word (iW)\n\nSelect a word, where a word is defined as a series of non-blank characters. With a numeric argument, multiple words will be selected.\n\nselect-in-shell-word (ia)\n\nSelect the current command argument applying the normal rules for quoting. If the argument begins and ends with matching quote characters, these are not included in the selection.\n\nselect-in-word (iw)\n\nSelect a word, using the normal vi-style word definition. With a numeric argument, multiple words will be selected.\n\n* * *\n\n## 18.7 Character Highlighting\n\nThe line editor has the ability to highlight characters or regions of the line that have a particular significance. This is controlled by the array parameter zle\\_highlight, if it has been set by the user.\n\nIf the parameter contains the single entry none all highlighting is turned off. Note the parameter is still expected to be an array.\n\nOtherwise each entry of the array should consist of a word indicating a context for highlighting, then a colon, then a comma-separated list of the types of highlighting to apply in that context.\n\nThe contexts available for highlighting are the following:\n\ndefault\n\nAny text within the command line not affected by any other highlighting. Text outside the editable area of the command line is not affected.\n\nisearch\n\nWhen one of the incremental history search widgets is active, the area of the command line matched by the search string or pattern.\n\nregion\n\nThe currently selected text. In emacs terminology, this is referred to as the region and is bounded by the cursor (point) and the mark. The region is only highlighted if it is active, which is the case after the mark is modified with set-mark-command or exchange-point-and-mark. Note that whether or not the region is active has no effect on its use within emacs style widgets, it simply determines whether it is highlighted. In vi mode, the region corresponds to selected text in visual mode.\n\nspecial\n\nIndividual characters that have no direct printable representation but are shown in a special manner by the line editor. These characters are described below.\n\nsuffix\n\nThis context is used in completion for characters that are marked as suffixes that will be removed if the completion ends at that point, the most obvious example being a slash (/) after a directory name. Note that suffix removal is configurable; the circumstances under which the suffix will be removed may differ for different completions.\n\npaste\n\nFollowing a command to paste text, the characters that were inserted.\n\nWhen region\\_highlight is set, the contexts that describe a region — isearch, region, suffix, and paste — are applied first, then region\\_highlight is applied, then the remaining zle\\_highlight contexts are applied. If a particular character is affected by multiple specifications, the last specification wins.\n\nzle\\_highlight may contain additional fields for controlling how terminal sequences to change colours are output. Each of the following is followed by a colon and a string in the same form as for key bindings. This will not be necessary for the vast majority of terminals as the defaults shown in parentheses are widely used.\n\nfg\\_start\\_code (\\\\e\\[3)\n\nThe start of the escape sequence for the foreground colour. This is followed by one to three ASCII digits representing the colour. Only used for palette colors, i.e. not 24-bit colors specified via a color triplet.\n\nfg\\_default\\_code (9)\n\nThe number to use instead of the colour to reset the default foreground colour.\n\nfg\\_end\\_code (m)\n\nThe end of the escape sequence for the foreground colour.\n\nbg\\_start\\_code (\\\\e\\[4)\n\nThe start of the escape sequence for the background colour. See fg\\_start\\_code above.\n\nbg\\_default\\_code (9)\n\nThe number to use instead of the colour to reset the default background colour.\n\nbg\\_end\\_code (m)\n\nThe end of the escape sequence for the background colour.\n\nThe available types of highlighting are the following. Note that not all types of highlighting are available on all terminals:\n\nnone\n\nNo highlighting is applied to the given context. It is not useful for this to appear with other types of highlighting; it is used to override a default.\n\nfg=colour\n\nThe foreground colour should be set to colour, a decimal integer, the name of one of the eight most widely-supported colours or as a ‘#’ followed by an RGB triplet in hexadecimal format.\n\nNot all terminals support this and, of those that do, not all provide facilities to test the support, hence the user should decide based on the terminal type. Most terminals support the colours black, red, green, yellow, blue, magenta, cyan and white, which can be set by name. In addition. default may be used to set the terminal’s default foreground colour. Abbreviations are allowed; b or bl selects black. Some terminals may generate additional colours if the bold attribute is also present.\n\nOn recent terminals and on systems with an up-to-date terminal database the number of colours supported may be tested by the command ‘echotc Co’; if this succeeds, it indicates a limit on the number of colours which will be enforced by the line editor. The number of colours is in any case limited to 256 (i.e. the range 0 to 255).\n\nSome modern terminal emulators have support for 24-bit true colour (16 million colours). In this case, the hex triplet format can be used. This consists of a ‘#’ followed by either a three or six digit hexadecimal number describing the red, green and blue components of the colour. Hex triplets can also be used with 88 and 256 colour terminals via the zsh/nearcolor module (see [The zsh/nearcolor Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fnearcolor-Module)).\n\nColour is also known as color.\n\nbg=colour\n\nThe background colour should be set to colour. This works similarly to the foreground colour, except the background is not usually affected by the bold attribute.\n\nbold\n\nThe characters in the given context are shown in a bold font. Not all terminals distinguish bold fonts.\n\nstandout\n\nThe characters in the given context are shown in the terminal’s standout mode. The actual effect is specific to the terminal; on many terminals it is inverse video. On some such terminals, where the cursor does not blink it appears with standout mode negated, making it less than clear where the cursor actually is. On such terminals one of the other effects may be preferable for highlighting the region and matched search string.\n\nunderline\n\nThe characters in the given context are shown underlined. Some terminals show the foreground in a different colour instead; in this case whitespace will not be highlighted.\n\nThe characters described above as ‘special’ are as follows. The formatting described here is used irrespective of whether the characters are highlighted:\n\nASCII control characters\n\nControl characters in the ASCII range are shown as ‘^’ followed by the base character.\n\nUnprintable multibyte characters\n\nThis item applies to control characters not in the ASCII range, plus other characters as follows. If the MULTIBYTE option is in effect, multibyte characters not in the ASCII character set that are reported as having zero width are treated as combining characters when the option COMBINING\\_CHARS is on. If the option is off, or if a character appears where a combining character is not valid, the character is treated as unprintable.\n\nUnprintable multibyte characters are shown as a hexadecimal number between angle brackets. The number is the code point of the character in the wide character set; this may or may not be Unicode, depending on the operating system.\n\nInvalid multibyte characters\n\nIf the MULTIBYTE option is in effect, any sequence of one or more bytes that does not form a valid character in the current character set is treated as a series of bytes each shown as a special character. This case can be distinguished from other unprintable characters as the bytes are represented as two hexadecimal digits between angle brackets, as distinct from the four or eight digits that are used for unprintable characters that are nonetheless valid in the current character set.\n\nNot all systems support this: for it to work, the system’s representation of wide characters must be code values from the Universal Character Set, as defined by IS0 10646 (also known as Unicode).\n\nWrapped double-width characters\n\nWhen a double-width character appears in the final column of a line, it is instead shown on the next line. The empty space left in the original position is highlighted as a special character.\n\nIf zle\\_highlight is not set or no value applies to a particular context, the defaults applied are equivalent to\n\nzle\\_highlight=(region:standout special:standout\nsuffix:bold isearch:underline paste:standout)\n\ni.e. both the region and special characters are shown in standout mode.\n\nWithin widgets, arbitrary regions may be highlighted by setting the special array parameter region\\_highlight; see [Zle Widgets](#Zle-Widgets).\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 527,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Line-Editor-html-Zsh-Line-Editor-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Line-Editor-html-Zsh-Line-Editor-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Line-Editor-html-Zsh-Line-Editor-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Line-Editor-html-Zsh-Line-Editor-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Line-Editor-html-Zsh-Line-Editor-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 108365,
      "readableText": 134948,
      "none": 162587,
      "readableTextIfPossible": 134948,
      "result": 134948,
      "markdown": 97639
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs-_0026-Signals",
    "loadedTime": "2025-05-08T06:51:37.608Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs-_0026-Signals",
    "title": "zsh: 10 Jobs & Signals",
    "description": "zsh: 10 Jobs & Signals",
    "author": null,
    "keywords": "zsh: 10 Jobs & Signals",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:33 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-37de\"",
      "expires": "Thu, 08 May 2025 06:52:33 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7077ddd3136d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 10 Jobs & Signals\n10.1 Jobs\nIf the MONITOR option is set, an interactive shell associates a job with each pipeline. It keeps a table of current jobs, printed by the jobs command, and assigns them small integer numbers. When a job is started asynchronously with ‘&’, the shell prints a line to standard error which looks like: \nindicating that the job which was started asynchronously was job number 1 and had one (top-level) process, whose process ID was 1234. \nIf a job is started with ‘&|’ or ‘&!’, then that job is immediately disowned. After startup, it does not have a place in the job table, and is not subject to the job control features described here. \nIf you are running a job and wish to do something else you may hit the key ^Z (control-Z) which sends a TSTP signal to the current job: this key may be redefined by the susp option of the external stty command. The shell will then normally indicate that the job has been ‘suspended’, and print another prompt. You can then manipulate the state of this job, putting it in the background with the bg command, or run some other commands and then eventually bring the job back into the foreground with the foreground command fg. A ^Z takes effect immediately and is like an interrupt in that pending output and unread input are discarded when it is typed. \nA job being run in the background will suspend if it tries to read from the terminal. \nNote that if the job running in the foreground is a shell function, then suspending it will have the effect of causing the shell to fork. This is necessary to separate the function’s state from that of the parent shell performing the job control, so that the latter can return to the command line prompt. As a result, even if fg is used to continue the job the function will no longer be part of the parent shell, and any variables set by the function will not be visible in the parent shell. Thus the behaviour is different from the case where the function was never suspended. Zsh is different from many other shells in this regard. \nOne additional side effect is that use of disown with a job created by suspending shell code in this fashion is delayed: the job can only be disowned once any process started from the parent shell has terminated. At that point, the disowned job disappears silently from the job list. \nThe same behaviour is found when the shell is executing code as the right hand side of a pipeline or any complex shell construct such as if, for, etc., in order that the entire block of code can be managed as a single job. Background jobs are normally allowed to produce output, but this can be disabled by giving the command ‘stty tostop’. If you set this tty option, then background jobs will suspend when they try to produce output like they do when they try to read input. \nWhen a command is suspended and continued later with the fg or wait builtins, zsh restores tty modes that were in effect when it was suspended. This (intentionally) does not apply if the command is continued via ‘kill -CONT’, nor when it is continued with bg. \nThere are several ways to refer to jobs in the shell. A job can be referred to by the process ID of any process of the job or by one of the following: \n%number \nThe job with the given number. \n%string \nThe last job whose command line begins with string. \n%?string \nThe last job whose command line contains string. \n%% \nCurrent job. \n%+ \nEquivalent to ‘%%’. \n%- \nPrevious job. \nThe shell learns immediately whenever a process changes state. It normally informs you whenever a job becomes blocked so that no further progress is possible. If the NOTIFY option is not set, it waits until just before it prints a prompt before it informs you. All such notifications are sent directly to the terminal, not to the standard output or standard error. \nWhen the monitor mode is on, each background job that completes triggers any trap set for CHLD. \nWhen you try to leave the shell while jobs are running or suspended, you will be warned that ‘You have suspended (running) jobs’. You may use the jobs command to see what they are. If you do this or immediately try to exit again, the shell will not warn you a second time; the suspended jobs will be terminated, and the running jobs will be sent a SIGHUP signal, if the HUP option is set. \nTo avoid having the shell terminate the running jobs, either use the nohup(1) command or the disown builtin. \n10.2 Signals\nThe INT and QUIT signals for an invoked command are ignored if the command is followed by ‘&’ and the MONITOR option is not active. The shell itself always ignores the QUIT signal. Otherwise, signals have the values inherited by the shell from its parent (but see the TRAPNAL special functions in Functions). \nCertain jobs are run asynchronously by the shell other than those explicitly put into the background; even in cases where the shell would usually wait for such jobs, an explicit exit command or exit due to the option ERR_EXIT will cause the shell to exit without waiting. Examples of such asynchronous jobs are process substitution, see Process Substitution, and the handler processes for multios, see the section Multios in Redirection. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Jobs--0026-Signals-html-Jobs--0026-Signals-c42c.html",
  "markdown": "# zsh: 10 Jobs & Signals\n\n* * *\n\n## 10.1 Jobs\n\nIf the MONITOR option is set, an interactive shell associates a _job_ with each pipeline. It keeps a table of current jobs, printed by the jobs command, and assigns them small integer numbers. When a job is started asynchronously with ‘&’, the shell prints a line to standard error which looks like:\n\nindicating that the job which was started asynchronously was job number 1 and had one (top-level) process, whose process ID was 1234.\n\nIf a job is started with ‘&|’ or ‘&!’, then that job is immediately disowned. After startup, it does not have a place in the job table, and is not subject to the job control features described here.\n\nIf you are running a job and wish to do something else you may hit the key ^Z (control-Z) which sends a TSTP signal to the current job: this key may be redefined by the susp option of the external stty command. The shell will then normally indicate that the job has been ‘suspended’, and print another prompt. You can then manipulate the state of this job, putting it in the background with the bg command, or run some other commands and then eventually bring the job back into the foreground with the foreground command fg. A ^Z takes effect immediately and is like an interrupt in that pending output and unread input are discarded when it is typed.\n\nA job being run in the background will suspend if it tries to read from the terminal.\n\nNote that if the job running in the foreground is a shell function, then suspending it will have the effect of causing the shell to fork. This is necessary to separate the function’s state from that of the parent shell performing the job control, so that the latter can return to the command line prompt. As a result, even if fg is used to continue the job the function will no longer be part of the parent shell, and any variables set by the function will not be visible in the parent shell. Thus the behaviour is different from the case where the function was never suspended. Zsh is different from many other shells in this regard.\n\nOne additional side effect is that use of disown with a job created by suspending shell code in this fashion is delayed: the job can only be disowned once any process started from the parent shell has terminated. At that point, the disowned job disappears silently from the job list.\n\nThe same behaviour is found when the shell is executing code as the right hand side of a pipeline or any complex shell construct such as if, for, etc., in order that the entire block of code can be managed as a single job. Background jobs are normally allowed to produce output, but this can be disabled by giving the command ‘stty tostop’. If you set this tty option, then background jobs will suspend when they try to produce output like they do when they try to read input.\n\nWhen a command is suspended and continued later with the fg or wait builtins, zsh restores tty modes that were in effect when it was suspended. This (intentionally) does not apply if the command is continued via ‘kill -CONT’, nor when it is continued with bg.\n\nThere are several ways to refer to jobs in the shell. A job can be referred to by the process ID of any process of the job or by one of the following:\n\n%number\n\nThe job with the given number.\n\n%string\n\nThe last job whose command line begins with string.\n\n%?string\n\nThe last job whose command line contains string.\n\n%%\n\nCurrent job.\n\n%+\n\nEquivalent to ‘%%’.\n\n%-\n\nPrevious job.\n\nThe shell learns immediately whenever a process changes state. It normally informs you whenever a job becomes blocked so that no further progress is possible. If the NOTIFY option is not set, it waits until just before it prints a prompt before it informs you. All such notifications are sent directly to the terminal, not to the standard output or standard error.\n\nWhen the monitor mode is on, each background job that completes triggers any trap set for CHLD.\n\nWhen you try to leave the shell while jobs are running or suspended, you will be warned that ‘You have suspended (running) jobs’. You may use the jobs command to see what they are. If you do this or immediately try to exit again, the shell will not warn you a second time; the suspended jobs will be terminated, and the running jobs will be sent a SIGHUP signal, if the HUP option is set.\n\nTo avoid having the shell terminate the running jobs, either use the nohup(1) command or the disown builtin.\n\n* * *\n\n## 10.2 Signals\n\nThe INT and QUIT signals for an invoked command are ignored if the command is followed by ‘&’ and the MONITOR option is not active. The shell itself always ignores the QUIT signal. Otherwise, signals have the values inherited by the shell from its parent (but see the TRAPNAL special functions in [Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions)).\n\nCertain jobs are run asynchronously by the shell other than those explicitly put into the background; even in cases where the shell would usually wait for such jobs, an explicit exit command or exit due to the option ERR\\_EXIT will cause the shell to exit without waiting. Examples of such asynchronous jobs are process substitution, see [Process Substitution](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Process-Substitution), and the handler processes for multios, see the section _Multios_ in [Redirection](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirection).\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 59,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Jobs--0026-Signals-html-Jobs--0026-Signals-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Jobs--0026-Signals-html-Jobs--0026-Signals-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Jobs--0026-Signals-html-Jobs--0026-Signals-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Jobs--0026-Signals-html-Jobs--0026-Signals-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Jobs--0026-Signals-html-Jobs--0026-Signals-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 6148,
      "readableText": 7478,
      "none": 12553,
      "readableTextIfPossible": 7478,
      "result": 7478,
      "markdown": 5571
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#Completion-Using-compctl",
    "loadedTime": "2025-05-08T06:51:39.812Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#Completion-Using-compctl",
    "title": "zsh: 21 Completion Using compctl",
    "description": "zsh: 21 Completion Using compctl",
    "author": null,
    "keywords": "zsh: 21 Completion Using compctl",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:36 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-cd07\"",
      "expires": "Thu, 08 May 2025 06:52:36 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7078cedcf36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 21 Completion Using compctl\n21.1 Types of completion\nThis version of zsh has two ways of performing completion of words on the command line. New users of the shell may prefer to use the newer and more powerful system based on shell functions; this is described in Completion System, and the basic shell mechanisms which support it are described in Completion Widgets. This chapter describes the older compctl command. \n21.2 Description\ncompctl [ -CDT ] options [ command ... ] compctl [ -CDT ] options [ -x pattern options - ... -- ] [ + options [ -x ... -- ] ... [+] ] [ command ... ] compctl -M match-specs ... compctl -L [ -CDTM ] [ command ... ] compctl + command ... \nControl the editor’s completion behavior according to the supplied set of options. Various editing commands, notably expand-or-complete-word, usually bound to tab, will attempt to complete a word typed by the user, while others, notably delete-char-or-list, usually bound to ^D in EMACS editing mode, list the possibilities; compctl controls what those possibilities are. They may for example be filenames (the most common case, and hence the default), shell variables, or words from a user-specified list. \n21.3 Command Flags\nCompletion of the arguments of a command may be different for each command or may use the default. The behavior when completing the command word itself may also be separately specified. These correspond to the following flags and arguments, all of which (except for -L) may be combined with any combination of the options described subsequently in Option Flags: \ncommand ... \ncontrols completion for the named commands, which must be listed last on the command line. If completion is attempted for a command with a pathname containing slashes and no completion definition is found, the search is retried with the last pathname component. If the command starts with a =, completion is tried with the pathname of the command. \nAny of the command strings may be patterns of the form normally used for filename generation. These should be quoted to protect them from immediate expansion; for example the command string ’foo*’ arranges for completion of the words of any command beginning with foo. When completion is attempted, all pattern completions are tried in the reverse order of their definition until one matches. By default, completion then proceeds as normal, i.e. the shell will try to generate more matches for the specific command on the command line; this can be overridden by including -tn in the flags for the pattern completion. \nNote that aliases are expanded before the command name is determined unless the COMPLETE_ALIASES option is set. Commands may not be combined with the -C, -D or -T flags. \n-C \ncontrols completion when the command word itself is being completed. If no compctl -C command has been issued, the names of any executable command (whether in the path or specific to the shell, such as aliases or functions) are completed. \n-D \ncontrols default completion behavior for the arguments of commands not assigned any special behavior. If no compctl -D command has been issued, filenames are completed. \n-T \nsupplies completion flags to be used before any other processing is done, even before processing for compctls defined for specific commands. This is especially useful when combined with extended completion (the -x flag, see Extended Completion below). Using this flag you can define default behavior which will apply to all commands without exception, or you can alter the standard behavior for all commands. For example, if your access to the user database is too slow and/or it contains too many users (so that completion after ‘~’ is too slow to be usable), you can use \ncompctl -T -x 's[~] C[0,[^/]#]' -k friends -S/ -tn\nto complete the strings in the array friends after a ‘~’. The C[...] argument is necessary so that this form of ~-completion is not tried after the directory name is finished. \n-L \nlists the existing completion behavior in a manner suitable for putting into a start-up script; the existing behavior is not changed. Any combination of the above forms, or the -M flag (which must follow the -L flag), may be specified, otherwise all defined completions are listed. Any other flags supplied are ignored. \nno argument \nIf no argument is given, compctl lists all defined completions in an abbreviated form; with a list of options, all completions with those flags set (not counting extended completion) are listed. \nIf the + flag is alone and followed immediately by the command list, the completion behavior for all the commands in the list is reset to the default. In other words, completion will subsequently use the options specified by the -D flag. \nThe form with -M as the first and only option defines global matching specifications (see Completion Matching Control). The match specifications given will be used for every completion attempt (only when using compctl, not with the new completion system) and are tried in the order in which they are defined until one generates at least one match. E.g.: \ncompctl -M '' 'm:{a-zA-Z}={A-Za-z}'\nThis will first try completion without any global match specifications (the empty string) and, if that generates no matches, will try case insensitive completion. \n21.4 Option Flags\n[ -fcFBdeaRGovNAIOPZEnbjrzu/12 ] [ -k array ] [ -g globstring ] [ -s subststring ] [ -K function ] [ -Q ] [ -P prefix ] [ -S suffix ] [ -W file-prefix ] [ -H num pattern ] [ -q ] [ -X explanation ] [ -Y explanation ] [ -y func-or-var ] [ -l cmd ] [ -h cmd ] [ -U ] [ -t continue ] [ -J name ] [ -V name ] [ -M match-spec ] \nThe remaining options specify the type of command arguments to look for during completion. Any combination of these flags may be specified; the result is a sorted list of all the possibilities. The options are as follows. \n21.4.1 Simple Flags\nThese produce completion lists made up by the shell itself: \n-f \nFilenames and file system paths. \n-/ \nJust file system paths. \n-c \nCommand names, including aliases, shell functions, builtins and reserved words. \n-F \nFunction names. \n-B \nNames of builtin commands. \n-m \nNames of external commands. \n-w \nReserved words. \n-a \nAlias names. \n-R \nNames of regular (non-global) aliases. \n-G \nNames of global aliases. \n-d \nThis can be combined with -F, -B, -w, -a, -R and -G to get names of disabled functions, builtins, reserved words or aliases. \n-e \nThis option (to show enabled commands) is in effect by default, but may be combined with -d; -de in combination with -F, -B, -w, -a, -R and -G will complete names of functions, builtins, reserved words or aliases whether or not they are disabled. \n-o \nNames of shell options (see Options). \n-v \nNames of any variable defined in the shell. \n-N \nNames of scalar (non-array) parameters. \n-A \nArray names. \n-I \nNames of integer variables. \n-O \nNames of read-only variables. \n-p \nNames of parameters used by the shell (including special parameters). \n-Z \nNames of shell special parameters. \n-E \nNames of environment variables. \n-n \nNamed directories. \n-b \nKey binding names. \n-j \nJob names: the first word of the job leader’s command line. This is useful with the kill builtin. \n-r \nNames of running jobs. \n-z \nNames of suspended jobs. \n-u \nUser names. \n21.4.2 Flags with Arguments\nThese have user supplied arguments to determine how the list of completions is to be made up: \n-k array \nNames taken from the elements of $array (note that the ‘$’ does not appear on the command line). Alternatively, the argument array itself may be a set of space- or comma-separated values in parentheses, in which any delimiter may be escaped with a backslash; in this case the argument should be quoted. For example, \ncompctl -k \"(cputime filesize datasize stacksize\n\t       coredumpsize resident descriptors)\" limit\n-g globstring \nThe globstring is expanded using filename globbing; it should be quoted to protect it from immediate expansion. The resulting filenames are taken as the possible completions. Use ‘*(/)’ instead of ‘*/’ for directories. The fignore special parameter is not applied to the resulting files. More than one pattern may be given separated by blanks. (Note that brace expansion is not part of globbing. Use the syntax ‘(either|or)’ to match alternatives.) \n-s subststring \nThe subststring is split into words and these words are than expanded using all shell expansion mechanisms (see Expansion). The resulting words are taken as possible completions. The fignore special parameter is not applied to the resulting files. Note that -g is faster for filenames. \n-K function \nCall the given function to get the completions. Unless the name starts with an underscore, the function is passed two arguments: the prefix and the suffix of the word on which completion is to be attempted, in other words those characters before the cursor position, and those from the cursor position onwards. The whole command line can be accessed with the -c and -l flags of the read builtin. The function should set the variable reply to an array containing the completions (one completion per element); note that reply should not be made local to the function. From such a function the command line can be accessed with the -c and -l flags to the read builtin. For example, \nfunction whoson { reply=(`users`); }\ncompctl -K whoson talk\ncompletes only logged-on users after ‘talk’. Note that ‘whoson’ must return an array, so ‘reply=‘users‘’ would be incorrect. \n-H num pattern \nThe possible completions are taken from the last num history lines. Only words matching pattern are taken. If num is zero or negative the whole history is searched and if pattern is the empty string all words are taken (as with ‘*’). A typical use is \nwhich forces completion to look back in the history list for a word if no filename matches. \n21.4.3 Control Flags\nThese do not directly specify types of name to be completed, but manipulate the options that do: \n-Q \nThis instructs the shell not to quote any metacharacters in the possible completions. Normally the results of a completion are inserted into the command line with any metacharacters quoted so that they are interpreted as normal characters. This is appropriate for filenames and ordinary strings. However, for special effects, such as inserting a backquoted expression from a completion array (-k) so that the expression will not be evaluated until the complete line is executed, this option must be used. \n-P prefix \nThe prefix is inserted just before the completed string; any initial part already typed will be completed and the whole prefix ignored for completion purposes. For example, \ninserts a ‘%’ after the kill command and then completes job names. \n-S suffix \nWhen a completion is found the suffix is inserted after the completed string. In the case of menu completion the suffix is inserted immediately, but it is still possible to cycle through the list of completions by repeatedly hitting the same key. \n-W file-prefix \nWith directory file-prefix: for command, file, directory and globbing completion (options -c, -f, -/, -g), the file prefix is implicitly added in front of the completion. For example, \ncompctl -/ -W ~/Mail maildirs\ncompletes any subdirectories to any depth beneath the directory ~/Mail, although that prefix does not appear on the command line. The file-prefix may also be of the form accepted by the -k flag, i.e. the name of an array or a literal list in parenthesis. In this case all the directories in the list will be searched for possible completions. \n-q \nIf used with a suffix as specified by the -S option, this causes the suffix to be removed if the next character typed is a blank or does not insert anything or if the suffix consists of only one character and the next character typed is the same character; this the same rule used for the AUTO_REMOVE_SLASH option. The option is most useful for list separators (comma, colon, etc.). \n-l cmd \nThis option restricts the range of command line words that are considered to be arguments. If combined with one of the extended completion patterns ‘p[...]’, ‘r[...]’, or ‘R[...]’ (see Extended Completion below) the range is restricted to the range of arguments specified in the brackets. Completion is then performed as if these had been given as arguments to the cmd supplied with the option. If the cmd string is empty the first word in the range is instead taken as the command name, and command name completion performed on the first word in the range. For example, \ncompctl -x 'r[-exec,;]' -l '' -- find\ncompletes arguments between ‘-exec’ and the following ‘;’ (or the end of the command line if there is no such string) as if they were a separate command line. \n-h cmd \nNormally zsh completes quoted strings as a whole. With this option, completion can be done separately on different parts of such strings. It works like the -l option but makes the completion code work on the parts of the current word that are separated by spaces. These parts are completed as if they were arguments to the given cmd. If cmd is the empty string, the first part is completed as a command name, as with -l. \n-U \nUse the whole list of possible completions, whether or not they actually match the word on the command line. The word typed so far will be deleted. This is most useful with a function (given by the -K option) which can examine the word components passed to it (or via the read builtin’s -c and -l flags) and use its own criteria to decide what matches. If there is no completion, the original word is retained. Since the produced possible completions seldom have interesting common prefixes and suffixes, menu completion is started immediately if AUTO_MENU is set and this flag is used. \n-y func-or-var \nThe list provided by func-or-var is displayed instead of the list of completions whenever a listing is required; the actual completions to be inserted are not affected. It can be provided in two ways. Firstly, if func-or-var begins with a $ it defines a variable, or if it begins with a left parenthesis a literal array, which contains the list. A variable may have been set by a call to a function using the -K option. Otherwise it contains the name of a function which will be executed to create the list. The function will be passed as an argument list all matching completions, including prefixes and suffixes expanded in full, and should set the array reply to the result. In both cases, the display list will only be retrieved after a complete list of matches has been created. \nNote that the returned list does not have to correspond, even in length, to the original set of matches, and may be passed as a scalar instead of an array. No special formatting of characters is performed on the output in this case; in particular, newlines are printed literally and if they appear output in columns is suppressed. \n-X explanation \nPrint explanation when trying completion on the current set of options. A ‘%n’ in this string is replaced by the number of matches that were added for this explanation string. The explanation only appears if completion was tried and there was no unique match, or when listing completions. Explanation strings will be listed together with the matches of the group specified together with the -X option (using the -J or -V option). If the same explanation string is given to multiple -X options, the string appears only once (for each group) and the number of matches shown for the ‘%n’ is the total number of all matches for each of these uses. In any case, the explanation string will only be shown if there was at least one match added for the explanation string. \nThe sequences %B, %b, %S, %s, %U, and %u specify output attributes (bold, standout, and underline), %F, %f, %K, %k specify foreground and background colours, and %{...%} can be used to include literal escape sequences as in prompts. \n-Y explanation \nIdentical to -X, except that the explanation first undergoes expansion following the usual rules for strings in double quotes. The expansion will be carried out after any functions are called for the -K or -y options, allowing them to set variables. \n-t continue \nThe continue-string contains a character that specifies which set of completion flags should be used next. It is useful: \n(i) With -T, or when trying a list of pattern completions, when compctl would usually continue with ordinary processing after finding matches; this can be suppressed with ‘-tn’. \n(ii) With a list of alternatives separated by +, when compctl would normally stop when one of the alternatives generates matches. It can be forced to consider the next set of completions by adding ‘-t+’ to the flags of the alternative before the ‘+’. \n(iii) In an extended completion list (see below), when compctl would normally continue until a set of conditions succeeded, then use only the immediately following flags. With ‘-t-’, compctl will continue trying extended completions after the next ‘-’; with ‘-tx’ it will attempt completion with the default flags, in other words those before the ‘-x’. \n-J name \nThis gives the name of the group the matches should be placed in. Groups are listed and sorted separately; likewise, menu completion will offer the matches in the groups in the order in which the groups were defined. If no group name is explicitly given, the matches are stored in a group named default. The first time a group name is encountered, a group with that name is created. After that all matches with the same group name are stored in that group. \nThis can be useful with non-exclusive alternative completions. For example, in \ncompctl -f -J files -t+ + -v -J variables foo\nboth files and variables are possible completions, as the -t+ forces both sets of alternatives before and after the + to be considered at once. Because of the -J options, however, all files are listed before all variables. \n-V name \nLike -J, but matches within the group will not be sorted in listings nor in menu completion. These unsorted groups are in a different name space from the sorted ones, so groups defined as -J files and -V files are distinct. \n-1 \nIf given together with the -V option, makes only consecutive duplicates in the group be removed. Note that groups with and without this flag are in different name spaces. \n-2 \nIf given together with the -J or -V option, makes all duplicates be kept. Again, groups with and without this flag are in different name spaces. \n-M match-spec \nThis defines additional matching control specifications that should be used only when testing words for the list of flags this flag appears in. The format of the match-spec string is described in Completion Matching Control. \n21.5 Alternative Completion\ncompctl [ -CDT ] options + options [ + ... ] [ + ] command ... \nThe form with ‘+’ specifies alternative options. Completion is tried with the options before the first ‘+’. If this produces no matches completion is tried with the flags after the ‘+’ and so on. If there are no flags after the last ‘+’ and a match has not been found up to that point, default completion is tried. If the list of flags contains a -t with a + character, the next list of flags is used even if the current list produced matches. \nAdditional options are available that restrict completion to some part of the command line; this is referred to as ‘extended completion’. \n21.6 Extended Completion\ncompctl [ -CDT ] options -x pattern options - ... -- [ command ... ] compctl [ -CDT ] options [ -x pattern options - ... -- ] [ + options [ -x ... -- ] ... [+] ] [ command ... ] \nThe form with ‘-x’ specifies extended completion for the commands given; as shown, it may be combined with alternative completion using ‘+’. Each pattern is examined in turn; when a match is found, the corresponding options, as described in Option Flags above, are used to generate possible completions. If no pattern matches, the options given before the -x are used. \nNote that each pattern should be supplied as a single argument and should be quoted to prevent expansion of metacharacters by the shell. \nA pattern is built of sub-patterns separated by commas; it matches if at least one of these sub-patterns matches (they are ‘or’ed). These sub-patterns are in turn composed of other sub-patterns separated by white spaces which match if all of the sub-patterns match (they are ‘and’ed). An element of the sub-patterns is of the form ‘c[...][...]’, where the pairs of brackets may be repeated as often as necessary, and matches if any of the sets of brackets match (an ‘or’). The example below makes this clearer. \nThe elements may be any of the following: \ns[string]... \nMatches if the current word on the command line starts with one of the strings given in brackets. The string is not removed and is not part of the completion. \nS[string]... \nLike s[string] except that the string is part of the completion. \np[from,to]... \nMatches if the number of the current word is between one of the from and to pairs inclusive. The comma and to are optional; to defaults to the same value as from. The numbers may be negative: -n refers to the n’th last word on the line. \nc[offset,string]... \nMatches if the string matches the word offset by offset from the current word position. Usually offset will be negative. \nC[offset,pattern]... \nLike c but using pattern matching instead. \nw[index,string]... \nMatches if the word in position index is equal to the corresponding string. Note that the word count is made after any alias expansion. \nW[index,pattern]... \nLike w but using pattern matching instead. \nn[index,string]... \nMatches if the current word contains string. Anything up to and including the indexth occurrence of this string will not be considered part of the completion, but the rest will. index may be negative to count from the end: in most cases, index will be 1 or -1. For example, \ncompctl -s '`users`' -x 'n[1,@]' -k hosts -- talk\nwill usually complete usernames, but if you insert an @ after the name, names from the array hosts (assumed to contain hostnames, though you must make the array yourself) will be completed. Other commands such as rcp can be handled similarly. \nN[index,string]... \nLike n except that the string will be taken as a character class. Anything up to and including the indexth occurrence of any of the characters in string will not be considered part of the completion. \nm[min,max]... \nMatches if the total number of words lies between min and max inclusive. \nr[str1,str2]... \nMatches if the cursor is after a word with prefix str1. If there is also a word with prefix str2 on the command line after the one matched by str1 it matches only if the cursor is before this word. If the comma and str2 are omitted, it matches if the cursor is after a word with prefix str1. \nR[str1,str2]... \nLike r but using pattern matching instead. \nq[str]... \nMatches the word currently being completed is in single quotes and the str begins with the letter ‘s’, or if completion is done in double quotes and str starts with the letter ‘d’, or if completion is done in backticks and str starts with a ‘b’. \n21.7 Example\ncompctl -u -x 's[+] c[-1,-f],s[-f+]' \\ \n  -g '~/Mail/*(:t)' - 's[-f],c[-1,-f]' -f -- mail\nThis is to be interpreted as follows: \nIf the current command is mail, then \nif ((the current word begins with + and the previous word is -f) or (the current word begins with -f+)), then complete the non-directory part (the ‘:t’ glob modifier) of files in the directory ~/Mail; else \nif the current word begins with -f or the previous word was -f, then complete any file; else \ncomplete user names. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Using-compctl-html-Completion-Using-compctl-h5zaqf.html",
  "markdown": "# zsh: 21 Completion Using compctl\n\n* * *\n\n## 21.1 Types of completion\n\nThis version of zsh has two ways of performing completion of words on the command line. New users of the shell may prefer to use the newer and more powerful system based on shell functions; this is described in [Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System), and the basic shell mechanisms which support it are described in [Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets). This chapter describes the older compctl command.\n\n* * *\n\n## 21.2 Description\n\ncompctl \\[ \\-CDT \\] options \\[ command ... \\]\n\ncompctl \\[ \\-CDT \\] options \\[ \\-x pattern options \\- ... \\-\\- \\]\n\n        \\[ + options \\[ \\-x ... \\-\\- \\] ... \\[+\\] \\] \\[ command ... \\]\n\ncompctl \\-M match-specs ...\n\ncompctl \\-L \\[ \\-CDTM \\] \\[ command ... \\]\n\ncompctl + command ...\n\nControl the editor’s completion behavior according to the supplied set of options. Various editing commands, notably expand-or-complete-word, usually bound to tab, will attempt to complete a word typed by the user, while others, notably delete-char-or-list, usually bound to ^D in EMACS editing mode, list the possibilities; compctl controls what those possibilities are. They may for example be filenames (the most common case, and hence the default), shell variables, or words from a user-specified list.\n\n* * *\n\n## 21.3 Command Flags\n\nCompletion of the arguments of a command may be different for each command or may use the default. The behavior when completing the command word itself may also be separately specified. These correspond to the following flags and arguments, all of which (except for \\-L) may be combined with any combination of the options described subsequently in [Option Flags](#Option-Flags):\n\ncommand ...\n\ncontrols completion for the named commands, which must be listed last on the command line. If completion is attempted for a command with a pathname containing slashes and no completion definition is found, the search is retried with the last pathname component. If the command starts with a \\=, completion is tried with the pathname of the command.\n\nAny of the command strings may be patterns of the form normally used for filename generation. These should be quoted to protect them from immediate expansion; for example the command string ’foo\\*’ arranges for completion of the words of any command beginning with foo. When completion is attempted, all pattern completions are tried in the reverse order of their definition until one matches. By default, completion then proceeds as normal, i.e. the shell will try to generate more matches for the specific command on the command line; this can be overridden by including \\-tn in the flags for the pattern completion.\n\nNote that aliases are expanded before the command name is determined unless the COMPLETE\\_ALIASES option is set. Commands may not be combined with the \\-C, \\-D or \\-T flags.\n\n\\-C\n\ncontrols completion when the command word itself is being completed. If no compctl -C command has been issued, the names of any executable command (whether in the path or specific to the shell, such as aliases or functions) are completed.\n\n\\-D\n\ncontrols default completion behavior for the arguments of commands not assigned any special behavior. If no compctl -D command has been issued, filenames are completed.\n\n\\-T\n\nsupplies completion flags to be used before any other processing is done, even before processing for compctls defined for specific commands. This is especially useful when combined with extended completion (the \\-x flag, see [Extended Completion](#Extended-Completion) below). Using this flag you can define default behavior which will apply to all commands without exception, or you can alter the standard behavior for all commands. For example, if your access to the user database is too slow and/or it contains too many users (so that completion after ‘~’ is too slow to be usable), you can use\n\ncompctl -T -x 's\\[~\\] C\\[0,\\[^/\\]#\\]' -k friends -S/ -tn\n\nto complete the strings in the array friends after a ‘~’. The C\\[...\\] argument is necessary so that this form of ~\\-completion is not tried after the directory name is finished.\n\n\\-L\n\nlists the existing completion behavior in a manner suitable for putting into a start-up script; the existing behavior is not changed. Any combination of the above forms, or the \\-M flag (which must follow the \\-L flag), may be specified, otherwise all defined completions are listed. Any other flags supplied are ignored.\n\n_no argument_\n\nIf no argument is given, compctl lists all defined completions in an abbreviated form; with a list of options, all completions with those flags set (not counting extended completion) are listed.\n\nIf the + flag is alone and followed immediately by the command list, the completion behavior for all the commands in the list is reset to the default. In other words, completion will subsequently use the options specified by the \\-D flag.\n\nThe form with \\-M as the first and only option defines global matching specifications (see [Completion Matching Control](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Matching-Control)). The match specifications given will be used for every completion attempt (only when using compctl, not with the new completion system) and are tried in the order in which they are defined until one generates at least one match. E.g.:\n\ncompctl -M '' 'm:{a-zA-Z}={A-Za-z}'\n\nThis will first try completion without any global match specifications (the empty string) and, if that generates no matches, will try case insensitive completion.\n\n* * *\n\n## 21.4 Option Flags\n\n\\[ \\-fcFBdeaRGovNAIOPZEnbjrzu/12 \\]\n\n\\[ \\-k array \\] \\[ \\-g globstring \\] \\[ \\-s subststring \\]\n\n\\[ \\-K function \\]\n\n\\[ \\-Q \\] \\[ \\-P prefix \\] \\[ \\-S suffix \\]\n\n\\[ \\-W file-prefix \\] \\[ \\-H num pattern \\]\n\n\\[ \\-q \\] \\[ \\-X explanation \\] \\[ \\-Y explanation \\]\n\n\\[ \\-y func-or-var \\] \\[ \\-l cmd \\] \\[ \\-h cmd \\] \\[ \\-U \\]\n\n\\[ \\-t continue \\] \\[ \\-J name \\] \\[ \\-V name \\]\n\n\\[ \\-M match-spec \\]\n\nThe remaining options specify the type of command arguments to look for during completion. Any combination of these flags may be specified; the result is a sorted list of all the possibilities. The options are as follows.\n\n* * *\n\n### 21.4.1 Simple Flags\n\nThese produce completion lists made up by the shell itself:\n\n\\-f\n\nFilenames and file system paths.\n\n\\-/\n\nJust file system paths.\n\n\\-c\n\nCommand names, including aliases, shell functions, builtins and reserved words.\n\n\\-F\n\nFunction names.\n\n\\-B\n\nNames of builtin commands.\n\n\\-m\n\nNames of external commands.\n\n\\-w\n\nReserved words.\n\n\\-a\n\nAlias names.\n\n\\-R\n\nNames of regular (non-global) aliases.\n\n\\-G\n\nNames of global aliases.\n\n\\-d\n\nThis can be combined with \\-F, \\-B, \\-w, \\-a, \\-R and \\-G to get names of disabled functions, builtins, reserved words or aliases.\n\n\\-e\n\nThis option (to show enabled commands) is in effect by default, but may be combined with \\-d; \\-de in combination with \\-F, \\-B, \\-w, \\-a, \\-R and \\-G will complete names of functions, builtins, reserved words or aliases whether or not they are disabled.\n\n\\-o\n\nNames of shell options (see [Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Options)).\n\n\\-v\n\nNames of any variable defined in the shell.\n\n\\-N\n\nNames of scalar (non-array) parameters.\n\n\\-A\n\nArray names.\n\n\\-I\n\nNames of integer variables.\n\n\\-O\n\nNames of read-only variables.\n\n\\-p\n\nNames of parameters used by the shell (including special parameters).\n\n\\-Z\n\nNames of shell special parameters.\n\n\\-E\n\nNames of environment variables.\n\n\\-n\n\nNamed directories.\n\n\\-b\n\nKey binding names.\n\n\\-j\n\nJob names: the first word of the job leader’s command line. This is useful with the kill builtin.\n\n\\-r\n\nNames of running jobs.\n\n\\-z\n\nNames of suspended jobs.\n\n\\-u\n\nUser names.\n\n* * *\n\n### 21.4.2 Flags with Arguments\n\nThese have user supplied arguments to determine how the list of completions is to be made up:\n\n\\-k array\n\nNames taken from the elements of $array (note that the ‘$’ does not appear on the command line). Alternatively, the argument array itself may be a set of space- or comma-separated values in parentheses, in which any delimiter may be escaped with a backslash; in this case the argument should be quoted. For example,\n\ncompctl -k \"(cputime filesize datasize stacksize\n\t       coredumpsize resident descriptors)\" limit\n\n\\-g globstring\n\nThe globstring is expanded using filename globbing; it should be quoted to protect it from immediate expansion. The resulting filenames are taken as the possible completions. Use ‘\\*(/)’ instead of ‘\\*/’ for directories. The fignore special parameter is not applied to the resulting files. More than one pattern may be given separated by blanks. (Note that brace expansion is _not_ part of globbing. Use the syntax ‘(either|or)’ to match alternatives.)\n\n\\-s subststring\n\nThe subststring is split into words and these words are than expanded using all shell expansion mechanisms (see [Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Expansion)). The resulting words are taken as possible completions. The fignore special parameter is not applied to the resulting files. Note that \\-g is faster for filenames.\n\n\\-K function\n\nCall the given function to get the completions. Unless the name starts with an underscore, the function is passed two arguments: the prefix and the suffix of the word on which completion is to be attempted, in other words those characters before the cursor position, and those from the cursor position onwards. The whole command line can be accessed with the \\-c and \\-l flags of the read builtin. The function should set the variable reply to an array containing the completions (one completion per element); note that reply should not be made local to the function. From such a function the command line can be accessed with the \\-c and \\-l flags to the read builtin. For example,\n\nfunction whoson { reply=(\\`users\\`); }\ncompctl -K whoson talk\n\ncompletes only logged-on users after ‘talk’. Note that ‘whoson’ must return an array, so ‘reply=‘users‘’ would be incorrect.\n\n\\-H num pattern\n\nThe possible completions are taken from the last num history lines. Only words matching pattern are taken. If num is zero or negative the whole history is searched and if pattern is the empty string all words are taken (as with ‘\\*’). A typical use is\n\nwhich forces completion to look back in the history list for a word if no filename matches.\n\n* * *\n\n### 21.4.3 Control Flags\n\nThese do not directly specify types of name to be completed, but manipulate the options that do:\n\n\\-Q\n\nThis instructs the shell not to quote any metacharacters in the possible completions. Normally the results of a completion are inserted into the command line with any metacharacters quoted so that they are interpreted as normal characters. This is appropriate for filenames and ordinary strings. However, for special effects, such as inserting a backquoted expression from a completion array (\\-k) so that the expression will not be evaluated until the complete line is executed, this option must be used.\n\n\\-P prefix\n\nThe prefix is inserted just before the completed string; any initial part already typed will be completed and the whole prefix ignored for completion purposes. For example,\n\ninserts a ‘%’ after the kill command and then completes job names.\n\n\\-S suffix\n\nWhen a completion is found the suffix is inserted after the completed string. In the case of menu completion the suffix is inserted immediately, but it is still possible to cycle through the list of completions by repeatedly hitting the same key.\n\n\\-W file-prefix\n\nWith directory file-prefix: for command, file, directory and globbing completion (options \\-c, \\-f, \\-/, \\-g), the file prefix is implicitly added in front of the completion. For example,\n\ncompctl -/ -W ~/Mail maildirs\n\ncompletes any subdirectories to any depth beneath the directory ~/Mail, although that prefix does not appear on the command line. The file-prefix may also be of the form accepted by the \\-k flag, i.e. the name of an array or a literal list in parenthesis. In this case all the directories in the list will be searched for possible completions.\n\n\\-q\n\nIf used with a suffix as specified by the \\-S option, this causes the suffix to be removed if the next character typed is a blank or does not insert anything or if the suffix consists of only one character and the next character typed is the same character; this the same rule used for the AUTO\\_REMOVE\\_SLASH option. The option is most useful for list separators (comma, colon, etc.).\n\n\\-l cmd\n\nThis option restricts the range of command line words that are considered to be arguments. If combined with one of the extended completion patterns ‘p\\[...\\]’, ‘r\\[...\\]’, or ‘R\\[...\\]’ (see [Extended Completion](#Extended-Completion) below) the range is restricted to the range of arguments specified in the brackets. Completion is then performed as if these had been given as arguments to the cmd supplied with the option. If the cmd string is empty the first word in the range is instead taken as the command name, and command name completion performed on the first word in the range. For example,\n\ncompctl -x 'r\\[-exec,;\\]' -l '' -- find\n\ncompletes arguments between ‘\\-exec’ and the following ‘;’ (or the end of the command line if there is no such string) as if they were a separate command line.\n\n\\-h cmd\n\nNormally zsh completes quoted strings as a whole. With this option, completion can be done separately on different parts of such strings. It works like the \\-l option but makes the completion code work on the parts of the current word that are separated by spaces. These parts are completed as if they were arguments to the given cmd. If cmd is the empty string, the first part is completed as a command name, as with \\-l.\n\n\\-U\n\nUse the whole list of possible completions, whether or not they actually match the word on the command line. The word typed so far will be deleted. This is most useful with a function (given by the \\-K option) which can examine the word components passed to it (or via the read builtin’s \\-c and \\-l flags) and use its own criteria to decide what matches. If there is no completion, the original word is retained. Since the produced possible completions seldom have interesting common prefixes and suffixes, menu completion is started immediately if AUTO\\_MENU is set and this flag is used.\n\n\\-y func-or-var\n\nThe list provided by func-or-var is displayed instead of the list of completions whenever a listing is required; the actual completions to be inserted are not affected. It can be provided in two ways. Firstly, if func-or-var begins with a $ it defines a variable, or if it begins with a left parenthesis a literal array, which contains the list. A variable may have been set by a call to a function using the \\-K option. Otherwise it contains the name of a function which will be executed to create the list. The function will be passed as an argument list all matching completions, including prefixes and suffixes expanded in full, and should set the array reply to the result. In both cases, the display list will only be retrieved after a complete list of matches has been created.\n\nNote that the returned list does not have to correspond, even in length, to the original set of matches, and may be passed as a scalar instead of an array. No special formatting of characters is performed on the output in this case; in particular, newlines are printed literally and if they appear output in columns is suppressed.\n\n\\-X explanation\n\nPrint explanation when trying completion on the current set of options. A ‘%n’ in this string is replaced by the number of matches that were added for this explanation string. The explanation only appears if completion was tried and there was no unique match, or when listing completions. Explanation strings will be listed together with the matches of the group specified together with the \\-X option (using the \\-J or \\-V option). If the same explanation string is given to multiple \\-X options, the string appears only once (for each group) and the number of matches shown for the ‘%n’ is the total number of all matches for each of these uses. In any case, the explanation string will only be shown if there was at least one match added for the explanation string.\n\nThe sequences %B, %b, %S, %s, %U, and %u specify output attributes (bold, standout, and underline), %F, %f, %K, %k specify foreground and background colours, and %{...%} can be used to include literal escape sequences as in prompts.\n\n\\-Y explanation\n\nIdentical to \\-X, except that the explanation first undergoes expansion following the usual rules for strings in double quotes. The expansion will be carried out after any functions are called for the \\-K or \\-y options, allowing them to set variables.\n\n\\-t continue\n\nThe continue\\-string contains a character that specifies which set of completion flags should be used next. It is useful:\n\n(i) With \\-T, or when trying a list of pattern completions, when compctl would usually continue with ordinary processing after finding matches; this can be suppressed with ‘\\-tn’.\n\n(ii) With a list of alternatives separated by +, when compctl would normally stop when one of the alternatives generates matches. It can be forced to consider the next set of completions by adding ‘\\-t+’ to the flags of the alternative before the ‘+’.\n\n(iii) In an extended completion list (see below), when compctl would normally continue until a set of conditions succeeded, then use only the immediately following flags. With ‘\\-t-’, compctl will continue trying extended completions after the next ‘\\-’; with ‘\\-tx’ it will attempt completion with the default flags, in other words those before the ‘\\-x’.\n\n\\-J name\n\nThis gives the name of the group the matches should be placed in. Groups are listed and sorted separately; likewise, menu completion will offer the matches in the groups in the order in which the groups were defined. If no group name is explicitly given, the matches are stored in a group named default. The first time a group name is encountered, a group with that name is created. After that all matches with the same group name are stored in that group.\n\nThis can be useful with non-exclusive alternative completions. For example, in\n\ncompctl -f -J files -t+ + -v -J variables foo\n\nboth files and variables are possible completions, as the \\-t+ forces both sets of alternatives before and after the + to be considered at once. Because of the \\-J options, however, all files are listed before all variables.\n\n\\-V name\n\nLike \\-J, but matches within the group will not be sorted in listings nor in menu completion. These unsorted groups are in a different name space from the sorted ones, so groups defined as \\-J files and \\-V files are distinct.\n\n\\-1\n\nIf given together with the \\-V option, makes only consecutive duplicates in the group be removed. Note that groups with and without this flag are in different name spaces.\n\n\\-2\n\nIf given together with the \\-J or \\-V option, makes all duplicates be kept. Again, groups with and without this flag are in different name spaces.\n\n\\-M match-spec\n\nThis defines additional matching control specifications that should be used only when testing words for the list of flags this flag appears in. The format of the match-spec string is described in [Completion Matching Control](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Matching-Control).\n\n* * *\n\n## 21.5 Alternative Completion\n\ncompctl \\[ \\-CDT \\] options + options \\[ + ... \\] \\[ + \\] command ...\n\nThe form with ‘+’ specifies alternative options. Completion is tried with the options before the first ‘+’. If this produces no matches completion is tried with the flags after the ‘+’ and so on. If there are no flags after the last ‘+’ and a match has not been found up to that point, default completion is tried. If the list of flags contains a \\-t with a + character, the next list of flags is used even if the current list produced matches.\n\n* * *\n\nAdditional options are available that restrict completion to some part of the command line; this is referred to as ‘extended completion’.\n\n## 21.6 Extended Completion\n\ncompctl \\[ \\-CDT \\] options \\-x pattern options \\- ... \\-\\-\n\n        \\[ command ... \\]\n\ncompctl \\[ \\-CDT \\] options \\[ \\-x pattern options \\- ... \\-\\- \\]\n\n        \\[ + options \\[ \\-x ... \\-\\- \\] ... \\[+\\] \\] \\[ command ... \\]\n\nThe form with ‘\\-x’ specifies extended completion for the commands given; as shown, it may be combined with alternative completion using ‘+’. Each pattern is examined in turn; when a match is found, the corresponding options, as described in [Option Flags](#Option-Flags) above, are used to generate possible completions. If no pattern matches, the options given before the \\-x are used.\n\nNote that each pattern should be supplied as a single argument and should be quoted to prevent expansion of metacharacters by the shell.\n\nA pattern is built of sub-patterns separated by commas; it matches if at least one of these sub-patterns matches (they are ‘or’ed). These sub-patterns are in turn composed of other sub-patterns separated by white spaces which match if all of the sub-patterns match (they are ‘and’ed). An element of the sub-patterns is of the form ‘c\\[...\\]\\[...\\]’, where the pairs of brackets may be repeated as often as necessary, and matches if any of the sets of brackets match (an ‘or’). The example below makes this clearer.\n\nThe elements may be any of the following:\n\ns\\[string\\]...\n\nMatches if the current word on the command line starts with one of the strings given in brackets. The string is not removed and is not part of the completion.\n\nS\\[string\\]...\n\nLike s\\[string\\] except that the string is part of the completion.\n\np\\[from,to\\]...\n\nMatches if the number of the current word is between one of the from and to pairs inclusive. The comma and to are optional; to defaults to the same value as from. The numbers may be negative: \\-n refers to the n’th last word on the line.\n\nc\\[offset,string\\]...\n\nMatches if the string matches the word offset by offset from the current word position. Usually offset will be negative.\n\nC\\[offset,pattern\\]...\n\nLike c but using pattern matching instead.\n\nw\\[index,string\\]...\n\nMatches if the word in position index is equal to the corresponding string. Note that the word count is made after any alias expansion.\n\nW\\[index,pattern\\]...\n\nLike w but using pattern matching instead.\n\nn\\[index,string\\]...\n\nMatches if the current word contains string. Anything up to and including the indexth occurrence of this string will not be considered part of the completion, but the rest will. index may be negative to count from the end: in most cases, index will be 1 or -1. For example,\n\ncompctl -s '\\`users\\`' -x 'n\\[1,@\\]' -k hosts -- talk\n\nwill usually complete usernames, but if you insert an @ after the name, names from the array hosts (assumed to contain hostnames, though you must make the array yourself) will be completed. Other commands such as rcp can be handled similarly.\n\nN\\[index,string\\]...\n\nLike n except that the string will be taken as a character class. Anything up to and including the indexth occurrence of any of the characters in string will not be considered part of the completion.\n\nm\\[min,max\\]...\n\nMatches if the total number of words lies between min and max inclusive.\n\nr\\[str1,str2\\]...\n\nMatches if the cursor is after a word with prefix str1. If there is also a word with prefix str2 on the command line after the one matched by str1 it matches only if the cursor is before this word. If the comma and str2 are omitted, it matches if the cursor is after a word with prefix str1.\n\nR\\[str1,str2\\]...\n\nLike r but using pattern matching instead.\n\nq\\[str\\]...\n\nMatches the word currently being completed is in single quotes and the str begins with the letter ‘s’, or if completion is done in double quotes and str starts with the letter ‘d’, or if completion is done in backticks and str starts with a ‘b’.\n\n* * *\n\n## 21.7 Example\n\ncompctl -u -x 's\\[+\\] c\\[-1,-f\\],s\\[-f+\\]' \\\\ \n  -g '~/Mail/\\*(:t)' - 's\\[-f\\],c\\[-1,-f\\]' -f -- mail\n\nThis is to be interpreted as follows:\n\nIf the current command is mail, then\n\n> if ((the current word begins with + and the previous word is \\-f) or (the current word begins with \\-f+)), then complete the non-directory part (the ‘:t’ glob modifier) of files in the directory ~/Mail; else\n> \n> if the current word begins with \\-f or the previous word was \\-f, then complete any file; else\n> \n> complete user names.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 149,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Using-compctl-html-Completion-Using-compctl-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Using-compctl-html-Completion-Using-compctl-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Using-compctl-html-Completion-Using-compctl-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Using-compctl-html-Completion-Using-compctl-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-Using-compctl-html-Completion-Using-compctl-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 27069,
      "readableText": 33086,
      "none": 50446,
      "readableTextIfPossible": 33086,
      "result": 33086,
      "markdown": 24815
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Expansion.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Expansion.html#Expansion",
    "loadedTime": "2025-05-08T06:51:31.431Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Expansion.html#Expansion",
    "title": "zsh: 14 Expansion",
    "description": "zsh: 14 Expansion",
    "author": null,
    "keywords": "zsh: 14 Expansion",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:28 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-31210\"",
      "expires": "Thu, 08 May 2025 06:52:28 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7075b8b0d36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 14 Expansion\nThe following types of expansions are performed in the indicated order in five steps: \nHistory Expansion \nThis is performed only in interactive shells. \nAlias Expansion \nAliases are expanded immediately before the command line is parsed as explained in Aliasing. \nProcess Substitution Parameter Expansion Command Substitution Arithmetic Expansion Brace Expansion \nThese five are performed in left-to-right fashion. On each argument, any of the five steps that are needed are performed one after the other. Hence, for example, all the parts of parameter expansion are completed before command substitution is started. After these expansions, all unquoted occurrences of the characters ‘\\’,‘’’ and ‘\"’ are removed. \nFilename Expansion \nIf the SH_FILE_EXPANSION option is set, the order of expansion is modified for compatibility with sh and ksh. In that case filename expansion is performed immediately after alias expansion, preceding the set of five expansions mentioned above. \nFilename Generation \nThis expansion, commonly referred to as globbing, is always done last. \nThe following sections explain the types of expansion in detail. \n14.1 History Expansion\nHistory expansion allows you to use words from previous command lines in the command line you are typing. This simplifies spelling corrections and the repetition of complicated commands or arguments. \nImmediately before execution, each command is saved in the history list, the size of which is controlled by the HISTSIZE parameter. The one most recent command is always retained in any case. Each saved command in the history list is called a history event and is assigned a number, beginning with 1 (one) when the shell starts up. The history number that you may see in your prompt (see Prompt Expansion) is the number that is to be assigned to the next command. \n14.1.1 Overview\nA history expansion begins with the first character of the histchars parameter, which is ‘!’ by default, and may occur anywhere on the command line, including inside double quotes (but not inside single quotes ’...’ or C-style quotes $’...’ nor when escaped with a backslash). \nThe first character is followed by an optional event designator (Event Designators) and then an optional word designator (Word Designators); if neither of these designators is present, no history expansion occurs. \nInput lines containing history expansions are echoed after being expanded, but before any other expansions take place and before the command is executed. It is this expanded form that is recorded as the history event for later references. \nHistory expansions do not nest. \nBy default, a history reference with no event designator refers to the same event as any preceding history reference on that command line; if it is the only history reference in a command, it refers to the previous command. However, if the option CSH_JUNKIE_HISTORY is set, then every history reference with no event specification always refers to the previous command. \nFor example, ‘!’ is the event designator for the previous command, so ‘!!:1’ always refers to the first word of the previous command, and ‘!!$’ always refers to the last word of the previous command. With CSH_JUNKIE_HISTORY set, then ‘!:1’ and ‘!$’ function in the same manner as ‘!!:1’ and ‘!!$’, respectively. Conversely, if CSH_JUNKIE_HISTORY is unset, then ‘!:1’ and ‘!$’ refer to the first and last words, respectively, of the same event referenced by the nearest other history reference preceding them on the current command line, or to the previous command if there is no preceding reference. \nThe character sequence ‘^foo^bar’ (where ‘^’ is actually the second character of the histchars parameter) repeats the last command, replacing the string foo with bar. More precisely, the sequence ‘^foo^bar^’ is synonymous with ‘!!:s^foo^bar^’, hence other modifiers (see Modifiers) may follow the final ‘^’. In particular, ‘^foo^bar^:G’ performs a global substitution. \nIf the shell encounters the character sequence ‘!\"’ in the input, the history mechanism is temporarily disabled until the current list (see Shell Grammar) is fully parsed. The ‘!\"’ is removed from the input, and any subsequent ‘!’ characters have no special significance. \nA less convenient but more comprehensible form of command history support is provided by the fc builtin. \n14.1.2 Event Designators\nAn event designator is a reference to a command-line entry in the history list. In the list below, remember that the initial ‘!’ in each item may be changed to another character by setting the histchars parameter. \n! \nStart a history expansion, except when followed by a blank, newline, ‘=’ or ‘(’. If followed immediately by a word designator (Word Designators), this forms a history reference with no event designator (Overview). \n!! \nRefer to the previous command. By itself, this expansion repeats the previous command. \n!n \nRefer to command-line n. \n!-n \nRefer to the current command-line minus n. \n!str \nRefer to the most recent command starting with str. \n!?str[?] \nRefer to the most recent command containing str. The trailing ‘?’ is necessary if this reference is to be followed by a modifier or followed by any text that is not to be considered part of str. \n!# \nRefer to the current command line typed in so far. The line is treated as if it were complete up to and including the word before the one with the ‘!#’ reference. \n!{...} \nInsulate a history reference from adjacent characters (if necessary). \n14.1.3 Word Designators\nA word designator indicates which word or words of a given command line are to be included in a history reference. A ‘:’ usually separates the event specification from the word designator. It may be omitted only if the word designator begins with a ‘^’, ‘$’, ‘*’, ‘-’ or ‘%’. Word designators include: \n0 \nThe first input word (command). \nn \nThe nth argument. \n^ \nThe first argument. That is, 1. \n$ \nThe last argument. \n% \nThe word matched by (the most recent) ?str search. \nx-y \nA range of words; x defaults to 0. \n* \nAll the arguments, or a null value if there are none. \nx* \nAbbreviates ‘x-$’. \nx- \nLike ‘x*’ but omitting word $. \nNote that a ‘%’ word designator works only when used in one of ‘!%’, ‘!:%’ or ‘!?str?:%’, and only when used after a !? expansion (possibly in an earlier command). Anything else results in an error, although the error may not be the most obvious one. \n14.1.4 Modifiers\nAfter the optional word designator, you can add a sequence of one or more of the following modifiers, each preceded by a ‘:’. These modifiers also work on the result of filename generation and parameter expansion, except where noted. \na \nTurn a file name into an absolute path: prepends the current directory, if necessary; remove ‘.’ path segments; and remove ‘..’ path segments and the segments that immediately precede them. \nThis transformation is agnostic about what is in the filesystem, i.e. is on the logical, not the physical directory. It takes place in the same manner as when changing directories when neither of the options CHASE_DOTS or CHASE_LINKS is set. For example, ‘/before/here/../after’ is always transformed to ‘/before/after’, regardless of whether ‘/before/here’ exists or what kind of object (dir, file, symlink, etc.) it is. \nA \nTurn a file name into an absolute path as the ‘a’ modifier does, and then pass the result through the realpath(3) library function to resolve symbolic links. \nNote: on systems that do not have a realpath(3) library function, symbolic links are not resolved, so on those systems ‘a’ and ‘A’ are equivalent. \nNote: foo:A and realpath(foo) are different on some inputs. For realpath(foo) semantics, see the ‘P‘ modifier. \nc \nResolve a command name into an absolute path by searching the command path given by the PATH variable. This does not work for commands containing directory parts. Note also that this does not usually work as a glob qualifier unless a file of the same name is found in the current directory. \ne \nRemove all but the part of the filename extension following the ‘.’; see the definition of the filename extension in the description of the r modifier below. Note that according to that definition the result will be empty if the string ends with a ‘.’. \nh [ digits ] \nRemove a trailing pathname component, shortening the path by one directory level: this is the ‘head’ of the pathname. This works like ‘dirname’. If the h is followed immediately (with no spaces or other separator) by any number of decimal digits, and the value of the resulting number is non-zero, that number of leading components is preserved instead of the final component being removed. In an absolute path the leading ‘/’ is the first component, so, for example, if var=/my/path/to/something, then ${var:h3} substitutes /my/path. Consecutive ‘/’s are treated the same as a single ‘/’. In parameter substitution, digits may only be used if the expression is in braces, so for example the short form substitution $var:h2 is treated as ${var:h}2, not as ${var:h2}. No restriction applies to the use of digits in history substitution or globbing qualifiers. If more components are requested than are present, the entire path is substituted (so this does not trigger a ‘failed modifier’ error in history expansion). \nl \nConvert the words to all lowercase. \np \nPrint the new command but do not execute it. Only works with history expansion. \nP \nTurn a file name into an absolute path, like realpath(3). The resulting path will be absolute, will refer to the same directory entry as the input filename, and none of its components will be symbolic links or equal to ‘.’ or ‘..’. \nUnlike realpath(3), non-existent trailing components are permitted and preserved. \nq \nQuote the substituted words, escaping further substitutions. Works with history expansion and parameter expansion, though for parameters it is only useful if the resulting text is to be re-evaluated such as by eval. \nQ \nRemove one level of quotes from the substituted words. \nr \nRemove a filename extension leaving the root name. Strings with no filename extension are not altered. A filename extension is a ‘.’ followed by any number of characters (including zero) that are neither ‘.’ nor ‘/’ and that continue to the end of the string. For example, the extension of ‘foo.orig.c’ is ‘.c’, and ‘dir.c/foo’ has no extension. \ns/l/r[/] \nSubstitute r for l as described below. The substitution is done only for the first string that matches l. For arrays and for filename generation, this applies to each word of the expanded text. See below for further notes on substitutions. \nThe forms ‘gs/l/r’ and ‘s/l/r/:G’ perform global substitution, i.e. substitute every occurrence of r for l. Note that the g or :G must appear in exactly the position shown. \nSee further notes on this form of substitution below. \n& \nRepeat the previous s substitution. Like s, may be preceded immediately by a g. In parameter expansion the & must appear inside braces, and in filename generation it must be quoted with a backslash. \nt [ digits ] \nRemove all leading pathname components, leaving the final component (tail). This works like ‘basename’. Any trailing slashes are first removed. Decimal digits are handled as described above for (h), but in this case that number of trailing components is preserved instead of the default 1; 0 is treated the same as 1. \nu \nConvert the words to all uppercase. \nx \nLike q, but break into words at whitespace. Does not work with parameter expansion. \nThe s/l/r/ substitution works as follows. By default the left-hand side of substitutions are not patterns, but character strings. Any character can be used as the delimiter in place of ‘/’. A backslash quotes the delimiter character. The character ‘&’, in the right-hand-side r, is replaced by the text from the left-hand-side l. The ‘&’ can be quoted with a backslash. A null l uses the previous string either from the previous l or from the contextual scan string s from ‘!?s’. You can omit the rightmost delimiter if a newline immediately follows r; the rightmost ‘?’ in a context scan can similarly be omitted. Note the same record of the last l and r is maintained across all forms of expansion. \nNote that if a ‘&’ is used within glob qualifiers an extra backslash is needed as a & is a special character in this case. \nAlso note that the order of expansions affects the interpretation of l and r. When used in a history expansion, which occurs before any other expansions, l and r are treated as literal strings (except as explained for HIST_SUBST_PATTERN below). When used in parameter expansion, the replacement of r into the parameter’s value is done first, and then any additional process, parameter, command, arithmetic, or brace references are applied, which may evaluate those substitutions and expansions more than once if l appears more than once in the starting value. When used in a glob qualifier, any substitutions or expansions are performed once at the time the qualifier is parsed, even before the ‘:s’ expression itself is divided into l and r sides. \nIf the option HIST_SUBST_PATTERN is set, l is treated as a pattern of the usual form described in Filename Generation. This can be used in all the places where modifiers are available; note, however, that in globbing qualifiers parameter substitution has already taken place, so parameters in the replacement string should be quoted to ensure they are replaced at the correct time. Note also that complicated patterns used in globbing qualifiers may need the extended glob qualifier notation (#q:s/.../.../) in order for the shell to recognize the expression as a glob qualifier. Further, note that bad patterns in the substitution are not subject to the NO_BAD_PATTERN option so will cause an error. \nWhen HIST_SUBST_PATTERN is set, l may start with a # to indicate that the pattern must match at the start of the string to be substituted, and a % may appear at the start or after an # to indicate that the pattern must match at the end of the string to be substituted. The % or # may be quoted with two backslashes. \nFor example, the following piece of filename generation code with the EXTENDED_GLOB option: \nprint -r -- *.c(#q:s/#%(#b)s(*).c/'S${match[1]}.C'/)\ntakes the expansion of *.c and applies the glob qualifiers in the (#q...) expression, which consists of a substitution modifier anchored to the start and end of each word (#%). This turns on backreferences ((#b)), so that the parenthesised subexpression is available in the replacement string as ${match[1]}. The replacement string is quoted so that the parameter is not substituted before the start of filename generation. \nThe following f, F, w and W modifiers work only with parameter expansion and filename generation. They are listed here to provide a single point of reference for all modifiers. \nf \nRepeats the immediately (without a colon) following modifier until the resulting word doesn’t change any more. \nF:expr: \nLike f, but repeats only n times if the expression expr evaluates to n. Any character can be used instead of the ‘:’; if ‘(’, ‘[’, or ‘{’ is used as the opening delimiter, the closing delimiter should be ’)’, ‘]’, or ‘}’, respectively. \nw \nMakes the immediately following modifier work on each word in the string. \nW:sep: \nLike w but words are considered to be the parts of the string that are separated by sep. Any character can be used instead of the ‘:’; opening parentheses are handled specially, see above. \n14.2 Process Substitution\nEach part of a command argument that takes the form ‘<(list)’, ‘>(list)’ or ‘=(list)’ is subject to process substitution. The expression may be preceded or followed by other strings except that, to prevent clashes with commonly occurring strings and patterns, the last form must occur at the start of a command argument, and the forms are only expanded when first parsing command or assignment arguments. Process substitutions may be used following redirection operators; in this case, the substitution must appear with no trailing string. \nNote that ‘<<(list)’ is not a special syntax; it is equivalent to ‘< <(list)’, redirecting standard input from the result of process substitution. Hence all the following documentation applies. The second form (with the space) is recommended for clarity. \nIn the case of the < or > forms, the shell runs the commands in list as a subprocess of the job executing the shell command line. If the system supports the /dev/fd mechanism, the command argument is the name of the device file corresponding to a file descriptor; otherwise, if the system supports named pipes (FIFOs), the command argument will be a named pipe. If the form with > is selected then writing on this special file will provide input for list. If < is used, then the file passed as an argument will be connected to the output of the list process. For example, \npaste <(cut -f1 file1) <(cut -f3 file2) | tee >(process1) >(process2) >/dev/null\ncuts fields 1 and 3 from the files file1 and file2 respectively, pastes the results together, and sends it to the processes process1 and process2. \nIf =(...) is used instead of <(...), then the file passed as an argument will be the name of a temporary file containing the output of the list process. This may be used instead of the < form for a program that expects to lseek (see lseek(2)) on the input file. \nThere is an optimisation for substitutions of the form =(<<<arg), where arg is a single-word argument to the here-string redirection <<<. This form produces a file name containing the value of arg after any substitutions have been performed. This is handled entirely within the current shell. This is effectively the reverse of the special form $(<arg) which treats arg as a file name and replaces it with the file’s contents. \nThe = form is useful as both the /dev/fd and the named pipe implementation of <(...) have drawbacks. In the former case, some programmes may automatically close the file descriptor in question before examining the file on the command line, particularly if this is necessary for security reasons such as when the programme is running setuid. In the second case, if the programme does not actually open the file, the subshell attempting to read from or write to the pipe will (in a typical implementation, different operating systems may have different behaviour) block for ever and have to be killed explicitly. In both cases, the shell actually supplies the information using a pipe, so that programmes that expect to lseek (see lseek(2)) on the file will not work. \nAlso note that the previous example can be more compactly and efficiently written (provided the MULTIOS option is set) as: \npaste <(cut -f1 file1) <(cut -f3 file2) > >(process1) > >(process2)\nThe shell uses pipes instead of FIFOs to implement the latter two process substitutions in the above example. \nThere is an additional problem with >(process); when this is attached to an external command, the parent shell does not wait for process to finish and hence an immediately following command cannot rely on the results being complete. The problem and solution are the same as described in the section MULTIOS in Redirection. Hence in a simplified version of the example above: \npaste <(cut -f1 file1) <(cut -f3 file2) > >(process)\n(note that no MULTIOS are involved), process will be run asynchronously as far as the parent shell is concerned. The workaround is: \n{ paste <(cut -f1 file1) <(cut -f3 file2) } > >(process)\nThe extra processes here are spawned from the parent shell which will wait for their completion. \nAnother problem arises any time a job with a substitution that requires a temporary file is disowned by the shell, including the case where ‘&!’ or ‘&|’ appears at the end of a command containing a substitution. In that case the temporary file will not be cleaned up as the shell no longer has any memory of the job. A workaround is to use a subshell, for example, \nas the forked subshell will wait for the command to finish then remove the temporary file. \nA general workaround to ensure a process substitution endures for an appropriate length of time is to pass it as a parameter to an anonymous shell function (a piece of shell code that is run immediately with function scope). For example, this code: \n() {\n   print File $1:\n   cat $1\n} =(print This be the verse)\noutputs something resembling the following \nFile /tmp/zsh6nU0kS:\nThis be the verse\nThe temporary file created by the process substitution will be deleted when the function exits. \n14.3 Parameter Expansion\nThe character ‘$’ is used to introduce parameter expansions. See Parameters for a description of parameters, including arrays, associative arrays, and subscript notation to access individual array elements. \nNote in particular the fact that words of unquoted parameters are not automatically split on whitespace unless the option SH_WORD_SPLIT is set; see references to this option below for more details. This is an important difference from other shells. However, as in other shells, null words are elided from unquoted parameters’ expansions. \nWith default options, after the assignments: \narray=(\"first word\" \"\" \"third word\")\nscalar=\"only word\"\nthen $array substitutes two words, ‘first word’ and ‘third word’, and $scalar substitutes a single word ‘only word’. Note that second element of array was elided. Scalar parameters can be elided too if their value is null (empty). To avoid elision, use quoting as follows: \"$scalar\" for scalars and \"${array[@]}\" or \"${(@)array}\" for arrays. (The last two forms are equivalent.) \nParameter expansions can involve flags, as in ‘${(@kv)aliases}’, and other operators, such as ‘${PREFIX:-\"/usr/local\"}’. Parameter expansions can also be nested. These topics will be introduced below. The full rules are complicated and are noted at the end. \nIn the expansions discussed below that require a pattern, the form of the pattern is the same as that used for filename generation; see Filename Generation. Note that these patterns, along with the replacement text of any substitutions, are themselves subject to parameter expansion, command substitution, and arithmetic expansion. In addition to the following operations, the colon modifiers described in Modifiers in History Expansion can be applied: for example, ${i:s/foo/bar/} performs string substitution on the expansion of parameter $i. \nIn the following descriptions, ‘word’ refers to a single word substituted on the command line, not necessarily a space delimited word. \n${name} \nThe value, if any, of the parameter name is substituted. The braces are required if the expansion is to be followed by a letter, digit, or underscore that is not to be interpreted as part of name. In addition, more complicated forms of substitution usually require the braces to be present; exceptions, which only apply if the option KSH_ARRAYS is not set, are a single subscript or any colon modifiers appearing after the name, or any of the characters ‘^’, ‘=’, ‘~’, ‘#’ or ‘+’ appearing before the name, all of which work with or without braces. \nIf name is an array parameter, and the KSH_ARRAYS option is not set, then the value of each element of name is substituted, one element per word. Otherwise, the expansion results in one word only; with KSH_ARRAYS, this is the first element of an array. No field splitting is done on the result unless the SH_WORD_SPLIT option is set. See also the flags = and s:string:. \n${+name} \nIf name is the name of a set parameter ‘1’ is substituted, otherwise ‘0’ is substituted. \n${name-word} ${name:-word} \nIf name is set, or in the second form is non-null, then substitute its value; otherwise substitute word. In the second form name may be omitted, in which case word is always substituted. \n${name+word} ${name:+word} \nIf name is set, or in the second form is non-null, then substitute word; otherwise substitute nothing. \n${name=word} ${name:=word} ${name::=word} \nIn the first form, if name is unset then set it to word; in the second form, if name is unset or null then set it to word; and in the third form, unconditionally set name to word. In all forms, the value of the parameter is then substituted. \n${name?word} ${name:?word} \nIn the first form, if name is set, or in the second form if name is both set and non-null, then substitute its value; otherwise, print word and exit from the shell. Interactive shells instead return to the prompt. If word is omitted, then a standard message is printed. \nIn any of the above expressions that test a variable and substitute an alternate word, note that you can use standard shell quoting in the word value to selectively override the splitting done by the SH_WORD_SPLIT option and the = flag, but not splitting by the s:string: flag. \nIn the following expressions, when name is an array and the substitution is not quoted, or if the ‘(@)’ flag or the name[@] syntax is used, matching and replacement is performed on each array element separately. \n${name#pattern} ${name##pattern} \nIf the pattern matches the beginning of the value of name, then substitute the value of name with the matched portion deleted; otherwise, just substitute the value of name. In the first form, the smallest matching pattern is preferred; in the second form, the largest matching pattern is preferred. \n${name%pattern} ${name%%pattern} \nIf the pattern matches the end of the value of name, then substitute the value of name with the matched portion deleted; otherwise, just substitute the value of name. In the first form, the smallest matching pattern is preferred; in the second form, the largest matching pattern is preferred. \n${name:#pattern} \nIf the pattern matches the value of name, then substitute the empty string; otherwise, just substitute the value of name. If name is an array the matching array elements are removed (use the ‘(M)’ flag to remove the non-matched elements). \n${name:|arrayname} \nIf arrayname is the name (N.B., not contents) of an array variable, then any elements contained in arrayname are removed from the substitution of name. If the substitution is scalar, either because name is a scalar variable or the expression is quoted, the elements of arrayname are instead tested against the entire expression. \n${name:*arrayname} \nSimilar to the preceding substitution, but in the opposite sense, so that entries present in both the original substitution and as elements of arrayname are retained and others removed. \n${name:^arrayname} ${name:^^arrayname} \nZips two arrays, such that the output array is twice as long as the shortest (longest for ‘:^^’) of name and arrayname, with the elements alternatingly being picked from them. For ‘:^’, if one of the input arrays is longer, the output will stop when the end of the shorter array is reached. Thus, \na=(1 2 3 4); b=(a b); print ${a:^b}\nwill output ‘1 a 2 b’. For ‘:^^’, then the input is repeated until all of the longer array has been used up and the above will output ‘1 a 2 b 3 a 4 b’. \nEither or both inputs may be a scalar, they will be treated as an array of length 1 with the scalar as the only element. If either array is empty, the other array is output with no extra elements inserted. \nCurrently the following code will output ‘a b’ and ‘1’ as two separate elements, which can be unexpected. The second print provides a workaround which should continue to work if this is changed. \na=(a b); b=(1 2); print -l \"${a:^b}\"; print -l \"${${a:^b}}\"\n${name:offset} ${name:offset:length} \nThis syntax gives effects similar to parameter subscripting in the form $name[start,end], but is compatible with other shells; note that both offset and length are interpreted differently from the components of a subscript. \nIf offset is non-negative, then if the variable name is a scalar substitute the contents starting offset characters from the first character of the string, and if name is an array substitute elements starting offset elements from the first element. If length is given, substitute that many characters or elements, otherwise the entire rest of the scalar or array. \nA positive offset is always treated as the offset of a character or element in name from the first character or element of the array (this is different from native zsh subscript notation). Hence 0 refers to the first character or element regardless of the setting of the option KSH_ARRAYS. \nA negative offset counts backwards from the end of the scalar or array, so that -1 corresponds to the last character or element, and so on. \nWhen positive, length counts from the offset position toward the end of the scalar or array. When negative, length counts back from the end. If this results in a position smaller than offset, a diagnostic is printed and nothing is substituted. \nThe option MULTIBYTE is obeyed, i.e. the offset and length count multibyte characters where appropriate. \noffset and length undergo the same set of shell substitutions as for scalar assignment; in addition, they are then subject to arithmetic evaluation. Hence, for example \nprint ${foo:3}\nprint ${foo: 1 + 2}\nprint ${foo:$(( 1 + 2))}\nprint ${foo:$(echo 1 + 2)}\nall have the same effect, extracting the string starting at the fourth character of $foo if the substitution would otherwise return a scalar, or the array starting at the fourth element if $foo would return an array. Note that with the option KSH_ARRAYS $foo always returns a scalar (regardless of the use of the offset syntax) and a form such as ${foo[*]:3} is required to extract elements of an array named foo. \nIf offset is negative, the - may not appear immediately after the : as this indicates the ${name:-word} form of substitution. Instead, a space may be inserted before the -. Furthermore, neither offset nor length may begin with an alphabetic character or & as these are used to indicate history-style modifiers. To substitute a value from a variable, the recommended approach is to precede it with a $ as this signifies the intention (parameter substitution can easily be rendered unreadable); however, as arithmetic substitution is performed, the expression ${var: offs} does work, retrieving the offset from $offs. \nFor further compatibility with other shells there is a special case for array offset 0. This usually accesses the first element of the array. However, if the substitution refers to the positional parameter array, e.g. $@ or $*, then offset 0 instead refers to $0, offset 1 refers to $1, and so on. In other words, the positional parameter array is effectively extended by prepending $0. Hence ${*:0:1} substitutes $0 and ${*:1:1} substitutes $1. \n${name/pattern/repl} ${name//pattern/repl} ${name:/pattern/repl} \nReplace the longest possible match of pattern in the expansion of parameter name by string repl. The first form replaces just the first occurrence, the second form all occurrences, and the third form replaces only if pattern matches the entire string. Both pattern and repl are subject to double-quoted substitution, so that expressions like ${name/$opat/$npat} will work, but obey the usual rule that pattern characters in $opat are not treated specially unless either the option GLOB_SUBST is set, or $opat is instead substituted as ${~opat}. \nThe pattern may begin with a ‘#’, in which case the pattern must match at the start of the string, or ‘%’, in which case it must match at the end of the string, or ‘#%’ in which case the pattern must match the entire string. The repl may be an empty string, in which case the final ‘/’ may also be omitted. To quote the final ‘/’ in other cases it should be preceded by a single backslash; this is not necessary if the ‘/’ occurs inside a substituted parameter. Note also that the ‘#’, ‘%’ and ‘#% are not active if they occur inside a substituted parameter, even at the start. \nIf, after quoting rules apply, ${name} expands to an array, the replacements act on each element individually. Note also the effect of the I and S parameter expansion flags below; however, the flags M, R, B, E and N are not useful. \nFor example, \nfoo=\"twinkle twinkle little star\" sub=\"t*e\" rep=\"spy\"\nprint ${foo//${~sub}/$rep}\nprint ${(S)foo//${~sub}/$rep}\nHere, the ‘~’ ensures that the text of $sub is treated as a pattern rather than a plain string. In the first case, the longest match for t*e is substituted and the result is ‘spy star’, while in the second case, the shortest matches are taken and the result is ‘spy spy lispy star’. \n${#spec} \nIf spec is one of the above substitutions, substitute the length in characters of the result instead of the result itself. If spec is an array expression, substitute the number of elements of the result. This has the side-effect that joining is skipped even in quoted forms, which may affect other sub-expressions in spec. Note that ‘^’, ‘=’, and ‘~’, below, must appear to the left of ‘#’ when these forms are combined. \nIf the option POSIX_IDENTIFIERS is not set, and spec is a simple name, then the braces are optional; this is true even for special parameters so e.g. $#- and $#* take the length of the string $- and the array $* respectively. If POSIX_IDENTIFIERS is set, then braces are required for the # to be treated in this fashion. \n${^spec} ${^^spec} \nTurn on the RC_EXPAND_PARAM option for the evaluation of spec; if the ‘^’ is doubled, turn it off. When this option is set, array expansions of the form foo${xx}bar, where the parameter xx is set to (a b c), are substituted with ‘fooabar foobbar foocbar’ instead of the default ‘fooa b cbar’. Note that an empty array will therefore cause all arguments to be removed. \nInternally, each such expansion is converted into the equivalent list for brace expansion. E.g., ${^var} becomes {$var[1],$var[2],...}, and is processed as described in Brace Expansion below: note, however, the expansion happens immediately, with any explicit brace expansion happening later. If word splitting is also in effect the $var[N] may themselves be split into different list elements. \n${=spec} ${==spec} \nPerform word splitting using the rules for SH_WORD_SPLIT during the evaluation of spec, but regardless of whether the parameter appears in double quotes; if the ‘=’ is doubled, turn it off. This forces parameter expansions to be split into separate words before substitution, using IFS as a delimiter. This is done by default in most other shells. \nNote that splitting is applied to word in the assignment forms of spec before the assignment to name is performed. This affects the result of array assignments with the A flag. \n${~spec} ${~~spec} \nTurn on the GLOB_SUBST option for the evaluation of spec; if the ‘~’ is doubled, turn it off. When this option is set, the string resulting from the expansion will be interpreted as a pattern anywhere that is possible, such as in filename expansion and filename generation and pattern-matching contexts like the right hand side of the ‘=’ and ‘!=’ operators in conditions. \nIn nested substitutions, note that the effect of the ~ applies to the result of the current level of substitution. A surrounding pattern operation on the result may cancel it. Hence, for example, if the parameter foo is set to *, ${~foo//\\*/*.c} is substituted by the pattern *.c, which may be expanded by filename generation, but ${${~foo}//\\*/*.c} substitutes to the string *.c, which will not be further expanded. \nIf a ${...} type parameter expression or a $(...) type command substitution is used in place of name above, it is expanded first and the result is used as if it were the value of name. Thus it is possible to perform nested operations: ${${foo#head}%tail} substitutes the value of $foo with both ‘head’ and ‘tail’ deleted. The form with $(...) is often useful in combination with the flags described next; see the examples below. Each name or nested ${...} in a parameter expansion may also be followed by a subscript expression as described in Array Parameters. \nNote that double quotes may appear around nested expressions, in which case only the part inside is treated as quoted; for example, ${(f)\"$(foo)\"} quotes the result of $(foo), but the flag ‘(f)’ (see below) is applied using the rules for unquoted expansions. Note further that quotes are themselves nested in this context; for example, in \"${(@f)\"$(foo)\"}\", there are two sets of quotes, one surrounding the whole expression, the other (redundant) surrounding the $(foo) as before. \n14.3.1 Parameter Expansion Flags\nIf the opening brace is directly followed by an opening parenthesis, the string up to the matching closing parenthesis will be taken as a list of flags. In cases where repeating a flag is meaningful, the repetitions need not be consecutive; for example, ‘(q%q%q)’ means the same thing as the more readable ‘(%%qqq)’. The following flags are supported: \n# \nEvaluate the resulting words as numeric expressions and interpret these as character codes. Output the corresponding characters. Note that this form is entirely distinct from use of the # without parentheses. \nIf the MULTIBYTE option is set and the number is greater than 127 (i.e. not an ASCII character) it is treated as a Unicode character. \n% \nExpand all % escapes in the resulting words in the same way as in prompts (see Prompt Expansion). If this flag is given twice, full prompt expansion is done on the resulting words, depending on the setting of the PROMPT_PERCENT, PROMPT_SUBST and PROMPT_BANG options. \n@ \nIn double quotes, array elements are put into separate words. E.g., ‘\"${(@)foo}\"’ is equivalent to ‘\"${foo[@]}\"’ and ‘\"${(@)foo[1,2]}\"’ is the same as ‘\"$foo[1]\" \"$foo[2]\"’. This is distinct from field splitting by the f, s or z flags, which still applies within each array element. \nA \nConvert the substitution into an array expression, even if it otherwise would be scalar. This has lower precedence than subscripting, so one level of nested expansion is required in order that subscripts apply to array elements. Thus ${${(A)name}[1]} yields the full value of name when name is scalar. \nThis assigns an array parameter with ‘${...=...}’, ‘${...:=...}’ or ‘${...::=...}’. If this flag is repeated (as in ‘AA’), assigns an associative array parameter. Assignment is made before sorting or padding; if field splitting is active, the word part is split before assignment. The name part may be a subscripted range for ordinary arrays; when assigning an associative array, the word part must be converted to an array, for example by using ‘${(AA)=name=...}’ to activate field splitting. \nSurrounding context such as additional nesting or use of the value in a scalar assignment may cause the array to be joined back into a single string again. \na \nSort in array index order; when combined with ‘O’ sort in reverse array index order. Note that ‘a’ is therefore equivalent to the default but ‘Oa’ is useful for obtaining an array’s elements in reverse order. \nb \nQuote with backslashes only characters that are special to pattern matching. This is useful when the contents of the variable are to be tested using GLOB_SUBST, including the ${~...} switch. \nQuoting using one of the q family of flags does not work for this purpose since quotes are not stripped from non-pattern characters by GLOB_SUBST. In other words, \npattern=${(q)str}\n[[ $str = ${~pattern} ]]\nworks if $str is ‘a*b’ but not if it is ‘a b’, whereas \npattern=${(b)str}\n[[ $str = ${~pattern} ]]\nis always true for any possible value of $str. \nc \nWith ${#name}, count the total number of characters in an array, as if the elements were concatenated with spaces between them. This is not a true join of the array, so other expressions used with this flag may have an effect on the elements of the array before it is counted. \nC \nCapitalize the resulting words. ‘Words’ in this case refers to sequences of alphanumeric characters separated by non-alphanumerics, not to words that result from field splitting. \nD \nAssume the string or array elements contain directories and attempt to substitute the leading part of these by names. The remainder of the path (the whole of it if the leading part was not substituted) is then quoted so that the whole string can be used as a shell argument. This is the reverse of ‘~’ substitution: see Filename Expansion. \ne \nPerform single word shell expansions, namely parameter expansion, command substitution and arithmetic expansion, on the result. Such expansions can be nested but too deep recursion may have unpredictable effects. \nf \nSplit the result of the expansion at newlines. This is a shorthand for ‘ps:\\n:’. \nF \nJoin the words of arrays together using newline as a separator. This is a shorthand for ‘pj:\\n:’. \ng:opts: \nProcess escape sequences like the echo builtin when no options are given (g::). With the o option, octal escapes don’t take a leading zero. With the c option, sequences like ‘^X’ are also processed. With the e option, processes ‘\\M-t’ and similar sequences like the print builtin. With both of the o and e options, behaves like the print builtin except that in none of these modes is ‘\\c’ interpreted. \ni \nSort case-insensitively. May be combined with ‘n’ or ‘O’. \nk \nIf name refers to an associative array, substitute the keys (element names) rather than the values of the elements. Used with subscripts (including ordinary arrays), force indices or keys to be substituted even if the subscript form refers to values. However, this flag may not be combined with subscript ranges. With the KSH_ARRAYS option a subscript ‘[*]’ or ‘[@]’ is needed to operate on the whole array, as usual. \nL \nConvert all letters in the result to lower case. \nn \nSort decimal integers numerically; if the first differing characters of two test strings are not digits, sorting is lexical. ‘+’ and ‘-’ are not treated specially; they are treated as any other non-digit. Integers with more initial zeroes are sorted before those with fewer or none. Hence the array ‘foo+24 foo1 foo02 foo2 foo3 foo20 foo23’ is sorted into the order shown. May be combined with ‘i’ or ‘O’. \n- \nAs n, but a leading minus sign indicates a negative decimal integer. A leading minus sign not followed by an integer does not trigger numeric sorting. Note that ‘+’ signs are not handled specially (this may change in the future). \no \nSort the resulting words in ascending order; if this appears on its own the sorting is lexical and case-sensitive (unless the locale renders it case-insensitive). Sorting in ascending order is the default for other forms of sorting, so this is ignored if combined with ‘a’, ‘i’, ‘n’ or ‘-’. \nO \nSort the resulting words in descending order; ‘O’ without ‘a’, ‘i’, ‘n’ or ‘-’ sorts in reverse lexical order. May be combined with ‘a’, ‘i’, ‘n’ or ‘-’ to reverse the order of sorting. \nP \nThis forces the value of the parameter name to be interpreted as a further parameter name, whose value will be used where appropriate. Note that flags set with one of the typeset family of commands (in particular case transformations) are not applied to the value of name used in this fashion. \nIf used with a nested parameter or command substitution, the result of that will be taken as a parameter name in the same way. For example, if you have ‘foo=bar’ and ‘bar=baz’, the strings ${(P)foo}, ${(P)${foo}}, and ${(P)$(echo bar)} will be expanded to ‘baz’. \nLikewise, if the reference is itself nested, the expression with the flag is treated as if it were directly replaced by the parameter name. It is an error if this nested substitution produces an array with more than one word. For example, if ‘name=assoc’ where the parameter assoc is an associative array, then ‘${${(P)name}[elt]}’ refers to the element of the associative subscripted ‘elt’. \nq \nQuote characters that are special to the shell in the resulting words with backslashes; unprintable or invalid characters are quoted using the $’\\NNN’ form, with separate quotes for each octet. \nIf this flag is given twice, the resulting words are quoted in single quotes and if it is given three times, the words are quoted in double quotes; in these forms no special handling of unprintable or invalid characters is attempted. If the flag is given four times, the words are quoted in single quotes preceded by a $. Note that in all three of these forms quoting is done unconditionally, even if this does not change the way the resulting string would be interpreted by the shell. \nIf a q- is given (only a single q may appear), a minimal form of single quoting is used that only quotes the string if needed to protect special characters. Typically this form gives the most readable output. \nIf a q+ is given, an extended form of minimal quoting is used that causes unprintable characters to be rendered using $’...’. This quoting is similar to that used by the output of values by the typeset family of commands. \nQ \nRemove one level of quotes from the resulting words. \nt \nUse a string describing the type of the parameter where the value of the parameter would usually appear. This string consists of keywords separated by hyphens (‘-’). The first keyword in the string describes the main type, it can be one of ‘scalar’, ‘array’, ‘integer’, ‘float’ or ‘association’. The other keywords describe the type in more detail: \nlocal \nfor local parameters \nleft \nfor left justified parameters \nright_blanks \nfor right justified parameters with leading blanks \nright_zeros \nfor right justified parameters with leading zeros \nlower \nfor parameters whose value is converted to all lower case when it is expanded \nupper \nfor parameters whose value is converted to all upper case when it is expanded \nreadonly \nfor readonly parameters \ntag \nfor tagged parameters \ntied \nfor parameters tied to another parameter in the manner of PATH (colon-separated list) and path (array), whether these are special parameters or user-defined with ‘typeset -T’ \nexport \nfor exported parameters \nunique \nfor arrays which keep only the first occurrence of duplicated values \nhide \nfor parameters with the ‘hide’ flag \nhideval \nfor parameters with the ‘hideval’ flag \nspecial \nfor special parameters defined by the shell \nu \nExpand only the first occurrence of each unique word. \nU \nConvert all letters in the result to upper case. \nv \nUsed with k, substitute (as two consecutive words) both the key and the value of each associative array element. Used with subscripts, force values to be substituted even if the subscript form refers to indices or keys. \nV \nMake any special characters in the resulting words visible. \nw \nWith ${#name}, count words in arrays or strings; the s flag may be used to set a word delimiter. \nW \nSimilar to w with the difference that empty words between repeated delimiters are also counted. \nX \nWith this flag, parsing errors occurring with the Q, e and # flags or the pattern matching forms such as ‘${name#pattern}’ are reported. Without the flag, errors are silently ignored. \nz \nSplit the result of the expansion into words using shell parsing to find the words, i.e. taking into account any quoting in the value. Comments are not treated specially but as ordinary strings, similar to interactive shells with the INTERACTIVE_COMMENTS option unset (however, see the Z flag below for related options) \nNote that this is done very late, even later than the ‘(s)’ flag. So to access single words in the result use nested expansions as in ‘${${(z)foo}[2]}’. Likewise, to remove the quotes in the resulting words use ‘${(Q)${(z)foo}}’. \n0 \nSplit the result of the expansion on null bytes. This is a shorthand for ‘ps:\\0:’. \nThe following flags (except p) are followed by one or more arguments as shown. Any character, or the matching pairs ‘(...)’, ‘{...}’, ‘[...]’, or ‘<...>’, may be used in place of a colon as delimiters, but note that when a flag takes more than one argument, a matched pair of delimiters must surround each argument. \np \nRecognize the same escape sequences as the print builtin in string arguments to any of the flags described below that follow this argument. \nAlternatively, with this option string arguments may be in the form $var in which case the value of the variable is substituted. Note this form is strict; the string argument does not undergo general parameter expansion. \nFor example, \nsep=:\nval=a:b:c\nprint ${(ps.$sep.)val}\nsplits the variable on a :. \n~ \nStrings inserted into the expansion by any of the flags below are to be treated as patterns. This applies to the string arguments of flags that follow ~ within the same set of parentheses. Compare with ~ outside parentheses, which forces the entire substituted string to be treated as a pattern. Hence, for example, \n[[ \"?\" = ${(~j.|.)array} ]]\ntreats ‘|’ as a pattern and succeeds if and only if $array contains the string ‘?’ as an element. The ~ may be repeated to toggle the behaviour; its effect only lasts to the end of the parenthesised group. \nj:string: \nJoin the words of arrays together using string as a separator. Note that this occurs before field splitting by the s:string: flag or the SH_WORD_SPLIT option. \nl:expr::string1::string2: \nPad the resulting words on the left. Each word will be truncated if required and placed in a field expr characters wide. \nThe arguments :string1: and :string2: are optional; neither, the first, or both may be given. Note that the same pairs of delimiters must be used for each of the three arguments. The space to the left will be filled with string1 (concatenated as often as needed) or spaces if string1 is not given. If both string1 and string2 are given, string2 is inserted once directly to the left of each word, truncated if necessary, before string1 is used to produce any remaining padding. \nIf either of string1 or string2 is present but empty, i.e. there are two delimiters together at that point, the first character of $IFS is used instead. \nIf the MULTIBYTE option is in effect, the flag m may also be given, in which case widths will be used for the calculation of padding; otherwise individual multibyte characters are treated as occupying one unit of width. \nIf the MULTIBYTE option is not in effect, each byte in the string is treated as occupying one unit of width. \nControl characters are always assumed to be one unit wide; this allows the mechanism to be used for generating repetitions of control characters. \nm \nOnly useful together with one of the flags l or r or with the # length operator when the MULTIBYTE option is in effect. Use the character width reported by the system in calculating how much of the string it occupies or the overall length of the string. Most printable characters have a width of one unit, however certain Asian character sets and certain special effects use wider characters; combining characters have zero width. Non-printable characters are arbitrarily counted as zero width; how they would actually be displayed will vary. \nIf the m is repeated, the character either counts zero (if it has zero width), else one. For printable character strings this has the effect of counting the number of glyphs (visibly separate characters), except for the case where combining characters themselves have non-zero width (true in certain alphabets). \nr:expr::string1::string2: \nAs l, but pad the words on the right and insert string2 immediately to the right of the string to be padded. \nLeft and right padding may be used together. In this case the strategy is to apply left padding to the first half width of each of the resulting words, and right padding to the second half. If the string to be padded has odd width the extra padding is applied on the left. \ns:string: \nForce field splitting at the separator string. Note that a string of two or more characters means that all of them must match in sequence; this differs from the treatment of two or more characters in the IFS parameter. See also the = flag and the SH_WORD_SPLIT option. An empty string may also be given in which case every character will be a separate element. \nFor historical reasons, the usual behaviour that empty array elements are retained inside double quotes is disabled for arrays generated by splitting; hence the following: \nline=\"one::three\"\nprint -l \"${(s.:.)line}\"\nproduces two lines of output for one and three and elides the empty field. To override this behaviour, supply the ‘(@)’ flag as well, i.e. \"${(@s.:.)line}\". \nZ:opts: \nAs z but takes a combination of option letters between a following pair of delimiter characters. With no options the effect is identical to z. The following options are available: \n(Z+c+) \ncauses comments to be parsed as a string and retained; any field in the resulting array beginning with an unquoted comment character is a comment. \n(Z+C+) \ncauses comments to be parsed and removed. The rule for comments is standard: anything between a word starting with the third character of $HISTCHARS, default #, up to the next newline is a comment. \n(Z+n+) \ncauses unquoted newlines to be treated as ordinary whitespace, else they are treated as if they are shell code delimiters and converted to semicolons. \nOptions are combined within the same set of delimiters, e.g. (Z+Cn+). \n_:flags: \nThe underscore (_) flag is reserved for future use. As of this revision of zsh, there are no valid flags; anything following an underscore, other than an empty pair of delimiters, is treated as an error, and the flag itself has no effect. \nThe following flags are meaningful with the ${...#...} or ${...%...} forms. The S, I, and * flags may also be used with the ${.../...} forms. \nS \nWith # or ##, search for the match that starts closest to the start of the string (a ‘substring match’). Of all matches at a particular position, # selects the shortest and ## the longest: \n% str=\"aXbXc\"\n% echo ${(S)str#X*}\nabXc\n% echo ${(S)str##X*}\na\n% \nWith % or %%, search for the match that starts closest to the end of the string: \n% str=\"aXbXc\"\n% echo ${(S)str%X*}\naXbc\n% echo ${(S)str%%X*}\naXb\n% \n(Note that % and %% don’t search for the match that ends closest to the end of the string, as one might expect.) \nWith substitution via ${.../...} or ${...//...}, specifies non-greedy matching, i.e. that the shortest instead of the longest match should be replaced: \n% str=\"abab\"\n% echo ${str/*b/_}\n_\n% echo ${(S)str/*b/_}\n_ab\n% \nI:expr: \nSearch the exprth match (where expr evaluates to a number). This only applies when searching for substrings, either with the S flag, or with ${.../...} (only the exprth match is substituted) or ${...//...} (all matches from the exprth on are substituted). The default is to take the first match. \nThe exprth match is counted such that there is either one or zero matches from each starting position in the string, although for global substitution matches overlapping previous replacements are ignored. With the ${...%...} and ${...%%...} forms, the starting position for the match moves backwards from the end as the index increases, while with the other forms it moves forward from the start. \nHence with the string \nwhich switch is the right switch for Ipswich?\nsubstitutions of the form ${(SI:N:)string#w*ch} as N increases from 1 will match and remove ‘which’, ‘witch’, ‘witch’ and ‘wich’; the form using ‘##’ will match and remove ‘which switch is the right switch for Ipswich’, ‘witch is the right switch for Ipswich’, ‘witch for Ipswich’ and ‘wich’. The form using ‘%’ will remove the same matches as for ‘#’, but in reverse order, and the form using ‘%%’ will remove the same matches as for ‘##’ in reverse order. \n* \nEnable EXTENDED_GLOB for substitution via ${.../...} or ${...//...}. Note that ‘**’ does not disable extendedglob. \nB \nInclude the index of the beginning of the match in the result. \nE \nInclude the index one character past the end of the match in the result (note this is inconsistent with other uses of parameter index). \nM \nInclude the matched portion in the result. \nN \nInclude the length of the match in the result. \nR \nInclude the unmatched portion in the result (the Rest). \n14.3.2 Rules\nHere is a summary of the rules for substitution; this assumes that braces are present around the substitution, i.e. ${...}. Some particular examples are given below. Note that the Zsh Development Group accepts no responsibility for any brain damage which may occur during the reading of the following rules. \n1. Nested substitution \nIf multiple nested ${...} forms are present, substitution is performed from the inside outwards. At each level, the substitution takes account of whether the current value is a scalar or an array, whether the whole substitution is in double quotes, and what flags are supplied to the current level of substitution, just as if the nested substitution were the outermost. The flags are not propagated up to enclosing substitutions; the nested substitution will return either a scalar or an array as determined by the flags, possibly adjusted for quoting. All the following steps take place where applicable at all levels of substitution. \nNote that, unless the ‘(P)’ flag is present, the flags and any subscripts apply directly to the value of the nested substitution; for example, the expansion ${${foo}} behaves exactly the same as ${foo}. When the ‘(P)’ flag is present in a nested substitution, the other substitution rules are applied to the value before it is interpreted as a name, so ${${(P)foo}} may differ from ${(P)foo}. \nAt each nested level of substitution, the substituted words undergo all forms of single-word substitution (i.e. not filename generation), including command substitution, arithmetic expansion and filename expansion (i.e. leading ~ and =). Thus, for example, ${${:-=cat}:h} expands to the directory where the cat program resides. (Explanation: the internal substitution has no parameter but a default value =cat, which is expanded by filename expansion to a full path; the outer substitution then applies the modifier :h and takes the directory part of the path.) \n2. Internal parameter flags \nAny parameter flags set by one of the typeset family of commands, in particular the -L, -R, -Z, -u and -l options for padding and capitalization, are applied directly to the parameter value. Note these flags are options to the command, e.g. ‘typeset -Z’; they are not the same as the flags used within parameter substitutions. \nAt the outermost level of substitution, the ‘(P)’ flag (rule 4.) ignores these transformations and uses the unmodified value of the parameter as the name to be replaced. This is usually the desired behavior because padding may make the value syntactically illegal as a parameter name, but if capitalization changes are desired, use the ${${(P)foo}} form (rule 25.). \n3. Parameter subscripting \nIf the value is a raw parameter reference with a subscript, such as ${var[3]}, the effect of subscripting is applied directly to the parameter. Subscripts are evaluated left to right; subsequent subscripts apply to the scalar or array value yielded by the previous subscript. Thus if var is an array, ${var[1][2]} is the second character of the first word, but ${var[2,4][2]} is the entire third word (the second word of the range of words two through four of the original array). Any number of subscripts may appear. Flags such as ‘(k)’ and ‘(v)’ which alter the result of subscripting are applied. \n4. Parameter name replacement \nAt the outermost level of nesting only, the ‘(P)’ flag is applied. This treats the value so far as a parameter name (which may include a subscript expression) and replaces that with the corresponding value. This replacement occurs later if the ‘(P)’ flag appears in a nested substitution. \nIf the value so far names a parameter that has internal flags (rule 2.), those internal flags are applied to the new value after replacement. \n5. Double-quoted joining \nIf the value after this process is an array, and the substitution appears in double quotes, and neither an ‘(@)’ flag nor a ‘#’ length operator is present at the current level, then words of the value are joined with the first character of the parameter $IFS, by default a space, between each word (single word arrays are not modified). If the ‘(j)’ flag is present, that is used for joining instead of $IFS. \n6. Nested subscripting \nAny remaining subscripts (i.e. of a nested substitution) are evaluated at this point, based on whether the value is an array or a scalar. As with 3., multiple subscripts can appear. Note that ${foo[2,4][2]} is thus equivalent to ${${foo[2,4]}[2]} and also to \"${${(@)foo[2,4]}[2]}\" (the nested substitution returns an array in both cases), but not to \"${${foo[2,4]}[2]}\" (the nested substitution returns a scalar because of the quotes). \n7. Modifiers \nAny modifiers, as specified by a trailing ‘#’, ‘%’, ‘/’ (possibly doubled) or by a set of modifiers of the form ‘:...’ (see Modifiers in History Expansion), are applied to the words of the value at this level. \n8. Character evaluation \nAny ‘(#)’ flag is applied, evaluating the result so far numerically as a character. \n9. Length \nAny initial ‘#’ modifier, i.e. in the form ${#var}, is used to evaluate the length of the expression so far. \n10. Forced joining \nIf the ‘(j)’ flag is present, or no ‘(j)’ flag is present but the string is to be split as given by rule 11., and joining did not take place at rule 5., any words in the value are joined together using the given string or the first character of $IFS if none. Note that the ‘(F)’ flag implicitly supplies a string for joining in this manner. \n11. Simple word splitting \nIf one of the ‘(s)’ or ‘(f)’ flags are present, or the ‘=’ specifier was present (e.g. ${=var}), the word is split on occurrences of the specified string, or (for = with neither of the two flags present) any of the characters in $IFS. \nIf no ‘(s)’, ‘(f)’ or ‘=’ was given, but the word is not quoted and the option SH_WORD_SPLIT is set, the word is split on occurrences of any of the characters in $IFS. Note this step, too, takes place at all levels of a nested substitution. \n12. Case modification \nAny case modification from one of the flags ‘(L)’, ‘(U)’ or ‘(C)’ is applied. \n13. Escape sequence replacement \nFirst any replacements from the ‘(g)’ flag are performed, then any prompt-style formatting from the ‘(%)’ family of flags is applied. \n14. Quote application \nAny quoting or unquoting using ‘(q)’ and ‘(Q)’ and related flags is applied. \n15. Directory naming \nAny directory name substitution using ‘(D)’ flag is applied. \n16. Visibility enhancement \nAny modifications to make characters visible using the ‘(V)’ flag are applied. \n17. Lexical word splitting \nIf the ’(z)’ flag or one of the forms of the ’(Z)’ flag is present, the word is split as if it were a shell command line, so that quotation marks and other metacharacters are used to decide what constitutes a word. Note this form of splitting is entirely distinct from that described by rule 11.: it does not use $IFS, and does not cause forced joining. \n18. Uniqueness \nIf the result is an array and the ‘(u)’ flag was present, duplicate elements are removed from the array. \n19. Ordering \nIf the result is still an array and one of the ‘(o)’ or ‘(O)’ flags was present, the array is reordered. \n20. RC_EXPAND_PARAM \nAt this point the decision is made whether any resulting array elements are to be combined element by element with surrounding text, as given by either the RC_EXPAND_PARAM option or the ‘^’ flag. \n21. Re-evaluation \nAny ‘(e)’ flag is applied to the value, forcing it to be re-examined for new parameter substitutions, but also for command and arithmetic substitutions. \n22. Padding \nAny padding of the value by the ‘(l.fill.)’ or ‘(r.fill.)’ flags is applied. \n23. Semantic joining \nIn contexts where expansion semantics requires a single word to result, all words are rejoined with the first character of IFS between. So in ‘${(P)${(f)lines}}’ the value of ${lines} is split at newlines, but then must be joined again before the ‘(P)’ flag can be applied. \nIf a single word is not required, this rule is skipped. \n24. Empty argument removal \nIf the substitution does not appear in double quotes, any resulting zero-length argument, whether from a scalar or an element of an array, is elided from the list of arguments inserted into the command line. \nStrictly speaking, the removal happens later as the same happens with other forms of substitution; the point to note here is simply that it occurs after any of the above parameter operations. \n25. Nested parameter name replacement \nIf the ‘(P)’ flag is present and rule 4. has not applied, the value so far is treated as a parameter name (which may include a subscript expression) and replaced with the corresponding value, with internal flags (rule 2.) applied to the new value. \n14.3.3 Examples\nThe flag f is useful to split a double-quoted substitution line by line. For example, ${(f)\"$(<file)\"} substitutes the contents of file divided so that each line is an element of the resulting array. Compare this with the effect of $(<file) alone, which divides the file up by words, or the same inside double quotes, which makes the entire content of the file a single string. \nThe following illustrates the rules for nested parameter expansions. Suppose that $foo contains the array (bar baz): \n\"${(@)${foo}[1]}\" \nThis produces the result b. First, the inner substitution \"${foo}\", which has no array (@) flag, produces a single word result \"bar baz\". The outer substitution \"${(@)...[1]}\" detects that this is a scalar, so that (despite the ‘(@)’ flag) the subscript picks the first character. \n\"${${(@)foo}[1]}\" \nThis produces the result ‘bar’. In this case, the inner substitution \"${(@)foo}\" produces the array ‘(bar baz)’. The outer substitution \"${...[1]}\" detects that this is an array and picks the first word. This is similar to the simple case \"${foo[1]}\". \nAs an example of the rules for word splitting and joining, suppose $foo contains the array ‘(ax1 bx1)’. Then \n${(s/x/)foo} \nproduces the words ‘a’, ‘1 b’ and ‘1’. \n${(j/x/s/x/)foo} \nproduces ‘a’, ‘1’, ‘b’ and ‘1’. \n${(s/x/)foo%%1*} \nproduces ‘a’ and ‘ b’ (note the extra space). As substitution occurs before either joining or splitting, the operation first generates the modified array (ax bx), which is joined to give \"ax bx\", and then split to give ‘a’, ‘ b’ and ‘’. The final empty string will then be elided, as it is not in double quotes. \n14.4 Command Substitution\nA command enclosed in parentheses preceded by a dollar sign, like ‘$(...)’, or quoted with grave accents, like ‘‘...‘’, is replaced with its standard output, with any trailing newlines deleted. If the substitution is not enclosed in double quotes, the output is broken into words using the IFS parameter. \nThe substitution ‘$(cat foo)’ may be replaced by the faster ‘$(<foo)’. In this case foo undergoes single word shell expansions (parameter expansion, command substitution and arithmetic expansion), but not filename generation. \nIf the option GLOB_SUBST is set, the result of any unquoted command substitution, including the special form just mentioned, is eligible for filename generation. \n14.5 Arithmetic Expansion\nA string of the form ‘$[exp]’ or ‘$((exp))’ is substituted with the value of the arithmetic expression exp. exp is subjected to parameter expansion, command substitution and arithmetic expansion before it is evaluated. See Arithmetic Evaluation. \n14.6 Brace Expansion\nA string of the form ‘foo{xx,yy,zz}bar’ is expanded to the individual words ‘fooxxbar’, ‘fooyybar’ and ‘foozzbar’. Left-to-right order is preserved. This construct may be nested. Commas may be quoted in order to include them literally in a word. \nAn expression of the form ‘{n1..n2}’, where n1 and n2 are integers, is expanded to every number between n1 and n2 inclusive. If either number begins with a zero, all the resulting numbers will be padded with leading zeroes to that minimum width, but for negative numbers the - character is also included in the width. If the numbers are in decreasing order the resulting sequence will also be in decreasing order. \nAn expression of the form ‘{n1..n2..n3}’, where n1, n2, and n3 are integers, is expanded as above, but only every n3th number starting from n1 is output. If n3 is negative the numbers are output in reverse order, this is slightly different from simply swapping n1 and n2 in the case that the step n3 doesn’t evenly divide the range. Zero padding can be specified in any of the three numbers, specifying it in the third can be useful to pad for example ‘{-99..100..01}’ which is not possible to specify by putting a 0 on either of the first two numbers (i.e. pad to two characters). \nAn expression of the form ‘{c1..c2}’, where c1 and c2 are single characters (which may be multibyte characters), is expanded to every character in the range from c1 to c2 in whatever character sequence is used internally. For characters with code points below 128 this is US ASCII (this is the only case most users will need). If any intervening character is not printable, appropriate quotation is used to render it printable. If the character sequence is reversed, the output is in reverse order, e.g. ‘{d..a}’ is substituted as ‘d c b a’. \nIf a brace expression matches none of the above forms, it is left unchanged, unless the option BRACE_CCL (an abbreviation for ‘brace character class’) is set. In that case, it is expanded to a list of the individual characters between the braces sorted into the order of the characters in the ASCII character set (multibyte characters are not currently handled). The syntax is similar to a [...] expression in filename generation: ‘-’ is treated specially to denote a range of characters, but ‘^’ or ‘!’ as the first character is treated normally. For example, ‘{abcdef0-9}’ expands to 16 words 0 1 2 3 4 5 6 7 8 9 a b c d e f. \nNote that brace expansion is not part of filename generation (globbing); an expression such as */{foo,bar} is split into two separate words */foo and */bar before filename generation takes place. In particular, note that this is liable to produce a ‘no match’ error if either of the two expressions does not match; this is to be contrasted with */(foo|bar), which is treated as a single pattern but otherwise has similar effects. \nTo combine brace expansion with array expansion, see the ${^spec} form described in Parameter Expansion above. \n14.7 Filename Expansion\nEach word is checked to see if it begins with an unquoted ‘~’. If it does, then the word up to a ‘/’, or the end of the word if there is no ‘/’, is checked to see if it can be substituted in one of the ways described here. If so, then the ‘~’ and the checked portion are replaced with the appropriate substitute value. \nA ‘~’ by itself is replaced by the value of $HOME. A ‘~’ followed by a ‘+’ or a ‘-’ is replaced by current or previous working directory, respectively. \nA ‘~’ followed by a number is replaced by the directory at that position in the directory stack. ‘~0’ is equivalent to ‘~+’, and ‘~1’ is the top of the stack. ‘~+’ followed by a number is replaced by the directory at that position in the directory stack. ‘~+0’ is equivalent to ‘~+’, and ‘~+1’ is the top of the stack. ‘~-’ followed by a number is replaced by the directory that many positions from the bottom of the stack. ‘~-0’ is the bottom of the stack. The PUSHD_MINUS option exchanges the effects of ‘~+’ and ‘~-’ where they are followed by a number. \n14.7.1 Dynamic named directories\nIf the function zsh_directory_name exists, or the shell variable zsh_directory_name_functions exists and contains an array of function names, then the functions are used to implement dynamic directory naming. The functions are tried in order until one returns status zero, so it is important that functions test whether they can handle the case in question and return an appropriate status. \nA ‘~’ followed by a string namstr in unquoted square brackets is treated specially as a dynamic directory name. Note that the first unquoted closing square bracket always terminates namstr. The shell function is passed two arguments: the string n (for name) and namstr. It should either set the array reply to a single element which is the directory corresponding to the name and return status zero (executing an assignment as the last statement is usually sufficient), or it should return status non-zero. In the former case the element of reply is used as the directory; in the latter case the substitution is deemed to have failed. If all functions fail and the option NOMATCH is set, an error results. \nThe functions defined as above are also used to see if a directory can be turned into a name, for example when printing the directory stack or when expanding %~ in prompts. In this case each function is passed two arguments: the string d (for directory) and the candidate for dynamic naming. The function should either return non-zero status, if the directory cannot be named by the function, or it should set the array reply to consist of two elements: the first is the dynamic name for the directory (as would appear within ‘~[...]’), and the second is the prefix length of the directory to be replaced. For example, if the trial directory is /home/myname/src/zsh and the dynamic name for /home/myname/src (which has 16 characters) is s, then the function sets \nThe directory name so returned is compared with possible static names for parts of the directory path, as described below; it is used if the prefix length matched (16 in the example) is longer than that matched by any static name. \nIt is not a requirement that a function implements both n and d calls; for example, it might be appropriate for certain dynamic forms of expansion not to be contracted to names. In that case any call with the first argument d should cause a non-zero status to be returned. \nThe completion system calls ‘zsh_directory_name c’ followed by equivalent calls to elements of the array zsh_directory_name_functions, if it exists, in order to complete dynamic names for directories. The code for this should be as for any other completion function as described in Completion System. \nAs a working example, here is a function that expands any dynamic names beginning with the string p: to directories below /home/pws/perforce. In this simple case a static name for the directory would be just as effective. \nzsh_directory_name() {\n  emulate -L zsh\n  setopt extendedglob\n  local -a match mbegin mend\n  if [[ $1 = d ]]; then\n    # turn the directory into a name\n    if [[ $2 = (#b)(/home/pws/perforce/)([^/]##)* ]]; then\n      typeset -ga reply\n      reply=(p:$match[2] $(( ${#match[1]} + ${#match[2]} )) )\n    else\n      return 1\n    fi\n  elif [[ $1 = n ]]; then\n    # turn the name into a directory\n    [[ $2 != (#b)p:(?*) ]] && return 1\n    typeset -ga reply\n    reply=(/home/pws/perforce/$match[1])\n  elif [[ $1 = c ]]; then\n    # complete names\n    local expl\n    local -a dirs\n    dirs=(/home/pws/perforce/*(/:t))\n    dirs=(p:${^dirs})\n    _wanted dynamic-dirs expl 'dynamic directory' compadd -S\\] -a dirs\n    return\n  else\n    return 1\n  fi\n  return 0\n}\n14.7.2 Static named directories\nA ‘~’ followed by anything not already covered consisting of any number of alphanumeric characters or underscore (‘_’), hyphen (‘-’), or dot (‘.’) is looked up as a named directory, and replaced by the value of that named directory if found. Named directories are typically home directories for users on the system. They may also be defined if the text after the ‘~’ is the name of a string shell parameter whose value begins with a ‘/’. Note that trailing slashes will be removed from the path to the directory (though the original parameter is not modified). \nIt is also possible to define directory names using the -d option to the hash builtin. \nWhen the shell prints a path (e.g. when expanding %~ in prompts or when printing the directory stack), the path is checked to see if it has a named directory as its prefix. If so, then the prefix portion is replaced with a ‘~’ followed by the name of the directory. The shorter of the two ways of referring to the directory is used, i.e. either the directory name or the full path; the name is used if they are the same length. The parameters $PWD and $OLDPWD are never abbreviated in this fashion. \n14.7.3 ‘=’ expansion\nIf a word begins with an unquoted ‘=’ and the EQUALS option is set, the remainder of the word is taken as the name of a command. If a command exists by that name, the word is replaced by the full pathname of the command. \n14.7.4 Notes\nFilename expansion is performed on the right hand side of a parameter assignment, including those appearing after commands of the typeset family. In this case, the right hand side will be treated as a colon-separated list in the manner of the PATH parameter, so that a ‘~’ or an ‘=’ following a ‘:’ is eligible for expansion. All such behaviour can be disabled by quoting the ‘~’, the ‘=’, or the whole expression (but not simply the colon); the EQUALS option is also respected. \nIf the option MAGIC_EQUAL_SUBST is set, any unquoted shell argument in the form ‘identifier=expression’ becomes eligible for file expansion as described in the previous paragraph. Quoting the first ‘=’ also inhibits this. \n14.8 Filename Generation\nIf a word contains an unquoted instance of one of the characters ‘*’, ‘(’, ‘|’, ‘<’, ‘[’, or ‘?’, it is regarded as a pattern for filename generation, unless the GLOB option is unset. If the EXTENDED_GLOB option is set, the ‘^’ and ‘#’ characters also denote a pattern; otherwise they are not treated specially by the shell. \nThe word is replaced with a list of sorted filenames that match the pattern. If no matching pattern is found, the shell gives an error message, unless the NULL_GLOB option is set, in which case the word is deleted; or unless the NOMATCH option is unset, in which case the word is left unchanged. \nIn filename generation, the character ‘/’ must be matched explicitly; also, a ‘.’ must be matched explicitly at the beginning of a pattern or after a ‘/’, unless the GLOB_DOTS option is set. No filename generation pattern matches the files ‘.’ or ‘..’. In other instances of pattern matching, the ‘/’ and ‘.’ are not treated specially. \n14.8.1 Glob Operators\n* \nMatches any string, including the null string. \n? \nMatches any character. \n[...] \nMatches any of the enclosed characters. Ranges of characters can be specified by separating two characters by a ‘-’. A ‘-’ or ‘]’ may be matched by including it as the first character in the list. There are also several named classes of characters, in the form ‘[:name:]’ with the following meanings. The first set use the macros provided by the operating system to test for the given character combinations, including any modifications due to local language settings, see ctype(3): \n[:alnum:] \nThe character is alphanumeric \n[:alpha:] \nThe character is alphabetic \n[:ascii:] \nThe character is 7-bit, i.e. is a single-byte character without the top bit set. \n[:blank:] \nThe character is a blank character \n[:cntrl:] \nThe character is a control character \n[:digit:] \nThe character is a decimal digit \n[:graph:] \nThe character is a printable character other than whitespace \n[:lower:] \nThe character is a lowercase letter \n[:print:] \nThe character is printable \n[:punct:] \nThe character is printable but neither alphanumeric nor whitespace \n[:space:] \nThe character is whitespace \n[:upper:] \nThe character is an uppercase letter \n[:xdigit:] \nThe character is a hexadecimal digit \nAnother set of named classes is handled internally by the shell and is not sensitive to the locale: \n[:IDENT:] \nThe character is allowed to form part of a shell identifier, such as a parameter name; this test respects the POSIX_IDENTIFIERS option \n[:IFS:] \nThe character is used as an input field separator, i.e. is contained in the IFS parameter \n[:IFSSPACE:] \nThe character is an IFS white space character; see the documentation for IFS in Parameters Used By The Shell. \n[:INCOMPLETE:] \nMatches a byte that starts an incomplete multibyte character. Note that there may be a sequence of more than one bytes that taken together form the prefix of a multibyte character. To test for a potentially incomplete byte sequence, use the pattern ‘[[:INCOMPLETE:]]*’. This will never match a sequence starting with a valid multibyte character. \n[:INVALID:] \nMatches a byte that does not start a valid multibyte character. Note this may be a continuation byte of an incomplete multibyte character as any part of a multibyte string consisting of invalid and incomplete multibyte characters is treated as single bytes. \n[:WORD:] \nThe character is treated as part of a word; this test is sensitive to the value of the WORDCHARS parameter \nNote that the square brackets are additional to those enclosing the whole set of characters, so to test for a single alphanumeric character you need ‘[[:alnum:]]’. Named character sets can be used alongside other types, e.g. ‘[[:alpha:]0-9]’. \n[^...] [!...] \nLike [...], except that it matches any character which is not in the given set. \n<[x]-[y]> \nMatches any number in the range x to y, inclusive. Either of the numbers may be omitted to make the range open-ended; hence ‘<->’ matches any number. To match individual digits, the [...] form is more efficient. \nBe careful when using other wildcards adjacent to patterns of this form; for example, <0-9>* will actually match any number whatsoever at the start of the string, since the ‘<0-9>’ will match the first digit, and the ‘*’ will match any others. This is a trap for the unwary, but is in fact an inevitable consequence of the rule that the longest possible match always succeeds. Expressions such as ‘<0-9>[^[:digit:]]*’ can be used instead. \n(...) \nMatches the enclosed pattern. This is used for grouping. If the KSH_GLOB option is set, then a ‘@’, ‘*’, ‘+’, ‘?’ or ‘!’ immediately preceding the ‘(’ is treated specially, as detailed below. The option SH_GLOB prevents bare parentheses from being used in this way, though the KSH_GLOB option is still available. \nNote that grouping cannot extend over multiple directories: it is an error to have a ‘/’ within a group (this only applies for patterns used in filename generation). There is one exception: a group of the form (pat/)# appearing as a complete path segment can match a sequence of directories. For example, foo/(a*/)#bar matches foo/bar, foo/any/bar, foo/any/anyother/bar, and so on. \nx|y \nMatches either x or y. This operator has lower precedence than any other. The ‘|’ character must be within parentheses, to avoid interpretation as a pipeline. The alternatives are tried in order from left to right. \n^x \n(Requires EXTENDED_GLOB to be set.) Matches anything except the pattern x. This has a higher precedence than ‘/’, so ‘^foo/bar’ will search directories in ‘.’ except ‘./foo’ for a file named ‘bar’. \nx~y \n(Requires EXTENDED_GLOB to be set.) Match anything that matches the pattern x but does not match y. This has lower precedence than any operator except ‘|’, so ‘*/*~foo/bar’ will search for all files in all directories in ‘.’ and then exclude ‘foo/bar’ if there was such a match. Multiple patterns can be excluded by ‘foo~bar~baz’. In the exclusion pattern (y), ‘/’ and ‘.’ are not treated specially the way they usually are in globbing. \nx# \n(Requires EXTENDED_GLOB to be set.) Matches zero or more occurrences of the pattern x. This operator has high precedence; ‘12#’ is equivalent to ‘1(2#)’, rather than ‘(12)#’. It is an error for an unquoted ‘#’ to follow something which cannot be repeated; this includes an empty string, a pattern already followed by ‘##’, or parentheses when part of a KSH_GLOB pattern (for example, ‘!(foo)#’ is invalid and must be replaced by ‘*(!(foo))’). \nx## \n(Requires EXTENDED_GLOB to be set.) Matches one or more occurrences of the pattern x. This operator has high precedence; ‘12##’ is equivalent to ‘1(2##)’, rather than ‘(12)##’. No more than two active ‘#’ characters may appear together. (Note the potential clash with glob qualifiers in the form ‘1(2##)’ which should therefore be avoided.) \n14.8.2 ksh-like Glob Operators\nIf the KSH_GLOB option is set, the effects of parentheses can be modified by a preceding ‘@’, ‘*’, ‘+’, ‘?’ or ‘!’. This character need not be unquoted to have special effects, but the ‘(’ must be. \n@(...) \nMatch the pattern in the parentheses. (Like ‘(...)’.) \n*(...) \nMatch any number of occurrences. (Like ‘(...)#’, except that recursive directory searching is not supported.) \n+(...) \nMatch at least one occurrence. (Like ‘(...)##’, except that recursive directory searching is not supported.) \n?(...) \nMatch zero or one occurrence. (Like ‘(|...)’.) \n!(...) \nMatch anything but the expression in parentheses. (Like ‘(^(...))’.) \n14.8.3 Precedence\nThe precedence of the operators given above is (highest) ‘^’, ‘/’, ‘~’, ‘|’ (lowest); the remaining operators are simply treated from left to right as part of a string, with ‘#’ and ‘##’ applying to the shortest possible preceding unit (i.e. a character, ‘?’, ‘[...]’, ‘<...>’, or a parenthesised expression). As mentioned above, a ‘/’ used as a directory separator may not appear inside parentheses, while a ‘|’ must do so; in patterns used in other contexts than filename generation (for example, in case statements and tests within ‘[[...]]’), a ‘/’ is not special; and ‘/’ is also not special after a ‘~’ appearing outside parentheses in a filename pattern. \n14.8.4 Globbing Flags\nThere are various flags which affect any text to their right up to the end of the enclosing group or to the end of the pattern; they require the EXTENDED_GLOB option. All take the form (#X) where X may have one of the following forms: \ni \nCase insensitive: upper or lower case characters in the pattern match upper or lower case characters. \nl \nLower case characters in the pattern match upper or lower case characters; upper case characters in the pattern still only match upper case characters. \nI \nCase sensitive: locally negates the effect of i or l from that point on. \nb \nActivate backreferences for parenthesised groups in the pattern; this does not work in filename generation. When a pattern with a set of active parentheses is matched, the strings matched by the groups are stored in the array $match, the indices of the beginning of the matched parentheses in the array $mbegin, and the indices of the end in the array $mend, with the first element of each array corresponding to the first parenthesised group, and so on. These arrays are not otherwise special to the shell. The indices use the same convention as does parameter substitution, so that elements of $mend and $mbegin may be used in subscripts; the KSH_ARRAYS option is respected. Sets of globbing flags are not considered parenthesised groups; only the first nine active parentheses can be referenced. \nFor example, \nfoo=\"a_string_with_a_message\"\nif [[ $foo = (a|an)_(#b)(*) ]]; then\n  print ${foo[$mbegin[1],$mend[1]]}\nfi\nprints ‘string_with_a_message’. Note that the first set of parentheses is before the (#b) and does not create a backreference. \nBackreferences work with all forms of pattern matching other than filename generation, but note that when performing matches on an entire array, such as ${array#pattern}, or a global substitution, such as ${param//pat/repl}, only the data for the last match remains available. In the case of global replacements this may still be useful. See the example for the m flag below. \nThe numbering of backreferences strictly follows the order of the opening parentheses from left to right in the pattern string, although sets of parentheses may be nested. There are special rules for parentheses followed by ‘#’ or ‘##’. Only the last match of the parenthesis is remembered: for example, in ‘[[ abab = (#b)([ab])# ]]’, only the final ‘b’ is stored in match[1]. Thus extra parentheses may be necessary to match the complete segment: for example, use ‘X((ab|cd)#)Y’ to match a whole string of either ‘ab’ or ‘cd’ between ‘X’ and ‘Y’, using the value of $match[1] rather than $match[2]. \nIf the match fails none of the parameters is altered, so in some cases it may be necessary to initialise them beforehand. If some of the backreferences fail to match — which happens if they are in an alternate branch which fails to match, or if they are followed by # and matched zero times — then the matched string is set to the empty string, and the start and end indices are set to -1. \nPattern matching with backreferences is slightly slower than without. \nB \nDeactivate backreferences, negating the effect of the b flag from that point on. \ncN,M \nThe flag (#cN,M) can be used anywhere that the # or ## operators can be used except in the expressions ‘(*/)#’ and ‘(*/)##’ in filename generation, where ‘/’ has special meaning; it cannot be combined with other globbing flags and a bad pattern error occurs if it is misplaced. It is equivalent to the form {N,M} in regular expressions. The previous character or group is required to match between N and M times, inclusive. The form (#cN) requires exactly N matches; (#c,M) is equivalent to specifying N as 0; (#cN,) specifies that there is no maximum limit on the number of matches. \nm \nSet references to the match data for the entire string matched; this is similar to backreferencing and does not work in filename generation. The flag must be in effect at the end of the pattern, i.e. not local to a group. The parameters $MATCH, $MBEGIN and $MEND will be set to the string matched and to the indices of the beginning and end of the string, respectively. This is most useful in parameter substitutions, as otherwise the string matched is obvious. \nFor example, \narr=(veldt jynx grimps waqf zho buck)\nprint ${arr//(#m)[aeiou]/${(U)MATCH}}\nforces all the matches (i.e. all vowels) into uppercase, printing ‘vEldt jynx grImps wAqf zhO bUck’. \nUnlike backreferences, there is no speed penalty for using match references, other than the extra substitutions required for the replacement strings in cases such as the example shown. \nM \nDeactivate the m flag, hence no references to match data will be created. \nanum \nApproximate matching: num errors are allowed in the string matched by the pattern. The rules for this are described in the next subsection. \ns, e \nUnlike the other flags, these have only a local effect, and each must appear on its own: ‘(#s)’ and ‘(#e)’ are the only valid forms. The ‘(#s)’ flag succeeds only at the start of the test string, and the ‘(#e)’ flag succeeds only at the end of the test string; they correspond to ‘^’ and ‘$’ in standard regular expressions. They are useful for matching path segments in patterns other than those in filename generation (where path segments are in any case treated separately). For example, ‘*((#s)|/)test((#e)|/)*’ matches a path segment ‘test’ in any of the following strings: test, test/at/start, at/end/test, in/test/middle. \nAnother use is in parameter substitution; for example ‘${array/(#s)A*Z(#e)}’ will remove only elements of an array which match the complete pattern ‘A*Z’. There are other ways of performing many operations of this type, however the combination of the substitution operations ‘/’ and ‘//’ with the ‘(#s)’ and ‘(#e)’ flags provides a single simple and memorable method. \nNote that assertions of the form ‘(^(#s))’ also work, i.e. match anywhere except at the start of the string, although this actually means ‘anything except a zero-length portion at the start of the string’; you need to use ‘(\"\"~(#s))’ to match a zero-length portion of the string not at the start. \nq \nA ‘q’ and everything up to the closing parenthesis of the globbing flags are ignored by the pattern matching code. This is intended to support the use of glob qualifiers, see below. The result is that the pattern ‘(#b)(*).c(#q.)’ can be used both for globbing and for matching against a string. In the former case, the ‘(#q.)’ will be treated as a glob qualifier and the ‘(#b)’ will not be useful, while in the latter case the ‘(#b)’ is useful for backreferences and the ‘(#q.)’ will be ignored. Note that colon modifiers in the glob qualifiers are also not applied in ordinary pattern matching. \nu \nRespect the current locale in determining the presence of multibyte characters in a pattern, provided the shell was compiled with MULTIBYTE_SUPPORT. This overrides the MULTIBYTE option; the default behaviour is taken from the option. Compare U. (Mnemonic: typically multibyte characters are from Unicode in the UTF-8 encoding, although any extension of ASCII supported by the system library may be used.) \nU \nAll characters are considered to be a single byte long. The opposite of u. This overrides the MULTIBYTE option. \nFor example, the test string fooxx can be matched by the pattern (#i)FOOXX, but not by (#l)FOOXX, (#i)FOO(#I)XX or ((#i)FOOX)X. The string (#ia2)readme specifies case-insensitive matching of readme with up to two errors. \nWhen using the ksh syntax for grouping both KSH_GLOB and EXTENDED_GLOB must be set and the left parenthesis should be preceded by @. Note also that the flags do not affect letters inside [...] groups, in other words (#i)[a-z] still matches only lowercase letters. Finally, note that when examining whole paths case-insensitively every directory must be searched for all files which match, so that a pattern of the form (#i)/foo/bar/... is potentially slow. \n14.8.5 Approximate Matching\nWhen matching approximately, the shell keeps a count of the errors found, which cannot exceed the number specified in the (#anum) flags. Four types of error are recognised: \n1. \nDifferent characters, as in fooxbar and fooybar. \n2. \nTransposition of characters, as in banana and abnana. \n3. \nA character missing in the target string, as with the pattern road and target string rod. \n4. \nAn extra character appearing in the target string, as with stove and strove. \nThus, the pattern (#a3)abcd matches dcba, with the errors occurring by using the first rule twice and the second once, grouping the string as [d][cb][a] and [a][bc][d]. \nNon-literal parts of the pattern must match exactly, including characters in character ranges: hence (#a1)??? matches strings of length four, by applying rule 4 to an empty part of the pattern, but not strings of length two, since all the ? must match. Other characters which must match exactly are initial dots in filenames (unless the GLOB_DOTS option is set), and all slashes in filenames, so that a/bc is two errors from ab/c (the slash cannot be transposed with another character). Similarly, errors are counted separately for non-contiguous strings in the pattern, so that (ab|cd)ef is two errors from aebf. \nWhen using exclusion via the ~ operator, approximate matching is treated entirely separately for the excluded part and must be activated separately. Thus, (#a1)README~READ_ME matches READ.ME but not READ_ME, as the trailing READ_ME is matched without approximation. However, (#a1)README~(#a1)READ_ME does not match any pattern of the form READ?ME as all such forms are now excluded. \nApart from exclusions, there is only one overall error count; however, the maximum errors allowed may be altered locally, and this can be delimited by grouping. For example, (#a1)cat((#a0)dog)fox allows one error in total, which may not occur in the dog section, and the pattern (#a1)cat(#a0)dog(#a1)fox is equivalent. Note that the point at which an error is first found is the crucial one for establishing whether to use approximation; for example, (#a1)abc(#a0)xyz will not match abcdxyz, because the error occurs at the ‘x’, where approximation is turned off. \nEntire path segments may be matched approximately, so that ‘(#a1)/foo/d/is/available/at/the/bar’ allows one error in any path segment. This is much less efficient than without the (#a1), however, since every directory in the path must be scanned for a possible approximate match. It is best to place the (#a1) after any path segments which are known to be correct. \n14.8.6 Recursive Globbing\nA pathname component of the form ‘(foo/)#’ matches a path consisting of zero or more directories matching the pattern foo. \nAs a shorthand, ‘**/’ is equivalent to ‘(*/)#’; note that this therefore matches files in the current directory as well as subdirectories. Thus: \nor \ndoes a recursive directory search for files named ‘bar’ (potentially including the file ‘bar’ in the current directory). This form does not follow symbolic links; the alternative form ‘***/’ does, but is otherwise identical. Neither of these can be combined with other forms of globbing within the same path segment; in that case, the ‘*’ operators revert to their usual effect. \nEven shorter forms are available when the option GLOB_STAR_SHORT is set. In that case if no / immediately follows a ** or *** they are treated as if both a / plus a further * are present. Hence: \nsetopt GLOBSTARSHORT\nls -ld -- **.c\nis equivalent to \n14.8.7 Glob Qualifiers\nPatterns used for filename generation may end in a list of qualifiers enclosed in parentheses. The qualifiers specify which filenames that otherwise match the given pattern will be inserted in the argument list. \nIf the option BARE_GLOB_QUAL is set, then a trailing set of parentheses containing no ‘|’ or ‘(’ characters (or ‘~’ if it is special) is taken as a set of glob qualifiers. A glob subexpression that would normally be taken as glob qualifiers, for example ‘(^x)’, can be forced to be treated as part of the glob pattern by doubling the parentheses, in this case producing ‘((^x))’. \nIf the option EXTENDED_GLOB is set, a different syntax for glob qualifiers is available, namely ‘(#qx)’ where x is any of the same glob qualifiers used in the other format. The qualifiers must still appear at the end of the pattern. However, with this syntax multiple glob qualifiers may be chained together. They are treated as a logical AND of the individual sets of flags. Also, as the syntax is unambiguous, the expression will be treated as glob qualifiers just as long any parentheses contained within it are balanced; appearance of ‘|’, ‘(’ or ‘~’ does not negate the effect. Note that qualifiers will be recognised in this form even if a bare glob qualifier exists at the end of the pattern, for example ‘*(#q*)(.)’ will recognise executable regular files if both options are set; however, mixed syntax should probably be avoided for the sake of clarity. Note that within conditions using the ‘[[’ form the presence of a parenthesised expression (#q...) at the end of a string indicates that globbing should be performed; the expression may include glob qualifiers, but it is also valid if it is simply (#q). This does not apply to the right hand side of pattern match operators as the syntax already has special significance. \nA qualifier may be any one of the following: \n/ \ndirectories \nF \n‘full’ (i.e. non-empty) directories. Note that the opposite sense (^F) expands to empty directories and all non-directories. Use (/^F) for empty directories. \n. \nplain files \n@ \nsymbolic links \n= \nsockets \np \nnamed pipes (FIFOs) \n* \nexecutable plain files (0100 or 0010 or 0001) \n% \ndevice files (character or block special) \n%b \nblock special files \n%c \ncharacter special files \nr \nowner-readable files (0400) \nw \nowner-writable files (0200) \nx \nowner-executable files (0100) \nA \ngroup-readable files (0040) \nI \ngroup-writable files (0020) \nE \ngroup-executable files (0010) \nR \nworld-readable files (0004) \nW \nworld-writable files (0002) \nX \nworld-executable files (0001) \ns \nsetuid files (04000) \nS \nsetgid files (02000) \nt \nfiles with the sticky bit (01000) \nfspec \nfiles with access rights matching spec. This spec may be a octal number optionally preceded by a ‘=’, a ‘+’, or a ‘-’. If none of these characters is given, the behavior is the same as for ‘=’. The octal number describes the mode bits to be expected, if combined with a ‘=’, the value given must match the file-modes exactly, with a ‘+’, at least the bits in the given number must be set in the file-modes, and with a ‘-’, the bits in the number must not be set. Giving a ‘?’ instead of a octal digit anywhere in the number ensures that the corresponding bits in the file-modes are not checked, this is only useful in combination with ‘=’. \nIf the qualifier ‘f’ is followed by any other character anything up to the next matching character (‘[’, ‘{’, and ‘<’ match ‘]’, ‘}’, and ‘>’ respectively, any other character matches itself) is taken as a list of comma-separated sub-specs. Each sub-spec may be either an octal number as described above or a list of any of the characters ‘u’, ‘g’, ‘o’, and ‘a’, followed by a ‘=’, a ‘+’, or a ‘-’, followed by a list of any of the characters ‘r’, ‘w’, ‘x’, ‘s’, and ‘t’, or an octal digit. The first list of characters specify which access rights are to be checked. If a ‘u’ is given, those for the owner of the file are used, if a ‘g’ is given, those of the group are checked, a ‘o’ means to test those of other users, and the ‘a’ says to test all three groups. The ‘=’, ‘+’, and ‘-’ again says how the modes are to be checked and have the same meaning as described for the first form above. The second list of characters finally says which access rights are to be expected: ‘r’ for read access, ‘w’ for write access, ‘x’ for the right to execute the file (or to search a directory), ‘s’ for the setuid and setgid bits, and ‘t’ for the sticky bit. \nThus, ‘*(f70?)’ gives the files for which the owner has read, write, and execute permission, and for which other group members have no rights, independent of the permissions for other users. The pattern ‘*(f-100)’ gives all files for which the owner does not have execute permission, and ‘*(f:gu+w,o-rx:)’ gives the files for which the owner and the other members of the group have at least write permission, and for which other users don’t have read or execute permission. \nestring +cmd \nThe string will be executed as shell code. The filename will be included in the list if and only if the code returns a zero status (usually the status of the last command). \nIn the first form, the first character after the ‘e’ will be used as a separator and anything up to the next matching separator will be taken as the string; ‘[’, ‘{’, and ‘<’ match ‘]’, ‘}’, and ‘>’, respectively, while any other character matches itself. Note that expansions must be quoted in the string to prevent them from being expanded before globbing is done. string is then executed as shell code. The string globqual is appended to the array zsh_eval_context the duration of execution. \nDuring the execution of string the filename currently being tested is available in the parameter REPLY; the parameter may be altered to a string to be inserted into the list instead of the original filename. In addition, the parameter reply may be set to an array or a string, which overrides the value of REPLY. If set to an array, the latter is inserted into the command line word by word. \nFor example, suppose a directory contains a single file ‘lonely’. Then the expression ‘*(e:’reply=(${REPLY}{1,2})’:)’ will cause the words ‘lonely1’ and ‘lonely2’ to be inserted into the command line. Note the quoting of string. \nThe form +cmd has the same effect, but no delimiters appear around cmd. Instead, cmd is taken as the longest sequence of characters following the + that are alphanumeric or underscore. Typically cmd will be the name of a shell function that contains the appropriate test. For example, \nnt() { [[ $REPLY -nt $NTREF ]] }\nNTREF=reffile\nls -ld -- *(+nt)\nlists all files in the directory that have been modified more recently than reffile. \nddev \nfiles on the device dev \nl[-|+]ct \nfiles having a link count less than ct (-), greater than ct (+), or equal to ct \nU \nfiles owned by the effective user ID \nG \nfiles owned by the effective group ID \nuid \nfiles owned by user ID id if that is a number. Otherwise, id specifies a user name: the character after the ‘u’ will be taken as a separator and the string between it and the next matching separator will be taken as a user name. The starting separators ‘[’, ‘{’, and ‘<’ match the final separators ‘]’, ‘}’, and ‘>’, respectively; any other character matches itself. The selected files are those owned by this user. For example, ‘u:foo:’ or ‘u[foo]’ selects files owned by user ‘foo’. \ngid \nlike uid but with group IDs or names \na[Mwhms][-|+]n \nfiles accessed exactly n days ago. Files accessed within the last n days are selected using a negative value for n (-n). Files accessed more than n days ago are selected by a positive n value (+n). Optional unit specifiers ‘M’, ‘w’, ‘h’, ‘m’ or ‘s’ (e.g. ‘ah5’) cause the check to be performed with months (of 30 days), weeks, hours, minutes or seconds instead of days, respectively. An explicit ‘d’ for days is also allowed. \nAny fractional part of the difference between the access time and the current part in the appropriate units is ignored in the comparison. For instance, ‘echo *(ah-5)’ would echo files accessed within the last five hours, while ‘echo *(ah+5)’ would echo files accessed at least six hours ago, as times strictly between five and six hours are treated as five hours. \nm[Mwhms][-|+]n \nlike the file access qualifier, except that it uses the file modification time. \nc[Mwhms][-|+]n \nlike the file access qualifier, except that it uses the file inode change time. \nL[+|-]n \nfiles less than n bytes (-), more than n bytes (+), or exactly n bytes in length. \nIf this flag is directly followed by a size specifier ‘k’ (‘K’), ‘m’ (‘M’), or ‘p’ (‘P’) (e.g. ‘Lk-50’) the check is performed with kilobytes, megabytes, or blocks (of 512 bytes) instead. (On some systems additional specifiers are available for gigabytes, ‘g’ or ‘G’, and terabytes, ‘t’ or ‘T’.) If a size specifier is used a file is regarded as \"exactly\" the size if the file size rounded up to the next unit is equal to the test size. Hence ‘*(Lm1)’ matches files from 1 byte up to 1 Megabyte inclusive. Note also that the set of files \"less than\" the test size only includes files that would not match the equality test; hence ‘*(Lm-1)’ only matches files of zero size. \n^ \nnegates all qualifiers following it \n- \ntoggles between making the qualifiers work on symbolic links (the default) and the files they point to, if any; any symbolic link for whose target the ‘stat’ system call fails (whatever the cause of the failure) is treated as a file in its own right \nM \nsets the MARK_DIRS option for the current pattern \nT \nappends a trailing qualifier mark to the filenames, analogous to the LIST_TYPES option, for the current pattern (overrides M) \nN \nsets the NULL_GLOB option for the current pattern \nD \nsets the GLOB_DOTS option for the current pattern \nn \nsets the NUMERIC_GLOB_SORT option for the current pattern \nYn \nenables short-circuit mode: the pattern will expand to at most n filenames. If more than n matches exist, only the first n matches in directory traversal order will be considered. \nImplies oN when no oc qualifier is used. \noc \nspecifies how the names of the files should be sorted. The following values of c sort in the following ways: \nn \nBy name. \nL \nBy the size (length) of the files. \nl \nBy number of links. \na \nBy time of last access, youngest first. \nm \nBy time of last modification, youngest first. \nc \nBy time of last inode change, youngest first. \nd \nBy directories: files in subdirectories appear before those in the current directory at each level of the search — this is best combined with other criteria, for example ‘odon’ to sort on names for files within the same directory. \nN \nNo sorting is performed. \nestring +cmd \nSort by shell code (see below). \nNote that the modifiers ^ and - are used, so ‘*(^-oL)’ gives a list of all files sorted by file size in descending order, following any symbolic links. Unless oN is used, multiple order specifiers may occur to resolve ties. \nThe default sorting is n (by name) unless the Y glob qualifier is used, in which case it is N (unsorted). \noe and o+ are special cases; they are each followed by shell code, delimited as for the e glob qualifier and the + glob qualifier respectively (see above). The code is executed for each matched file with the parameter REPLY set to the name of the file on entry and globsort appended to zsh_eval_context. The code should modify the parameter REPLY in some fashion. On return, the value of the parameter is used instead of the file name as the string on which to sort. Unlike other sort operators, oe and o+ may be repeated, but note that the maximum number of sort operators of any kind that may appear in any glob expression is 12. \nOc \nlike ‘o’, but sorts in descending order; i.e. ‘*(^oc)’ is the same as ‘*(Oc)’ and ‘*(^Oc)’ is the same as ‘*(oc)’; ‘Od’ puts files in the current directory before those in subdirectories at each level of the search. \n[beg[,end]] \nspecifies which of the matched filenames should be included in the returned list. The syntax is the same as for array subscripts. beg and the optional end may be mathematical expressions. As in parameter subscripting they may be negative to make them count from the last match backward. E.g.: ‘*(-OL[1,3])’ gives a list of the names of the three largest files. \nPstring \nThe string will be prepended to each glob match as a separate word. string is delimited in the same way as arguments to the e glob qualifier described above. The qualifier can be repeated; the words are prepended separately so that the resulting command line contains the words in the same order they were given in the list of glob qualifiers. \nA typical use for this is to prepend an option before all occurrences of a file name; for example, the pattern ‘*(P:-f:)’ produces the command line arguments ‘-f file1 -f file2 ...’ \nIf the modifier ^ is active, then string will be appended instead of prepended. Prepending and appending is done independently so both can be used on the same glob expression; for example by writing ‘*(P:foo:^P:bar:^P:baz:)’ which produces the command line arguments ‘foo baz file1 bar ...’ \nMore than one of these lists can be combined, separated by commas. The whole list matches if at least one of the sublists matches (they are ‘or’ed, the qualifiers in the sublists are ‘and’ed). Some qualifiers, however, affect all matches generated, independent of the sublist in which they are given. These are the qualifiers ‘M’, ‘T’, ‘N’, ‘D’, ‘n’, ‘o’, ‘O’ and the subscripts given in brackets (‘[...]’). \nIf a ‘:’ appears in a qualifier list, the remainder of the expression in parenthesis is interpreted as a modifier (see Modifiers in History Expansion). Each modifier must be introduced by a separate ‘:’. Note also that the result after modification does not have to be an existing file. The name of any existing file can be followed by a modifier of the form ‘(:...)’ even if no actual filename generation is performed, although note that the presence of the parentheses causes the entire expression to be subjected to any global pattern matching options such as NULL_GLOB. Thus: \nlists all directories and symbolic links that point to directories, and \nlists all broken symbolic links, and \nlists all world-writable device files in the current directory, and \nlists all files in the current directory that are world-writable or world-executable, and \nprint -rC1 /tmp/foo*(u0^@:t)\noutputs the basename of all root-owned files beginning with the string ‘foo’ in /tmp, ignoring symlinks, and \nls -ld -- *.*~(lex|parse).[ch](^D^l1)\nlists all files having a link count of one whose names contain a dot (but not those starting with a dot, since GLOB_DOTS is explicitly switched off) except for lex.c, lex.h, parse.c and parse.h. \nprint -rC1 b*.pro(#q:s/pro/shmo/)(#q.:s/builtin/shmiltin/)\ndemonstrates how colon modifiers and other qualifiers may be chained together. The ordinary qualifier ‘.’ is applied first, then the colon modifiers in order from left to right. So if EXTENDED_GLOB is set and the base pattern matches the regular file builtin.pro, the shell will print ‘shmiltin.shmo’. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Expansion-html-Expansion-9h6qs.html",
  "markdown": "# zsh: 14 Expansion\n\nThe following types of expansions are performed in the indicated order in five steps:\n\n_History Expansion_\n\nThis is performed only in interactive shells.\n\n_Alias Expansion_\n\nAliases are expanded immediately before the command line is parsed as explained in [Aliasing](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Aliasing).\n\n_Process Substitution_\n\n_Parameter Expansion_\n\n_Command Substitution_\n\n_Arithmetic Expansion_\n\n_Brace Expansion_\n\nThese five are performed in left-to-right fashion. On each argument, any of the five steps that are needed are performed one after the other. Hence, for example, all the parts of parameter expansion are completed before command substitution is started. After these expansions, all unquoted occurrences of the characters ‘\\\\’,‘’’ and ‘\"’ are removed.\n\n_Filename Expansion_\n\nIf the SH\\_FILE\\_EXPANSION option is set, the order of expansion is modified for compatibility with sh and ksh. In that case _filename expansion_ is performed immediately after _alias expansion_, preceding the set of five expansions mentioned above.\n\n_Filename Generation_\n\nThis expansion, commonly referred to as globbing, is always done last.\n\nThe following sections explain the types of expansion in detail.\n\n* * *\n\n## 14.1 History Expansion\n\nHistory expansion allows you to use words from previous command lines in the command line you are typing. This simplifies spelling corrections and the repetition of complicated commands or arguments.\n\nImmediately before execution, each command is saved in the history list, the size of which is controlled by the HISTSIZE parameter. The one most recent command is always retained in any case. Each saved command in the history list is called a history _event_ and is assigned a number, beginning with 1 (one) when the shell starts up. The history number that you may see in your prompt (see [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion)) is the number that is to be assigned to the _next_ command.\n\n* * *\n\n### 14.1.1 Overview\n\nA history expansion begins with the first character of the histchars parameter, which is ‘!’ by default, and may occur anywhere on the command line, including inside double quotes (but not inside single quotes ’...’ or C-style quotes $’...’ nor when escaped with a backslash).\n\nThe first character is followed by an optional event designator ([Event Designators](#Event-Designators)) and then an optional word designator ([Word Designators](#Word-Designators)); if neither of these designators is present, no history expansion occurs.\n\nInput lines containing history expansions are echoed after being expanded, but before any other expansions take place and before the command is executed. It is this expanded form that is recorded as the history event for later references.\n\nHistory expansions do not nest.\n\nBy default, a history reference with no event designator refers to the same event as any preceding history reference on that command line; if it is the only history reference in a command, it refers to the previous command. However, if the option CSH\\_JUNKIE\\_HISTORY is set, then every history reference with no event specification _always_ refers to the previous command.\n\nFor example, ‘!’ is the event designator for the previous command, so ‘!!:1’ always refers to the first word of the previous command, and ‘!!$’ always refers to the last word of the previous command. With CSH\\_JUNKIE\\_HISTORY set, then ‘!:1’ and ‘!$’ function in the same manner as ‘!!:1’ and ‘!!$’, respectively. Conversely, if CSH\\_JUNKIE\\_HISTORY is unset, then ‘!:1’ and ‘!$’ refer to the first and last words, respectively, of the same event referenced by the nearest other history reference preceding them on the current command line, or to the previous command if there is no preceding reference.\n\nThe character sequence ‘^foo^bar’ (where ‘^’ is actually the second character of the histchars parameter) repeats the last command, replacing the string foo with bar. More precisely, the sequence ‘^foo^bar^’ is synonymous with ‘!!:s^foo^bar^’, hence other modifiers (see [Modifiers](#Modifiers)) may follow the final ‘^’. In particular, ‘^foo^bar^:G’ performs a global substitution.\n\nIf the shell encounters the character sequence ‘!\"’ in the input, the history mechanism is temporarily disabled until the current list (see [Shell Grammar](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Shell-Grammar)) is fully parsed. The ‘!\"’ is removed from the input, and any subsequent ‘!’ characters have no special significance.\n\nA less convenient but more comprehensible form of command history support is provided by the fc builtin.\n\n* * *\n\n### 14.1.2 Event Designators\n\nAn event designator is a reference to a command-line entry in the history list. In the list below, remember that the initial ‘!’ in each item may be changed to another character by setting the histchars parameter.\n\n!\n\nStart a history expansion, except when followed by a blank, newline, ‘\\=’ or ‘(’. If followed immediately by a word designator ([Word Designators](#Word-Designators)), this forms a history reference with no event designator ([Overview](#Overview)).\n\n!!\n\nRefer to the previous command. By itself, this expansion repeats the previous command.\n\n!n\n\nRefer to command-line n.\n\n!-n\n\nRefer to the current command-line minus n.\n\n!str\n\nRefer to the most recent command starting with str.\n\n!?str\\[?\\]\n\nRefer to the most recent command containing str. The trailing ‘?’ is necessary if this reference is to be followed by a modifier or followed by any text that is not to be considered part of str.\n\n!#\n\nRefer to the current command line typed in so far. The line is treated as if it were complete up to and including the word before the one with the ‘!#’ reference.\n\n!{...}\n\nInsulate a history reference from adjacent characters (if necessary).\n\n* * *\n\n### 14.1.3 Word Designators\n\nA word designator indicates which word or words of a given command line are to be included in a history reference. A ‘:’ usually separates the event specification from the word designator. It may be omitted only if the word designator begins with a ‘^’, ‘$’, ‘\\*’, ‘\\-’ or ‘%’. Word designators include:\n\n0\n\nThe first input word (command).\n\nn\n\nThe nth argument.\n\n^\n\nThe first argument. That is, 1.\n\n$\n\nThe last argument.\n\n%\n\nThe word matched by (the most recent) ?str search.\n\nx\\-y\n\nA range of words; x defaults to 0.\n\n\\*\n\nAll the arguments, or a null value if there are none.\n\nx\\*\n\nAbbreviates ‘x\\-$’.\n\nx\\-\n\nLike ‘x\\*’ but omitting word $.\n\nNote that a ‘%’ word designator works only when used in one of ‘!%’, ‘!:%’ or ‘!?str?:%’, and only when used after a !? expansion (possibly in an earlier command). Anything else results in an error, although the error may not be the most obvious one.\n\n* * *\n\n### 14.1.4 Modifiers\n\nAfter the optional word designator, you can add a sequence of one or more of the following modifiers, each preceded by a ‘:’. These modifiers also work on the result of _filename generation_ and _parameter expansion_, except where noted.\n\na\n\nTurn a file name into an absolute path: prepends the current directory, if necessary; remove ‘.’ path segments; and remove ‘..’ path segments and the segments that immediately precede them.\n\nThis transformation is agnostic about what is in the filesystem, i.e. is on the logical, not the physical directory. It takes place in the same manner as when changing directories when neither of the options CHASE\\_DOTS or CHASE\\_LINKS is set. For example, ‘/before/here/../after’ is always transformed to ‘/before/after’, regardless of whether ‘/before/here’ exists or what kind of object (dir, file, symlink, etc.) it is.\n\nA\n\nTurn a file name into an absolute path as the ‘a’ modifier does, and _then_ pass the result through the realpath(3) library function to resolve symbolic links.\n\nNote: on systems that do not have a realpath(3) library function, symbolic links are not resolved, so on those systems ‘a’ and ‘A’ are equivalent.\n\nNote: foo:A and realpath(foo) are different on some inputs. For realpath(foo) semantics, see the ‘P‘ modifier.\n\nc\n\nResolve a command name into an absolute path by searching the command path given by the PATH variable. This does not work for commands containing directory parts. Note also that this does not usually work as a glob qualifier unless a file of the same name is found in the current directory.\n\ne\n\nRemove all but the part of the filename extension following the ‘.’; see the definition of the filename extension in the description of the r modifier below. Note that according to that definition the result will be empty if the string ends with a ‘.’.\n\nh \\[ digits \\]\n\nRemove a trailing pathname component, shortening the path by one directory level: this is the ‘head’ of the pathname. This works like ‘dirname’. If the h is followed immediately (with no spaces or other separator) by any number of decimal digits, and the value of the resulting number is non-zero, that number of leading components is preserved instead of the final component being removed. In an absolute path the leading ‘/’ is the first component, so, for example, if var=/my/path/to/something, then ${var:h3} substitutes /my/path. Consecutive ‘/’s are treated the same as a single ‘/’. In parameter substitution, digits may only be used if the expression is in braces, so for example the short form substitution $var:h2 is treated as ${var:h}2, not as ${var:h2}. No restriction applies to the use of digits in history substitution or globbing qualifiers. If more components are requested than are present, the entire path is substituted (so this does not trigger a ‘failed modifier’ error in history expansion).\n\nl\n\nConvert the words to all lowercase.\n\np\n\nPrint the new command but do not execute it. Only works with history expansion.\n\nP\n\nTurn a file name into an absolute path, like realpath(3). The resulting path will be absolute, will refer to the same directory entry as the input filename, and none of its components will be symbolic links or equal to ‘.’ or ‘..’.\n\nUnlike realpath(3), non-existent trailing components are permitted and preserved.\n\nq\n\nQuote the substituted words, escaping further substitutions. Works with history expansion and parameter expansion, though for parameters it is only useful if the resulting text is to be re-evaluated such as by eval.\n\nQ\n\nRemove one level of quotes from the substituted words.\n\nr\n\nRemove a filename extension leaving the root name. Strings with no filename extension are not altered. A filename extension is a ‘.’ followed by any number of characters (including zero) that are neither ‘.’ nor ‘/’ and that continue to the end of the string. For example, the extension of ‘foo.orig.c’ is ‘.c’, and ‘dir.c/foo’ has no extension.\n\ns/l/r\\[/\\]\n\nSubstitute r for l as described below. The substitution is done only for the first string that matches l. For arrays and for filename generation, this applies to each word of the expanded text. See below for further notes on substitutions.\n\nThe forms ‘gs/l/r’ and ‘s/l/r/:G’ perform global substitution, i.e. substitute every occurrence of r for l. Note that the g or :G must appear in exactly the position shown.\n\nSee further notes on this form of substitution below.\n\n&\n\nRepeat the previous s substitution. Like s, may be preceded immediately by a g. In parameter expansion the & must appear inside braces, and in filename generation it must be quoted with a backslash.\n\nt \\[ digits \\]\n\nRemove all leading pathname components, leaving the final component (tail). This works like ‘basename’. Any trailing slashes are first removed. Decimal digits are handled as described above for (h), but in this case that number of trailing components is preserved instead of the default 1; 0 is treated the same as 1.\n\nu\n\nConvert the words to all uppercase.\n\nx\n\nLike q, but break into words at whitespace. Does not work with parameter expansion.\n\nThe s/l/r/ substitution works as follows. By default the left-hand side of substitutions are not patterns, but character strings. Any character can be used as the delimiter in place of ‘/’. A backslash quotes the delimiter character. The character ‘&’, in the right-hand-side r, is replaced by the text from the left-hand-side l. The ‘&’ can be quoted with a backslash. A null l uses the previous string either from the previous l or from the contextual scan string s from ‘!?s’. You can omit the rightmost delimiter if a newline immediately follows r; the rightmost ‘?’ in a context scan can similarly be omitted. Note the same record of the last l and r is maintained across all forms of expansion.\n\nNote that if a ‘&’ is used within glob qualifiers an extra backslash is needed as a & is a special character in this case.\n\nAlso note that the order of expansions affects the interpretation of l and r. When used in a history expansion, which occurs before any other expansions, l and r are treated as literal strings (except as explained for HIST\\_SUBST\\_PATTERN below). When used in parameter expansion, the replacement of r into the parameter’s value is done first, and then any additional process, parameter, command, arithmetic, or brace references are applied, which may evaluate those substitutions and expansions more than once if l appears more than once in the starting value. When used in a glob qualifier, any substitutions or expansions are performed once at the time the qualifier is parsed, even before the ‘:s’ expression itself is divided into l and r sides.\n\nIf the option HIST\\_SUBST\\_PATTERN is set, l is treated as a pattern of the usual form described in [Filename Generation](#Filename-Generation). This can be used in all the places where modifiers are available; note, however, that in globbing qualifiers parameter substitution has already taken place, so parameters in the replacement string should be quoted to ensure they are replaced at the correct time. Note also that complicated patterns used in globbing qualifiers may need the extended glob qualifier notation (#q:s/.../.../) in order for the shell to recognize the expression as a glob qualifier. Further, note that bad patterns in the substitution are not subject to the NO\\_BAD\\_PATTERN option so will cause an error.\n\nWhen HIST\\_SUBST\\_PATTERN is set, l may start with a # to indicate that the pattern must match at the start of the string to be substituted, and a % may appear at the start or after an # to indicate that the pattern must match at the end of the string to be substituted. The % or # may be quoted with two backslashes.\n\nFor example, the following piece of filename generation code with the EXTENDED\\_GLOB option:\n\nprint -r -- \\*.c(#q:s/#%(#b)s(\\*).c/'S${match\\[1\\]}.C'/)\n\ntakes the expansion of \\*.c and applies the glob qualifiers in the (#q...) expression, which consists of a substitution modifier anchored to the start and end of each word (#%). This turns on backreferences ((#b)), so that the parenthesised subexpression is available in the replacement string as ${match\\[1\\]}. The replacement string is quoted so that the parameter is not substituted before the start of filename generation.\n\nThe following f, F, w and W modifiers work only with parameter expansion and filename generation. They are listed here to provide a single point of reference for all modifiers.\n\nf\n\nRepeats the immediately (without a colon) following modifier until the resulting word doesn’t change any more.\n\nF:expr:\n\nLike f, but repeats only n times if the expression expr evaluates to n. Any character can be used instead of the ‘:’; if ‘(’, ‘\\[’, or ‘{’ is used as the opening delimiter, the closing delimiter should be ’)’, ‘\\]’, or ‘}’, respectively.\n\nw\n\nMakes the immediately following modifier work on each word in the string.\n\nW:sep:\n\nLike w but words are considered to be the parts of the string that are separated by sep. Any character can be used instead of the ‘:’; opening parentheses are handled specially, see above.\n\n* * *\n\n## 14.2 Process Substitution\n\nEach part of a command argument that takes the form ‘<(list)’, ‘\\>(list)’ or ‘\\=(list)’ is subject to process substitution. The expression may be preceded or followed by other strings except that, to prevent clashes with commonly occurring strings and patterns, the last form must occur at the start of a command argument, and the forms are only expanded when first parsing command or assignment arguments. Process substitutions may be used following redirection operators; in this case, the substitution must appear with no trailing string.\n\nNote that ‘<<(list)’ is not a special syntax; it is equivalent to ‘< <(list)’, redirecting standard input from the result of process substitution. Hence all the following documentation applies. The second form (with the space) is recommended for clarity.\n\nIn the case of the < or \\> forms, the shell runs the commands in list as a subprocess of the job executing the shell command line. If the system supports the /dev/fd mechanism, the command argument is the name of the device file corresponding to a file descriptor; otherwise, if the system supports named pipes (FIFOs), the command argument will be a named pipe. If the form with \\> is selected then writing on this special file will provide input for list. If < is used, then the file passed as an argument will be connected to the output of the list process. For example,\n\npaste <(cut -f1 file1) <(cut -f3 file2) |\ntee >(process1) >(process2) >/dev/null\n\ncuts fields 1 and 3 from the files file1 and file2 respectively, pastes the results together, and sends it to the processes process1 and process2.\n\nIf \\=(...) is used instead of <(...), then the file passed as an argument will be the name of a temporary file containing the output of the list process. This may be used instead of the < form for a program that expects to lseek (see lseek(2)) on the input file.\n\nThere is an optimisation for substitutions of the form \\=(<<<arg), where arg is a single-word argument to the here-string redirection <<<. This form produces a file name containing the value of arg after any substitutions have been performed. This is handled entirely within the current shell. This is effectively the reverse of the special form $(<arg) which treats arg as a file name and replaces it with the file’s contents.\n\nThe \\= form is useful as both the /dev/fd and the named pipe implementation of <(...) have drawbacks. In the former case, some programmes may automatically close the file descriptor in question before examining the file on the command line, particularly if this is necessary for security reasons such as when the programme is running setuid. In the second case, if the programme does not actually open the file, the subshell attempting to read from or write to the pipe will (in a typical implementation, different operating systems may have different behaviour) block for ever and have to be killed explicitly. In both cases, the shell actually supplies the information using a pipe, so that programmes that expect to lseek (see lseek(2)) on the file will not work.\n\nAlso note that the previous example can be more compactly and efficiently written (provided the MULTIOS option is set) as:\n\npaste <(cut -f1 file1) <(cut -f3 file2) \\> >(process1) > >(process2)\n\nThe shell uses pipes instead of FIFOs to implement the latter two process substitutions in the above example.\n\nThere is an additional problem with \\>(process); when this is attached to an external command, the parent shell does not wait for process to finish and hence an immediately following command cannot rely on the results being complete. The problem and solution are the same as described in the section _MULTIOS_ in [Redirection](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirection). Hence in a simplified version of the example above:\n\npaste <(cut -f1 file1) <(cut -f3 file2) \\> >(process)\n\n(note that no MULTIOS are involved), process will be run asynchronously as far as the parent shell is concerned. The workaround is:\n\n{ paste <(cut -f1 file1) <(cut -f3 file2) } \\> >(process)\n\nThe extra processes here are spawned from the parent shell which will wait for their completion.\n\nAnother problem arises any time a job with a substitution that requires a temporary file is disowned by the shell, including the case where ‘&!’ or ‘&|’ appears at the end of a command containing a substitution. In that case the temporary file will not be cleaned up as the shell no longer has any memory of the job. A workaround is to use a subshell, for example,\n\nas the forked subshell will wait for the command to finish then remove the temporary file.\n\nA general workaround to ensure a process substitution endures for an appropriate length of time is to pass it as a parameter to an anonymous shell function (a piece of shell code that is run immediately with function scope). For example, this code:\n\n() {\n   print File $1:\n   cat $1\n} =(print This be the verse)\n\noutputs something resembling the following\n\nFile /tmp/zsh6nU0kS:\nThis be the verse\n\nThe temporary file created by the process substitution will be deleted when the function exits.\n\n* * *\n\n## 14.3 Parameter Expansion\n\nThe character ‘$’ is used to introduce parameter expansions. See [Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters) for a description of parameters, including arrays, associative arrays, and subscript notation to access individual array elements.\n\nNote in particular the fact that words of unquoted parameters are not automatically split on whitespace unless the option SH\\_WORD\\_SPLIT is set; see references to this option below for more details. This is an important difference from other shells. However, as in other shells, null words are elided from unquoted parameters’ expansions.\n\nWith default options, after the assignments:\n\narray=(\"first word\" \"\" \"third word\")\nscalar=\"only word\"\n\nthen $array substitutes two words, ‘first word’ and ‘third word’, and $scalar substitutes a single word ‘only word’. Note that second element of array was elided. Scalar parameters can be elided too if their value is null (empty). To avoid elision, use quoting as follows: \"$scalar\" for scalars and \"${array\\[@\\]}\" or \"${(@)array}\" for arrays. (The last two forms are equivalent.)\n\nParameter expansions can involve _flags_, as in ‘${(@kv)aliases}’, and other operators, such as ‘${PREFIX:-\"/usr/local\"}’. Parameter expansions can also be nested. These topics will be introduced below. The full rules are complicated and are noted at the end.\n\nIn the expansions discussed below that require a pattern, the form of the pattern is the same as that used for filename generation; see [Filename Generation](#Filename-Generation). Note that these patterns, along with the replacement text of any substitutions, are themselves subject to parameter expansion, command substitution, and arithmetic expansion. In addition to the following operations, the colon modifiers described in [Modifiers](#Modifiers) in [History Expansion](#History-Expansion) can be applied: for example, ${i:s/foo/bar/} performs string substitution on the expansion of parameter $i.\n\nIn the following descriptions, ‘word’ refers to a single word substituted on the command line, not necessarily a space delimited word.\n\n${name}\n\nThe value, if any, of the parameter name is substituted. The braces are required if the expansion is to be followed by a letter, digit, or underscore that is not to be interpreted as part of name. In addition, more complicated forms of substitution usually require the braces to be present; exceptions, which only apply if the option KSH\\_ARRAYS is not set, are a single subscript or any colon modifiers appearing after the name, or any of the characters ‘^’, ‘\\=’, ‘~’, ‘#’ or ‘+’ appearing before the name, all of which work with or without braces.\n\nIf name is an array parameter, and the KSH\\_ARRAYS option is not set, then the value of each element of name is substituted, one element per word. Otherwise, the expansion results in one word only; with KSH\\_ARRAYS, this is the first element of an array. No field splitting is done on the result unless the SH\\_WORD\\_SPLIT option is set. See also the flags \\= and s:string:.\n\n${+name}\n\nIf name is the name of a set parameter ‘1’ is substituted, otherwise ‘0’ is substituted.\n\n${name\\-word}\n\n${name:-word}\n\nIf name is set, or in the second form is non-null, then substitute its value; otherwise substitute word. In the second form name may be omitted, in which case word is always substituted.\n\n${name+word}\n\n${name:+word}\n\nIf name is set, or in the second form is non-null, then substitute word; otherwise substitute nothing.\n\n${name\\=word}\n\n${name:=word}\n\n${name::=word}\n\nIn the first form, if name is unset then set it to word; in the second form, if name is unset or null then set it to word; and in the third form, unconditionally set name to word. In all forms, the value of the parameter is then substituted.\n\n${name?word}\n\n${name:?word}\n\nIn the first form, if name is set, or in the second form if name is both set and non-null, then substitute its value; otherwise, print word and exit from the shell. Interactive shells instead return to the prompt. If word is omitted, then a standard message is printed.\n\nIn any of the above expressions that test a variable and substitute an alternate word, note that you can use standard shell quoting in the word value to selectively override the splitting done by the SH\\_WORD\\_SPLIT option and the \\= flag, but not splitting by the s:string: flag.\n\nIn the following expressions, when name is an array and the substitution is not quoted, or if the ‘(@)’ flag or the name\\[@\\] syntax is used, matching and replacement is performed on each array element separately.\n\n${name#pattern}\n\n${name##pattern}\n\nIf the pattern matches the beginning of the value of name, then substitute the value of name with the matched portion deleted; otherwise, just substitute the value of name. In the first form, the smallest matching pattern is preferred; in the second form, the largest matching pattern is preferred.\n\n${name%pattern}\n\n${name%%pattern}\n\nIf the pattern matches the end of the value of name, then substitute the value of name with the matched portion deleted; otherwise, just substitute the value of name. In the first form, the smallest matching pattern is preferred; in the second form, the largest matching pattern is preferred.\n\n${name:#pattern}\n\nIf the pattern matches the value of name, then substitute the empty string; otherwise, just substitute the value of name. If name is an array the matching array elements are removed (use the ‘(M)’ flag to remove the non-matched elements).\n\n${name:|arrayname}\n\nIf arrayname is the name (N.B., not contents) of an array variable, then any elements contained in arrayname are removed from the substitution of name. If the substitution is scalar, either because name is a scalar variable or the expression is quoted, the elements of arrayname are instead tested against the entire expression.\n\n${name:\\*arrayname}\n\nSimilar to the preceding substitution, but in the opposite sense, so that entries present in both the original substitution and as elements of arrayname are retained and others removed.\n\n${name:^arrayname}\n\n${name:^^arrayname}\n\nZips two arrays, such that the output array is twice as long as the shortest (longest for ‘:^^’) of name and arrayname, with the elements alternatingly being picked from them. For ‘:^’, if one of the input arrays is longer, the output will stop when the end of the shorter array is reached. Thus,\n\na=(1 2 3 4); b=(a b); print ${a:^b}\n\nwill output ‘1 a 2 b’. For ‘:^^’, then the input is repeated until all of the longer array has been used up and the above will output ‘1 a 2 b 3 a 4 b’.\n\nEither or both inputs may be a scalar, they will be treated as an array of length 1 with the scalar as the only element. If either array is empty, the other array is output with no extra elements inserted.\n\nCurrently the following code will output ‘a b’ and ‘1’ as two separate elements, which can be unexpected. The second print provides a workaround which should continue to work if this is changed.\n\na=(a b); b=(1 2); print -l \"${a:^b}\"; print -l \"${${a:^b}}\"\n\n${name:offset}\n\n${name:offset:length}\n\nThis syntax gives effects similar to parameter subscripting in the form $name\\[start,end\\], but is compatible with other shells; note that both offset and length are interpreted differently from the components of a subscript.\n\nIf offset is non-negative, then if the variable name is a scalar substitute the contents starting offset characters from the first character of the string, and if name is an array substitute elements starting offset elements from the first element. If length is given, substitute that many characters or elements, otherwise the entire rest of the scalar or array.\n\nA positive offset is always treated as the offset of a character or element in name from the first character or element of the array (this is different from native zsh subscript notation). Hence 0 refers to the first character or element regardless of the setting of the option KSH\\_ARRAYS.\n\nA negative offset counts backwards from the end of the scalar or array, so that -1 corresponds to the last character or element, and so on.\n\nWhen positive, length counts from the offset position toward the end of the scalar or array. When negative, length counts back from the end. If this results in a position smaller than offset, a diagnostic is printed and nothing is substituted.\n\nThe option MULTIBYTE is obeyed, i.e. the offset and length count multibyte characters where appropriate.\n\noffset and length undergo the same set of shell substitutions as for scalar assignment; in addition, they are then subject to arithmetic evaluation. Hence, for example\n\nprint ${foo:3}\nprint ${foo: 1 + 2}\nprint ${foo:$(( 1 + 2))}\nprint ${foo:$(echo 1 + 2)}\n\nall have the same effect, extracting the string starting at the fourth character of $foo if the substitution would otherwise return a scalar, or the array starting at the fourth element if $foo would return an array. Note that with the option KSH\\_ARRAYS $foo always returns a scalar (regardless of the use of the offset syntax) and a form such as ${foo\\[\\*\\]:3} is required to extract elements of an array named foo.\n\nIf offset is negative, the \\- may not appear immediately after the : as this indicates the ${name:-word} form of substitution. Instead, a space may be inserted before the \\-. Furthermore, neither offset nor length may begin with an alphabetic character or & as these are used to indicate history-style modifiers. To substitute a value from a variable, the recommended approach is to precede it with a $ as this signifies the intention (parameter substitution can easily be rendered unreadable); however, as arithmetic substitution is performed, the expression ${var: offs} does work, retrieving the offset from $offs.\n\nFor further compatibility with other shells there is a special case for array offset 0. This usually accesses the first element of the array. However, if the substitution refers to the positional parameter array, e.g. $@ or $\\*, then offset 0 instead refers to $0, offset 1 refers to $1, and so on. In other words, the positional parameter array is effectively extended by prepending $0. Hence ${\\*:0:1} substitutes $0 and ${\\*:1:1} substitutes $1.\n\n${name/pattern/repl}\n\n${name//pattern/repl}\n\n${name:/pattern/repl}\n\nReplace the longest possible match of pattern in the expansion of parameter name by string repl. The first form replaces just the first occurrence, the second form all occurrences, and the third form replaces only if pattern matches the entire string. Both pattern and repl are subject to double-quoted substitution, so that expressions like ${name/$opat/$npat} will work, but obey the usual rule that pattern characters in $opat are not treated specially unless either the option GLOB\\_SUBST is set, or $opat is instead substituted as ${~opat}.\n\nThe pattern may begin with a ‘#’, in which case the pattern must match at the start of the string, or ‘%’, in which case it must match at the end of the string, or ‘#%’ in which case the pattern must match the entire string. The repl may be an empty string, in which case the final ‘/’ may also be omitted. To quote the final ‘/’ in other cases it should be preceded by a single backslash; this is not necessary if the ‘/’ occurs inside a substituted parameter. Note also that the ‘#’, ‘%’ and ‘#% are not active if they occur inside a substituted parameter, even at the start.\n\nIf, after quoting rules apply, ${name} expands to an array, the replacements act on each element individually. Note also the effect of the I and S parameter expansion flags below; however, the flags M, R, B, E and N are not useful.\n\nFor example,\n\nfoo=\"twinkle twinkle little star\" sub=\"t\\*e\" rep=\"spy\"\nprint ${foo//${~sub}/$rep}\nprint ${(S)foo//${~sub}/$rep}\n\nHere, the ‘~’ ensures that the text of $sub is treated as a pattern rather than a plain string. In the first case, the longest match for t\\*e is substituted and the result is ‘spy star’, while in the second case, the shortest matches are taken and the result is ‘spy spy lispy star’.\n\n${#spec}\n\nIf spec is one of the above substitutions, substitute the length in characters of the result instead of the result itself. If spec is an array expression, substitute the number of elements of the result. This has the side-effect that joining is skipped even in quoted forms, which may affect other sub-expressions in spec. Note that ‘^’, ‘\\=’, and ‘~’, below, must appear to the left of ‘#’ when these forms are combined.\n\nIf the option POSIX\\_IDENTIFIERS is not set, and spec is a simple name, then the braces are optional; this is true even for special parameters so e.g. $#- and $#\\* take the length of the string $- and the array $\\* respectively. If POSIX\\_IDENTIFIERS is set, then braces are required for the # to be treated in this fashion.\n\n${^spec}\n\n${^^spec}\n\nTurn on the RC\\_EXPAND\\_PARAM option for the evaluation of spec; if the ‘^’ is doubled, turn it off. When this option is set, array expansions of the form foo${xx}bar, where the parameter xx is set to (a b c), are substituted with ‘fooabar foobbar foocbar’ instead of the default ‘fooa b cbar’. Note that an empty array will therefore cause all arguments to be removed.\n\nInternally, each such expansion is converted into the equivalent list for brace expansion. E.g., ${^var} becomes {$var\\[1\\],$var\\[2\\],...}, and is processed as described in [Brace Expansion](#Brace-Expansion) below: note, however, the expansion happens immediately, with any explicit brace expansion happening later. If word splitting is also in effect the $var\\[N\\] may themselves be split into different list elements.\n\n${=spec}\n\n${==spec}\n\nPerform word splitting using the rules for SH\\_WORD\\_SPLIT during the evaluation of spec, but regardless of whether the parameter appears in double quotes; if the ‘\\=’ is doubled, turn it off. This forces parameter expansions to be split into separate words before substitution, using IFS as a delimiter. This is done by default in most other shells.\n\nNote that splitting is applied to word in the assignment forms of spec _before_ the assignment to name is performed. This affects the result of array assignments with the A flag.\n\n${~spec}\n\n${~~spec}\n\nTurn on the GLOB\\_SUBST option for the evaluation of spec; if the ‘~’ is doubled, turn it off. When this option is set, the string resulting from the expansion will be interpreted as a pattern anywhere that is possible, such as in filename expansion and filename generation and pattern-matching contexts like the right hand side of the ‘\\=’ and ‘!=’ operators in conditions.\n\nIn nested substitutions, note that the effect of the ~ applies to the result of the current level of substitution. A surrounding pattern operation on the result may cancel it. Hence, for example, if the parameter foo is set to \\*, ${~foo//\\\\\\*/\\*.c} is substituted by the pattern \\*.c, which may be expanded by filename generation, but ${${~foo}//\\\\\\*/\\*.c} substitutes to the string \\*.c, which will not be further expanded.\n\nIf a ${...} type parameter expression or a $(...) type command substitution is used in place of name above, it is expanded first and the result is used as if it were the value of name. Thus it is possible to perform nested operations: ${${foo#head}%tail} substitutes the value of $foo with both ‘head’ and ‘tail’ deleted. The form with $(...) is often useful in combination with the flags described next; see the examples below. Each name or nested ${...} in a parameter expansion may also be followed by a subscript expression as described in [Array Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Array-Parameters).\n\nNote that double quotes may appear around nested expressions, in which case only the part inside is treated as quoted; for example, ${(f)\"$(foo)\"} quotes the result of $(foo), but the flag ‘(f)’ (see below) is applied using the rules for unquoted expansions. Note further that quotes are themselves nested in this context; for example, in \"${(@f)\"$(foo)\"}\", there are two sets of quotes, one surrounding the whole expression, the other (redundant) surrounding the $(foo) as before.\n\n* * *\n\n### 14.3.1 Parameter Expansion Flags\n\nIf the opening brace is directly followed by an opening parenthesis, the string up to the matching closing parenthesis will be taken as a list of flags. In cases where repeating a flag is meaningful, the repetitions need not be consecutive; for example, ‘(q%q%q)’ means the same thing as the more readable ‘(%%qqq)’. The following flags are supported:\n\n#\n\nEvaluate the resulting words as numeric expressions and interpret these as character codes. Output the corresponding characters. Note that this form is entirely distinct from use of the # without parentheses.\n\nIf the MULTIBYTE option is set and the number is greater than 127 (i.e. not an ASCII character) it is treated as a Unicode character.\n\n%\n\nExpand all % escapes in the resulting words in the same way as in prompts (see [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion)). If this flag is given twice, full prompt expansion is done on the resulting words, depending on the setting of the PROMPT\\_PERCENT, PROMPT\\_SUBST and PROMPT\\_BANG options.\n\n@\n\nIn double quotes, array elements are put into separate words. E.g., ‘\"${(@)foo}\"’ is equivalent to ‘\"${foo\\[@\\]}\"’ and ‘\"${(@)foo\\[1,2\\]}\"’ is the same as ‘\"$foo\\[1\\]\" \"$foo\\[2\\]\"’. This is distinct from _field splitting_ by the f, s or z flags, which still applies within each array element.\n\nA\n\nConvert the substitution into an array expression, even if it otherwise would be scalar. This has lower precedence than subscripting, so one level of nested expansion is required in order that subscripts apply to array elements. Thus ${${(A)name}\\[1\\]} yields the full value of name when name is scalar.\n\nThis assigns an array parameter with ‘${...\\=...}’, ‘${...:=...}’ or ‘${...::=...}’. If this flag is repeated (as in ‘AA’), assigns an associative array parameter. Assignment is made before sorting or padding; if field splitting is active, the word part is split before assignment. The name part may be a subscripted range for ordinary arrays; when assigning an associative array, the word part _must_ be converted to an array, for example by using ‘${(AA)=name\\=...}’ to activate field splitting.\n\nSurrounding context such as additional nesting or use of the value in a scalar assignment may cause the array to be joined back into a single string again.\n\na\n\nSort in array index order; when combined with ‘O’ sort in reverse array index order. Note that ‘a’ is therefore equivalent to the default but ‘Oa’ is useful for obtaining an array’s elements in reverse order.\n\nb\n\nQuote with backslashes only characters that are special to pattern matching. This is useful when the contents of the variable are to be tested using GLOB\\_SUBST, including the ${~...} switch.\n\nQuoting using one of the q family of flags does not work for this purpose since quotes are not stripped from non-pattern characters by GLOB\\_SUBST. In other words,\n\npattern=${(q)str}\n\\[\\[ $str = ${~pattern} \\]\\]\n\nworks if $str is ‘a\\*b’ but not if it is ‘a b’, whereas\n\npattern=${(b)str}\n\\[\\[ $str = ${~pattern} \\]\\]\n\nis always true for any possible value of $str.\n\nc\n\nWith ${#name}, count the total number of characters in an array, as if the elements were concatenated with spaces between them. This is not a true join of the array, so other expressions used with this flag may have an effect on the elements of the array before it is counted.\n\nC\n\nCapitalize the resulting words. ‘Words’ in this case refers to sequences of alphanumeric characters separated by non-alphanumerics, _not_ to words that result from field splitting.\n\nD\n\nAssume the string or array elements contain directories and attempt to substitute the leading part of these by names. The remainder of the path (the whole of it if the leading part was not substituted) is then quoted so that the whole string can be used as a shell argument. This is the reverse of ‘~’ substitution: see [Filename Expansion](#Filename-Expansion).\n\ne\n\nPerform single word shell expansions, namely _parameter expansion_, _command substitution_ and _arithmetic expansion_, on the result. Such expansions can be nested but too deep recursion may have unpredictable effects.\n\nf\n\nSplit the result of the expansion at newlines. This is a shorthand for ‘ps:\\\\n:’.\n\nF\n\nJoin the words of arrays together using newline as a separator. This is a shorthand for ‘pj:\\\\n:’.\n\ng:opts:\n\nProcess escape sequences like the echo builtin when no options are given (g::). With the o option, octal escapes don’t take a leading zero. With the c option, sequences like ‘^X’ are also processed. With the e option, processes ‘\\\\M-t’ and similar sequences like the print builtin. With both of the o and e options, behaves like the print builtin except that in none of these modes is ‘\\\\c’ interpreted.\n\ni\n\nSort case-insensitively. May be combined with ‘n’ or ‘O’.\n\nk\n\nIf name refers to an associative array, substitute the _keys_ (element names) rather than the values of the elements. Used with subscripts (including ordinary arrays), force indices or keys to be substituted even if the subscript form refers to values. However, this flag may not be combined with subscript ranges. With the KSH\\_ARRAYS option a subscript ‘\\[\\*\\]’ or ‘\\[@\\]’ is needed to operate on the whole array, as usual.\n\nL\n\nConvert all letters in the result to lower case.\n\nn\n\nSort decimal integers numerically; if the first differing characters of two test strings are not digits, sorting is lexical. ‘+’ and ‘\\-’ are not treated specially; they are treated as any other non-digit. Integers with more initial zeroes are sorted before those with fewer or none. Hence the array ‘foo+24 foo1 foo02 foo2 foo3 foo20 foo23’ is sorted into the order shown. May be combined with ‘i’ or ‘O’.\n\n\\-\n\nAs n, but a leading minus sign indicates a negative decimal integer. A leading minus sign not followed by an integer does not trigger numeric sorting. Note that ‘+’ signs are not handled specially (this may change in the future).\n\no\n\nSort the resulting words in ascending order; if this appears on its own the sorting is lexical and case-sensitive (unless the locale renders it case-insensitive). Sorting in ascending order is the default for other forms of sorting, so this is ignored if combined with ‘a’, ‘i’, ‘n’ or ‘\\-’.\n\nO\n\nSort the resulting words in descending order; ‘O’ without ‘a’, ‘i’, ‘n’ or ‘\\-’ sorts in reverse lexical order. May be combined with ‘a’, ‘i’, ‘n’ or ‘\\-’ to reverse the order of sorting.\n\nP\n\nThis forces the value of the parameter name to be interpreted as a further parameter name, whose value will be used where appropriate. Note that flags set with one of the typeset family of commands (in particular case transformations) are not applied to the value of name used in this fashion.\n\nIf used with a nested parameter or command substitution, the result of that will be taken as a parameter name in the same way. For example, if you have ‘foo=bar’ and ‘bar=baz’, the strings ${(P)foo}, ${(P)${foo}}, and ${(P)$(echo bar)} will be expanded to ‘baz’.\n\nLikewise, if the reference is itself nested, the expression with the flag is treated as if it were directly replaced by the parameter name. It is an error if this nested substitution produces an array with more than one word. For example, if ‘name=assoc’ where the parameter assoc is an associative array, then ‘${${(P)name}\\[elt\\]}’ refers to the element of the associative subscripted ‘elt’.\n\nq\n\nQuote characters that are special to the shell in the resulting words with backslashes; unprintable or invalid characters are quoted using the $’\\\\NNN’ form, with separate quotes for each octet.\n\nIf this flag is given twice, the resulting words are quoted in single quotes and if it is given three times, the words are quoted in double quotes; in these forms no special handling of unprintable or invalid characters is attempted. If the flag is given four times, the words are quoted in single quotes preceded by a $. Note that in all three of these forms quoting is done unconditionally, even if this does not change the way the resulting string would be interpreted by the shell.\n\nIf a q- is given (only a single q may appear), a minimal form of single quoting is used that only quotes the string if needed to protect special characters. Typically this form gives the most readable output.\n\nIf a q+ is given, an extended form of minimal quoting is used that causes unprintable characters to be rendered using $’...’. This quoting is similar to that used by the output of values by the typeset family of commands.\n\nQ\n\nRemove one level of quotes from the resulting words.\n\nt\n\nUse a string describing the type of the parameter where the value of the parameter would usually appear. This string consists of keywords separated by hyphens (‘\\-’). The first keyword in the string describes the main type, it can be one of ‘scalar’, ‘array’, ‘integer’, ‘float’ or ‘association’. The other keywords describe the type in more detail:\n\nlocal\n\nfor local parameters\n\nleft\n\nfor left justified parameters\n\nright\\_blanks\n\nfor right justified parameters with leading blanks\n\nright\\_zeros\n\nfor right justified parameters with leading zeros\n\nlower\n\nfor parameters whose value is converted to all lower case when it is expanded\n\nupper\n\nfor parameters whose value is converted to all upper case when it is expanded\n\nreadonly\n\nfor readonly parameters\n\ntag\n\nfor tagged parameters\n\ntied\n\nfor parameters tied to another parameter in the manner of PATH (colon-separated list) and path (array), whether these are special parameters or user-defined with ‘typeset -T’\n\nexport\n\nfor exported parameters\n\nunique\n\nfor arrays which keep only the first occurrence of duplicated values\n\nhide\n\nfor parameters with the ‘hide’ flag\n\nhideval\n\nfor parameters with the ‘hideval’ flag\n\nspecial\n\nfor special parameters defined by the shell\n\nu\n\nExpand only the first occurrence of each unique word.\n\nU\n\nConvert all letters in the result to upper case.\n\nv\n\nUsed with k, substitute (as two consecutive words) both the key and the value of each associative array element. Used with subscripts, force values to be substituted even if the subscript form refers to indices or keys.\n\nV\n\nMake any special characters in the resulting words visible.\n\nw\n\nWith ${#name}, count words in arrays or strings; the s flag may be used to set a word delimiter.\n\nW\n\nSimilar to w with the difference that empty words between repeated delimiters are also counted.\n\nX\n\nWith this flag, parsing errors occurring with the Q, e and # flags or the pattern matching forms such as ‘${name#pattern}’ are reported. Without the flag, errors are silently ignored.\n\nz\n\nSplit the result of the expansion into words using shell parsing to find the words, i.e. taking into account any quoting in the value. Comments are not treated specially but as ordinary strings, similar to interactive shells with the INTERACTIVE\\_COMMENTS option unset (however, see the Z flag below for related options)\n\nNote that this is done very late, even later than the ‘(s)’ flag. So to access single words in the result use nested expansions as in ‘${${(z)foo}\\[2\\]}’. Likewise, to remove the quotes in the resulting words use ‘${(Q)${(z)foo}}’.\n\n0\n\nSplit the result of the expansion on null bytes. This is a shorthand for ‘ps:\\\\0:’.\n\nThe following flags (except p) are followed by one or more arguments as shown. Any character, or the matching pairs ‘(...)’, ‘{...}’, ‘\\[...\\]’, or ‘<...\\>’, may be used in place of a colon as delimiters, but note that when a flag takes more than one argument, a matched pair of delimiters must surround each argument.\n\np\n\nRecognize the same escape sequences as the print builtin in string arguments to any of the flags described below that follow this argument.\n\nAlternatively, with this option string arguments may be in the form $var in which case the value of the variable is substituted. Note this form is strict; the string argument does not undergo general parameter expansion.\n\nFor example,\n\nsep=:\nval=a:b:c\nprint ${(ps.$sep.)val}\n\nsplits the variable on a :.\n\n~\n\nStrings inserted into the expansion by any of the flags below are to be treated as patterns. This applies to the string arguments of flags that follow ~ within the same set of parentheses. Compare with ~ outside parentheses, which forces the entire substituted string to be treated as a pattern. Hence, for example,\n\n\\[\\[ \"?\" = ${(~j.|.)array} \\]\\]\n\ntreats ‘|’ as a pattern and succeeds if and only if $array contains the string ‘?’ as an element. The ~ may be repeated to toggle the behaviour; its effect only lasts to the end of the parenthesised group.\n\nj:string:\n\nJoin the words of arrays together using string as a separator. Note that this occurs before field splitting by the s:string: flag or the SH\\_WORD\\_SPLIT option.\n\nl:expr::string1::string2:\n\nPad the resulting words on the left. Each word will be truncated if required and placed in a field expr characters wide.\n\nThe arguments :string1: and :string2: are optional; neither, the first, or both may be given. Note that the same pairs of delimiters must be used for each of the three arguments. The space to the left will be filled with string1 (concatenated as often as needed) or spaces if string1 is not given. If both string1 and string2 are given, string2 is inserted once directly to the left of each word, truncated if necessary, before string1 is used to produce any remaining padding.\n\nIf either of string1 or string2 is present but empty, i.e. there are two delimiters together at that point, the first character of $IFS is used instead.\n\nIf the MULTIBYTE option is in effect, the flag m may also be given, in which case widths will be used for the calculation of padding; otherwise individual multibyte characters are treated as occupying one unit of width.\n\nIf the MULTIBYTE option is not in effect, each byte in the string is treated as occupying one unit of width.\n\nControl characters are always assumed to be one unit wide; this allows the mechanism to be used for generating repetitions of control characters.\n\nm\n\nOnly useful together with one of the flags l or r or with the # length operator when the MULTIBYTE option is in effect. Use the character width reported by the system in calculating how much of the string it occupies or the overall length of the string. Most printable characters have a width of one unit, however certain Asian character sets and certain special effects use wider characters; combining characters have zero width. Non-printable characters are arbitrarily counted as zero width; how they would actually be displayed will vary.\n\nIf the m is repeated, the character either counts zero (if it has zero width), else one. For printable character strings this has the effect of counting the number of glyphs (visibly separate characters), except for the case where combining characters themselves have non-zero width (true in certain alphabets).\n\nr:expr::string1::string2:\n\nAs l, but pad the words on the right and insert string2 immediately to the right of the string to be padded.\n\nLeft and right padding may be used together. In this case the strategy is to apply left padding to the first half width of each of the resulting words, and right padding to the second half. If the string to be padded has odd width the extra padding is applied on the left.\n\ns:string:\n\nForce field splitting at the separator string. Note that a string of two or more characters means that all of them must match in sequence; this differs from the treatment of two or more characters in the IFS parameter. See also the \\= flag and the SH\\_WORD\\_SPLIT option. An empty string may also be given in which case every character will be a separate element.\n\nFor historical reasons, the usual behaviour that empty array elements are retained inside double quotes is disabled for arrays generated by splitting; hence the following:\n\nline=\"one::three\"\nprint -l \"${(s.:.)line}\"\n\nproduces two lines of output for one and three and elides the empty field. To override this behaviour, supply the ‘(@)’ flag as well, i.e. \"${(@s.:.)line}\".\n\nZ:opts:\n\nAs z but takes a combination of option letters between a following pair of delimiter characters. With no options the effect is identical to z. The following options are available:\n\n(Z+c+)\n\ncauses comments to be parsed as a string and retained; any field in the resulting array beginning with an unquoted comment character is a comment.\n\n(Z+C+)\n\ncauses comments to be parsed and removed. The rule for comments is standard: anything between a word starting with the third character of $HISTCHARS, default #, up to the next newline is a comment.\n\n(Z+n+)\n\ncauses unquoted newlines to be treated as ordinary whitespace, else they are treated as if they are shell code delimiters and converted to semicolons.\n\nOptions are combined within the same set of delimiters, e.g. (Z+Cn+).\n\n\\_:flags:\n\nThe underscore (\\_) flag is reserved for future use. As of this revision of zsh, there are no valid flags; anything following an underscore, other than an empty pair of delimiters, is treated as an error, and the flag itself has no effect.\n\nThe following flags are meaningful with the ${...#...} or ${...%...} forms. The S, I, and \\* flags may also be used with the ${.../...} forms.\n\nS\n\nWith # or ##, search for the match that starts closest to the start of the string (a ‘substring match’). Of all matches at a particular position, # selects the shortest and ## the longest:\n\n% str=\"aXbXc\"\n% echo ${(S)str#X\\*}\nabXc\n% echo ${(S)str##X\\*}\na\n% \n\nWith % or %%, search for the match that starts closest to the end of the string:\n\n% str=\"aXbXc\"\n% echo ${(S)str%X\\*}\naXbc\n% echo ${(S)str%%X\\*}\naXb\n% \n\n(Note that % and %% don’t search for the match that ends closest to the end of the string, as one might expect.)\n\nWith substitution via ${.../...} or ${...//...}, specifies non-greedy matching, i.e. that the shortest instead of the longest match should be replaced:\n\n% str=\"abab\"\n% echo ${str/\\*b/\\_}\n\\_\n% echo ${(S)str/\\*b/\\_}\n\\_ab\n% \n\nI:expr:\n\nSearch the exprth match (where expr evaluates to a number). This only applies when searching for substrings, either with the S flag, or with ${.../...} (only the exprth match is substituted) or ${...//...} (all matches from the exprth on are substituted). The default is to take the first match.\n\nThe exprth match is counted such that there is either one or zero matches from each starting position in the string, although for global substitution matches overlapping previous replacements are ignored. With the ${...%...} and ${...%%...} forms, the starting position for the match moves backwards from the end as the index increases, while with the other forms it moves forward from the start.\n\nHence with the string\n\nwhich switch is the right switch for Ipswich?\n\nsubstitutions of the form ${(SI:N:)string#w\\*ch} as N increases from 1 will match and remove ‘which’, ‘witch’, ‘witch’ and ‘wich’; the form using ‘##’ will match and remove ‘which switch is the right switch for Ipswich’, ‘witch is the right switch for Ipswich’, ‘witch for Ipswich’ and ‘wich’. The form using ‘%’ will remove the same matches as for ‘#’, but in reverse order, and the form using ‘%%’ will remove the same matches as for ‘##’ in reverse order.\n\n\\*\n\nEnable EXTENDED\\_GLOB for substitution via ${.../...} or ${...//...}. Note that ‘\\*\\*’ does not disable extendedglob.\n\nB\n\nInclude the index of the beginning of the match in the result.\n\nE\n\nInclude the index one character past the end of the match in the result (note this is inconsistent with other uses of parameter index).\n\nM\n\nInclude the matched portion in the result.\n\nN\n\nInclude the length of the match in the result.\n\nR\n\nInclude the unmatched portion in the result (the _R_est).\n\n* * *\n\n### 14.3.2 Rules\n\nHere is a summary of the rules for substitution; this assumes that braces are present around the substitution, i.e. ${...}. Some particular examples are given below. Note that the Zsh Development Group accepts _no responsibility_ for any brain damage which may occur during the reading of the following rules.\n\n1. _Nested substitution_\n\nIf multiple nested ${...} forms are present, substitution is performed from the inside outwards. At each level, the substitution takes account of whether the current value is a scalar or an array, whether the whole substitution is in double quotes, and what flags are supplied to the current level of substitution, just as if the nested substitution were the outermost. The flags are not propagated up to enclosing substitutions; the nested substitution will return either a scalar or an array as determined by the flags, possibly adjusted for quoting. All the following steps take place where applicable at all levels of substitution.\n\nNote that, unless the ‘(P)’ flag is present, the flags and any subscripts apply directly to the value of the nested substitution; for example, the expansion ${${foo}} behaves exactly the same as ${foo}. When the ‘(P)’ flag is present in a nested substitution, the other substitution rules are applied to the value _before_ it is interpreted as a name, so ${${(P)foo}} may differ from ${(P)foo}.\n\nAt each nested level of substitution, the substituted words undergo all forms of single-word substitution (i.e. not filename generation), including command substitution, arithmetic expansion and filename expansion (i.e. leading ~ and \\=). Thus, for example, ${${:-=cat}:h} expands to the directory where the cat program resides. (Explanation: the internal substitution has no parameter but a default value \\=cat, which is expanded by filename expansion to a full path; the outer substitution then applies the modifier :h and takes the directory part of the path.)\n\n2. _Internal parameter flags_\n\nAny parameter flags set by one of the typeset family of commands, in particular the \\-L, \\-R, \\-Z, \\-u and \\-l options for padding and capitalization, are applied directly to the parameter value. Note these flags are options to the command, e.g. ‘typeset -Z’; they are not the same as the flags used within parameter substitutions.\n\nAt the outermost level of substitution, the ‘(P)’ flag (rule 4.) ignores these transformations and uses the unmodified value of the parameter as the name to be replaced. This is usually the desired behavior because padding may make the value syntactically illegal as a parameter name, but if capitalization changes are desired, use the ${${(P)foo}} form (rule 25.).\n\n3. _Parameter subscripting_\n\nIf the value is a raw parameter reference with a subscript, such as ${var\\[3\\]}, the effect of subscripting is applied directly to the parameter. Subscripts are evaluated left to right; subsequent subscripts apply to the scalar or array value yielded by the previous subscript. Thus if var is an array, ${var\\[1\\]\\[2\\]} is the second character of the first word, but ${var\\[2,4\\]\\[2\\]} is the entire third word (the second word of the range of words two through four of the original array). Any number of subscripts may appear. Flags such as ‘(k)’ and ‘(v)’ which alter the result of subscripting are applied.\n\n4. _Parameter name replacement_\n\nAt the outermost level of nesting only, the ‘(P)’ flag is applied. This treats the value so far as a parameter name (which may include a subscript expression) and replaces that with the corresponding value. This replacement occurs later if the ‘(P)’ flag appears in a nested substitution.\n\nIf the value so far names a parameter that has internal flags (rule 2.), those internal flags are applied to the new value after replacement.\n\n5. _Double-quoted joining_\n\nIf the value after this process is an array, and the substitution appears in double quotes, and neither an ‘(@)’ flag nor a ‘#’ length operator is present at the current level, then words of the value are joined with the first character of the parameter $IFS, by default a space, between each word (single word arrays are not modified). If the ‘(j)’ flag is present, that is used for joining instead of $IFS.\n\n6. _Nested subscripting_\n\nAny remaining subscripts (i.e. of a nested substitution) are evaluated at this point, based on whether the value is an array or a scalar. As with 3., multiple subscripts can appear. Note that ${foo\\[2,4\\]\\[2\\]} is thus equivalent to ${${foo\\[2,4\\]}\\[2\\]} and also to \"${${(@)foo\\[2,4\\]}\\[2\\]}\" (the nested substitution returns an array in both cases), but not to \"${${foo\\[2,4\\]}\\[2\\]}\" (the nested substitution returns a scalar because of the quotes).\n\n7. _Modifiers_\n\nAny modifiers, as specified by a trailing ‘#’, ‘%’, ‘/’ (possibly doubled) or by a set of modifiers of the form ‘:...’ (see [Modifiers](#Modifiers) in [History Expansion](#History-Expansion)), are applied to the words of the value at this level.\n\n8. _Character evaluation_\n\nAny ‘(#)’ flag is applied, evaluating the result so far numerically as a character.\n\n9. _Length_\n\nAny initial ‘#’ modifier, i.e. in the form ${#var}, is used to evaluate the length of the expression so far.\n\n10. _Forced joining_\n\nIf the ‘(j)’ flag is present, or no ‘(j)’ flag is present but the string is to be split as given by rule 11., and joining did not take place at rule 5., any words in the value are joined together using the given string or the first character of $IFS if none. Note that the ‘(F)’ flag implicitly supplies a string for joining in this manner.\n\n11. _Simple word splitting_\n\nIf one of the ‘(s)’ or ‘(f)’ flags are present, or the ‘\\=’ specifier was present (e.g. ${=var}), the word is split on occurrences of the specified string, or (for \\= with neither of the two flags present) any of the characters in $IFS.\n\nIf no ‘(s)’, ‘(f)’ or ‘\\=’ was given, but the word is not quoted and the option SH\\_WORD\\_SPLIT is set, the word is split on occurrences of any of the characters in $IFS. Note this step, too, takes place at all levels of a nested substitution.\n\n12. _Case modification_\n\nAny case modification from one of the flags ‘(L)’, ‘(U)’ or ‘(C)’ is applied.\n\n13. _Escape sequence replacement_\n\nFirst any replacements from the ‘(g)’ flag are performed, then any prompt-style formatting from the ‘(%)’ family of flags is applied.\n\n14. _Quote application_\n\nAny quoting or unquoting using ‘(q)’ and ‘(Q)’ and related flags is applied.\n\n15. _Directory naming_\n\nAny directory name substitution using ‘(D)’ flag is applied.\n\n16. _Visibility enhancement_\n\nAny modifications to make characters visible using the ‘(V)’ flag are applied.\n\n17. _Lexical word splitting_\n\nIf the ’(z)’ flag or one of the forms of the ’(Z)’ flag is present, the word is split as if it were a shell command line, so that quotation marks and other metacharacters are used to decide what constitutes a word. Note this form of splitting is entirely distinct from that described by rule 11.: it does not use $IFS, and does not cause forced joining.\n\n18. _Uniqueness_\n\nIf the result is an array and the ‘(u)’ flag was present, duplicate elements are removed from the array.\n\n19. _Ordering_\n\nIf the result is still an array and one of the ‘(o)’ or ‘(O)’ flags was present, the array is reordered.\n\n20. RC\\_EXPAND\\_PARAM\n\nAt this point the decision is made whether any resulting array elements are to be combined element by element with surrounding text, as given by either the RC\\_EXPAND\\_PARAM option or the ‘^’ flag.\n\n21. _Re-evaluation_\n\nAny ‘(e)’ flag is applied to the value, forcing it to be re-examined for new parameter substitutions, but also for command and arithmetic substitutions.\n\n22. _Padding_\n\nAny padding of the value by the ‘(l.fill.)’ or ‘(r.fill.)’ flags is applied.\n\n23. _Semantic joining_\n\nIn contexts where expansion semantics requires a single word to result, all words are rejoined with the first character of IFS between. So in ‘${(P)${(f)lines}}’ the value of ${lines} is split at newlines, but then must be joined again before the ‘(P)’ flag can be applied.\n\nIf a single word is not required, this rule is skipped.\n\n24. _Empty argument removal_\n\nIf the substitution does not appear in double quotes, any resulting zero-length argument, whether from a scalar or an element of an array, is elided from the list of arguments inserted into the command line.\n\nStrictly speaking, the removal happens later as the same happens with other forms of substitution; the point to note here is simply that it occurs after any of the above parameter operations.\n\n25. _Nested parameter name replacement_\n\nIf the ‘(P)’ flag is present and rule 4. has not applied, the value so far is treated as a parameter name (which may include a subscript expression) and replaced with the corresponding value, with internal flags (rule 2.) applied to the new value.\n\n* * *\n\n### 14.3.3 Examples\n\nThe flag f is useful to split a double-quoted substitution line by line. For example, ${(f)\"$(<file)\"} substitutes the contents of file divided so that each line is an element of the resulting array. Compare this with the effect of $(<file) alone, which divides the file up by words, or the same inside double quotes, which makes the entire content of the file a single string.\n\nThe following illustrates the rules for nested parameter expansions. Suppose that $foo contains the array (bar baz):\n\n\"${(@)${foo}\\[1\\]}\"\n\nThis produces the result b. First, the inner substitution \"${foo}\", which has no array (@) flag, produces a single word result \"bar baz\". The outer substitution \"${(@)...\\[1\\]}\" detects that this is a scalar, so that (despite the ‘(@)’ flag) the subscript picks the first character.\n\n\"${${(@)foo}\\[1\\]}\"\n\nThis produces the result ‘bar’. In this case, the inner substitution \"${(@)foo}\" produces the array ‘(bar baz)’. The outer substitution \"${...\\[1\\]}\" detects that this is an array and picks the first word. This is similar to the simple case \"${foo\\[1\\]}\".\n\nAs an example of the rules for word splitting and joining, suppose $foo contains the array ‘(ax1 bx1)’. Then\n\n${(s/x/)foo}\n\nproduces the words ‘a’, ‘1 b’ and ‘1’.\n\n${(j/x/s/x/)foo}\n\nproduces ‘a’, ‘1’, ‘b’ and ‘1’.\n\n${(s/x/)foo%%1\\*}\n\nproduces ‘a’ and ‘ b’ (note the extra space). As substitution occurs before either joining or splitting, the operation first generates the modified array (ax bx), which is joined to give \"ax bx\", and then split to give ‘a’, ‘ b’ and ‘’. The final empty string will then be elided, as it is not in double quotes.\n\n* * *\n\n## 14.4 Command Substitution\n\nA command enclosed in parentheses preceded by a dollar sign, like ‘$(...)’, or quoted with grave accents, like ‘‘...‘’, is replaced with its standard output, with any trailing newlines deleted. If the substitution is not enclosed in double quotes, the output is broken into words using the IFS parameter.\n\nThe substitution ‘$(cat foo)’ may be replaced by the faster ‘$(<foo)’. In this case foo undergoes single word shell expansions (_parameter expansion_, _command substitution_ and _arithmetic expansion_), but not filename generation.\n\nIf the option GLOB\\_SUBST is set, the result of any unquoted command substitution, including the special form just mentioned, is eligible for filename generation.\n\n* * *\n\n## 14.5 Arithmetic Expansion\n\nA string of the form ‘$\\[exp\\]’ or ‘$((exp))’ is substituted with the value of the arithmetic expression exp. exp is subjected to _parameter expansion_, _command substitution_ and _arithmetic expansion_ before it is evaluated. See [Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation).\n\n* * *\n\n## 14.6 Brace Expansion\n\nA string of the form ‘foo{xx,yy,zz}bar’ is expanded to the individual words ‘fooxxbar’, ‘fooyybar’ and ‘foozzbar’. Left-to-right order is preserved. This construct may be nested. Commas may be quoted in order to include them literally in a word.\n\nAn expression of the form ‘{n1..n2}’, where n1 and n2 are integers, is expanded to every number between n1 and n2 inclusive. If either number begins with a zero, all the resulting numbers will be padded with leading zeroes to that minimum width, but for negative numbers the \\- character is also included in the width. If the numbers are in decreasing order the resulting sequence will also be in decreasing order.\n\nAn expression of the form ‘{n1..n2..n3}’, where n1, n2, and n3 are integers, is expanded as above, but only every n3th number starting from n1 is output. If n3 is negative the numbers are output in reverse order, this is slightly different from simply swapping n1 and n2 in the case that the step n3 doesn’t evenly divide the range. Zero padding can be specified in any of the three numbers, specifying it in the third can be useful to pad for example ‘{-99..100..01}’ which is not possible to specify by putting a 0 on either of the first two numbers (i.e. pad to two characters).\n\nAn expression of the form ‘{c1..c2}’, where c1 and c2 are single characters (which may be multibyte characters), is expanded to every character in the range from c1 to c2 in whatever character sequence is used internally. For characters with code points below 128 this is US ASCII (this is the only case most users will need). If any intervening character is not printable, appropriate quotation is used to render it printable. If the character sequence is reversed, the output is in reverse order, e.g. ‘{d..a}’ is substituted as ‘d c b a’.\n\nIf a brace expression matches none of the above forms, it is left unchanged, unless the option BRACE\\_CCL (an abbreviation for ‘brace character class’) is set. In that case, it is expanded to a list of the individual characters between the braces sorted into the order of the characters in the ASCII character set (multibyte characters are not currently handled). The syntax is similar to a \\[...\\] expression in filename generation: ‘\\-’ is treated specially to denote a range of characters, but ‘^’ or ‘!’ as the first character is treated normally. For example, ‘{abcdef0-9}’ expands to 16 words 0 1 2 3 4 5 6 7 8 9 a b c d e f.\n\nNote that brace expansion is not part of filename generation (globbing); an expression such as \\*/{foo,bar} is split into two separate words \\*/foo and \\*/bar before filename generation takes place. In particular, note that this is liable to produce a ‘no match’ error if _either_ of the two expressions does not match; this is to be contrasted with \\*/(foo|bar), which is treated as a single pattern but otherwise has similar effects.\n\nTo combine brace expansion with array expansion, see the ${^spec} form described in [Parameter Expansion](#Parameter-Expansion) above.\n\n* * *\n\n## 14.7 Filename Expansion\n\nEach word is checked to see if it begins with an unquoted ‘~’. If it does, then the word up to a ‘/’, or the end of the word if there is no ‘/’, is checked to see if it can be substituted in one of the ways described here. If so, then the ‘~’ and the checked portion are replaced with the appropriate substitute value.\n\nA ‘~’ by itself is replaced by the value of $HOME. A ‘~’ followed by a ‘+’ or a ‘\\-’ is replaced by current or previous working directory, respectively.\n\nA ‘~’ followed by a number is replaced by the directory at that position in the directory stack. ‘~0’ is equivalent to ‘~+’, and ‘~1’ is the top of the stack. ‘~+’ followed by a number is replaced by the directory at that position in the directory stack. ‘~+0’ is equivalent to ‘~+’, and ‘~+1’ is the top of the stack. ‘~-’ followed by a number is replaced by the directory that many positions from the bottom of the stack. ‘~-0’ is the bottom of the stack. The PUSHD\\_MINUS option exchanges the effects of ‘~+’ and ‘~-’ where they are followed by a number.\n\n* * *\n\n### 14.7.1 Dynamic named directories\n\nIf the function zsh\\_directory\\_name exists, or the shell variable zsh\\_directory\\_name\\_functions exists and contains an array of function names, then the functions are used to implement dynamic directory naming. The functions are tried in order until one returns status zero, so it is important that functions test whether they can handle the case in question and return an appropriate status.\n\nA ‘~’ followed by a string namstr in unquoted square brackets is treated specially as a dynamic directory name. Note that the first unquoted closing square bracket always terminates namstr. The shell function is passed two arguments: the string n (for name) and namstr. It should either set the array reply to a single element which is the directory corresponding to the name and return status zero (executing an assignment as the last statement is usually sufficient), or it should return status non-zero. In the former case the element of reply is used as the directory; in the latter case the substitution is deemed to have failed. If all functions fail and the option NOMATCH is set, an error results.\n\nThe functions defined as above are also used to see if a directory can be turned into a name, for example when printing the directory stack or when expanding %~ in prompts. In this case each function is passed two arguments: the string d (for directory) and the candidate for dynamic naming. The function should either return non-zero status, if the directory cannot be named by the function, or it should set the array reply to consist of two elements: the first is the dynamic name for the directory (as would appear within ‘~\\[...\\]’), and the second is the prefix length of the directory to be replaced. For example, if the trial directory is /home/myname/src/zsh and the dynamic name for /home/myname/src (which has 16 characters) is s, then the function sets\n\nThe directory name so returned is compared with possible static names for parts of the directory path, as described below; it is used if the prefix length matched (16 in the example) is longer than that matched by any static name.\n\nIt is not a requirement that a function implements both n and d calls; for example, it might be appropriate for certain dynamic forms of expansion not to be contracted to names. In that case any call with the first argument d should cause a non-zero status to be returned.\n\nThe completion system calls ‘zsh\\_directory\\_name c’ followed by equivalent calls to elements of the array zsh\\_directory\\_name\\_functions, if it exists, in order to complete dynamic names for directories. The code for this should be as for any other completion function as described in [Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System).\n\nAs a working example, here is a function that expands any dynamic names beginning with the string p: to directories below /home/pws/perforce. In this simple case a static name for the directory would be just as effective.\n\nzsh\\_directory\\_name() {\n  emulate -L zsh\n  setopt extendedglob\n  local -a match mbegin mend\n  if \\[\\[ $1 = d \\]\\]; then\n    # turn the directory into a name\n    if \\[\\[ $2 = (#b)(/home/pws/perforce/)(\\[^/\\]##)\\* \\]\\]; then\n      typeset -ga reply\n      reply=(p:$match\\[2\\] $(( ${#match\\[1\\]} + ${#match\\[2\\]} )) )\n    else\n      return 1\n    fi\n  elif \\[\\[ $1 = n \\]\\]; then\n    # turn the name into a directory\n    \\[\\[ $2 != (#b)p:(?\\*) \\]\\] && return 1\n    typeset -ga reply\n    reply=(/home/pws/perforce/$match\\[1\\])\n  elif \\[\\[ $1 = c \\]\\]; then\n    # complete names\n    local expl\n    local -a dirs\n    dirs=(/home/pws/perforce/\\*(/:t))\n    dirs=(p:${^dirs})\n    \\_wanted dynamic-dirs expl 'dynamic directory' compadd -S\\\\\\] -a dirs\n    return\n  else\n    return 1\n  fi\n  return 0\n}\n\n* * *\n\n### 14.7.2 Static named directories\n\nA ‘~’ followed by anything not already covered consisting of any number of alphanumeric characters or underscore (‘\\_’), hyphen (‘\\-’), or dot (‘.’) is looked up as a named directory, and replaced by the value of that named directory if found. Named directories are typically home directories for users on the system. They may also be defined if the text after the ‘~’ is the name of a string shell parameter whose value begins with a ‘/’. Note that trailing slashes will be removed from the path to the directory (though the original parameter is not modified).\n\nIt is also possible to define directory names using the \\-d option to the hash builtin.\n\nWhen the shell prints a path (e.g. when expanding %~ in prompts or when printing the directory stack), the path is checked to see if it has a named directory as its prefix. If so, then the prefix portion is replaced with a ‘~’ followed by the name of the directory. The shorter of the two ways of referring to the directory is used, i.e. either the directory name or the full path; the name is used if they are the same length. The parameters $PWD and $OLDPWD are never abbreviated in this fashion.\n\n* * *\n\n### 14.7.3 ‘=’ expansion\n\nIf a word begins with an unquoted ‘\\=’ and the EQUALS option is set, the remainder of the word is taken as the name of a command. If a command exists by that name, the word is replaced by the full pathname of the command.\n\n* * *\n\n### 14.7.4 Notes\n\nFilename expansion is performed on the right hand side of a parameter assignment, including those appearing after commands of the typeset family. In this case, the right hand side will be treated as a colon-separated list in the manner of the PATH parameter, so that a ‘~’ or an ‘\\=’ following a ‘:’ is eligible for expansion. All such behaviour can be disabled by quoting the ‘~’, the ‘\\=’, or the whole expression (but not simply the colon); the EQUALS option is also respected.\n\nIf the option MAGIC\\_EQUAL\\_SUBST is set, any unquoted shell argument in the form ‘identifier\\=expression’ becomes eligible for file expansion as described in the previous paragraph. Quoting the first ‘\\=’ also inhibits this.\n\n* * *\n\n## 14.8 Filename Generation\n\nIf a word contains an unquoted instance of one of the characters ‘\\*’, ‘(’, ‘|’, ‘<’, ‘\\[’, or ‘?’, it is regarded as a pattern for filename generation, unless the GLOB option is unset. If the EXTENDED\\_GLOB option is set, the ‘^’ and ‘#’ characters also denote a pattern; otherwise they are not treated specially by the shell.\n\nThe word is replaced with a list of sorted filenames that match the pattern. If no matching pattern is found, the shell gives an error message, unless the NULL\\_GLOB option is set, in which case the word is deleted; or unless the NOMATCH option is unset, in which case the word is left unchanged.\n\nIn filename generation, the character ‘/’ must be matched explicitly; also, a ‘.’ must be matched explicitly at the beginning of a pattern or after a ‘/’, unless the GLOB\\_DOTS option is set. No filename generation pattern matches the files ‘.’ or ‘..’. In other instances of pattern matching, the ‘/’ and ‘.’ are not treated specially.\n\n* * *\n\n### 14.8.1 Glob Operators\n\n\\*\n\nMatches any string, including the null string.\n\n?\n\nMatches any character.\n\n\\[...\\]\n\nMatches any of the enclosed characters. Ranges of characters can be specified by separating two characters by a ‘\\-’. A ‘\\-’ or ‘\\]’ may be matched by including it as the first character in the list. There are also several named classes of characters, in the form ‘\\[:name:\\]’ with the following meanings. The first set use the macros provided by the operating system to test for the given character combinations, including any modifications due to local language settings, see ctype(3):\n\n\\[:alnum:\\]\n\nThe character is alphanumeric\n\n\\[:alpha:\\]\n\nThe character is alphabetic\n\n\\[:ascii:\\]\n\nThe character is 7-bit, i.e. is a single-byte character without the top bit set.\n\n\\[:blank:\\]\n\nThe character is a blank character\n\n\\[:cntrl:\\]\n\nThe character is a control character\n\n\\[:digit:\\]\n\nThe character is a decimal digit\n\n\\[:graph:\\]\n\nThe character is a printable character other than whitespace\n\n\\[:lower:\\]\n\nThe character is a lowercase letter\n\n\\[:print:\\]\n\nThe character is printable\n\n\\[:punct:\\]\n\nThe character is printable but neither alphanumeric nor whitespace\n\n\\[:space:\\]\n\nThe character is whitespace\n\n\\[:upper:\\]\n\nThe character is an uppercase letter\n\n\\[:xdigit:\\]\n\nThe character is a hexadecimal digit\n\nAnother set of named classes is handled internally by the shell and is not sensitive to the locale:\n\n\\[:IDENT:\\]\n\nThe character is allowed to form part of a shell identifier, such as a parameter name; this test respects the POSIX\\_IDENTIFIERS option\n\n\\[:IFS:\\]\n\nThe character is used as an input field separator, i.e. is contained in the IFS parameter\n\n\\[:IFSSPACE:\\]\n\nThe character is an IFS white space character; see the documentation for IFS in [Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell).\n\n\\[:INCOMPLETE:\\]\n\nMatches a byte that starts an incomplete multibyte character. Note that there may be a sequence of more than one bytes that taken together form the prefix of a multibyte character. To test for a potentially incomplete byte sequence, use the pattern ‘\\[\\[:INCOMPLETE:\\]\\]\\*’. This will never match a sequence starting with a valid multibyte character.\n\n\\[:INVALID:\\]\n\nMatches a byte that does not start a valid multibyte character. Note this may be a continuation byte of an incomplete multibyte character as any part of a multibyte string consisting of invalid and incomplete multibyte characters is treated as single bytes.\n\n\\[:WORD:\\]\n\nThe character is treated as part of a word; this test is sensitive to the value of the WORDCHARS parameter\n\nNote that the square brackets are additional to those enclosing the whole set of characters, so to test for a single alphanumeric character you need ‘\\[\\[:alnum:\\]\\]’. Named character sets can be used alongside other types, e.g. ‘\\[\\[:alpha:\\]0-9\\]’.\n\n\\[^...\\]\n\n\\[!...\\]\n\nLike \\[...\\], except that it matches any character which is not in the given set.\n\n<\\[x\\]\\-\\[y\\]\\>\n\nMatches any number in the range x to y, inclusive. Either of the numbers may be omitted to make the range open-ended; hence ‘<->’ matches any number. To match individual digits, the \\[...\\] form is more efficient.\n\nBe careful when using other wildcards adjacent to patterns of this form; for example, <0-9>\\* will actually match any number whatsoever at the start of the string, since the ‘<0-9>’ will match the first digit, and the ‘\\*’ will match any others. This is a trap for the unwary, but is in fact an inevitable consequence of the rule that the longest possible match always succeeds. Expressions such as ‘<0-9>\\[^\\[:digit:\\]\\]\\*’ can be used instead.\n\n(...)\n\nMatches the enclosed pattern. This is used for grouping. If the KSH\\_GLOB option is set, then a ‘@’, ‘\\*’, ‘+’, ‘?’ or ‘!’ immediately preceding the ‘(’ is treated specially, as detailed below. The option SH\\_GLOB prevents bare parentheses from being used in this way, though the KSH\\_GLOB option is still available.\n\nNote that grouping cannot extend over multiple directories: it is an error to have a ‘/’ within a group (this only applies for patterns used in filename generation). There is one exception: a group of the form (pat/)# appearing as a complete path segment can match a sequence of directories. For example, foo/(a\\*/)#bar matches foo/bar, foo/any/bar, foo/any/anyother/bar, and so on.\n\nx|y\n\nMatches either x or y. This operator has lower precedence than any other. The ‘|’ character must be within parentheses, to avoid interpretation as a pipeline. The alternatives are tried in order from left to right.\n\n^x\n\n(Requires EXTENDED\\_GLOB to be set.) Matches anything except the pattern x. This has a higher precedence than ‘/’, so ‘^foo/bar’ will search directories in ‘.’ except ‘./foo’ for a file named ‘bar’.\n\nx~y\n\n(Requires EXTENDED\\_GLOB to be set.) Match anything that matches the pattern x but does not match y. This has lower precedence than any operator except ‘|’, so ‘\\*/\\*~foo/bar’ will search for all files in all directories in ‘.’ and then exclude ‘foo/bar’ if there was such a match. Multiple patterns can be excluded by ‘foo~bar~baz’. In the exclusion pattern (y), ‘/’ and ‘.’ are not treated specially the way they usually are in globbing.\n\nx#\n\n(Requires EXTENDED\\_GLOB to be set.) Matches zero or more occurrences of the pattern x. This operator has high precedence; ‘12#’ is equivalent to ‘1(2#)’, rather than ‘(12)#’. It is an error for an unquoted ‘#’ to follow something which cannot be repeated; this includes an empty string, a pattern already followed by ‘##’, or parentheses when part of a KSH\\_GLOB pattern (for example, ‘!(foo)#’ is invalid and must be replaced by ‘\\*(!(foo))’).\n\nx##\n\n(Requires EXTENDED\\_GLOB to be set.) Matches one or more occurrences of the pattern x. This operator has high precedence; ‘12##’ is equivalent to ‘1(2##)’, rather than ‘(12)##’. No more than two active ‘#’ characters may appear together. (Note the potential clash with glob qualifiers in the form ‘1(2##)’ which should therefore be avoided.)\n\n* * *\n\n### 14.8.2 ksh-like Glob Operators\n\nIf the KSH\\_GLOB option is set, the effects of parentheses can be modified by a preceding ‘@’, ‘\\*’, ‘+’, ‘?’ or ‘!’. This character need not be unquoted to have special effects, but the ‘(’ must be.\n\n@(...)\n\nMatch the pattern in the parentheses. (Like ‘(...)’.)\n\n\\*(...)\n\nMatch any number of occurrences. (Like ‘(...)#’, except that recursive directory searching is not supported.)\n\n+(...)\n\nMatch at least one occurrence. (Like ‘(...)##’, except that recursive directory searching is not supported.)\n\n?(...)\n\nMatch zero or one occurrence. (Like ‘(|...)’.)\n\n!(...)\n\nMatch anything but the expression in parentheses. (Like ‘(^(...))’.)\n\n* * *\n\n### 14.8.3 Precedence\n\nThe precedence of the operators given above is (highest) ‘^’, ‘/’, ‘~’, ‘|’ (lowest); the remaining operators are simply treated from left to right as part of a string, with ‘#’ and ‘##’ applying to the shortest possible preceding unit (i.e. a character, ‘?’, ‘\\[...\\]’, ‘<...\\>’, or a parenthesised expression). As mentioned above, a ‘/’ used as a directory separator may not appear inside parentheses, while a ‘|’ must do so; in patterns used in other contexts than filename generation (for example, in case statements and tests within ‘\\[\\[...\\]\\]’), a ‘/’ is not special; and ‘/’ is also not special after a ‘~’ appearing outside parentheses in a filename pattern.\n\n* * *\n\n### 14.8.4 Globbing Flags\n\nThere are various flags which affect any text to their right up to the end of the enclosing group or to the end of the pattern; they require the EXTENDED\\_GLOB option. All take the form (#X) where X may have one of the following forms:\n\ni\n\nCase insensitive: upper or lower case characters in the pattern match upper or lower case characters.\n\nl\n\nLower case characters in the pattern match upper or lower case characters; upper case characters in the pattern still only match upper case characters.\n\nI\n\nCase sensitive: locally negates the effect of i or l from that point on.\n\nb\n\nActivate backreferences for parenthesised groups in the pattern; this does not work in filename generation. When a pattern with a set of active parentheses is matched, the strings matched by the groups are stored in the array $match, the indices of the beginning of the matched parentheses in the array $mbegin, and the indices of the end in the array $mend, with the first element of each array corresponding to the first parenthesised group, and so on. These arrays are not otherwise special to the shell. The indices use the same convention as does parameter substitution, so that elements of $mend and $mbegin may be used in subscripts; the KSH\\_ARRAYS option is respected. Sets of globbing flags are not considered parenthesised groups; only the first nine active parentheses can be referenced.\n\nFor example,\n\nfoo=\"a\\_string\\_with\\_a\\_message\"\nif \\[\\[ $foo = (a|an)\\_(#b)(\\*) \\]\\]; then\n  print ${foo\\[$mbegin\\[1\\],$mend\\[1\\]\\]}\nfi\n\nprints ‘string\\_with\\_a\\_message’. Note that the first set of parentheses is before the (#b) and does not create a backreference.\n\nBackreferences work with all forms of pattern matching other than filename generation, but note that when performing matches on an entire array, such as ${array#pattern}, or a global substitution, such as ${param//pat/repl}, only the data for the last match remains available. In the case of global replacements this may still be useful. See the example for the m flag below.\n\nThe numbering of backreferences strictly follows the order of the opening parentheses from left to right in the pattern string, although sets of parentheses may be nested. There are special rules for parentheses followed by ‘#’ or ‘##’. Only the last match of the parenthesis is remembered: for example, in ‘\\[\\[ abab = (#b)(\\[ab\\])# \\]\\]’, only the final ‘b’ is stored in match\\[1\\]. Thus extra parentheses may be necessary to match the complete segment: for example, use ‘X((ab|cd)#)Y’ to match a whole string of either ‘ab’ or ‘cd’ between ‘X’ and ‘Y’, using the value of $match\\[1\\] rather than $match\\[2\\].\n\nIf the match fails none of the parameters is altered, so in some cases it may be necessary to initialise them beforehand. If some of the backreferences fail to match — which happens if they are in an alternate branch which fails to match, or if they are followed by # and matched zero times — then the matched string is set to the empty string, and the start and end indices are set to -1.\n\nPattern matching with backreferences is slightly slower than without.\n\nB\n\nDeactivate backreferences, negating the effect of the b flag from that point on.\n\ncN,M\n\nThe flag (#cN,M) can be used anywhere that the # or ## operators can be used except in the expressions ‘(\\*/)#’ and ‘(\\*/)##’ in filename generation, where ‘/’ has special meaning; it cannot be combined with other globbing flags and a bad pattern error occurs if it is misplaced. It is equivalent to the form {N,M} in regular expressions. The previous character or group is required to match between N and M times, inclusive. The form (#cN) requires exactly N matches; (#c,M) is equivalent to specifying N as 0; (#cN,) specifies that there is no maximum limit on the number of matches.\n\nm\n\nSet references to the match data for the entire string matched; this is similar to backreferencing and does not work in filename generation. The flag must be in effect at the end of the pattern, i.e. not local to a group. The parameters $MATCH, $MBEGIN and $MEND will be set to the string matched and to the indices of the beginning and end of the string, respectively. This is most useful in parameter substitutions, as otherwise the string matched is obvious.\n\nFor example,\n\narr=(veldt jynx grimps waqf zho buck)\nprint ${arr//(#m)\\[aeiou\\]/${(U)MATCH}}\n\nforces all the matches (i.e. all vowels) into uppercase, printing ‘vEldt jynx grImps wAqf zhO bUck’.\n\nUnlike backreferences, there is no speed penalty for using match references, other than the extra substitutions required for the replacement strings in cases such as the example shown.\n\nM\n\nDeactivate the m flag, hence no references to match data will be created.\n\nanum\n\nApproximate matching: num errors are allowed in the string matched by the pattern. The rules for this are described in the next subsection.\n\ns, e\n\nUnlike the other flags, these have only a local effect, and each must appear on its own: ‘(#s)’ and ‘(#e)’ are the only valid forms. The ‘(#s)’ flag succeeds only at the start of the test string, and the ‘(#e)’ flag succeeds only at the end of the test string; they correspond to ‘^’ and ‘$’ in standard regular expressions. They are useful for matching path segments in patterns other than those in filename generation (where path segments are in any case treated separately). For example, ‘\\*((#s)|/)test((#e)|/)\\*’ matches a path segment ‘test’ in any of the following strings: test, test/at/start, at/end/test, in/test/middle.\n\nAnother use is in parameter substitution; for example ‘${array/(#s)A\\*Z(#e)}’ will remove only elements of an array which match the complete pattern ‘A\\*Z’. There are other ways of performing many operations of this type, however the combination of the substitution operations ‘/’ and ‘//’ with the ‘(#s)’ and ‘(#e)’ flags provides a single simple and memorable method.\n\nNote that assertions of the form ‘(^(#s))’ also work, i.e. match anywhere except at the start of the string, although this actually means ‘anything except a zero-length portion at the start of the string’; you need to use ‘(\"\"~(#s))’ to match a zero-length portion of the string not at the start.\n\nq\n\nA ‘q’ and everything up to the closing parenthesis of the globbing flags are ignored by the pattern matching code. This is intended to support the use of glob qualifiers, see below. The result is that the pattern ‘(#b)(\\*).c(#q.)’ can be used both for globbing and for matching against a string. In the former case, the ‘(#q.)’ will be treated as a glob qualifier and the ‘(#b)’ will not be useful, while in the latter case the ‘(#b)’ is useful for backreferences and the ‘(#q.)’ will be ignored. Note that colon modifiers in the glob qualifiers are also not applied in ordinary pattern matching.\n\nu\n\nRespect the current locale in determining the presence of multibyte characters in a pattern, provided the shell was compiled with MULTIBYTE\\_SUPPORT. This overrides the MULTIBYTE option; the default behaviour is taken from the option. Compare U. (Mnemonic: typically multibyte characters are from Unicode in the UTF-8 encoding, although any extension of ASCII supported by the system library may be used.)\n\nU\n\nAll characters are considered to be a single byte long. The opposite of u. This overrides the MULTIBYTE option.\n\nFor example, the test string fooxx can be matched by the pattern (#i)FOOXX, but not by (#l)FOOXX, (#i)FOO(#I)XX or ((#i)FOOX)X. The string (#ia2)readme specifies case-insensitive matching of readme with up to two errors.\n\nWhen using the ksh syntax for grouping both KSH\\_GLOB and EXTENDED\\_GLOB must be set and the left parenthesis should be preceded by @. Note also that the flags do not affect letters inside \\[...\\] groups, in other words (#i)\\[a-z\\] still matches only lowercase letters. Finally, note that when examining whole paths case-insensitively every directory must be searched for all files which match, so that a pattern of the form (#i)/foo/bar/... is potentially slow.\n\n* * *\n\n### 14.8.5 Approximate Matching\n\nWhen matching approximately, the shell keeps a count of the errors found, which cannot exceed the number specified in the (#anum) flags. Four types of error are recognised:\n\n1.\n\nDifferent characters, as in fooxbar and fooybar.\n\n2.\n\nTransposition of characters, as in banana and abnana.\n\n3.\n\nA character missing in the target string, as with the pattern road and target string rod.\n\n4.\n\nAn extra character appearing in the target string, as with stove and strove.\n\nThus, the pattern (#a3)abcd matches dcba, with the errors occurring by using the first rule twice and the second once, grouping the string as \\[d\\]\\[cb\\]\\[a\\] and \\[a\\]\\[bc\\]\\[d\\].\n\nNon-literal parts of the pattern must match exactly, including characters in character ranges: hence (#a1)??? matches strings of length four, by applying rule 4 to an empty part of the pattern, but not strings of length two, since all the ? must match. Other characters which must match exactly are initial dots in filenames (unless the GLOB\\_DOTS option is set), and all slashes in filenames, so that a/bc is two errors from ab/c (the slash cannot be transposed with another character). Similarly, errors are counted separately for non-contiguous strings in the pattern, so that (ab|cd)ef is two errors from aebf.\n\nWhen using exclusion via the ~ operator, approximate matching is treated entirely separately for the excluded part and must be activated separately. Thus, (#a1)README~READ\\_ME matches READ.ME but not READ\\_ME, as the trailing READ\\_ME is matched without approximation. However, (#a1)README~(#a1)READ\\_ME does not match any pattern of the form READ?ME as all such forms are now excluded.\n\nApart from exclusions, there is only one overall error count; however, the maximum errors allowed may be altered locally, and this can be delimited by grouping. For example, (#a1)cat((#a0)dog)fox allows one error in total, which may not occur in the dog section, and the pattern (#a1)cat(#a0)dog(#a1)fox is equivalent. Note that the point at which an error is first found is the crucial one for establishing whether to use approximation; for example, (#a1)abc(#a0)xyz will not match abcdxyz, because the error occurs at the ‘x’, where approximation is turned off.\n\nEntire path segments may be matched approximately, so that ‘(#a1)/foo/d/is/available/at/the/bar’ allows one error in any path segment. This is much less efficient than without the (#a1), however, since every directory in the path must be scanned for a possible approximate match. It is best to place the (#a1) after any path segments which are known to be correct.\n\n* * *\n\n### 14.8.6 Recursive Globbing\n\nA pathname component of the form ‘(foo/)#’ matches a path consisting of zero or more directories matching the pattern foo.\n\nAs a shorthand, ‘\\*\\*/’ is equivalent to ‘(\\*/)#’; note that this therefore matches files in the current directory as well as subdirectories. Thus:\n\nor\n\ndoes a recursive directory search for files named ‘bar’ (potentially including the file ‘bar’ in the current directory). This form does not follow symbolic links; the alternative form ‘\\*\\*\\*/’ does, but is otherwise identical. Neither of these can be combined with other forms of globbing within the same path segment; in that case, the ‘\\*’ operators revert to their usual effect.\n\nEven shorter forms are available when the option GLOB\\_STAR\\_SHORT is set. In that case if no / immediately follows a \\*\\* or \\*\\*\\* they are treated as if both a / plus a further \\* are present. Hence:\n\nsetopt GLOBSTARSHORT\nls -ld -- \\*\\*.c\n\nis equivalent to\n\n* * *\n\n### 14.8.7 Glob Qualifiers\n\nPatterns used for filename generation may end in a list of qualifiers enclosed in parentheses. The qualifiers specify which filenames that otherwise match the given pattern will be inserted in the argument list.\n\nIf the option BARE\\_GLOB\\_QUAL is set, then a trailing set of parentheses containing no ‘|’ or ‘(’ characters (or ‘~’ if it is special) is taken as a set of glob qualifiers. A glob subexpression that would normally be taken as glob qualifiers, for example ‘(^x)’, can be forced to be treated as part of the glob pattern by doubling the parentheses, in this case producing ‘((^x))’.\n\nIf the option EXTENDED\\_GLOB is set, a different syntax for glob qualifiers is available, namely ‘(#qx)’ where x is any of the same glob qualifiers used in the other format. The qualifiers must still appear at the end of the pattern. However, with this syntax multiple glob qualifiers may be chained together. They are treated as a logical AND of the individual sets of flags. Also, as the syntax is unambiguous, the expression will be treated as glob qualifiers just as long any parentheses contained within it are balanced; appearance of ‘|’, ‘(’ or ‘~’ does not negate the effect. Note that qualifiers will be recognised in this form even if a bare glob qualifier exists at the end of the pattern, for example ‘\\*(#q\\*)(.)’ will recognise executable regular files if both options are set; however, mixed syntax should probably be avoided for the sake of clarity. Note that within conditions using the ‘\\[\\[’ form the presence of a parenthesised expression (#q...) at the end of a string indicates that globbing should be performed; the expression may include glob qualifiers, but it is also valid if it is simply (#q). This does not apply to the right hand side of pattern match operators as the syntax already has special significance.\n\nA qualifier may be any one of the following:\n\n/\n\ndirectories\n\nF\n\n‘full’ (i.e. non-empty) directories. Note that the opposite sense (^F) expands to empty directories and all non-directories. Use (/^F) for empty directories.\n\n.\n\nplain files\n\n@\n\nsymbolic links\n\n\\=\n\nsockets\n\np\n\nnamed pipes (FIFOs)\n\n\\*\n\nexecutable plain files (0100 or 0010 or 0001)\n\n%\n\ndevice files (character or block special)\n\n%b\n\nblock special files\n\n%c\n\ncharacter special files\n\nr\n\nowner-readable files (0400)\n\nw\n\nowner-writable files (0200)\n\nx\n\nowner-executable files (0100)\n\nA\n\ngroup-readable files (0040)\n\nI\n\ngroup-writable files (0020)\n\nE\n\ngroup-executable files (0010)\n\nR\n\nworld-readable files (0004)\n\nW\n\nworld-writable files (0002)\n\nX\n\nworld-executable files (0001)\n\ns\n\nsetuid files (04000)\n\nS\n\nsetgid files (02000)\n\nt\n\nfiles with the sticky bit (01000)\n\nfspec\n\nfiles with access rights matching spec. This spec may be a octal number optionally preceded by a ‘\\=’, a ‘+’, or a ‘\\-’. If none of these characters is given, the behavior is the same as for ‘\\=’. The octal number describes the mode bits to be expected, if combined with a ‘\\=’, the value given must match the file-modes exactly, with a ‘+’, at least the bits in the given number must be set in the file-modes, and with a ‘\\-’, the bits in the number must not be set. Giving a ‘?’ instead of a octal digit anywhere in the number ensures that the corresponding bits in the file-modes are not checked, this is only useful in combination with ‘\\=’.\n\nIf the qualifier ‘f’ is followed by any other character anything up to the next matching character (‘\\[’, ‘{’, and ‘<’ match ‘\\]’, ‘}’, and ‘\\>’ respectively, any other character matches itself) is taken as a list of comma-separated sub-specs. Each sub-spec may be either an octal number as described above or a list of any of the characters ‘u’, ‘g’, ‘o’, and ‘a’, followed by a ‘\\=’, a ‘+’, or a ‘\\-’, followed by a list of any of the characters ‘r’, ‘w’, ‘x’, ‘s’, and ‘t’, or an octal digit. The first list of characters specify which access rights are to be checked. If a ‘u’ is given, those for the owner of the file are used, if a ‘g’ is given, those of the group are checked, a ‘o’ means to test those of other users, and the ‘a’ says to test all three groups. The ‘\\=’, ‘+’, and ‘\\-’ again says how the modes are to be checked and have the same meaning as described for the first form above. The second list of characters finally says which access rights are to be expected: ‘r’ for read access, ‘w’ for write access, ‘x’ for the right to execute the file (or to search a directory), ‘s’ for the setuid and setgid bits, and ‘t’ for the sticky bit.\n\nThus, ‘\\*(f70?)’ gives the files for which the owner has read, write, and execute permission, and for which other group members have no rights, independent of the permissions for other users. The pattern ‘\\*(f-100)’ gives all files for which the owner does not have execute permission, and ‘\\*(f:gu+w,o-rx:)’ gives the files for which the owner and the other members of the group have at least write permission, and for which other users don’t have read or execute permission.\n\nestring\n\n+cmd\n\nThe string will be executed as shell code. The filename will be included in the list if and only if the code returns a zero status (usually the status of the last command).\n\nIn the first form, the first character after the ‘e’ will be used as a separator and anything up to the next matching separator will be taken as the string; ‘\\[’, ‘{’, and ‘<’ match ‘\\]’, ‘}’, and ‘\\>’, respectively, while any other character matches itself. Note that expansions must be quoted in the string to prevent them from being expanded before globbing is done. string is then executed as shell code. The string globqual is appended to the array zsh\\_eval\\_context the duration of execution.\n\nDuring the execution of string the filename currently being tested is available in the parameter REPLY; the parameter may be altered to a string to be inserted into the list instead of the original filename. In addition, the parameter reply may be set to an array or a string, which overrides the value of REPLY. If set to an array, the latter is inserted into the command line word by word.\n\nFor example, suppose a directory contains a single file ‘lonely’. Then the expression ‘\\*(e:’reply=(${REPLY}{1,2})’:)’ will cause the words ‘lonely1’ and ‘lonely2’ to be inserted into the command line. Note the quoting of string.\n\nThe form +cmd has the same effect, but no delimiters appear around cmd. Instead, cmd is taken as the longest sequence of characters following the + that are alphanumeric or underscore. Typically cmd will be the name of a shell function that contains the appropriate test. For example,\n\nnt() { \\[\\[ $REPLY -nt $NTREF \\]\\] }\nNTREF=reffile\nls -ld -- \\*(+nt)\n\nlists all files in the directory that have been modified more recently than reffile.\n\nddev\n\nfiles on the device dev\n\nl\\[\\-|+\\]ct\n\nfiles having a link count less than ct (\\-), greater than ct (+), or equal to ct\n\nU\n\nfiles owned by the effective user ID\n\nG\n\nfiles owned by the effective group ID\n\nuid\n\nfiles owned by user ID id if that is a number. Otherwise, id specifies a user name: the character after the ‘u’ will be taken as a separator and the string between it and the next matching separator will be taken as a user name. The starting separators ‘\\[’, ‘{’, and ‘<’ match the final separators ‘\\]’, ‘}’, and ‘\\>’, respectively; any other character matches itself. The selected files are those owned by this user. For example, ‘u:foo:’ or ‘u\\[foo\\]’ selects files owned by user ‘foo’.\n\ngid\n\nlike uid but with group IDs or names\n\na\\[Mwhms\\]\\[\\-|+\\]n\n\nfiles accessed exactly n days ago. Files accessed within the last n days are selected using a negative value for n (\\-n). Files accessed more than n days ago are selected by a positive n value (+n). Optional unit specifiers ‘M’, ‘w’, ‘h’, ‘m’ or ‘s’ (e.g. ‘ah5’) cause the check to be performed with months (of 30 days), weeks, hours, minutes or seconds instead of days, respectively. An explicit ‘d’ for days is also allowed.\n\nAny fractional part of the difference between the access time and the current part in the appropriate units is ignored in the comparison. For instance, ‘echo \\*(ah-5)’ would echo files accessed within the last five hours, while ‘echo \\*(ah+5)’ would echo files accessed at least six hours ago, as times strictly between five and six hours are treated as five hours.\n\nm\\[Mwhms\\]\\[\\-|+\\]n\n\nlike the file access qualifier, except that it uses the file modification time.\n\nc\\[Mwhms\\]\\[\\-|+\\]n\n\nlike the file access qualifier, except that it uses the file inode change time.\n\nL\\[+|\\-\\]n\n\nfiles less than n bytes (\\-), more than n bytes (+), or exactly n bytes in length.\n\nIf this flag is directly followed by a _size specifier_ ‘k’ (‘K’), ‘m’ (‘M’), or ‘p’ (‘P’) (e.g. ‘Lk-50’) the check is performed with kilobytes, megabytes, or blocks (of 512 bytes) instead. (On some systems additional specifiers are available for gigabytes, ‘g’ or ‘G’, and terabytes, ‘t’ or ‘T’.) If a size specifier is used a file is regarded as \"exactly\" the size if the file size rounded up to the next unit is equal to the test size. Hence ‘\\*(Lm1)’ matches files from 1 byte up to 1 Megabyte inclusive. Note also that the set of files \"less than\" the test size only includes files that would not match the equality test; hence ‘\\*(Lm-1)’ only matches files of zero size.\n\n^\n\nnegates all qualifiers following it\n\n\\-\n\ntoggles between making the qualifiers work on symbolic links (the default) and the files they point to, if any; any symbolic link for whose target the ‘stat’ system call fails (whatever the cause of the failure) is treated as a file in its own right\n\nM\n\nsets the MARK\\_DIRS option for the current pattern\n\nT\n\nappends a trailing qualifier mark to the filenames, analogous to the LIST\\_TYPES option, for the current pattern (overrides M)\n\nN\n\nsets the NULL\\_GLOB option for the current pattern\n\nD\n\nsets the GLOB\\_DOTS option for the current pattern\n\nn\n\nsets the NUMERIC\\_GLOB\\_SORT option for the current pattern\n\nYn\n\nenables short-circuit mode: the pattern will expand to at most n filenames. If more than n matches exist, only the first n matches in directory traversal order will be considered.\n\nImplies oN when no oc qualifier is used.\n\noc\n\nspecifies how the names of the files should be sorted. The following values of c sort in the following ways:\n\nn\n\nBy name.\n\nL\n\nBy the size (length) of the files.\n\nl\n\nBy number of links.\n\na\n\nBy time of last access, youngest first.\n\nm\n\nBy time of last modification, youngest first.\n\nc\n\nBy time of last inode change, youngest first.\n\nd\n\nBy directories: files in subdirectories appear before those in the current directory at each level of the search — this is best combined with other criteria, for example ‘odon’ to sort on names for files within the same directory.\n\nN\n\nNo sorting is performed.\n\nestring\n\n+cmd\n\nSort by shell code (see below).\n\nNote that the modifiers ^ and \\- are used, so ‘\\*(^-oL)’ gives a list of all files sorted by file size in descending order, following any symbolic links. Unless oN is used, multiple order specifiers may occur to resolve ties.\n\nThe default sorting is n (by name) unless the Y glob qualifier is used, in which case it is N (unsorted).\n\noe and o+ are special cases; they are each followed by shell code, delimited as for the e glob qualifier and the + glob qualifier respectively (see above). The code is executed for each matched file with the parameter REPLY set to the name of the file on entry and globsort appended to zsh\\_eval\\_context. The code should modify the parameter REPLY in some fashion. On return, the value of the parameter is used instead of the file name as the string on which to sort. Unlike other sort operators, oe and o+ may be repeated, but note that the maximum number of sort operators of any kind that may appear in any glob expression is 12.\n\nOc\n\nlike ‘o’, but sorts in descending order; i.e. ‘\\*(^oc)’ is the same as ‘\\*(Oc)’ and ‘\\*(^Oc)’ is the same as ‘\\*(oc)’; ‘Od’ puts files in the current directory before those in subdirectories at each level of the search.\n\n\\[beg\\[,end\\]\\]\n\nspecifies which of the matched filenames should be included in the returned list. The syntax is the same as for array subscripts. beg and the optional end may be mathematical expressions. As in parameter subscripting they may be negative to make them count from the last match backward. E.g.: ‘\\*(-OL\\[1,3\\])’ gives a list of the names of the three largest files.\n\nPstring\n\nThe string will be prepended to each glob match as a separate word. string is delimited in the same way as arguments to the e glob qualifier described above. The qualifier can be repeated; the words are prepended separately so that the resulting command line contains the words in the same order they were given in the list of glob qualifiers.\n\nA typical use for this is to prepend an option before all occurrences of a file name; for example, the pattern ‘\\*(P:-f:)’ produces the command line arguments ‘\\-f file1 \\-f file2 ...’\n\nIf the modifier ^ is active, then string will be appended instead of prepended. Prepending and appending is done independently so both can be used on the same glob expression; for example by writing ‘\\*(P:foo:^P:bar:^P:baz:)’ which produces the command line arguments ‘foo baz file1 bar ...’\n\nMore than one of these lists can be combined, separated by commas. The whole list matches if at least one of the sublists matches (they are ‘or’ed, the qualifiers in the sublists are ‘and’ed). Some qualifiers, however, affect all matches generated, independent of the sublist in which they are given. These are the qualifiers ‘M’, ‘T’, ‘N’, ‘D’, ‘n’, ‘o’, ‘O’ and the subscripts given in brackets (‘\\[...\\]’).\n\nIf a ‘:’ appears in a qualifier list, the remainder of the expression in parenthesis is interpreted as a modifier (see [Modifiers](#Modifiers) in [History Expansion](#History-Expansion)). Each modifier must be introduced by a separate ‘:’. Note also that the result after modification does not have to be an existing file. The name of any existing file can be followed by a modifier of the form ‘(:...)’ even if no actual filename generation is performed, although note that the presence of the parentheses causes the entire expression to be subjected to any global pattern matching options such as NULL\\_GLOB. Thus:\n\nlists all directories and symbolic links that point to directories, and\n\nlists all broken symbolic links, and\n\nlists all world-writable device files in the current directory, and\n\nlists all files in the current directory that are world-writable or world-executable, and\n\nprint -rC1 /tmp/foo\\*(u0^@:t)\n\noutputs the basename of all root-owned files beginning with the string ‘foo’ in /tmp, ignoring symlinks, and\n\nls -ld -- \\*.\\*~(lex|parse).\\[ch\\](^D^l1)\n\nlists all files having a link count of one whose names contain a dot (but not those starting with a dot, since GLOB\\_DOTS is explicitly switched off) except for lex.c, lex.h, parse.c and parse.h.\n\nprint -rC1 b\\*.pro(#q:s/pro/shmo/)(#q.:s/builtin/shmiltin/)\n\ndemonstrates how colon modifiers and other qualifiers may be chained together. The ordinary qualifier ‘.’ is applied first, then the colon modifiers in order from left to right. So if EXTENDED\\_GLOB is set and the base pattern matches the regular file builtin.pro, the shell will print ‘shmiltin.shmo’.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 424,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Expansion-html-Expansion-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Expansion-html-Expansion-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Expansion-html-Expansion-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Expansion-html-Expansion-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Expansion-html-Expansion-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 123999,
      "readableText": 151653,
      "none": 192105,
      "readableTextIfPossible": 151653,
      "result": 151653,
      "markdown": 114192
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Zsh-Modules",
    "loadedTime": "2025-05-08T06:51:35.604Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Zsh-Modules",
    "title": "zsh: 22 Zsh Modules",
    "description": "zsh: 22 Zsh Modules",
    "author": null,
    "keywords": "zsh: 22 Zsh Modules",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:30 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-48f7f\"",
      "expires": "Thu, 08 May 2025 06:52:30 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70768d9ed36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 22 Zsh Modules\n22.1 Description\nSome optional parts of zsh are in modules, separate from the core of the shell. Each of these modules may be linked in to the shell at build time, or can be dynamically linked while the shell is running if the installation supports this feature. Modules are linked at runtime with the zmodload command, see Shell Builtin Commands. \nThe modules that are bundled with the zsh distribution are: \nzsh/attr \nBuiltins for manipulating extended attributes (xattr). \nzsh/cap \nBuiltins for manipulating POSIX.1e (POSIX.6) capability (privilege) sets. \nzsh/clone \nA builtin that can clone a running shell onto another terminal. \nzsh/compctl \nThe compctl builtin for controlling completion. \nzsh/complete \nThe basic completion code. \nzsh/complist \nCompletion listing extensions. \nzsh/computil \nA module with utility builtins needed for the shell function based completion system. \nzsh/curses \ncurses windowing commands \nzsh/datetime \nSome date/time commands and parameters. \nzsh/db/gdbm \nBuiltins for managing associative array parameters tied to GDBM databases. \nzsh/deltochar \nA ZLE function duplicating EMACS’ zap-to-char. \nzsh/example \nAn example of how to write a module. \nzsh/files \nSome basic file manipulation commands as builtins. \nzsh/langinfo \nInterface to locale information. \nzsh/mapfile \nAccess to external files via a special associative array. \nzsh/mathfunc \nStandard scientific functions for use in mathematical evaluations. \nzsh/nearcolor \nMap colours to the nearest colour in the available palette. \nzsh/newuser \nArrange for files for new users to be installed. \nzsh/parameter \nAccess to internal hash tables via special associative arrays. \nzsh/pcre \nInterface to the PCRE library. \nzsh/param/private \nBuiltins for managing private-scoped parameters in function context. \nzsh/regex \nInterface to the POSIX regex library. \nzsh/sched \nA builtin that provides a timed execution facility within the shell. \nzsh/net/socket \nManipulation of Unix domain sockets \nzsh/stat \nA builtin command interface to the stat system call. \nzsh/system \nA builtin interface to various low-level system features. \nzsh/net/tcp \nManipulation of TCP sockets \nzsh/termcap \nInterface to the termcap database. \nzsh/terminfo \nInterface to the terminfo database. \nzsh/watch \nReporting of login and logout events. \nzsh/zftp \nA builtin FTP client. \nzsh/zle \nThe Zsh Line Editor, including the bindkey and vared builtins. \nzsh/zleparameter \nAccess to internals of the Zsh Line Editor via parameters. \nzsh/zprof \nA module allowing profiling for shell functions. \nzsh/zpty \nA builtin for starting a command in a pseudo-terminal. \nzsh/zselect \nBlock and return when file descriptors are ready. \nzsh/zutil \nSome utility builtins, e.g. the one for supporting configuration via styles. \n22.2 The zsh/attr Module\nThe zsh/attr module is used for manipulating extended attributes. The -h option causes all commands to operate on symbolic links instead of their targets. The builtins in this module are: \nzgetattr [ -h ] filename attribute [ parameter ] \nGet the extended attribute attribute from the specified filename. If the optional argument parameter is given, the attribute is set on that parameter instead of being printed to stdout. \nzsetattr [ -h ] filename attribute value \nSet the extended attribute attribute on the specified filename to value. \nzdelattr [ -h ] filename attribute \nRemove the extended attribute attribute from the specified filename. \nzlistattr [ -h ] filename [ parameter ] \nList the extended attributes currently set on the specified filename. If the optional argument parameter is given, the list of attributes is set on that parameter instead of being printed to stdout. \nzgetattr and zlistattr allocate memory dynamically. If the attribute or list of attributes grows between the allocation and the call to get them, they return 2. On all other errors, 1 is returned. This allows the calling function to check for this case and retry. \n22.3 The zsh/cap Module\nThe zsh/cap module is used for manipulating POSIX.1e (POSIX.6) capability sets. If the operating system does not support this interface, the builtins defined by this module will do nothing. The builtins in this module are: \ncap [ capabilities ] \nChange the shell’s process capability sets to the specified capabilities, otherwise display the shell’s current capabilities. \ngetcap filename ... \nThis is a built-in implementation of the POSIX standard utility. It displays the capability sets on each specified filename. \nsetcap capabilities filename ... \nThis is a built-in implementation of the POSIX standard utility. It sets the capability sets on each specified filename to the specified capabilities. \n22.4 The zsh/clone Module\nThe zsh/clone module makes available one builtin command: \nclone tty \nCreates a forked instance of the current shell, attached to the specified tty. In the new shell, the PID, PPID and TTY special parameters are changed appropriately. $! is set to zero in the new shell, and to the new shell’s PID in the original shell. \nThe return status of the builtin is zero in both shells if successful, and non-zero on error. \nThe target of clone should be an unused terminal, such as an unused virtual console or a virtual terminal created by \nxterm -e sh -c 'trap : INT QUIT TSTP; tty;\n        while :; do sleep 100000000; done'\nSome words of explanation are warranted about this long xterm command line: when doing clone on a pseudo-terminal, some other session (\"session\" meant as a unix session group, or SID) is already owning the terminal. Hence the cloned zsh cannot acquire the pseudo-terminal as a controlling tty. That means two things: \nthe job control signals will go to the sh-started-by-xterm process group (that’s why we disable INT QUIT and TSTP with trap; otherwise the while loop could get suspended or killed) \nthe cloned shell will have job control disabled, and the job control keys (control-C, control-\\ and control-Z) will not work. \nThis does not apply when cloning to an unused vc. \nCloning to a used (and unprepared) terminal will result in two processes reading simultaneously from the same terminal, with input bytes going randomly to either process. \nclone is mostly useful as a shell built-in replacement for openvt. \n22.5 The zsh/compctl Module\nThe zsh/compctl module makes available two builtin commands. compctl, is the old, deprecated way to control completions for ZLE. See Completion Using compctl. The other builtin command, compcall can be used in user-defined completion widgets, see Completion Widgets. \n22.6 The zsh/complete Module\nThe zsh/complete module makes available several builtin commands which can be used in user-defined completion widgets, see Completion Widgets. \n22.7 The zsh/complist Module\nThe zsh/complist module offers three extensions to completion listings: the ability to highlight matches in such a list, the ability to scroll through long lists and a different style of menu completion. \n22.7.1 Colored completion listings\nWhenever one of the parameters ZLS_COLORS or ZLS_COLOURS is set and the zsh/complist module is loaded or linked into the shell, completion lists will be colored. Note, however, that complist will not automatically be loaded if it is not linked in: on systems with dynamic loading, ‘zmodload zsh/complist’ is required. \nThe parameters ZLS_COLORS and ZLS_COLOURS describe how matches are highlighted. To turn on highlighting an empty value suffices, in which case all the default values given below will be used. The format of the value of these parameters is the same as used by the GNU version of the ls command: a colon-separated list of specifications of the form ‘name=value’. The name may be one of the following strings, most of which specify file types for which the value will be used. The strings and their default values are: \nno 0 \nfor normal text (i.e. when displaying something other than a matched file) \nfi 0 \nfor regular files \ndi 32 \nfor directories \nln 36 \nfor symbolic links. If this has the special value target, symbolic links are dereferenced and the target file used to determine the display format. \npi 31 \nfor named pipes (FIFOs) \nso 33 \nfor sockets \nbd 44;37 \nfor block devices \ncd 44;37 \nfor character devices \nor none \nfor a symlink to nonexistent file (default is the value defined for ln) \nmi none \nfor a non-existent file (default is the value defined for fi); this code is currently not used \nsu 37;41 \nfor files with setuid bit set \nsg 30;43 \nfor files with setgid bit set \ntw 30;42 \nfor world writable directories with sticky bit set \now 34;43 \nfor world writable directories without sticky bit set \nsa none \nfor files with an associated suffix alias; this is only tested after specific suffixes, as described below \nst 37;44 \nfor directories with sticky bit set but not world writable \nex 35 \nfor executable files \nlc \\e[ \nfor the left code (see below) \nrc m \nfor the right code \ntc 0 \nfor the character indicating the file type printed after filenames if the LIST_TYPES option is set \nsp 0 \nfor the spaces printed after matches to align the next column \nec none \nfor the end code \nApart from these strings, the name may also be an asterisk (‘*’) followed by any string. The value given for such a string will be used for all files whose name ends with the string. The name may also be an equals sign (‘=’) followed by a pattern; the EXTENDED_GLOB option will be turned on for evaluation of the pattern. The value given for this pattern will be used for all matches (not just filenames) whose display string are matched by the pattern. Definitions for the form with the leading equal sign take precedence over the values defined for file types, which in turn take precedence over the form with the leading asterisk (file extensions). \nThe leading-equals form also allows different parts of the displayed strings to be colored differently. For this, the pattern has to use the ‘(#b)’ globbing flag and pairs of parentheses surrounding the parts of the strings that are to be colored differently. In this case the value may consist of more than one color code separated by equal signs. The first code will be used for all parts for which no explicit code is specified and the following codes will be used for the parts matched by the sub-patterns in parentheses. For example, the specification ‘=(#b)(?)*(?)=0=3=7’ will be used for all matches which are at least two characters long and will use the code ‘3’ for the first character, ‘7’ for the last character and ‘0’ for the rest. \nAll three forms of name may be preceded by a pattern in parentheses. If this is given, the value will be used only for matches in groups whose names are matched by the pattern given in the parentheses. For example, ‘(g*)m*=43’ highlights all matches beginning with ‘m’ in groups whose names begin with ‘g’ using the color code ‘43’. In case of the ‘lc’, ‘rc’, and ‘ec’ codes, the group pattern is ignored. \nNote also that all patterns are tried in the order in which they appear in the parameter value until the first one matches which is then used. Patterns may be matched against completions, descriptions (possibly with spaces appended for padding), or lines consisting of a completion followed by a description. For consistent coloring it may be necessary to use more than one pattern or a pattern with backreferences. \nWhen printing a match, the code prints the value of lc, the value for the file-type or the last matching specification with a ‘*’, the value of rc, the string to display for the match itself, and then the value of ec if that is defined or the values of lc, no, and rc if ec is not defined. \nThe default values are ISO 6429 (ANSI) compliant and can be used on vt100 compatible terminals such as xterms. On monochrome terminals the default values will have no visible effect. The colors function from the contribution can be used to get associative arrays containing the codes for ANSI terminals (see Other Functions). For example, after loading colors, one could use ‘$color[red]’ to get the code for foreground color red and ‘$color[bg-green]’ for the code for background color green. \nIf the completion system invoked by compinit is used, these parameters should not be set directly because the system controls them itself. Instead, the list-colors style should be used (see Completion System Configuration). \n22.7.2 Scrolling in completion listings\nTo enable scrolling through a completion list, the LISTPROMPT parameter must be set. Its value will be used as the prompt; if it is the empty string, a default prompt will be used. The value may contain escapes of the form ‘%x’. It supports the escapes ‘%B’, ‘%b’, ‘%S’, ‘%s’, ‘%U’, ‘%u’, ‘%F’, ‘%f’, ‘%K’, ‘%k’ and ‘%{...%}’ used also in shell prompts as well as three pairs of additional sequences: a ‘%l’ or ‘%L’ is replaced by the number of the last line shown and the total number of lines in the form ‘number/total’; a ‘%m’ or ‘%M’ is replaced with the number of the last match shown and the total number of matches; and ‘%p’ or ‘%P’ is replaced with ‘Top’, ‘Bottom’ or the position of the first line shown in percent of the total number of lines, respectively. In each of these cases the form with the uppercase letter will be replaced with a string of fixed width, padded to the right with spaces, while the lowercase form will not be padded. \nIf the parameter LISTPROMPT is set, the completion code will not ask if the list should be shown. Instead it immediately starts displaying the list, stopping after the first screenful, showing the prompt at the bottom, waiting for a keypress after temporarily switching to the listscroll keymap. Some of the zle functions have a special meaning while scrolling lists: \nsend-break \nstops listing discarding the key pressed \naccept-line, down-history, down-line-or-history down-line-or-search, vi-down-line-or-history \nscrolls forward one line \ncomplete-word, menu-complete, expand-or-complete expand-or-complete-prefix, menu-complete-or-expand \nscrolls forward one screenful \naccept-search \nstop listing but take no other action \nEvery other character stops listing and immediately processes the key as usual. Any key that is not bound in the listscroll keymap or that is bound to undefined-key is looked up in the keymap currently selected. \nAs for the ZLS_COLORS and ZLS_COLOURS parameters, LISTPROMPT should not be set directly when using the shell function based completion system. Instead, the list-prompt style should be used. \n22.7.3 Menu selection\nThe zsh/complist module also offers an alternative style of selecting matches from a list, called menu selection, which can be used if the shell is set up to return to the last prompt after showing a completion list (see the ALWAYS_LAST_PROMPT option in Options). \nMenu selection can be invoked directly by the widget menu-select defined by this module. This is a standard ZLE widget that can be bound to a key in the usual way as described in Zsh Line Editor. \nAlternatively, the parameter MENUSELECT can be set to an integer, which gives the minimum number of matches that must be present before menu selection is automatically turned on. This second method requires that menu completion be started, either directly from a widget such as menu-complete, or due to one of the options MENU_COMPLETE or AUTO_MENU being set. If MENUSELECT is set, but is 0, 1 or empty, menu selection will always be started during an ambiguous menu completion. \nWhen using the completion system based on shell functions, the MENUSELECT parameter should not be used (like the ZLS_COLORS and ZLS_COLOURS parameters described above). Instead, the menu style should be used with the select=... keyword. \nAfter menu selection is started, the matches will be listed. If there are more matches than fit on the screen, only the first screenful is shown. The matches to insert into the command line can be selected from this list. In the list one match is highlighted using the value for ma from the ZLS_COLORS or ZLS_COLOURS parameter. The default value for this is ‘7’ which forces the selected match to be highlighted using standout mode on a vt100-compatible terminal. If neither ZLS_COLORS nor ZLS_COLOURS is set, the same terminal control sequence as for the ‘%S’ escape in prompts is used. \nIf there are more matches than fit on the screen and the parameter MENUPROMPT is set, its value will be shown below the matches. It supports the same escape sequences as LISTPROMPT, but the number of the match or line shown will be that of the one where the mark is placed. If its value is the empty string, a default prompt will be used. \nThe MENUSCROLL parameter can be used to specify how the list is scrolled. If the parameter is unset, this is done line by line, if it is set to ‘0’ (zero), the list will scroll half the number of lines of the screen. If the value is positive, it gives the number of lines to scroll and if it is negative, the list will be scrolled the number of lines of the screen minus the (absolute) value. \nAs for the ZLS_COLORS, ZLS_COLOURS and LISTPROMPT parameters, neither MENUPROMPT nor MENUSCROLL should be set directly when using the shell function based completion system. Instead, the select-prompt and select-scroll styles should be used. \nThe completion code sometimes decides not to show all of the matches in the list. These hidden matches are either matches for which the completion function which added them explicitly requested that they not appear in the list (using the -n option of the compadd builtin command) or they are matches which duplicate a string already in the list (because they differ only in things like prefixes or suffixes that are not displayed). In the list used for menu selection, however, even these matches are shown so that it is possible to select them. To highlight such matches the hi and du capabilities in the ZLS_COLORS and ZLS_COLOURS parameters are supported for hidden matches of the first and second kind, respectively. \nSelecting matches is done by moving the mark around using the zle movement functions. When not all matches can be shown on the screen at the same time, the list will scroll up and down when crossing the top or bottom line. The following zle functions have special meaning during menu selection. Note that the following always perform the same task within the menu selection map and cannot be replaced by user defined widgets, nor can the set of functions be extended: \naccept-line, accept-search \naccept the current match and leave menu selection (but do not cause the command line to be accepted) \nsend-break \nleaves menu selection and restores the previous contents of the command line \nredisplay, clear-screen \nexecute their normal function without leaving menu selection \naccept-and-hold, accept-and-menu-complete \naccept the currently inserted match and continue selection allowing to select the next match to insert into the line \naccept-and-infer-next-history \naccepts the current match and then tries completion with menu selection again; in the case of files this allows one to select a directory and immediately attempt to complete files in it; if there are no matches, a message is shown and one can use undo to go back to completion on the previous level, every other key leaves menu selection (including the other zle functions which are otherwise special during menu selection) \nundo \nremoves matches inserted during the menu selection by one of the three functions before \ndown-history, down-line-or-history vi-down-line-or-history, down-line-or-search \nmoves the mark one line down \nup-history, up-line-or-history vi-up-line-or-history, up-line-or-search \nmoves the mark one line up \nforward-char, vi-forward-char \nmoves the mark one column right \nbackward-char, vi-backward-char \nmoves the mark one column left \nforward-word, vi-forward-word vi-forward-word-end, emacs-forward-word \nmoves the mark one screenful down \nbackward-word, vi-backward-word, emacs-backward-word \nmoves the mark one screenful up \nvi-forward-blank-word, vi-forward-blank-word-end \nmoves the mark to the first line of the next group of matches \nvi-backward-blank-word \nmoves the mark to the last line of the previous group of matches \nbeginning-of-history \nmoves the mark to the first line \nend-of-history \nmoves the mark to the last line \nbeginning-of-buffer-or-history, beginning-of-line beginning-of-line-hist, vi-beginning-of-line \nmoves the mark to the leftmost column \nend-of-buffer-or-history, end-of-line end-of-line-hist, vi-end-of-line \nmoves the mark to the rightmost column \ncomplete-word, menu-complete, expand-or-complete expand-or-complete-prefix, menu-expand-or-complete \nmoves the mark to the next match \nreverse-menu-complete \nmoves the mark to the previous match \nvi-insert \nthis toggles between normal and interactive mode; in interactive mode the keys bound to self-insert and self-insert-unmeta insert into the command line as in normal editing mode but without leaving menu selection; after each character completion is tried again and the list changes to contain only the new matches; the completion widgets make the longest unambiguous string be inserted in the command line and undo and backward-delete-char go back to the previous set of matches \nhistory-incremental-search-forward history-incremental-search-backward \nthis starts incremental searches in the list of completions displayed; in this mode, accept-line only leaves incremental search, going back to the normal menu selection mode \nAll movement functions wrap around at the edges; any other zle function not listed leaves menu selection and executes that function. It is possible to make widgets in the above list do the same by using the form of the widget with a ‘.’ in front. For example, the widget ‘.accept-line’ has the effect of leaving menu selection and accepting the entire command line. \nDuring this selection the widget uses the keymap menuselect. Any key that is not defined in this keymap or that is bound to undefined-key is looked up in the keymap currently selected. This is used to ensure that the most important keys used during selection (namely the cursor keys, return, and TAB) have sensible defaults. However, keys in the menuselect keymap can be modified directly using the bindkey builtin command (see The zsh/zle Module). For example, to make the return key leave menu selection without accepting the match currently selected one could call \nbindkey -M menuselect '^M' send-break\nafter loading the zsh/complist module. \n22.8 The zsh/computil Module\nThe zsh/computil module adds several builtin commands that are used by some of the completion functions in the completion system based on shell functions (see Completion System ). Except for compquote these builtin commands are very specialised and thus not very interesting when writing your own completion functions. In summary, these builtin commands are: \ncomparguments \nThis is used by the _arguments function to do the argument and command line parsing. Like compdescribe it has an option -i to do the parsing and initialize some internal state and various options to access the state information to decide what should be completed. \ncompdescribe \nThis is used by the _describe function to build the displays for the matches and to get the strings to add as matches with their options. On the first call one of the options -i or -I should be supplied as the first argument. In the first case, display strings without the descriptions will be generated, in the second case, the string used to separate the matches from their descriptions must be given as the second argument and the descriptions (if any) will be shown. All other arguments are like the definition arguments to _describe itself. \nOnce compdescribe has been called with either the -i or the -I option, it can be repeatedly called with the -g option and the names of four parameters as its arguments. This will step through the different sets of matches and store the value of compstate[list] in the first scalar, the options for compadd in the second array, the matches in the third array, and the strings to be displayed in the completion listing in the fourth array. The arrays may then be directly given to compadd to register the matches with the completion code. \ncompfiles \nUsed by the _path_files function to optimize complex recursive filename generation (globbing). It does three things. With the -p and -P options it builds the glob patterns to use, including the paths already handled and trying to optimize the patterns with respect to the prefix and suffix from the line and the match specification currently used. The -i option does the directory tests for the ignore-parents style and the -r option tests if a component for some of the matches are equal to the string on the line and removes all other matches if that is true. \ncompgroups \nUsed by the _tags function to implement the internals of the group-order style. This only takes its arguments as names of completion groups and creates the groups for it (all six types: sorted and unsorted, both without removing duplicates, with removing all duplicates and with removing consecutive duplicates). \ncompquote [ -p ] names ... \nThere may be reasons to write completion functions that have to add the matches using the -Q option to compadd and perform quoting themselves. Instead of interpreting the first character of the all_quotes key of the compstate special association and using the q flag for parameter expansions, one can use this builtin command. The arguments are the names of scalar or array parameters and the values of these parameters are quoted as needed for the innermost quoting level. If the -p option is given, quoting is done as if there is some prefix before the values of the parameters, so that a leading equal sign will not be quoted. \nThe return status is non-zero in case of an error and zero otherwise. \ncomptags comptry \nThese implement the internals of the tags mechanism. \ncompvalues \nLike comparguments, but for the _values function. \n22.9 The zsh/curses Module\nThe zsh/curses module makes available one builtin command and various parameters. \n22.9.1 Builtin\nzcurses init zcurses end zcurses addwin targetwin nlines ncols begin_y begin_x [ parentwin ] zcurses delwin targetwin zcurses refresh [ targetwin ... ] zcurses touch targetwin ... zcurses move targetwin new_y new_x zcurses clear targetwin [ redraw | eol | bot ] zcurses position targetwin array zcurses char targetwin character zcurses string targetwin string zcurses border targetwin border zcurses attr targetwin [ [+|-]attribute | fg_col/bg_col ] [...] zcurses bg targetwin [ [+|-]attribute | fg_col/bg_col | @char ] [...] zcurses scroll targetwin [ on | off | [+|-]lines ] zcurses input targetwin [ param [ kparam [ mparam ] ] ] zcurses mouse [ delay num | [+|-]motion ] zcurses timeout targetwin intval zcurses querychar targetwin [ param ] zcurses resize height width [ endwin | nosave | endwin_nosave ] \nManipulate curses windows. All uses of this command should be bracketed by ‘zcurses init’ to initialise use of curses, and ‘zcurses end’ to end it; omitting ‘zcurses end’ can cause the terminal to be in an unwanted state. \nThe subcommand addwin creates a window with nlines lines and ncols columns. Its upper left corner will be placed at row begin_y and column begin_x of the screen. targetwin is a string and refers to the name of a window that is not currently assigned. Note in particular the curses convention that vertical values appear before horizontal values. \nIf addwin is given an existing window as the final argument, the new window is created as a subwindow of parentwin. This differs from an ordinary new window in that the memory of the window contents is shared with the parent’s memory. Subwindows must be deleted before their parent. Note that the coordinates of subwindows are relative to the screen, not the parent, as with other windows. \nUse the subcommand delwin to delete a window created with addwin. Note that end does not implicitly delete windows, and that delwin does not erase the screen image of the window. \nThe window corresponding to the full visible screen is called stdscr; it always exists after ‘zcurses init’ and cannot be delete with delwin. \nThe subcommand refresh will refresh window targetwin; this is necessary to make any pending changes (such as characters you have prepared for output with char) visible on the screen. refresh without an argument causes the screen to be cleared and redrawn. If multiple windows are given, the screen is updated once at the end. \nThe subcommand touch marks the targetwins listed as changed. This is necessary before refreshing windows if a window that was in front of another window (which may be stdscr) is deleted. \nThe subcommand move moves the cursor position in targetwin to new coordinates new_y and new_x. Note that the subcommand string (but not the subcommand char) advances the cursor position over the characters added. \nThe subcommand clear erases the contents of targetwin. One (and no more than one) of three options may be specified. With the option redraw, in addition the next refresh of targetwin will cause the screen to be cleared and repainted. With the option eol, targetwin is only cleared to the end of the current cursor line. With the option bot, targetwin is cleared to the end of the window, i.e everything to the right and below the cursor is cleared. \nThe subcommand position writes various positions associated with targetwin into the array named array. These are, in order: \n- \nThe y and x coordinates of the cursor relative to the top left of targetwin \n- \nThe y and x coordinates of the top left of targetwin on the screen \n- \nThe size of targetwin in y and x dimensions. \nOutputting characters and strings are achieved by char and string respectively. \nTo draw a border around window targetwin, use border. Note that the border is not subsequently handled specially: in other words, the border is simply a set of characters output at the edge of the window. Hence it can be overwritten, can scroll off the window, etc. \nThe subcommand attr will set targetwin’s attributes or foreground/background color pair for any successive character output. Each attribute given on the line may be prepended by a + to set or a - to unset that attribute; + is assumed if absent. The attributes supported are blink, bold, dim, reverse, standout, and underline. \nEach fg_col/bg_col attribute (to be read as ‘fg_col on bg_col’) sets the foreground and background color for character output. The color default is sometimes available (in particular if the library is ncurses), specifying the foreground or background color with which the terminal started. The color pair default/default is always available. To use more than the 8 named colors (red, green, etc.) construct the fg_col/bg_col pairs where fg_col and bg_col are decimal integers, e.g 128/200. The maximum color value is 254 if the terminal supports 256 colors. \nbg overrides the color and other attributes of all characters in the window. Its usual use is to set the background initially, but it will overwrite the attributes of any characters at the time when it is called. In addition to the arguments allowed with attr, an argument @char specifies a character to be shown in otherwise blank areas of the window. Owing to limitations of curses this cannot be a multibyte character (use of ASCII characters only is recommended). As the specified set of attributes override the existing background, turning attributes off in the arguments is not useful, though this does not cause an error. \nThe subcommand scroll can be used with on or off to enabled or disable scrolling of a window when the cursor would otherwise move below the window due to typing or output. It can also be used with a positive or negative integer to scroll the window up or down the given number of lines without changing the current cursor position (which therefore appears to move in the opposite direction relative to the window). In the second case, if scrolling is off it is temporarily turned on to allow the window to be scrolled. \nThe subcommand input reads a single character from the window without echoing it back. If param is supplied the character is assigned to the parameter param, else it is assigned to the parameter REPLY. \nIf both param and kparam are supplied, the key is read in ‘keypad’ mode. In this mode special keys such as function keys and arrow keys return the name of the key in the parameter kparam. The key names are the macros defined in the curses.h or ncurses.h with the prefix ‘KEY_’ removed; see also the description of the parameter zcurses_keycodes below. Other keys cause a value to be set in param as before. On a successful return only one of param or kparam contains a non-empty string; the other is set to an empty string. \nIf mparam is also supplied, input attempts to handle mouse input. This is only available with the ncurses library; mouse handling can be detected by checking for the exit status of ‘zcurses mouse’ with no arguments. If a mouse button is clicked (or double- or triple-clicked, or pressed or released with a configurable delay from being clicked) then kparam is set to the string MOUSE, and mparam is set to an array consisting of the following elements: \n- \nAn identifier to discriminate different input devices; this is only rarely useful. \n- \nThe x, y and z coordinates of the mouse click relative to the full screen, as three elements in that order (i.e. the y coordinate is, unusually, after the x coordinate). The z coordinate is only available for a few unusual input devices and is otherwise set to zero. \n- \nAny events that occurred as separate items; usually there will be just one. An event consists of PRESSED, RELEASED, CLICKED, DOUBLE_CLICKED or TRIPLE_CLICKED followed immediately (in the same element) by the number of the button. \n- \nIf the shift key was pressed, the string SHIFT. \n- \nIf the control key was pressed, the string CTRL. \n- \nIf the alt key was pressed, the string ALT. \nNot all mouse events may be passed through to the terminal window; most terminal emulators handle some mouse events themselves. Note that the ncurses manual implies that using input both with and without mouse handling may cause the mouse cursor to appear and disappear. \nThe subcommand mouse can be used to configure the use of the mouse. There is no window argument; mouse options are global. ‘zcurses mouse’ with no arguments returns status 0 if mouse handling is possible, else status 1. Otherwise, the possible arguments (which may be combined on the same command line) are as follows. delay num sets the maximum delay in milliseconds between press and release events to be considered as a click; the value 0 disables click resolution, and the default is one sixth of a second. motion proceeded by an optional ‘+’ (the default) or - turns on or off reporting of mouse motion in addition to clicks, presses and releases, which are always reported. However, it appears reports for mouse motion are not currently implemented. \nThe subcommand timeout specifies a timeout value for input from targetwin. If intval is negative, ‘zcurses input’ waits indefinitely for a character to be typed; this is the default. If intval is zero, ‘zcurses input’ returns immediately; if there is typeahead it is returned, else no input is done and status 1 is returned. If intval is positive, ‘zcurses input’ waits intval milliseconds for input and if there is none at the end of that period returns status 1. \nThe subcommand querychar queries the character at the current cursor position. The return values are stored in the array named param if supplied, else in the array reply. The first value is the character (which may be a multibyte character if the system supports them); the second is the color pair in the usual fg_col/bg_col notation, or 0 if color is not supported. Any attributes other than color that apply to the character, as set with the subcommand attr, appear as additional elements. \nThe subcommand resize resizes stdscr and all windows to given dimensions (windows that stick out from the new dimensions are resized down). The underlying curses extension (resize_term call) can be unavailable. To verify, zeroes can be used for height and width. If the result of the subcommand is 0, resize_term is available (2 otherwise). Tests show that resizing can be normally accomplished by calling zcurses end and zcurses refresh. The resize subcommand is provided for versatility. Multiple system configurations have been checked and zcurses end and zcurses refresh are still needed for correct terminal state after resize. To invoke them with resize, use endwin argument. Using nosave argument will cause new terminal state to not be saved internally by zcurses. This is also provided for versatility and should normally be not needed. \n22.9.2 Parameters\nZCURSES_COLORS \nReadonly integer. The maximum number of colors the terminal supports. This value is initialised by the curses library and is not available until the first time zcurses init is run. \nZCURSES_COLOR_PAIRS \nReadonly integer. The maximum number of color pairs fg_col/bg_col that may be defined in ‘zcurses attr’ commands; note this limit applies to all color pairs that have been used whether or not they are currently active. This value is initialised by the curses library and is not available until the first time zcurses init is run. \nzcurses_attrs \nReadonly array. The attributes supported by zsh/curses; available as soon as the module is loaded. \nzcurses_colors \nReadonly array. The colors supported by zsh/curses; available as soon as the module is loaded. \nzcurses_keycodes \nReadonly array. The values that may be returned in the second parameter supplied to ‘zcurses input’ in the order in which they are defined internally by curses. Not all function keys are listed, only F0; curses reserves space for F0 up to F63. \nzcurses_windows \nReadonly array. The current list of windows, i.e. all windows that have been created with ‘zcurses addwin’ and not removed with ‘zcurses delwin’. \n22.10 The zsh/datetime Module\nThe zsh/datetime module makes available one builtin command: \nstrftime [ -s scalar | -n ] format [ epochtime [ nanoseconds ] ] strftime -r [ -q ] [ -s scalar | -n ] format timestring \nOutput the date in the format specified. With no epochtime, the current system date/time is used; optionally, epochtime may be used to specify the number of seconds since the epoch, and nanoseconds may additionally be used to specify the number of nanoseconds past the second (otherwise that number is assumed to be 0). See strftime(3) for details. The zsh extensions described in Prompt Expansion are also available. \n-n \nSuppress printing a newline after the formatted string. \n-q \nRun quietly; suppress printing of all error messages described below. Errors for invalid epochtime values are always printed. \n-r \nWith the option -r (reverse), use format to parse the input string timestring and output the number of seconds since the epoch at which the time occurred. The parsing is implemented by the system function strptime; see strptime(3). This means that zsh format extensions are not available, but for reverse lookup they are not required. \nIn most implementations of strftime any timezone in the timestring is ignored and the local timezone declared by the TZ environment variable is used; other parameters are set to zero if not present. \nIf timestring does not match format the command returns status 1 and prints an error message. If timestring matches format but not all characters in timestring were used, the conversion succeeds but also prints an error message. \nIf either of the system functions strptime or mktime is not available, status 2 is returned and an error message is printed. \n-s scalar \nAssign the date string (or epoch time in seconds if -r is given) to scalar instead of printing it. \nNote that depending on the system’s declared integral time type, strftime may produce incorrect results for epoch times greater than 2147483647 which corresponds to 2038-01-19 03:14:07 +0000. \nThe zsh/datetime module makes available several parameters; all are readonly: \nEPOCHREALTIME \nA floating point value representing the number of seconds since the epoch. The notional accuracy is to nanoseconds if the clock_gettime call is available and to microseconds otherwise, but in practice the range of double precision floating point and shell scheduling latencies may be significant effects. \nEPOCHSECONDS \nAn integer value representing the number of seconds since the epoch. \nepochtime \nAn array value containing the number of seconds since the epoch in the first element and the remainder of the time since the epoch in nanoseconds in the second element. To ensure the two elements are consistent the array should be copied or otherwise referenced as a single substitution before the values are used. The following idiom may be used: \nfor secs nsecs in $epochtime; do\n  ...\ndone\n22.11 The zsh/db/gdbm Module\nThe zsh/db/gdbm module is used to create \"tied\" associative arrays that interface to database files. If the GDBM interface is not available, the builtins defined by this module will report an error. This module is also intended as a prototype for creating additional database interfaces, so the ztie builtin may move to a more generic module in the future. \nThe builtins in this module are: \nztie -d db/gdbm -f filename [ -r ] arrayname \nOpen the GDBM database identified by filename and, if successful, create the associative array arrayname linked to the file. To create a local tied array, the parameter must first be declared, so commands similar to the following would be executed inside a function scope: \nlocal -A sampledb\nztie -d db/gdbm -f sample.gdbm sampledb\nThe -r option opens the database file for reading only, creating a parameter with the readonly attribute. Without this option, using ‘ztie’ on a file for which the user does not have write permission is an error. If writable, the database is opened synchronously so fields changed in arrayname are immediately written to filename. \nChanges to the file modes filename after it has been opened do not alter the state of arrayname, but ‘typeset -r arrayname’ works as expected. \nzuntie [ -u ] arrayname ... \nClose the GDBM database associated with each arrayname and then unset the parameter. The -u option forces an unset of parameters made readonly with ‘ztie -r’. \nThis happens automatically if the parameter is explicitly unset or its local scope (function) ends. Note that a readonly parameter may not be explicitly unset, so the only way to unset a global parameter created with ‘ztie -r’ is to use ‘zuntie -u’. \nzgdbmpath parametername \nPut path to database file assigned to parametername into REPLY scalar. \nzgdbm_tied \nArray holding names of all tied parameters. \nThe fields of an associative array tied to GDBM are neither cached nor otherwise stored in memory, they are read from or written to the database on each reference. Thus, for example, the values in a readonly array may be changed by a second writer of the same database file. \n22.12 The zsh/deltochar Module\nThe zsh/deltochar module makes available two ZLE functions: \ndelete-to-char \nRead a character from the keyboard, and delete from the cursor position up to and including the next (or, with repeat count n, the nth) instance of that character. Negative repeat counts mean delete backwards. \nzap-to-char \nThis behaves like delete-to-char, except that the final occurrence of the character itself is not deleted. \n22.13 The zsh/example Module\nThe zsh/example module makes available one builtin command: \nexample [ -flags ] [ args ... ] \nDisplays the flags and arguments it is invoked with. \nThe purpose of the module is to serve as an example of how to write a module. \n22.14 The zsh/files Module\nThe zsh/files module makes available some common commands for file manipulation as builtins; these commands are probably not needed for many normal situations but can be useful in emergency recovery situations with constrained resources. The commands do not implement all features now required by relevant standards committees. \nFor all commands, a variant beginning zf_ is also available and loaded automatically. Using the features capability of zmodload will let you load only those names you want. Note that it’s possible to load only the builtins with zsh-specific names using the following command: \nzmodload -m -F zsh/files b:zf_\\*\nThe commands loaded by default are: \nchgrp [ -hRs ] group filename ... \nChanges group of files specified. This is equivalent to chown with a user-spec argument of ‘:group’. \nchmod [ -Rs ] mode filename ... \nChanges mode of files specified. \nThe specified mode must be in octal. \nThe -R option causes chmod to recursively descend into directories, changing the mode of all files in the directory after changing the mode of the directory itself. \nThe -s option is a zsh extension to chmod functionality. It enables paranoid behaviour, intended to avoid security problems involving a chmod being tricked into affecting files other than the ones intended. It will refuse to follow symbolic links, so that (for example) ‘‘chmod 600 /tmp/foo/passwd’’ can’t accidentally chmod /etc/passwd if /tmp/foo happens to be a link to /etc. It will also check where it is after leaving directories, so that a recursive chmod of a deep directory tree can’t end up recursively chmoding /usr as a result of directories being moved up the tree. \nchown [ -hRs ] user-spec filename ... \nChanges ownership and group of files specified. \nThe user-spec can be in four forms: \nuser \nchange owner to user; do not change group \nuser:: \nchange owner to user; do not change group \nuser: \nchange owner to user; change group to user’s primary group \nuser:group \nchange owner to user; change group to group \n:group \ndo not change owner; change group to group \nIn each case, the ‘:’ may instead be a ‘.’. The rule is that if there is a ‘:’ then the separator is ‘:’, otherwise if there is a ‘.’ then the separator is ‘.’, otherwise there is no separator. \nEach of user and group may be either a username (or group name, as appropriate) or a decimal user ID (group ID). Interpretation as a name takes precedence, if there is an all-numeric username (or group name). \nIf the target is a symbolic link, the -h option causes chown to set the ownership of the link instead of its target. \nThe -R option causes chown to recursively descend into directories, changing the ownership of all files in the directory after changing the ownership of the directory itself. \nThe -s option is a zsh extension to chown functionality. It enables paranoid behaviour, intended to avoid security problems involving a chown being tricked into affecting files other than the ones intended. It will refuse to follow symbolic links, so that (for example) ‘‘chown luser /tmp/foo/passwd’’ can’t accidentally chown /etc/passwd if /tmp/foo happens to be a link to /etc. It will also check where it is after leaving directories, so that a recursive chown of a deep directory tree can’t end up recursively chowning /usr as a result of directories being moved up the tree. \nln [ -dfhins ] filename dest ln [ -dfhins ] filename ... dir \nCreates hard (or, with -s, symbolic) links. In the first form, the specified destination is created, as a link to the specified filename. In the second form, each of the filenames is taken in turn, and linked to a pathname in the specified directory that has the same last pathname component. \nNormally, ln will not attempt to create hard links to directories. This check can be overridden using the -d option. Typically only the super-user can actually succeed in creating hard links to directories. This does not apply to symbolic links in any case. \nBy default, existing files cannot be replaced by links. The -i option causes the user to be queried about replacing existing files. The -f option causes existing files to be silently deleted, without querying. -f takes precedence. \nThe -h and -n options are identical and both exist for compatibility; either one indicates that if the target is a symlink then it should not be dereferenced. Typically this is used in combination with -sf so that if an existing link points to a directory then it will be removed, instead of followed. If this option is used with multiple filenames and the target is a symbolic link pointing to a directory then the result is an error. \nmkdir [ -p ] [ -m mode ] dir ... \nCreates directories. With the -p option, non-existing parent directories are first created if necessary, and there will be no complaint if the directory already exists. The -m option can be used to specify (in octal) a set of file permissions for the created directories, otherwise mode 777 modified by the current umask (see umask(2)) is used. \nmv [ -fi ] filename dest mv [ -fi ] filename ... dir \nMoves files. In the first form, the specified filename is moved to the specified destination. In the second form, each of the filenames is taken in turn, and moved to a pathname in the specified directory that has the same last pathname component. \nBy default, the user will be queried before replacing any file that the user cannot write to, but writable files will be silently removed. The -i option causes the user to be queried about replacing any existing files. The -f option causes any existing files to be silently deleted, without querying. -f takes precedence. \nNote that this mv will not move files across devices. Historical versions of mv, when actual renaming is impossible, fall back on copying and removing files; if this behaviour is desired, use cp and rm manually. This may change in a future version. \nrm [ -dfiRrs ] filename ... \nRemoves files and directories specified. \nNormally, rm will not remove directories (except with the -R or -r options). The -d option causes rm to try removing directories with unlink (see unlink(2)), the same method used for files. Typically only the super-user can actually succeed in unlinking directories in this way. -d takes precedence over -R and -r. \nBy default, the user will be queried before removing any file that the user cannot write to, but writable files will be silently removed. The -i option causes the user to be queried about removing any files. The -f option causes files to be silently deleted, without querying, and suppresses all error indications. -f takes precedence. \nThe -R and -r options cause rm to recursively descend into directories, deleting all files in the directory before removing the directory with the rmdir system call (see rmdir(2)). \nThe -s option is a zsh extension to rm functionality. It enables paranoid behaviour, intended to avoid common security problems involving a root-run rm being tricked into removing files other than the ones intended. It will refuse to follow symbolic links, so that (for example) ‘‘rm /tmp/foo/passwd’’ can’t accidentally remove /etc/passwd if /tmp/foo happens to be a link to /etc. It will also check where it is after leaving directories, so that a recursive removal of a deep directory tree can’t end up recursively removing /usr as a result of directories being moved up the tree. \nrmdir dir ... \nRemoves empty directories specified. \nsync \nCalls the system call of the same name (see sync(2)), which flushes dirty buffers to disk. It might return before the I/O has actually been completed. \n22.15 The zsh/langinfo Module\nThe zsh/langinfo module makes available one parameter: \nlanginfo \nAn associative array that maps langinfo elements to their values. \nYour implementation may support a number of the following keys: \nCODESET, D_T_FMT, D_FMT, T_FMT, RADIXCHAR, THOUSEP, YESEXPR, NOEXPR, CRNCYSTR, ABDAY_{1..7}, DAY_{1..7}, ABMON_{1..12}, MON_{1..12}, T_FMT_AMPM, AM_STR, PM_STR, ERA, ERA_D_FMT, ERA_D_T_FMT, ERA_T_FMT, ALT_DIGITS \n22.16 The zsh/mapfile Module\nThe zsh/mapfile module provides one special associative array parameter of the same name. \nmapfile \nThis associative array takes as keys the names of files; the resulting value is the content of the file. The value is treated identically to any other text coming from a parameter. The value may also be assigned to, in which case the file in question is written (whether or not it originally existed); or an element may be unset, which will delete the file in question. For example, ‘vared ’mapfile[myfile]’’ works as expected, editing the file ‘myfile’. \nWhen the array is accessed as a whole, the keys are the names of files in the current directory, and the values are empty (to save a huge overhead in memory). Thus ${(k)mapfile} has the same effect as the glob operator *(D), since files beginning with a dot are not special. Care must be taken with expressions such as rm ${(k)mapfile}, which will delete every file in the current directory without the usual ‘rm *’ test. \nThe parameter mapfile may be made read-only; in that case, files referenced may not be written or deleted. \nA file may conveniently be read into an array as one line per element with the form ‘array=(\"${(f@)mapfile[filename]}\")’. The double quotes and the ‘@’ are necessary to prevent empty lines from being removed. Note that if the file ends with a newline, the shell will split on the final newline, generating an additional empty field; this can be suppressed by using ‘array=(\"${(f@)${mapfile[filename]%$’\\n’}}\")’. \n22.16.1 Limitations\nAlthough reading and writing of the file in question is efficiently handled, zsh’s internal memory management may be arbitrarily baroque; however, mapfile is usually very much more efficient than anything involving a loop. Note in particular that the whole contents of the file will always reside physically in memory when accessed (possibly multiple times, due to standard parameter substitution operations). In particular, this means handling of sufficiently long files (greater than the machine’s swap space, or than the range of the pointer type) will be incorrect. \nNo errors are printed or flagged for non-existent, unreadable, or unwritable files, as the parameter mechanism is too low in the shell execution hierarchy to make this convenient. \nIt is unfortunate that the mechanism for loading modules does not yet allow the user to specify the name of the shell parameter to be given the special behaviour. \n22.17 The zsh/mathfunc Module\nThe zsh/mathfunc module provides standard mathematical functions for use when evaluating mathematical formulae. The syntax agrees with normal C and FORTRAN conventions, for example, \nassigns the sine of 0.3 to the parameter f. \nMost functions take floating point arguments and return a floating point value. However, any necessary conversions from or to integer type will be performed automatically by the shell. Apart from atan with a second argument and the abs, int and float functions, all functions behave as noted in the manual page for the corresponding C function, except that any arguments out of range for the function in question will be detected by the shell and an error reported. \nThe following functions take a single floating point argument: acos, acosh, asin, asinh, atan, atanh, cbrt, ceil, cos, cosh, erf, erfc, exp, expm1, fabs, floor, gamma, j0, j1, lgamma, log, log10, log1p, log2, logb, sin, sinh, sqrt, tan, tanh, y0, y1. The atan function can optionally take a second argument, in which case it behaves like the C function atan2. The ilogb function takes a single floating point argument, but returns an integer. \nThe function signgam takes no arguments, and returns an integer, which is the C variable of the same name, as described in gamma(3). Note that it is therefore only useful immediately after a call to gamma or lgamma. Note also that ‘signgam()’ and ‘signgam’ are distinct expressions. \nThe functions min, max, and sum are defined not in this module but in the zmathfunc autoloadable function, described in Mathematical Functions. \nThe following functions take two floating point arguments: copysign, fmod, hypot, nextafter. \nThe following take an integer first argument and a floating point second argument: jn, yn. \nThe following take a floating point first argument and an integer second argument: ldexp, scalb. \nThe function abs does not convert the type of its single argument; it returns the absolute value of either a floating point number or an integer. The functions float and int convert their arguments into a floating point or integer value (by truncation) respectively. \nNote that the C pow function is available in ordinary math evaluation as the ‘**’ operator and is not provided here. \nThe function rand48 is available if your system’s mathematical library has the function erand48(3). It returns a pseudo-random floating point number between 0 and 1. It takes a single string optional argument. \nIf the argument is not present, the random number seed is initialised by three calls to the rand(3) function — this produces the same random numbers as the next three values of $RANDOM. \nIf the argument is present, it gives the name of a scalar parameter where the current random number seed will be stored. On the first call, the value must contain at least twelve hexadecimal digits (the remainder of the string is ignored), or the seed will be initialised in the same manner as for a call to rand48 with no argument. Subsequent calls to rand48(param) will then maintain the seed in the parameter param as a string of twelve hexadecimal digits, with no base signifier. The random number sequences for different parameters are completely independent, and are also independent from that used by calls to rand48 with no argument. \nFor example, consider \nprint $(( rand48(seed) ))\nprint $(( rand48() ))\nprint $(( rand48(seed) ))\nAssuming $seed does not exist, it will be initialised by the first call. In the second call, the default seed is initialised; note, however, that because of the properties of rand() there is a correlation between the seeds used for the two initialisations, so for more secure uses, you should generate your own 12-byte seed. The third call returns to the same sequence of random numbers used in the first call, unaffected by the intervening rand48(). \n22.18 The zsh/nearcolor Module\nThe zsh/nearcolor module replaces colours specified as hex triplets with the nearest colour in the 88 or 256 colour palettes that are widely used by terminal emulators. By default, 24-bit true colour escape codes are generated when colours are specified using hex triplets. These are not supported by all terminals. The purpose of this module is to make it easier to define colour preferences in a form that can work across a range of terminal emulators. \nAside from the default colour, the ANSI standard for terminal escape codes provides for eight colours. The bright attribute brings this to sixteen. These basic colours are commonly used in terminal applications due to being widely supported. Expanded 88 and 256 colour palettes are also common and, while the first sixteen colours vary somewhat between terminals and configurations, these add a generally consistent and predictable set of colours. \nIn order to use the zsh/nearcolor module, it only needs to be loaded. Thereafter, whenever a colour is specified using a hex triplet, it will be compared against each of the available colours and the closest will be selected. The first sixteen colours are never matched in this process due to being unpredictable. \nIt isn’t possible to reliably detect support for true colour in the terminal emulator. It is therefore recommended to be selective in loading the zsh/nearcolor module. For example, the following checks the COLORTERM environment variable: \n[[ $COLORTERM = *(24bit|truecolor)* ]] || zmodload zsh/nearcolor\nNote that some terminals accept the true color escape codes but map them internally to a more limited palette in a similar manner to the zsh/nearcolor module. \n22.19 The zsh/newuser Module\nThe zsh/newuser module is loaded at boot if it is available, the RCS option is set, and the PRIVILEGED option is not set (all three are true by default). This takes place immediately after commands in the global zshenv file (typically /etc/zshenv), if any, have been executed. If the module is not available it is silently ignored by the shell; the module may safely be removed from $MODULE_PATH by the administrator if it is not required. \nOn loading, the module tests if any of the start-up files .zshenv, .zprofile, .zshrc or .zlogin exist in the directory given by the environment variable ZDOTDIR, or the user’s home directory if that is not set. The test is not performed and the module halts processing if the shell was in an emulation mode (i.e. had been invoked as some other shell than zsh). \nIf none of the start-up files were found, the module then looks for the file newuser first in a sitewide directory, usually the parent directory of the site-functions directory, and if that is not found the module searches in a version-specific directory, usually the parent of the functions directory containing version-specific functions. (These directories can be configured when zsh is built using the –enable-site-scriptdir=dir and –enable-scriptdir=dir flags to configure, respectively; the defaults are prefix/share/zsh and prefix/share/zsh/$ZSH_VERSION where the default prefix is /usr/local.) \nIf the file newuser is found, it is then sourced in the same manner as a start-up file. The file is expected to contain code to install start-up files for the user, however any valid shell code will be executed. \nThe zsh/newuser module is then unconditionally unloaded. \nNote that it is possible to achieve exactly the same effect as the zsh/newuser module by adding code to /etc/zshenv. The module exists simply to allow the shell to make arrangements for new users without the need for intervention by package maintainers and system administrators. \nThe script supplied with the module invokes the shell function zsh-newuser-install. This may be invoked directly by the user even if the zsh/newuser module is disabled. Note, however, that if the module is not installed the function will not be installed either. The function is documented in User Configuration Functions. \n22.20 The zsh/parameter Module\nThe zsh/parameter module gives access to some of the internal hash tables used by the shell by defining some special parameters. \noptions \nThe keys for this associative array are the names of the options that can be set and unset using the setopt and unsetopt builtins. The value of each key is either the string on if the option is currently set, or the string off if the option is unset. Setting a key to one of these strings is like setting or unsetting the option, respectively. Unsetting a key in this array is like setting it to the value off. \ncommands \nThis array gives access to the command hash table. The keys are the names of external commands, the values are the pathnames of the files that would be executed when the command would be invoked. Setting a key in this array defines a new entry in this table in the same way as with the hash builtin. Unsetting a key as in ‘unset \"commands[foo]\"’ removes the entry for the given key from the command hash table. \nfunctions \nThis associative array maps names of enabled functions to their definitions. Setting a key in it is like defining a function with the name given by the key and the body given by the value. Unsetting a key removes the definition for the function named by the key. \ndis_functions \nLike functions but for disabled functions. \nfunctions_source \nThis readonly associative array maps names of enabled functions to the name of the file containing the source of the function. \nFor an autoloaded function that has already been loaded, or marked for autoload with an absolute path, or that has had its path resolved with ‘functions -r’, this is the file found for autoloading, resolved to an absolute path. \nFor a function defined within the body of a script or sourced file, this is the name of that file. In this case, this is the exact path originally used to that file, which may be a relative path. \nFor any other function, including any defined at an interactive prompt or an autoload function whose path has not yet been resolved, this is the empty string. However, the hash element is reported as defined just so long as the function is present: the keys to this hash are the same as those to $functions. \ndis_functions_source \nLike functions_source but for disabled functions. \nbuiltins \nThis associative array gives information about the builtin commands currently enabled. The keys are the names of the builtin commands and the values are either ‘undefined’ for builtin commands that will automatically be loaded from a module if invoked or ‘defined’ for builtin commands that are already loaded. \ndis_builtins \nLike builtins but for disabled builtin commands. \nreswords \nThis array contains the enabled reserved words. \ndis_reswords \nLike reswords but for disabled reserved words. \npatchars \nThis array contains the enabled pattern characters. \ndis_patchars \nLike patchars but for disabled pattern characters. \naliases \nThis maps the names of the regular aliases currently enabled to their expansions. \ndis_aliases \nLike aliases but for disabled regular aliases. \ngaliases \nLike aliases, but for global aliases. \ndis_galiases \nLike galiases but for disabled global aliases. \nsaliases \nLike raliases, but for suffix aliases. \ndis_saliases \nLike saliases but for disabled suffix aliases. \nparameters \nThe keys in this associative array are the names of the parameters currently defined. The values are strings describing the type of the parameter, in the same format used by the t parameter flag, see Parameter Expansion . Setting or unsetting keys in this array is not possible. \nmodules \nAn associative array giving information about modules. The keys are the names of the modules loaded, registered to be autoloaded, or aliased. The value says which state the named module is in and is one of the strings ‘loaded’, ‘autoloaded’, or ‘alias:name’, where name is the name the module is aliased to. \nSetting or unsetting keys in this array is not possible. \ndirstack \nA normal array holding the elements of the directory stack. Note that the output of the dirs builtin command includes one more directory, the current working directory. \nhistory \nThis associative array maps history event numbers to the full history lines. Although it is presented as an associative array, the array of all values (${history[@]}) is guaranteed to be returned in order from most recent to oldest history event, that is, by decreasing history event number. \nhistorywords \nA special array containing the words stored in the history. These also appear in most to least recent order. \njobdirs \nThis associative array maps job numbers to the directories from which the job was started (which may not be the current directory of the job). \nThe keys of the associative arrays are usually valid job numbers, and these are the values output with, for example, ${(k)jobdirs}. Non-numeric job references may be used when looking up a value; for example, ${jobdirs[%+]} refers to the current job. \nSee the jobs builtin for how job information is provided in a subshell. \njobtexts \nThis associative array maps job numbers to the texts of the command lines that were used to start the jobs. \nHandling of the keys of the associative array is as described for jobdirs above. \nSee the jobs builtin for how job information is provided in a subshell. \njobstates \nThis associative array gives information about the states of the jobs currently known. The keys are the job numbers and the values are strings of the form ‘job-state:mark:pid=state...’. The job-state gives the state the whole job is currently in, one of ‘running’, ‘suspended’, or ‘done’. The mark is ‘+’ for the current job, ‘-’ for the previous job and empty otherwise. This is followed by one ‘:pid=state’ for every process in the job. The pids are, of course, the process IDs and the state describes the state of that process. \nHandling of the keys of the associative array is as described for jobdirs above. \nSee the jobs builtin for how job information is provided in a subshell. \nnameddirs \nThis associative array maps the names of named directories to the pathnames they stand for. \nuserdirs \nThis associative array maps user names to the pathnames of their home directories. \nusergroups \nThis associative array maps names of system groups of which the current user is a member to the corresponding group identifiers. The contents are the same as the groups output by the id command. \nfuncfiletrace \nThis array contains the absolute line numbers and corresponding file names for the point where the current function, sourced file, or (if EVAL_LINENO is set) eval command was called. The array is of the same length as funcsourcetrace and functrace, but differs from funcsourcetrace in that the line and file are the point of call, not the point of definition, and differs from functrace in that all values are absolute line numbers in files, rather than relative to the start of a function, if any. \nfuncsourcetrace \nThis array contains the file names and line numbers of the points where the functions, sourced files, and (if EVAL_LINENO is set) eval commands currently being executed were defined. The line number is the line where the ‘function name’ or ‘name ()’ started. In the case of an autoloaded function the line number is reported as zero. The format of each element is filename:lineno. \nFor functions autoloaded from a file in native zsh format, where only the body of the function occurs in the file, or for files that have been executed by the source or ‘.’ builtins, the trace information is shown as filename:0, since the entire file is the definition. The source file name is resolved to an absolute path when the function is loaded or the path to it otherwise resolved. \nMost users will be interested in the information in the funcfiletrace array instead. \nfuncstack \nThis array contains the names of the functions, sourced files, and (if EVAL_LINENO is set) eval commands. currently being executed. The first element is the name of the function using the parameter. \nThe standard shell array zsh_eval_context can be used to determine the type of shell construct being executed at each depth: note, however, that is in the opposite order, with the most recent item last, and it is more detailed, for example including an entry for toplevel, the main shell code being executed either interactively or from a script, which is not present in $funcstack. \nfunctrace \nThis array contains the names and line numbers of the callers corresponding to the functions currently being executed. The format of each element is name:lineno. Callers are also shown for sourced files; the caller is the point where the source or ‘.’ command was executed. \n22.21 The zsh/pcre Module\nThe zsh/pcre module makes some commands available as builtins: \npcre_compile [ -aimxs ] PCRE \nCompiles a perl-compatible regular expression. \nOption -a will force the pattern to be anchored. Option -i will compile a case-insensitive pattern. Option -m will compile a multi-line pattern; that is, ^ and $ will match newlines within the pattern. Option -x will compile an extended pattern, wherein whitespace and # comments are ignored. Option -s makes the dot metacharacter match all characters, including those that indicate newline. \npcre_study \nStudies the previously-compiled PCRE which may result in faster matching. \npcre_match [ -v var ] [ -a arr ] [ -n offset ] [ -b ] string \nReturns successfully if string matches the previously-compiled PCRE. \nUpon successful match, if the expression captures substrings within parentheses, pcre_match will set the array match to those substrings, unless the -a option is given, in which case it will set the array arr. Similarly, the variable MATCH will be set to the entire matched portion of the string, unless the -v option is given, in which case the variable var will be set. No variables are altered if there is no successful match. A -n option starts searching for a match from the byte offset position in string. If the -b option is given, the variable ZPCRE_OP will be set to an offset pair string, representing the byte offset positions of the entire matched portion within the string. For example, a ZPCRE_OP set to \"32 45\" indicates that the matched portion began on byte offset 32 and ended on byte offset 44. Here, byte offset position 45 is the position directly after the matched portion. Keep in mind that the byte position isn’t necessarily the same as the character position when UTF-8 characters are involved. Consequently, the byte offset positions are only to be relied on in the context of using them for subsequent searches on string, using an offset position as an argument to the -n option. This is mostly used to implement the \"find all non-overlapping matches\" functionality. \nA simple example of \"find all non-overlapping matches\": \nstring=\"The following zip codes: 78884 90210 99513\"\npcre_compile -m \"\\d{5}\"\naccum=()\npcre_match -b -- $string\nwhile [[ $? -eq 0 ]] do\n    b=($=ZPCRE_OP)\n    accum+=$MATCH\n    pcre_match -b -n $b[2] -- $string\ndone\nprint -l $accum\nThe zsh/pcre module makes available the following test condition: \nexpr -pcre-match pcre \nMatches a string against a perl-compatible regular expression. \nFor example, \n[[ \"$text\" -pcre-match ^d+$ ]] &&\nprint text variable contains only \"d's\".\nIf the REMATCH_PCRE option is set, the =~ operator is equivalent to -pcre-match, and the NO_CASE_MATCH option may be used. Note that NO_CASE_MATCH never applies to the pcre_match builtin, instead use the -i switch of pcre_compile. \n22.22 The zsh/param/private Module\nThe zsh/param/private module is used to create parameters whose scope is limited to the current function body, and not to other functions called by the current function. \nThis module provides a single autoloaded builtin: \nprivate [ {+|-}AHUahlmrtux ] [ {+|-}EFLRZi [ n ] ] [ name[=value] ... ] \nThe private builtin accepts all the same options and arguments as local (Shell Builtin Commands) except for the ‘-T’ option. Tied parameters may not be made private. \nThe ‘-p’ option is presently a no-op because the state of private parameters cannot reliably be reloaded. This also applies to printing private parameters with ‘typeset -p’. \nIf used at the top level (outside a function scope), private creates a normal parameter in the same manner as declare or typeset. A warning about this is printed if WARN_CREATE_GLOBAL is set (Options). Used inside a function scope, private creates a local parameter similar to one declared with local, except having special properties noted below. \nSpecial parameters which expose or manipulate internal shell state, such as ARGC, argv, COLUMNS, LINES, UID, EUID, IFS, PROMPT, RANDOM, SECONDS, etc., cannot be made private unless the ‘-h’ option is used to hide the special meaning of the parameter. This may change in the future. \nAs with other typeset equivalents, private is both a builtin and a reserved word, so arrays may be assigned with parenthesized word list name=(value...) syntax. However, the reserved word ‘private’ is not available until zsh/param/private is loaded, so care must be taken with order of execution and parsing for function definitions which use private. To compensate for this, the module also adds the option ‘-P’ to the ‘local’ builtin to declare private parameters. \nFor example, this construction fails if zsh/param/private has not yet been loaded when ‘bad_declaration’ is defined: \nbad_declaration() {\n  zmodload zsh/param/private\n  private array=( one two three )\n}\nThis construction works because local is already a keyword, and the module is loaded before the statement is executed: \ngood_declaration() {\n  zmodload zsh/param/private\n  local -P array=( one two three )\n}\nThe following is usable in scripts but may have trouble with autoload: \nzmodload zsh/param/private\niffy_declaration() {\n  private array=( one two three )\n}\nThe private builtin may always be used with scalar assignments and for declarations without assignments. \nParameters declared with private have the following properties: \nWithin the function body where it is declared, the parameter behaves as a local, except as noted above for tied or special parameters. \nThe type of a parameter declared private cannot be changed in the scope where it was declared, even if the parameter is unset. Thus an array cannot be assigned to a private scalar, etc. \nWithin any other function called by the declaring function, the private parameter does NOT hide other parameters of the same name, so for example a global parameter of the same name is visible and may be assigned or unset. This includes calls to anonymous functions, although that may also change in the future. However, the private name may not be created outside the local scope when it was not previously declared. \nAn exported private remains in the environment of inner scopes but appears unset for the current shell in those scopes. Generally, exporting private parameters should be avoided. \nNote that this differs from the static scope defined by compiled languages derived from C, in that the a new call to the same function creates a new scope, i.e., the parameter is still associated with the call stack rather than with the function definition. It differs from ksh ‘typeset -S’ because the syntax used to define the function has no bearing on whether the parameter scope is respected. \n22.23 The zsh/regex Module\nThe zsh/regex module makes available the following test condition: \nexpr -regex-match regex \nMatches a string against a POSIX extended regular expression. On successful match, matched portion of the string will normally be placed in the MATCH variable. If there are any capturing parentheses within the regex, then the match array variable will contain those. If the match is not successful, then the variables will not be altered. \nFor example, \n[[ alphabetical -regex-match ^a([^a]+)a([^a]+)a ]] &&\nprint -l $MATCH X $match\nIf the option REMATCH_PCRE is not set, then the =~ operator will automatically load this module as needed and will invoke the -regex-match operator. \nIf BASH_REMATCH is set, then the array BASH_REMATCH will be set instead of MATCH and match. \nNote that the zsh/regex module logic relies on the host system. The same expr and regex pair could produce different results on different platforms if a regex with non-standard syntax is given. \nFor example, no syntax for matching a word boundary is defined in the POSIX extended regular expression standard. GNU libc and BSD libc both provide such syntaxes as extensions (\\b and [[:<:]]/[[:>:]] respectively), but neither of these syntaxes is supported by both of these implementations. \nRefer to the regcomp(3) and re_format(7) manual pages on your system for locally-supported syntax. \n22.24 The zsh/sched Module\nThe zsh/sched module makes available one builtin command and one parameter. \nsched [-o] [+]hh:mm[:ss] command ... sched [-o] [+]seconds command ... sched [ -item ] \nMake an entry in the scheduled list of commands to execute. The time may be specified in either absolute or relative time, and either as hours, minutes and (optionally) seconds separated by a colon, or seconds alone. An absolute number of seconds indicates the time since the epoch (1970/01/01 00:00); this is useful in combination with the features in the zsh/datetime module, see The zsh/datetime Module. \nWith no arguments, prints the list of scheduled commands. If the scheduled command has the -o flag set, this is shown at the start of the command. \nWith the argument ‘-item’, removes the given item from the list. The numbering of the list is continuous and entries are in time order, so the numbering can change when entries are added or deleted. \nCommands are executed either immediately before a prompt, or while the shell’s line editor is waiting for input. In the latter case it is useful to be able to produce output that does not interfere with the line being edited. Providing the option -o causes the shell to clear the command line before the event and redraw it afterwards. This should be used with any scheduled event that produces visible output to the terminal; it is not needed, for example, with output that updates a terminal emulator’s title bar. \nTo effect changes to the editor buffer when an event executes, use the ‘zle’ command with no arguments to test whether the editor is active, and if it is, then use ‘zle widget’ to access the editor via the named widget. \nThe sched builtin is not made available by default when the shell starts in a mode emulating another shell. It can be made available with the command ‘zmodload -F zsh/sched b:sched’. \nzsh_scheduled_events \nA readonly array corresponding to the events scheduled by the sched builtin. The indices of the array correspond to the numbers shown when sched is run with no arguments (provided that the KSH_ARRAYS option is not set). The value of the array consists of the scheduled time in seconds since the epoch (see The zsh/datetime Module for facilities for using this number), followed by a colon, followed by any options (which may be empty but will be preceded by a ‘-’ otherwise), followed by a colon, followed by the command to be executed. \nThe sched builtin should be used for manipulating the events. Note that this will have an immediate effect on the contents of the array, so that indices may become invalid. \n22.25 The zsh/net/socket Module\nThe zsh/net/socket module makes available one builtin command: \nzsocket [ -altv ] [ -d fd ] [ args ] \nzsocket is implemented as a builtin to allow full use of shell command line editing, file I/O, and job control mechanisms. \n22.25.1 Outbound Connections\nzsocket [ -v ] [ -d fd ] filename \nOpen a new Unix domain connection to filename. The shell parameter REPLY will be set to the file descriptor associated with that connection. Currently, only stream connections are supported. \nIf -d is specified, its argument will be taken as the target file descriptor for the connection. \nIn order to elicit more verbose output, use -v. \nFile descriptors can be closed with normal shell syntax when no longer needed, for example: \n22.25.2 Inbound Connections\nzsocket -l [ -v ] [ -d fd ] filename \nzsocket -l will open a socket listening on filename. The shell parameter REPLY will be set to the file descriptor associated with that listener. The file descriptor remains open in subshells and forked external executables. \nIf -d is specified, its argument will be taken as the target file descriptor for the connection. \nIn order to elicit more verbose output, use -v. \nzsocket -a [ -tv ] [ -d targetfd ] listenfd \nzsocket -a will accept an incoming connection to the socket associated with listenfd. The shell parameter REPLY will be set to the file descriptor associated with the inbound connection. The file descriptor remains open in subshells and forked external executables. \nIf -d is specified, its argument will be taken as the target file descriptor for the connection. \nIf -t is specified, zsocket will return if no incoming connection is pending. Otherwise it will wait for one. \nIn order to elicit more verbose output, use -v. \n22.26 The zsh/stat Module\nThe zsh/stat module makes available one builtin command under two possible names: \nzstat [ -gnNolLtTrs ] [ -f fd ] [ -H hash ] [ -A array ] [ -F fmt ] [ +element ] [ file ... ] stat ... \nThe command acts as a front end to the stat system call (see stat(2)). The same command is provided with two names; as the name stat is often used by an external command it is recommended that only the zstat form of the command is used. This can be arranged by loading the module with the command ‘zmodload -F zsh/stat b:zstat’. \nIf the stat call fails, the appropriate system error message printed and status 1 is returned. The fields of struct stat give information about the files provided as arguments to the command. In addition to those available from the stat call, an extra element ‘link’ is provided. These elements are: \ndevice \nThe number of the device on which the file resides. \ninode \nThe unique number of the file on this device (‘inode’ number). \nmode \nThe mode of the file; that is, the file’s type and access permissions. With the -s option, this will be returned as a string corresponding to the first column in the display of the ls -l command. \nnlink \nThe number of hard links to the file. \nuid \nThe user ID of the owner of the file. With the -s option, this is displayed as a user name. \ngid \nThe group ID of the file. With the -s option, this is displayed as a group name. \nrdev \nThe raw device number. This is only useful for special devices. \nsize \nThe size of the file in bytes. \natime mtime ctime \nThe last access, modification and inode change times of the file, respectively, as the number of seconds since midnight GMT on 1st January, 1970. With the -s option, these are printed as strings for the local time zone; the format can be altered with the -F option, and with the -g option the times are in GMT. \nblksize \nThe number of bytes in one allocation block on the device on which the file resides. \nblock \nThe number of disk blocks used by the file. \nlink \nIf the file is a link and the -L option is in effect, this contains the name of the file linked to, otherwise it is empty. Note that if this element is selected (‘‘zstat +link’’) then the -L option is automatically used. \nA particular element may be selected by including its name preceded by a ‘+’ in the option list; only one element is allowed. The element may be shortened to any unique set of leading characters. Otherwise, all elements will be shown for all files. \nOptions: \n-A array \nInstead of displaying the results on standard output, assign them to an array, one struct stat element per array element for each file in order. In this case neither the name of the element nor the name of the files appears in array unless the -t or -n options were given, respectively. If -t is given, the element name appears as a prefix to the appropriate array element; if -n is given, the file name appears as a separate array element preceding all the others. Other formatting options are respected. \n-H hash \nSimilar to -A, but instead assign the values to hash. The keys are the elements listed above. If the -n option is provided then the name of the file is included in the hash with key name. \n-f fd \nUse the file on file descriptor fd instead of named files; no list of file names is allowed in this case. \n-F fmt \nSupplies a strftime (see strftime(3)) string for the formatting of the time elements. The format string supports all of the zsh extensions described in Prompt Expansion. In particular, -F %s.%N can be used to show timestamps with nanosecond precision if supported by the system. The -s option is implied. \n-g \nShow the time elements in the GMT time zone. The -s option is implied. \n-l \nList the names of the type elements (to standard output or an array as appropriate) and return immediately; arguments, and options other than -A, are ignored. \n-L \nPerform an lstat (see lstat(2)) rather than a stat system call. In this case, if the file is a link, information about the link itself rather than the target file is returned. This option is required to make the link element useful. It’s important to note that this is the exact opposite from ls(1), etc. \n-n \nAlways show the names of files. Usually these are only shown when output is to standard output and there is more than one file in the list. \n-N \nNever show the names of files. \n-o \nIf a raw file mode is printed, show it in octal, which is more useful for human consumption than the default of decimal. A leading zero will be printed in this case. Note that this does not affect whether a raw or formatted file mode is shown, which is controlled by the -r and -s options, nor whether a mode is shown at all. \n-r \nPrint raw data (the default format) alongside string data (the -s format); the string data appears in parentheses after the raw data. \n-s \nPrint mode, uid, gid and the three time elements as strings instead of numbers. In each case the format is like that of ls -l. \n-t \nAlways show the type names for the elements of struct stat. Usually these are only shown when output is to standard output and no individual element has been selected. \n-T \nNever show the type names of the struct stat elements. \n22.27 The zsh/system Module\nThe zsh/system module makes available various builtin commands and parameters. \n22.27.1 Builtins\nsyserror [ -e errvar ] [ -p prefix ] [ errno | errname ] \nThis command prints out the error message associated with errno, a system error number, followed by a newline to standard error. \nInstead of the error number, a name errname, for example ENOENT, may be used. The set of names is the same as the contents of the array errnos, see below. \nIf the string prefix is given, it is printed in front of the error message, with no intervening space. \nIf errvar is supplied, the entire message, without a newline, is assigned to the parameter names errvar and nothing is output. \nA return status of 0 indicates the message was successfully printed (although it may not be useful if the error number was out of the system’s range), a return status of 1 indicates an error in the parameters, and a return status of 2 indicates the error name was not recognised (no message is printed for this). \nsysopen [ -arw ] [ -m permissions ] [ -o options ] -u fd file \nThis command opens a file. The -r, -w and -a flags indicate whether the file should be opened for reading, writing and appending, respectively. The -m option allows the initial permissions to use when creating a file to be specified in octal form. The file descriptor is specified with -u. Either an explicit file descriptor in the range 0 to 9 can be specified or a variable name can be given to which the file descriptor number will be assigned. \nThe -o option allows various system specific options to be specified as a comma-separated list. The following is a list of possible options. Note that, depending on the system, some may not be available. \ncloexec \nmark file to be closed when other programs are executed (else the file descriptor remains open in subshells and forked external executables) \ncreate creat \ncreate file if it does not exist \nexcl \ncreate file, error if it already exists \nnoatime \nsuppress updating of the file atime \nnofollow \nfail if file is a symbolic link \nnonblock \nthe file is opened in nonblocking mode \nsync \nrequest that writes wait until data has been physically written \ntruncate trunc \ntruncate file to size 0 \nTo close the file, use one of the following: \nexec {fd}<&-\nexec {fd}>&-\nsysread [ -c countvar ] [ -i infd ] [ -o outfd ] [ -s bufsize ] [ -t timeout ] [ param ] \nPerform a single system read from file descriptor infd, or zero if that is not given. The result of the read is stored in param or REPLY if that is not given. If countvar is given, the number of bytes read is assigned to the parameter named by countvar. \nThe maximum number of bytes read is bufsize or 8192 if that is not given, however the command returns as soon as any number of bytes was successfully read. \nIf timeout is given, it specifies a timeout in seconds, which may be zero to poll the file descriptor. This is handled by the poll system call if available, otherwise the select system call if available. \nIf outfd is given, an attempt is made to write all the bytes just read to the file descriptor outfd. If this fails, because of a system error other than EINTR or because of an internal zsh error during an interrupt, the bytes read but not written are stored in the parameter named by param if supplied (no default is used in this case), and the number of bytes read but not written is stored in the parameter named by countvar if that is supplied. If it was successful, countvar contains the full number of bytes transferred, as usual, and param is not set. \nThe error EINTR (interrupted system call) is handled internally so that shell interrupts are transparent to the caller. Any other error causes a return. \nThe possible return statuses are \n0 \nAt least one byte of data was successfully read and, if appropriate, written. \n1 \nThere was an error in the parameters to the command. This is the only error for which a message is printed to standard error. \n2 \nThere was an error on the read, or on polling the input file descriptor for a timeout. The parameter ERRNO gives the error. \n3 \nData were successfully read, but there was an error writing them to outfd. The parameter ERRNO gives the error. \n4 \nThe attempt to read timed out. Note this does not set ERRNO as this is not a system error. \n5 \nNo system error occurred, but zero bytes were read. This usually indicates end of file. The parameters are set according to the usual rules; no write to outfd is attempted. \nsysseek [ -u fd ] [ -w start|end|current ] offset \nThe current file position at which future reads and writes will take place is adjusted to the specified byte offset. The offset is evaluated as a math expression. The -u option allows the file descriptor to be specified. By default the offset is specified relative to the start or the file but, with the -w option, it is possible to specify that the offset should be relative to the current position or the end of the file. \nsyswrite [ -c countvar ] [ -o outfd ] data \nThe data (a single string of bytes) are written to the file descriptor outfd, or 1 if that is not given, using the write system call. Multiple write operations may be used if the first does not write all the data. \nIf countvar is given, the number of byte written is stored in the parameter named by countvar; this may not be the full length of data if an error occurred. \nThe error EINTR (interrupted system call) is handled internally by retrying; otherwise an error causes the command to return. For example, if the file descriptor is set to non-blocking output, an error EAGAIN (on some systems, EWOULDBLOCK) may result in the command returning early. \nThe return status may be 0 for success, 1 for an error in the parameters to the command, or 2 for an error on the write; no error message is printed in the last case, but the parameter ERRNO will reflect the error that occurred. \nzsystem flock [ -t timeout ] [ -i interval ] [ -f var ] [-er] file zsystem flock -u fd_expr \nThe builtin zsystem’s subcommand flock performs advisory file locking (via the fcntl(2) system call) over the entire contents of the given file. This form of locking requires the processes accessing the file to cooperate; its most obvious use is between two instances of the shell itself. \nIn the first form the named file, which must already exist, is locked by opening a file descriptor to the file and applying a lock to the file descriptor. The lock terminates when the shell process that created the lock exits; it is therefore often convenient to create file locks within subshells, since the lock is automatically released when the subshell exits. Note that use of the print builtin with the -u option will, as a side effect, release the lock, as will redirection to the file in the shell holding the lock. To work around this use a subshell, e.g. ‘(print message) >> file’. Status 0 is returned if the lock succeeds, else status 1. \nIn the second form the file descriptor given by the arithmetic expression fd_expr is closed, releasing a lock. The file descriptor can be queried by using the ‘-f var’ form during the lock; on a successful lock, the shell variable var is set to the file descriptor used for locking. The lock will be released if the file descriptor is closed by any other means, for example using ‘exec {var}>&-’; however, the form described here performs a safety check that the file descriptor is in use for file locking. \nBy default the shell waits indefinitely for the lock to succeed. The option -t timeout specifies a timeout for the lock in seconds; fractional seconds are allowed. During this period, the shell will attempt to lock the file every interval seconds if the -i interval option is given, otherwise once a second. (This interval is shortened before the last attempt if needed, so that the shell waits only until the timeout and not longer.) If the attempt times out, status 2 is returned. \n(Note: timeout is limited to 2^30-1 seconds (about 34 years), and interval to 0.999 * LONG_MAX microseconds (only about 35 minutes on 32-bit systems).) \nIf the option -e is given, the file descriptor for the lock is preserved when the shell uses exec to start a new process; otherwise it is closed at that point and the lock released. \nIf the option -r is given, the lock is only for reading, otherwise it is for reading and writing. The file descriptor is opened accordingly. \nzsystem supports subcommand \nThe builtin zsystem’s subcommand supports tests whether a given subcommand is supported. It returns status 0 if so, else status 1. It operates silently unless there was a syntax error (i.e. the wrong number of arguments), in which case status 255 is returned. Status 1 can indicate one of two things: subcommand is known but not supported by the current operating system, or subcommand is not known (possibly because this is an older version of the shell before it was implemented). \n22.27.2 Math Functions\nsystell(fd) \nThe systell math function returns the current file position for the file descriptor passed as an argument. \n22.27.3 Parameters\nerrnos \nA readonly array of the names of errors defined on the system. These are typically macros defined in C by including the system header file errno.h. The index of each name (assuming the option KSH_ARRAYS is unset) corresponds to the error number. Error numbers num before the last known error which have no name are given the name Enum in the array. \nNote that aliases for errors are not handled; only the canonical name is used. \nsysparams \nA readonly associative array. The keys are: \npid \nReturns the process ID of the current process, even in subshells. Compare $$, which returns the process ID of the main shell process. \nppid \nReturns the current process ID of the parent of the current process, even in subshells. Compare $PPID, which returns the process ID of the initial parent of the main shell process. \nprocsubstpid \nReturns the process ID of the last process started for process substitution, i.e. the <(...) and >(...) expansions. \n22.28 The zsh/net/tcp Module\nThe zsh/net/tcp module makes available one builtin command: \nztcp [ -acflLtv ] [ -d fd ] [ args ] \nztcp is implemented as a builtin to allow full use of shell command line editing, file I/O, and job control mechanisms. \nIf ztcp is run with no options, it will output the contents of its session table. \nIf it is run with only the option -L, it will output the contents of the session table in a format suitable for automatic parsing. The option is ignored if given with a command to open or close a session. The output consists of a set of lines, one per session, each containing the following elements separated by spaces: \nFile descriptor \nThe file descriptor in use for the connection. For normal inbound (I) and outbound (O) connections this may be read and written by the usual shell mechanisms. However, it should only be close with ‘ztcp -c’. \nConnection type \nA letter indicating how the session was created: \nZ \nA session created with the zftp command. \nL \nA connection opened for listening with ‘ztcp -l’. \nI \nAn inbound connection accepted with ‘ztcp -a’. \nO \nAn outbound connection created with ‘ztcp host ...’. \nThe local host \nThis is usually set to an all-zero IP address as the address of the localhost is irrelevant. \nThe local port \nThis is likely to be zero unless the connection is for listening. \nThe remote host \nThis is the fully qualified domain name of the peer, if available, else an IP address. It is an all-zero IP address for a session opened for listening. \nThe remote port \nThis is zero for a connection opened for listening. \n22.28.1 Outbound Connections\nztcp [ -v ] [ -d fd ] host [ port ] \nOpen a new TCP connection to host. If the port is omitted, it will default to port 23. The connection will be added to the session table and the shell parameter REPLY will be set to the file descriptor associated with that connection. \nIf -d is specified, its argument will be taken as the target file descriptor for the connection. \nIn order to elicit more verbose output, use -v. \n22.28.2 Inbound Connections\nztcp -l [ -v ] [ -d fd ] port \nztcp -l will open a socket listening on TCP port. The socket will be added to the session table and the shell parameter REPLY will be set to the file descriptor associated with that listener. \nIf -d is specified, its argument will be taken as the target file descriptor for the connection. \nIn order to elicit more verbose output, use -v. \nztcp -a [ -tv ] [ -d targetfd ] listenfd \nztcp -a will accept an incoming connection to the port associated with listenfd. The connection will be added to the session table and the shell parameter REPLY will be set to the file descriptor associated with the inbound connection. \nIf -d is specified, its argument will be taken as the target file descriptor for the connection. \nIf -t is specified, ztcp will return if no incoming connection is pending. Otherwise it will wait for one. \nIn order to elicit more verbose output, use -v. \n22.28.3 Closing Connections\nztcp -cf [ -v ] [ fd ] ztcp -c [ -v ] [ fd ] \nztcp -c will close the socket associated with fd. The socket will be removed from the session table. If fd is not specified, ztcp will close everything in the session table. \nNormally, sockets registered by zftp (see The zsh/zftp Module ) cannot be closed this way. In order to force such a socket closed, use -f. \nIn order to elicit more verbose output, use -v. \n22.28.4 Example\nHere is how to create a TCP connection between two instances of zsh. We need to pick an unassigned port; here we use the randomly chosen 5123. \nOn host1, \nzmodload zsh/net/tcp\nztcp -l 5123\nlistenfd=$REPLY\nztcp -a $listenfd\nfd=$REPLY\nThe second from last command blocks until there is an incoming connection. \nNow create a connection from host2 (which may, of course, be the same machine): \nzmodload zsh/net/tcp\nztcp host1 5123\nfd=$REPLY\nNow on each host, $fd contains a file descriptor for talking to the other. For example, on host1: \nprint This is a message >&$fd\nand on host2: \nread -r line <&$fd; print -r - $line\nprints ‘This is a message’. \nTo tidy up, on host1: \nztcp -c $listenfd\nztcp -c $fd\nand on host2 \n22.29 The zsh/termcap Module\nThe zsh/termcap module makes available one builtin command: \nechotc cap [ arg ... ] \nOutput the termcap value corresponding to the capability cap, with optional arguments. \nThe zsh/termcap module makes available one parameter: \ntermcap \nAn associative array that maps termcap capability codes to their values. \n22.30 The zsh/terminfo Module\nThe zsh/terminfo module makes available one builtin command: \nechoti cap [ arg ] \nOutput the terminfo value corresponding to the capability cap, instantiated with arg if applicable. \nThe zsh/terminfo module makes available one parameter: \nterminfo \nAn associative array that maps terminfo capability names to their values. \n22.31 The zsh/watch Module\nThe zsh/watch module can be used to report when specific users log in or out. This is controlled via the following parameters. \nLOGCHECK \nThe interval in seconds between checks for login/logout activity using the watch parameter. \nwatch <S> <Z> (WATCH <S>) \nAn array (colon-separated list) of login/logout events to report. \nIf it contains the single word ‘all’, then all login/logout events are reported. If it contains the single word ‘notme’, then all events are reported as with ‘all’ except $USERNAME. \nAn entry in this list may consist of a username, an ‘@’ followed by a remote hostname, and a ‘%’ followed by a line (tty). Any of these may be a pattern (be sure to quote this during the assignment to watch so that it does not immediately perform file generation); the setting of the EXTENDED_GLOB option is respected. Any or all of these components may be present in an entry; if a login/logout event matches all of them, it is reported. \nFor example, with the EXTENDED_GLOB option set, the following: \ncauses reports for activity associated with any user other than pws or barts. \nWATCHFMT \nThe format of login/logout reports if the watch parameter is set. Default is ‘%n has %a %l from %m’. Recognizes the following escape sequences: \n%n \nThe name of the user that logged in/out. \n%a \nThe observed action, i.e. \"logged on\" or \"logged off\". \n%l \nThe line (tty) the user is logged in on. \n%M \nThe full hostname of the remote host. \n%m \nThe hostname up to the first ‘.’. If only the IP address is available or the utmp field contains the name of an X-windows display, the whole name is printed. \nNOTE: The ‘%m’ and ‘%M’ escapes will work only if there is a host name field in the utmp on your machine. Otherwise they are treated as ordinary strings. \n%F{color} (%f) \nStart (stop) using a different foreground color. \n%K{color} (%k) \nStart (stop) using a different background color. \n%S (%s) \nStart (stop) standout mode. \n%U (%u) \nStart (stop) underline mode. \n%B (%b) \nStart (stop) boldface mode. \n%t %@ \nThe time, in 12-hour, am/pm format. \n%T \nThe time, in 24-hour format. \n%w \nThe date in ‘day-dd’ format. \n%W \nThe date in ‘mm/dd/yy’ format. \n%D \nThe date in ‘yy-mm-dd’ format. \n%D{string} \nThe date formatted as string using the strftime function, with zsh extensions as described by Prompt Expansion. \n%(x:true-text:false-text) \nSpecifies a ternary expression. The character following the x is arbitrary; the same character is used to separate the text for the \"true\" result from that for the \"false\" result. Both the separator and the right parenthesis may be escaped with a backslash. Ternary expressions may be nested. \nThe test character x may be any one of ‘l’, ‘n’, ‘m’ or ‘M’, which indicate a ‘true’ result if the corresponding escape sequence would return a non-empty value; or it may be ‘a’, which indicates a ‘true’ result if the watched user has logged in, or ‘false’ if he has logged out. Other characters evaluate to neither true nor false; the entire expression is omitted in this case. \nIf the result is ‘true’, then the true-text is formatted according to the rules above and printed, and the false-text is skipped. If ‘false’, the true-text is skipped and the false-text is formatted and printed. Either or both of the branches may be empty, but both separators must be present in any case. \nFurthermore, the zsh/watch module makes available one builtin command: \nlog \nList all users currently logged in who are affected by the current setting of the watch parameter. \n22.32 The zsh/zftp Module\nThe zsh/zftp module makes available one builtin command: \nzftp subcommand [ args ] \nThe zsh/zftp module is a client for FTP (file transfer protocol). It is implemented as a builtin to allow full use of shell command line editing, file I/O, and job control mechanisms. Often, users will access it via shell functions providing a more powerful interface; a set is provided with the zsh distribution and is described in Zftp Function System. However, the zftp command is entirely usable in its own right. \nAll commands consist of the command name zftp followed by the name of a subcommand. These are listed below. The return status of each subcommand is supposed to reflect the success or failure of the remote operation. See a description of the variable ZFTP_VERBOSE for more information on how responses from the server may be printed. \n22.32.1 Subcommands\nopen host[:port] [ user [ password [ account ] ] ] \nOpen a new FTP session to host, which may be the name of a TCP/IP connected host or an IP number in the standard dot notation. If the argument is in the form host:port, open a connection to TCP port port instead of the standard FTP port 21. This may be the name of a TCP service or a number: see the description of ZFTP_PORT below for more information. \nIf IPv6 addresses in colon format are used, the host should be surrounded by quoted square brackets to distinguish it from the port, for example ’[fe80::203:baff:fe02:8b56]’. For consistency this is allowed with all forms of host. \nRemaining arguments are passed to the login subcommand. Note that if no arguments beyond host are supplied, open will not automatically call login. If no arguments at all are supplied, open will use the parameters set by the params subcommand. \nAfter a successful open, the shell variables ZFTP_HOST, ZFTP_PORT, ZFTP_IP and ZFTP_SYSTEM are available; see ‘Variables’ below. \nlogin [ name [ password [ account ] ] ] user [ name [ password [ account ] ] ] \nLogin the user name with parameters password and account. Any of the parameters can be omitted, and will be read from standard input if needed (name is always needed). If standard input is a terminal, a prompt for each one will be printed on standard error and password will not be echoed. If any of the parameters are not used, a warning message is printed. \nAfter a successful login, the shell variables ZFTP_USER, ZFTP_ACCOUNT and ZFTP_PWD are available; see ‘Variables’ below. \nThis command may be re-issued when a user is already logged in, and the server will first be reinitialized for a new user. \nparams [ host [ user [ password [ account ] ] ] ] params - \nStore the given parameters for a later open command with no arguments. Only those given on the command line will be remembered. If no arguments are given, the parameters currently set are printed, although the password will appear as a line of stars; the return status is one if no parameters were set, zero otherwise. \nAny of the parameters may be specified as a ‘?’, which may need to be quoted to protect it from shell expansion. In this case, the appropriate parameter will be read from stdin as with the login subcommand, including special handling of password. If the ‘?’ is followed by a string, that is used as the prompt for reading the parameter instead of the default message (any necessary punctuation and whitespace should be included at the end of the prompt). The first letter of the parameter (only) may be quoted with a ‘\\’; hence an argument \"\\\\$word\" guarantees that the string from the shell parameter $word will be treated literally, whether or not it begins with a ‘?’. \nIf instead a single ‘-’ is given, the existing parameters, if any, are deleted. In that case, calling open with no arguments will cause an error. \nThe list of parameters is not deleted after a close, however it will be deleted if the zsh/zftp module is unloaded. \nFor example, \nzftp params ftp.elsewhere.xx juser '?Password for juser: '\nwill store the host ftp.elsewhere.xx and the user juser and then prompt the user for the corresponding password with the given prompt. \ntest \nTest the connection; if the server has reported that it has closed the connection (maybe due to a timeout), return status 2; if no connection was open anyway, return status 1; else return status 0. The test subcommand is silent, apart from messages printed by the $ZFTP_VERBOSE mechanism, or error messages if the connection closes. There is no network overhead for this test. \nThe test is only supported on systems with either the select(2) or poll(2) system calls; otherwise the message ‘not supported on this system’ is printed instead. \nThe test subcommand will automatically be called at the start of any other subcommand for the current session when a connection is open. \ncd directory \nChange the remote directory to directory. Also alters the shell variable ZFTP_PWD. \ncdup \nChange the remote directory to the one higher in the directory tree. Note that cd .. will also work correctly on non-UNIX systems. \ndir [ arg ... ] \nGive a (verbose) listing of the remote directory. The args are passed directly to the server. The command’s behaviour is implementation dependent, but a UNIX server will typically interpret args as arguments to the ls command and with no arguments return the result of ‘ls -l’. The directory is listed to standard output. \nls [ arg ... ] \nGive a (short) listing of the remote directory. With no arg, produces a raw list of the files in the directory, one per line. Otherwise, up to vagaries of the server implementation, behaves similar to dir. \ntype [ type ] \nChange the type for the transfer to type, or print the current type if type is absent. The allowed values are ‘A’ (ASCII), ‘I’ (Image, i.e. binary), or ‘B’ (a synonym for ‘I’). \nThe FTP default for a transfer is ASCII. However, if zftp finds that the remote host is a UNIX machine with 8-bit byes, it will automatically switch to using binary for file transfers upon open. This can subsequently be overridden. \nThe transfer type is only passed to the remote host when a data connection is established; this command involves no network overhead. \nascii \nThe same as type A. \nbinary \nThe same as type I. \nmode [ S | B ] \nSet the mode type to stream (S) or block (B). Stream mode is the default; block mode is not widely supported. \nremote file ... local [ file ... ] \nPrint the size and last modification time of the remote or local files. If there is more than one item on the list, the name of the file is printed first. The first number is the file size, the second is the last modification time of the file in the format CCYYMMDDhhmmSS consisting of year, month, date, hour, minutes and seconds in GMT. Note that this format, including the length, is guaranteed, so that time strings can be directly compared via the [[ builtin’s < and > operators, even if they are too long to be represented as integers. \nNot all servers support the commands for retrieving this information. In that case, the remote command will print nothing and return status 2, compared with status 1 for a file not found. \nThe local command (but not remote) may be used with no arguments, in which case the information comes from examining file descriptor zero. This is the same file as seen by a put command with no further redirection. \nget file ... \nRetrieve all files from the server, concatenating them and sending them to standard output. \nput file ... \nFor each file, read a file from standard input and send that to the remote host with the given name. \nappend file ... \nAs put, but if the remote file already exists, data is appended to it instead of overwriting it. \ngetat file point putat file point appendat file point \nVersions of get, put and append which will start the transfer at the given point in the remote file. This is useful for appending to an incomplete local file. However, note that this ability is not universally supported by servers (and is not quite the behaviour specified by the standard). \ndelete file ... \nDelete the list of files on the server. \nmkdir directory \nCreate a new directory directory on the server. \nrmdir directory \nDelete the directory directory on the server. \nrename old-name new-name \nRename file old-name to new-name on the server. \nsite arg ... \nSend a host-specific command to the server. You will probably only need this if instructed by the server to use it. \nquote arg ... \nSend the raw FTP command sequence to the server. You should be familiar with the FTP command set as defined in RFC959 before doing this. Useful commands may include STAT and HELP. Note also the mechanism for returning messages as described for the variable ZFTP_VERBOSE below, in particular that all messages from the control connection are sent to standard error. \nclose quit \nClose the current data connection. This unsets the shell parameters ZFTP_HOST, ZFTP_PORT, ZFTP_IP, ZFTP_SYSTEM, ZFTP_USER, ZFTP_ACCOUNT, ZFTP_PWD, ZFTP_TYPE and ZFTP_MODE. \nsession [ sessname ] \nAllows multiple FTP sessions to be used at once. The name of the session is an arbitrary string of characters; the default session is called ‘default’. If this command is called without an argument, it will list all the current sessions; with an argument, it will either switch to the existing session called sessname, or create a new session of that name. \nEach session remembers the status of the connection, the set of connection-specific shell parameters (the same set as are unset when a connection closes, as given in the description of close), and any user parameters specified with the params subcommand. Changing to a previous session restores those values; changing to a new session initialises them in the same way as if zftp had just been loaded. The name of the current session is given by the parameter ZFTP_SESSION. \nrmsession [ sessname ] \nDelete a session; if a name is not given, the current session is deleted. If the current session is deleted, the earliest existing session becomes the new current session, otherwise the current session is not changed. If the session being deleted is the only one, a new session called ‘default’ is created and becomes the current session; note that this is a new session even if the session being deleted is also called ‘default’. It is recommended that sessions not be deleted while background commands which use zftp are still active. \n22.32.2 Parameters\nThe following shell parameters are used by zftp. Currently none of them are special. \nZFTP_TMOUT \nInteger. The time in seconds to wait for a network operation to complete before returning an error. If this is not set when the module is loaded, it will be given the default value 60. A value of zero turns off timeouts. If a timeout occurs on the control connection it will be closed. Use a larger value if this occurs too frequently. \nZFTP_IP \nReadonly. The IP address of the current connection in dot notation. \nZFTP_HOST \nReadonly. The hostname of the current remote server. If the host was opened as an IP number, ZFTP_HOST contains that instead; this saves the overhead for a name lookup, as IP numbers are most commonly used when a nameserver is unavailable. \nZFTP_PORT \nReadonly. The number of the remote TCP port to which the connection is open (even if the port was originally specified as a named service). Usually this is the standard FTP port, 21. \nIn the unlikely event that your system does not have the appropriate conversion functions, this appears in network byte order. If your system is little-endian, the port then consists of two swapped bytes and the standard port will be reported as 5376. In that case, numeric ports passed to zftp open will also need to be in this format. \nZFTP_SYSTEM \nReadonly. The system type string returned by the server in response to an FTP SYST request. The most interesting case is a string beginning \"UNIX Type: L8\", which ensures maximum compatibility with a local UNIX host. \nZFTP_TYPE \nReadonly. The type to be used for data transfers , either ‘A’ or ‘I’. Use the type subcommand to change this. \nZFTP_USER \nReadonly. The username currently logged in, if any. \nZFTP_ACCOUNT \nReadonly. The account name of the current user, if any. Most servers do not require an account name. \nZFTP_PWD \nReadonly. The current directory on the server. \nZFTP_CODE \nReadonly. The three digit code of the last FTP reply from the server as a string. This can still be read after the connection is closed, and is not changed when the current session changes. \nZFTP_REPLY \nReadonly. The last line of the last reply sent by the server. This can still be read after the connection is closed, and is not changed when the current session changes. \nZFTP_SESSION \nReadonly. The name of the current FTP session; see the description of the session subcommand. \nZFTP_PREFS \nA string of preferences for altering aspects of zftp’s behaviour. Each preference is a single character. The following are defined: \nP \nPassive: attempt to make the remote server initiate data transfers. This is slightly more efficient than sendport mode. If the letter S occurs later in the string, zftp will use sendport mode if passive mode is not available. \nS \nSendport: initiate transfers by the FTP PORT command. If this occurs before any P in the string, passive mode will never be attempted. \nD \nDumb: use only the bare minimum of FTP commands. This prevents the variables ZFTP_SYSTEM and ZFTP_PWD from being set, and will mean all connections default to ASCII type. It may prevent ZFTP_SIZE from being set during a transfer if the server does not send it anyway (many servers do). \nIf ZFTP_PREFS is not set when zftp is loaded, it will be set to a default of ‘PS’, i.e. use passive mode if available, otherwise fall back to sendport mode. \nZFTP_VERBOSE \nA string of digits between 0 and 5 inclusive, specifying which responses from the server should be printed. All responses go to standard error. If any of the numbers 1 to 5 appear in the string, raw responses from the server with reply codes beginning with that digit will be printed to standard error. The first digit of the three digit reply code is defined by RFC959 to correspond to: \n1. \nA positive preliminary reply. \n2. \nA positive completion reply. \n3. \nA positive intermediate reply. \n4. \nA transient negative completion reply. \n5. \nA permanent negative completion reply. \nIt should be noted that, for unknown reasons, the reply ‘Service not available’, which forces termination of a connection, is classified as 421, i.e. ‘transient negative’, an interesting interpretation of the word ‘transient’. \nThe code 0 is special: it indicates that all but the last line of multiline replies read from the server will be printed to standard error in a processed format. By convention, servers use this mechanism for sending information for the user to read. The appropriate reply code, if it matches the same response, takes priority. \nIf ZFTP_VERBOSE is not set when zftp is loaded, it will be set to the default value 450, i.e., messages destined for the user and all errors will be printed. A null string is valid and specifies that no messages should be printed. \n22.32.3 Functions\nzftp_chpwd \nIf this function is set by the user, it is called every time the directory changes on the server, including when a user is logged in, or when a connection is closed. In the last case, $ZFTP_PWD will be unset; otherwise it will reflect the new directory. \nzftp_progress \nIf this function is set by the user, it will be called during a get, put or append operation each time sufficient data has been received from the host. During a get, the data is sent to standard output, so it is vital that this function should write to standard error or directly to the terminal, not to standard output. \nWhen it is called with a transfer in progress, the following additional shell parameters are set: \nZFTP_FILE \nThe name of the remote file being transferred from or to. \nZFTP_TRANSFER \nA G for a get operation and a P for a put operation. \nZFTP_SIZE \nThe total size of the complete file being transferred: the same as the first value provided by the remote and local subcommands for a particular file. If the server cannot supply this value for a remote file being retrieved, it will not be set. If input is from a pipe the value may be incorrect and correspond simply to a full pipe buffer. \nZFTP_COUNT \nThe amount of data so far transferred; a number between zero and $ZFTP_SIZE, if that is set. This number is always available. \nThe function is initially called with ZFTP_TRANSFER set appropriately and ZFTP_COUNT set to zero. After the transfer is finished, the function will be called one more time with ZFTP_TRANSFER set to GF or PF, in case it wishes to tidy up. It is otherwise never called twice with the same value of ZFTP_COUNT. \nSometimes the progress meter may cause disruption. It is up to the user to decide whether the function should be defined and to use unfunction when necessary. \n22.32.4 Problems\nA connection may not be opened in the left hand side of a pipe as this occurs in a subshell and the file information is not updated in the main shell. In the case of type or mode changes or closing the connection in a subshell, the information is returned but variables are not updated until the next call to zftp. Other status changes in subshells will not be reflected by changes to the variables (but should be otherwise harmless). \nDeleting sessions while a zftp command is active in the background can have unexpected effects, even if it does not use the session being deleted. This is because all shell subprocesses share information on the state of all connections, and deleting a session changes the ordering of that information. \nOn some operating systems, the control connection is not valid after a fork(), so that operations in subshells, on the left hand side of a pipeline, or in the background are not possible, as they should be. This is presumably a bug in the operating system. \n22.33 The zsh/zle Module\nThe zsh/zle module contains the Zsh Line Editor. See Zsh Line Editor. \n22.34 The zsh/zleparameter Module\nThe zsh/zleparameter module defines two special parameters that can be used to access internal information of the Zsh Line Editor (see Zsh Line Editor). \nkeymaps \nThis array contains the names of the keymaps currently defined. \nwidgets \nThis associative array contains one entry per widget. The name of the widget is the key and the value gives information about the widget. It is either the string ‘builtin’ for builtin widgets, a string of the form ‘user:name’ for user-defined widgets, where name is the name of the shell function implementing the widget, a string of the form ‘completion:type:name’ for completion widgets, or a null value if the widget is not yet fully defined. In the penultimate case, type is the name of the builtin widget the completion widget imitates in its behavior and name is the name of the shell function implementing the completion widget. \n22.35 The zsh/zprof Module\nWhen loaded, the zsh/zprof causes shell functions to be profiled. The profiling results can be obtained with the zprof builtin command made available by this module. There is no way to turn profiling off other than unloading the module. \nzprof [ -c ] \nWithout the -c option, zprof lists profiling results to standard output. The format is comparable to that of commands like gprof. \nAt the top there is a summary listing all functions that were called at least once. This summary is sorted in decreasing order of the amount of time spent in each. The lines contain the number of the function in order, which is used in other parts of the list in suffixes of the form ‘[num]’, then the number of calls made to the function. The next three columns list the time in milliseconds spent in the function and its descendants, the average time in milliseconds spent in the function and its descendants per call and the percentage of time spent in all shell functions used in this function and its descendants. The following three columns give the same information, but counting only the time spent in the function itself. The final column shows the name of the function. \nAfter the summary, detailed information about every function that was invoked is listed, sorted in decreasing order of the amount of time spent in each function and its descendants. Each of these entries consists of descriptions for the functions that called the function described, the function itself, and the functions that were called from it. The description for the function itself has the same format as in the summary (and shows the same information). The other lines don’t show the number of the function at the beginning and have their function named indented to make it easier to distinguish the line showing the function described in the section from the surrounding lines. \nThe information shown in this case is almost the same as in the summary, but only refers to the call hierarchy being displayed. For example, for a calling function the column showing the total running time lists the time spent in the described function and its descendants only for the times when it was called from that particular calling function. Likewise, for a called function, this columns lists the total time spent in the called function and its descendants only for the times when it was called from the function described. \nAlso in this case, the column showing the number of calls to a function also shows a slash and then the total number of invocations made to the called function. \nAs long as the zsh/zprof module is loaded, profiling will be done and multiple invocations of the zprof builtin command will show the times and numbers of calls since the module was loaded. With the -c option, the zprof builtin command will reset its internal counters and will not show the listing. \n22.36 The zsh/zpty Module\nThe zsh/zpty module offers one builtin: \nzpty [ -e ] [ -b ] name [ arg ... ] \nThe arguments following name are concatenated with spaces between, then executed as a command, as if passed to the eval builtin. The command runs under a newly assigned pseudo-terminal; this is useful for running commands non-interactively which expect an interactive environment. The name is not part of the command, but is used to refer to this command in later calls to zpty. \nWith the -e option, the pseudo-terminal is set up so that input characters are echoed. \nWith the -b option, input to and output from the pseudo-terminal are made non-blocking. \nThe shell parameter REPLY is set to the file descriptor assigned to the master side of the pseudo-terminal. This allows the terminal to be monitored with ZLE descriptor handlers (see Zle Builtins) or manipulated with sysread and syswrite (see The zsh/system Module). Warning: Use of sysread and syswrite is not recommended; use zpty -r and zpty -w unless you know exactly what you are doing. \nzpty -d [ name ... ] \nThe second form, with the -d option, is used to delete commands previously started, by supplying a list of their names. If no name is given, all commands are deleted. Deleting a command causes the HUP signal to be sent to the corresponding process. \nzpty -w [ -n ] name [ string ... ] \nThe -w option can be used to send the to command name the given strings as input (separated by spaces). If the -n option is not given, a newline is added at the end. \nIf no string is provided, the standard input is copied to the pseudo-terminal; this may stop before copying the full input if the pseudo-terminal is non-blocking. The exact input is always copied: the -n option is not applied. \nNote that the command under the pseudo-terminal sees this input as if it were typed, so beware when sending special tty driver characters such as word-erase, line-kill, and end-of-file. \nzpty -r [ -mt ] name [ param [ pattern ] ] \nThe -r option can be used to read the output of the command name. With only a name argument, the output read is copied to the standard output. Unless the pseudo-terminal is non-blocking, copying continues until the command under the pseudo-terminal exits; when non-blocking, only as much output as is immediately available is copied. The return status is zero if any output is copied. \nWhen also given a param argument, at most one line is read and stored in the parameter named param. Less than a full line may be read if the pseudo-terminal is non-blocking. The return status is zero if at least one character is stored in param. \nIf a pattern is given as well, output is read until the whole string read matches the pattern, even in the non-blocking case. The return status is zero if the string read matches the pattern, or if the command has exited but at least one character could still be read. If the option -m is present, the return status is zero only if the pattern matches. As of this writing, a maximum of one megabyte of output can be consumed this way; if a full megabyte is read without matching the pattern, the return status is non-zero. \nIn all cases, the return status is non-zero if nothing could be read, and is 2 if this is because the command has finished. \nIf the -r option is combined with the -t option, zpty tests whether output is available before trying to read. If no output is available, zpty immediately returns the status 1. When used with a pattern, the behaviour on a failed poll is similar to when the command has exited: the return value is zero if at least one character could still be read even if the pattern failed to match. \nzpty -t name \nThe -t option without the -r option can be used to test whether the command name is still running. It returns a zero status if the command is running and a non-zero value otherwise. \nzpty [ -L ] \nThe last form, without any arguments, is used to list the commands currently defined. If the -L option is given, this is done in the form of calls to the zpty builtin. \n22.37 The zsh/zselect Module\nThe zsh/zselect module makes available one builtin command: \nzselect [ -rwe ] [ -t timeout ] [ -a array ] [ -A assoc ] [ fd ... ] \nThe zselect builtin is a front-end to the ‘select’ system call, which blocks until a file descriptor is ready for reading or writing, or has an error condition, with an optional timeout. If this is not available on your system, the command prints an error message and returns status 2 (normal errors return status 1). For more information, see your system’s documentation for select(3). Note there is no connection with the shell builtin of the same name. \nArguments and options may be intermingled in any order. Non-option arguments are file descriptors, which must be decimal integers. By default, file descriptors are to be tested for reading, i.e. zselect will return when data is available to be read from the file descriptor, or more precisely, when a read operation from the file descriptor will not block. After a -r, -w and -e, the given file descriptors are to be tested for reading, writing, or error conditions. These options and an arbitrary list of file descriptors may be given in any order. \n(The presence of an ‘error condition’ is not well defined in the documentation for many implementations of the select system call. According to recent versions of the POSIX specification, it is really an exception condition, of which the only standard example is out-of-band data received on a socket. So zsh users are unlikely to find the -e option useful.) \nThe option ‘-t timeout’ specifies a timeout in hundredths of a second. This may be zero, in which case the file descriptors will simply be polled and zselect will return immediately. It is possible to call zselect with no file descriptors and a non-zero timeout for use as a finer-grained replacement for ‘sleep’; note, however, the return status is always 1 for a timeout. \nThe option ‘-a array’ indicates that array should be set to indicate the file descriptor(s) which are ready. If the option is not given, the array reply will be used for this purpose. The array will contain a string similar to the arguments for zselect. For example, \nmight return immediately with status 0 and $reply containing ‘-r 0 -w 1’ to show that both file descriptors are ready for the requested operations. \nThe option ‘-A assoc’ indicates that the associative array assoc should be set to indicate the file descriptor(s) which are ready. This option overrides the option -a, nor will reply be modified. The keys of assoc are the file descriptors, and the corresponding values are any of the characters ‘rwe’ to indicate the condition. \nThe command returns status 0 if some file descriptors are ready for reading. If the operation timed out, or a timeout of 0 was given and no file descriptors were ready, or there was an error, it returns status 1 and the array will not be set (nor modified in any way). If there was an error in the select operation the appropriate error message is printed. \n22.38 The zsh/zutil Module\nThe zsh/zutil module only adds some builtins: \nzstyle [ -L [ metapattern [ style ] ] ] zstyle [ -e | - | -- ] pattern style string ... zstyle -d [ pattern [ style ... ] ] zstyle -g name [ pattern [ style ] ] zstyle -{a|b|s} context style name [ sep ] zstyle -{T|t} context style [ string ... ] zstyle -m context style pattern \nThis builtin command is used to define and lookup styles. Styles are pairs of names and values, where the values consist of any number of strings. They are stored together with patterns and lookup is done by giving a string, called the ‘context’, which is matched against the patterns. The definition stored for the most specific pattern that matches will be returned. \nA pattern is considered to be more specific than another if it contains more components (substrings separated by colons) or if the patterns for the components are more specific, where simple strings are considered to be more specific than patterns and complex patterns are considered to be more specific than the pattern ‘*’. A ‘*’ in the pattern will match zero or more characters in the context; colons are not treated specially in this regard. If two patterns are equally specific, the tie is broken in favour of the pattern that was defined first. \nExample \nFor example, a fictional ‘weather’ plugin might state in its documentation that it looks up the preferred-precipitation style under the ‘:weather:continent:day-of-the-week:phase-of-the-moon’ context. According to this, you might set the following in your zshrc: \nzstyle ':weather:europe:*' preferred-precipitation rain\nzstyle ':weather:*:Sunday:*' preferred-precipitation snow\nThen the plugin would run under the hood a command such as \nzstyle -s \":weather:${continent}:${day_of_week}:${moon_phase}\" preferred-precipitation REPLY\nin order to retrieve your preference into the scalar variable $REPLY. On Sundays $REPLY would be set to ‘snow’; in Europe it would be set to ‘rain’; and on Sundays in Europe it would be set to ‘snow’ again, because the patterns ‘:weather:europe:*’ and ‘:weather:*:Sunday:*’ both match the context argument to zstyle -s, are equally specific, and the latter is more specific (because it has more colon-separated components). \nUsage \nThe forms that operate on patterns are the following. \nzstyle [ -L [ metapattern [ style ] ] ] \nWithout arguments, lists style definitions. Styles are shown in alphabetic order and patterns are shown in the order zstyle will test them. \nIf the -L option is given, listing is done in the form of calls to zstyle. The optional first argument, metapattern, is a pattern which will be matched against the string supplied as pattern when the style was defined. Note: this means, for example, ‘zstyle -L \":completion:*\"’ will match any supplied pattern beginning ‘:completion:’, not just \":completion:*\": use ’:completion:\\*’ to match that. The optional second argument limits the output to a specific style (not a pattern). -L is not compatible with any other options. \nzstyle [ - | -- | -e ] pattern style string ... \nDefines the given style for the pattern with the strings as the value. If the -e option is given, the strings will be concatenated (separated by spaces) and the resulting string will be evaluated (in the same way as it is done by the eval builtin command) when the style is looked up. In this case the parameter ‘reply’ must be assigned to set the strings returned after the evaluation. Before evaluating the value, reply is unset, and if it is still unset after the evaluation, the style is treated as if it were not set. \nzstyle -d [ pattern [ style ... ] ] \nDelete style definitions. Without arguments all definitions are deleted, with a pattern all definitions for that pattern are deleted and if any styles are given, then only those styles are deleted for the pattern. \nzstyle -g name [ pattern [ style ] ] \nRetrieve a style definition. The name is used as the name of an array in which the results are stored. Without any further arguments, all patterns defined are returned. With a pattern the styles defined for that pattern are returned and with both a pattern and a style, the value strings of that combination is returned. \nThe other forms can be used to look up or test styles for a given context. \nzstyle -s context style name [ sep ] \nThe parameter name is set to the value of the style interpreted as a string. If the value contains several strings they are concatenated with spaces (or with the sep string if that is given) between them. \nReturn 0 if the style is set, 1 otherwise. \nzstyle -b context style name \nThe value is stored in name as a boolean, i.e. as the string ‘yes’ if the value has only one string and that string is equal to one of ‘yes’, ‘true’, ‘on’, or ‘1’. If the value is any other string or has more than one string, the parameter is set to ‘no’. \nReturn 0 if name is set to ‘yes’, 1 otherwise. \nzstyle -a context style name \nThe value is stored in name as an array. If name is declared as an associative array, the first, third, etc. strings are used as the keys and the other strings are used as the values. \nReturn 0 if the style is set, 1 otherwise. \nzstyle -t context style [ string ... ] zstyle -T context style [ string ... ] \nTest the value of a style, i.e. the -t option only returns a status (sets $?). Without any string the return status is zero if the style is defined for at least one matching pattern, has only one string in its value, and that is equal to one of ‘true’, ‘yes’, ‘on’ or ‘1’. If any strings are given the status is zero if and only if at least one of the strings is equal to at least one of the strings in the value. If the style is defined but doesn’t match, the return status is 1. If the style is not defined, the status is 2. \nThe -T option tests the values of the style like -t, but it returns status zero (rather than 2) if the style is not defined for any matching pattern. \nzstyle -m context style pattern \nMatch a value. Returns status zero if the pattern matches at least one of the strings in the value. \nzformat -f param format spec ... zformat -F param format spec ... zformat -a array sep spec ... \nThis builtin provides different forms of formatting. The first form is selected with the -f option. In this case the format string will be modified by replacing sequences starting with a percent sign in it with strings from the specs. Each spec should be of the form ‘char:string’ which will cause every appearance of the sequence ‘%char’ in format to be replaced by the string. The ‘%’ sequence may also contain optional minimum and maximum field width specifications between the ‘%’ and the ‘char’ in the form ‘%min.maxc’, i.e. the minimum field width is given first and if the maximum field width is used, it has to be preceded by a dot. Specifying a minimum field width makes the result be padded with spaces to the right if the string is shorter than the requested width. Padding to the left can be achieved by giving a negative minimum field width. If a maximum field width is specified, the string will be truncated after that many characters. After all ‘%’ sequences for the given specs have been processed, the resulting string is stored in the parameter param. \nThe %-escapes also understand ternary expressions in the form used by prompts. The % is followed by a ‘(’ and then an ordinary format specifier character as described above. There may be a set of digits either before or after the ‘(’; these specify a test number, which defaults to zero. Negative numbers are also allowed. An arbitrary delimiter character follows the format specifier, which is followed by a piece of ‘true’ text, the delimiter character again, a piece of ‘false’ text, and a closing parenthesis. The complete expression (without the digits) thus looks like ‘%(X.text1.text2)’, except that the ‘.’ character is arbitrary. The value given for the format specifier in the char:string expressions is evaluated as a mathematical expression, and compared with the test number. If they are the same, text1 is output, else text2 is output. A parenthesis may be escaped in text2 as %). Either of text1 or text2 may contain nested %-escapes. \nFor example: \nzformat -f REPLY \"The answer is '%3(c.yes.no)'.\" c:3\noutputs \"The answer is ’yes’.\" to REPLY since the value for the format specifier c is 3, agreeing with the digit argument to the ternary expression. \nWith -F instead of -f, ternary expressions choose between the ‘true’ or ‘false’ text on the basis of whether the format specifier is present and non-empty. A test number indicates a minimum width for the value given in the format specifier. Negative numbers reverse this, so the test is for whether the value exceeds a maximum width. \nThe form, using the -a option, can be used for aligning strings. Here, the specs are of the form ‘left:right’ where ‘left’ and ‘right’ are arbitrary strings. These strings are modified by replacing the colons by the sep string and padding the left strings with spaces to the right so that the sep strings in the result (and hence the right strings after them) are all aligned if the strings are printed below each other. All strings without a colon are left unchanged and all strings with an empty right string have the trailing colon removed. In both cases the lengths of the strings are not used to determine how the other strings are to be aligned. A colon in the left string can be escaped with a backslash. The resulting strings are stored in the array. \nzregexparse \nThis implements some internals of the _regex_arguments function. \nzparseopts [ -D -E -F -K -M ] [ -a array ] [ -A assoc ] [ - ] spec ... \nThis builtin simplifies the parsing of options in positional parameters, i.e. the set of arguments given by $*. Each spec describes one option and must be of the form ‘opt[=array]’. If an option described by opt is found in the positional parameters it is copied into the array specified with the -a option; if the optional ‘=array’ is given, it is instead copied into that array, which should be declared as a normal array and never as an associative array. \nNote that it is an error to give any spec without an ‘=array’ unless one of the -a or -A options is used. \nUnless the -E option is given, parsing stops at the first string that isn’t described by one of the specs. Even with -E, parsing always stops at a positional parameter equal to ‘-’ or ‘--’. See also -F. \nThe opt description must be one of the following. Any of the special characters can appear in the option name provided it is preceded by a backslash. \nname name+ \nThe name is the name of the option without the leading ‘-’. To specify a GNU-style long option, one of the usual two leading ‘-’ must be included in name; for example, a ‘--file’ option is represented by a name of ‘-file’. \nIf a ‘+’ appears after name, the option is appended to array each time it is found in the positional parameters; without the ‘+’ only the last occurrence of the option is preserved. \nIf one of these forms is used, the option takes no argument, so parsing stops if the next positional parameter does not also begin with ‘-’ (unless the -E option is used). \nname: name:- name:: \nIf one or two colons are given, the option takes an argument; with one colon, the argument is mandatory and with two colons it is optional. The argument is appended to the array after the option itself. \nAn optional argument is put into the same array element as the option name (note that this makes empty strings as arguments indistinguishable). A mandatory argument is added as a separate element unless the ‘:-’ form is used, in which case the argument is put into the same element. \nA ‘+’ as described above may appear between the name and the first colon. \nIn all cases, option-arguments must appear either immediately following the option in the same positional parameter or in the next one. Even an optional argument may appear in the next parameter, unless it begins with a ‘-’. There is no special handling of ‘=’ as with GNU-style argument parsers; given the spec ‘-foo:’, the positional parameter ‘--foo=bar’ is parsed as ‘--foo’ with an argument of ‘=bar’. \nWhen the names of two options that take no arguments overlap, the longest one wins, so that parsing for the specs ‘-foo -foobar’ (for example) is unambiguous. However, due to the aforementioned handling of option-arguments, ambiguities may arise when at least one overlapping spec takes an argument, as in ‘-foo: -foobar’. In that case, the last matching spec wins. \nThe options of zparseopts itself cannot be stacked because, for example, the stack ‘-DEK’ is indistinguishable from a spec for the GNU-style long option ‘--DEK’. The options of zparseopts itself are: \n-a array \nAs described above, this names the default array in which to store the recognised options. \n-A assoc \nIf this is given, the options and their values are also put into an associative array with the option names as keys and the arguments (if any) as the values. \n-D \nIf this option is given, all options found are removed from the positional parameters of the calling shell or shell function, up to but not including any not described by the specs. If the first such parameter is ‘-’ or ‘--’, it is removed as well. This is similar to using the shift builtin. \n-E \nThis changes the parsing rules to not stop at the first string that isn’t described by one of the specs. It can be used to test for or (if used together with -D) extract options and their arguments, ignoring all other options and arguments that may be in the positional parameters. As indicated above, parsing still stops at the first ‘-’ or ‘--’ not described by a spec, but it is not removed when used with -D. \n-F \nIf this option is given, zparseopts immediately stops at the first option-like parameter not described by one of the specs, prints an error message, and returns status 1. Removal (-D) and extraction (-E) are not performed, and option arrays are not updated. This provides basic validation for the given options. \nNote that the appearance in the positional parameters of an option without its required argument always aborts parsing and returns an error as described above regardless of whether this option is used. \n-K \nWith this option, the arrays specified with the -a option and with the ‘=array’ forms are kept unchanged when none of the specs for them is used. Otherwise the entire array is replaced when any of the specs is used. Individual elements of associative arrays specified with the -A option are preserved by -K. This allows assignment of default values to arrays before calling zparseopts. \n-M \nThis changes the assignment rules to implement a map among equivalent option names. If any spec uses the ‘=array’ form, the string array is interpreted as the name of another spec, which is used to choose where to store the values. If no other spec is found, the values are stored as usual. This changes only the way the values are stored, not the way $* is parsed, so results may be unpredictable if the ‘name+’ specifier is used inconsistently. \nFor example, \nset -- -a -bx -c y -cz baz -cend\nzparseopts a=foo b:=bar c+:=bar\nwill have the effect of \nfoo=(-a)\nbar=(-b x -c y -c z)\nThe arguments from ‘baz’ on will not be used. \nAs an example for the -E option, consider: \nset -- -a x -b y -c z arg1 arg2\nzparseopts -E -D b:=bar\nwill have the effect of \nbar=(-b y)\nset -- -a x -c z arg1 arg2\nI.e., the option -b and its arguments are taken from the positional parameters and put into the array bar. \nThe -M option can be used like this: \nset -- -a -bx -c y -cz baz -cend\nzparseopts -A bar -M a=foo b+: c:=b\nto have the effect of \nfoo=(-a)\nbar=(-a '' -b xyz)\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Modules-html-Zsh-Modules-y9thz.html",
  "markdown": "# zsh: 22 Zsh Modules\n\n* * *\n\n## 22.1 Description\n\nSome optional parts of zsh are in modules, separate from the core of the shell. Each of these modules may be linked in to the shell at build time, or can be dynamically linked while the shell is running if the installation supports this feature. Modules are linked at runtime with the zmodload command, see [Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands).\n\nThe modules that are bundled with the zsh distribution are:\n\nzsh/attr\n\nBuiltins for manipulating extended attributes (xattr).\n\nzsh/cap\n\nBuiltins for manipulating POSIX.1e (POSIX.6) capability (privilege) sets.\n\nzsh/clone\n\nA builtin that can clone a running shell onto another terminal.\n\nzsh/compctl\n\nThe compctl builtin for controlling completion.\n\nzsh/complete\n\nThe basic completion code.\n\nzsh/complist\n\nCompletion listing extensions.\n\nzsh/computil\n\nA module with utility builtins needed for the shell function based completion system.\n\nzsh/curses\n\ncurses windowing commands\n\nzsh/datetime\n\nSome date/time commands and parameters.\n\nzsh/db/gdbm\n\nBuiltins for managing associative array parameters tied to GDBM databases.\n\nzsh/deltochar\n\nA ZLE function duplicating EMACS’ zap-to-char.\n\nzsh/example\n\nAn example of how to write a module.\n\nzsh/files\n\nSome basic file manipulation commands as builtins.\n\nzsh/langinfo\n\nInterface to locale information.\n\nzsh/mapfile\n\nAccess to external files via a special associative array.\n\nzsh/mathfunc\n\nStandard scientific functions for use in mathematical evaluations.\n\nzsh/nearcolor\n\nMap colours to the nearest colour in the available palette.\n\nzsh/newuser\n\nArrange for files for new users to be installed.\n\nzsh/parameter\n\nAccess to internal hash tables via special associative arrays.\n\nzsh/pcre\n\nInterface to the PCRE library.\n\nzsh/param/private\n\nBuiltins for managing private-scoped parameters in function context.\n\nzsh/regex\n\nInterface to the POSIX regex library.\n\nzsh/sched\n\nA builtin that provides a timed execution facility within the shell.\n\nzsh/net/socket\n\nManipulation of Unix domain sockets\n\nzsh/stat\n\nA builtin command interface to the stat system call.\n\nzsh/system\n\nA builtin interface to various low-level system features.\n\nzsh/net/tcp\n\nManipulation of TCP sockets\n\nzsh/termcap\n\nInterface to the termcap database.\n\nzsh/terminfo\n\nInterface to the terminfo database.\n\nzsh/watch\n\nReporting of login and logout events.\n\nzsh/zftp\n\nA builtin FTP client.\n\nzsh/zle\n\nThe Zsh Line Editor, including the bindkey and vared builtins.\n\nzsh/zleparameter\n\nAccess to internals of the Zsh Line Editor via parameters.\n\nzsh/zprof\n\nA module allowing profiling for shell functions.\n\nzsh/zpty\n\nA builtin for starting a command in a pseudo-terminal.\n\nzsh/zselect\n\nBlock and return when file descriptors are ready.\n\nzsh/zutil\n\nSome utility builtins, e.g. the one for supporting configuration via styles.\n\n* * *\n\n## 22.2 The zsh/attr Module\n\nThe zsh/attr module is used for manipulating extended attributes. The \\-h option causes all commands to operate on symbolic links instead of their targets. The builtins in this module are:\n\nzgetattr \\[ \\-h \\] filename attribute \\[ parameter \\]\n\nGet the extended attribute attribute from the specified filename. If the optional argument parameter is given, the attribute is set on that parameter instead of being printed to stdout.\n\nzsetattr \\[ \\-h \\] filename attribute value\n\nSet the extended attribute attribute on the specified filename to value.\n\nzdelattr \\[ \\-h \\] filename attribute\n\nRemove the extended attribute attribute from the specified filename.\n\nzlistattr \\[ \\-h \\] filename \\[ parameter \\]\n\nList the extended attributes currently set on the specified filename. If the optional argument parameter is given, the list of attributes is set on that parameter instead of being printed to stdout.\n\nzgetattr and zlistattr allocate memory dynamically. If the attribute or list of attributes grows between the allocation and the call to get them, they return 2. On all other errors, 1 is returned. This allows the calling function to check for this case and retry.\n\n* * *\n\n## 22.3 The zsh/cap Module\n\nThe zsh/cap module is used for manipulating POSIX.1e (POSIX.6) capability sets. If the operating system does not support this interface, the builtins defined by this module will do nothing. The builtins in this module are:\n\ncap \\[ capabilities \\]\n\nChange the shell’s process capability sets to the specified capabilities, otherwise display the shell’s current capabilities.\n\ngetcap filename ...\n\nThis is a built-in implementation of the POSIX standard utility. It displays the capability sets on each specified filename.\n\nsetcap capabilities filename ...\n\nThis is a built-in implementation of the POSIX standard utility. It sets the capability sets on each specified filename to the specified capabilities.\n\n* * *\n\n## 22.4 The zsh/clone Module\n\nThe zsh/clone module makes available one builtin command:\n\nclone tty\n\nCreates a forked instance of the current shell, attached to the specified tty. In the new shell, the PID, PPID and TTY special parameters are changed appropriately. $! is set to zero in the new shell, and to the new shell’s PID in the original shell.\n\nThe return status of the builtin is zero in both shells if successful, and non-zero on error.\n\nThe target of clone should be an unused terminal, such as an unused virtual console or a virtual terminal created by\n\nxterm -e sh -c 'trap : INT QUIT TSTP; tty;\n        while :; do sleep 100000000; done'\n\nSome words of explanation are warranted about this long xterm command line: when doing clone on a pseudo-terminal, some other session (\"session\" meant as a unix session group, or SID) is already owning the terminal. Hence the cloned zsh cannot acquire the pseudo-terminal as a controlling tty. That means two things:\n\n*   the job control signals will go to the sh-started-by-xterm process group (that’s why we disable INT QUIT and TSTP with trap; otherwise the while loop could get suspended or killed)\n*   the cloned shell will have job control disabled, and the job control keys (control-C, control-\\\\ and control-Z) will not work.\n\nThis does not apply when cloning to an _unused_ vc.\n\nCloning to a used (and unprepared) terminal will result in two processes reading simultaneously from the same terminal, with input bytes going randomly to either process.\n\nclone is mostly useful as a shell built-in replacement for openvt.\n\n* * *\n\n## 22.5 The zsh/compctl Module\n\nThe zsh/compctl module makes available two builtin commands. compctl, is the old, deprecated way to control completions for ZLE. See [Completion Using compctl](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#Completion-Using-compctl). The other builtin command, compcall can be used in user-defined completion widgets, see [Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets).\n\n* * *\n\n## 22.6 The zsh/complete Module\n\nThe zsh/complete module makes available several builtin commands which can be used in user-defined completion widgets, see [Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets).\n\n* * *\n\n## 22.7 The zsh/complist Module\n\nThe zsh/complist module offers three extensions to completion listings: the ability to highlight matches in such a list, the ability to scroll through long lists and a different style of menu completion.\n\n* * *\n\n### 22.7.1 Colored completion listings\n\nWhenever one of the parameters ZLS\\_COLORS or ZLS\\_COLOURS is set and the zsh/complist module is loaded or linked into the shell, completion lists will be colored. Note, however, that complist will not automatically be loaded if it is not linked in: on systems with dynamic loading, ‘zmodload zsh/complist’ is required.\n\nThe parameters ZLS\\_COLORS and ZLS\\_COLOURS describe how matches are highlighted. To turn on highlighting an empty value suffices, in which case all the default values given below will be used. The format of the value of these parameters is the same as used by the GNU version of the ls command: a colon-separated list of specifications of the form ‘name\\=value’. The name may be one of the following strings, most of which specify file types for which the value will be used. The strings and their default values are:\n\nno 0\n\nfor normal text (i.e. when displaying something other than a matched file)\n\nfi 0\n\nfor regular files\n\ndi 32\n\nfor directories\n\nln 36\n\nfor symbolic links. If this has the special value target, symbolic links are dereferenced and the target file used to determine the display format.\n\npi 31\n\nfor named pipes (FIFOs)\n\nso 33\n\nfor sockets\n\nbd 44;37\n\nfor block devices\n\ncd 44;37\n\nfor character devices\n\nor none\n\nfor a symlink to nonexistent file (default is the value defined for ln)\n\nmi none\n\nfor a non-existent file (default is the value defined for fi); this code is currently not used\n\nsu 37;41\n\nfor files with setuid bit set\n\nsg 30;43\n\nfor files with setgid bit set\n\ntw 30;42\n\nfor world writable directories with sticky bit set\n\now 34;43\n\nfor world writable directories without sticky bit set\n\nsa none\n\nfor files with an associated suffix alias; this is only tested after specific suffixes, as described below\n\nst 37;44\n\nfor directories with sticky bit set but not world writable\n\nex 35\n\nfor executable files\n\nlc \\\\e\\[\n\nfor the left code (see below)\n\nrc m\n\nfor the right code\n\ntc 0\n\nfor the character indicating the file type printed after filenames if the LIST\\_TYPES option is set\n\nsp 0\n\nfor the spaces printed after matches to align the next column\n\nec none\n\nfor the end code\n\nApart from these strings, the name may also be an asterisk (‘\\*’) followed by any string. The value given for such a string will be used for all files whose name ends with the string. The name may also be an equals sign (‘\\=’) followed by a pattern; the EXTENDED\\_GLOB option will be turned on for evaluation of the pattern. The value given for this pattern will be used for all matches (not just filenames) whose display string are matched by the pattern. Definitions for the form with the leading equal sign take precedence over the values defined for file types, which in turn take precedence over the form with the leading asterisk (file extensions).\n\nThe leading-equals form also allows different parts of the displayed strings to be colored differently. For this, the pattern has to use the ‘(#b)’ globbing flag and pairs of parentheses surrounding the parts of the strings that are to be colored differently. In this case the value may consist of more than one color code separated by equal signs. The first code will be used for all parts for which no explicit code is specified and the following codes will be used for the parts matched by the sub-patterns in parentheses. For example, the specification ‘\\=(#b)(?)\\*(?)=0=3=7’ will be used for all matches which are at least two characters long and will use the code ‘3’ for the first character, ‘7’ for the last character and ‘0’ for the rest.\n\nAll three forms of name may be preceded by a pattern in parentheses. If this is given, the value will be used only for matches in groups whose names are matched by the pattern given in the parentheses. For example, ‘(g\\*)m\\*=43’ highlights all matches beginning with ‘m’ in groups whose names begin with ‘g’ using the color code ‘43’. In case of the ‘lc’, ‘rc’, and ‘ec’ codes, the group pattern is ignored.\n\nNote also that all patterns are tried in the order in which they appear in the parameter value until the first one matches which is then used. Patterns may be matched against completions, descriptions (possibly with spaces appended for padding), or lines consisting of a completion followed by a description. For consistent coloring it may be necessary to use more than one pattern or a pattern with backreferences.\n\nWhen printing a match, the code prints the value of lc, the value for the file-type or the last matching specification with a ‘\\*’, the value of rc, the string to display for the match itself, and then the value of ec if that is defined or the values of lc, no, and rc if ec is not defined.\n\nThe default values are ISO 6429 (ANSI) compliant and can be used on vt100 compatible terminals such as xterms. On monochrome terminals the default values will have no visible effect. The colors function from the contribution can be used to get associative arrays containing the codes for ANSI terminals (see [Other Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Other-Functions)). For example, after loading colors, one could use ‘$color\\[red\\]’ to get the code for foreground color red and ‘$color\\[bg-green\\]’ for the code for background color green.\n\nIf the completion system invoked by compinit is used, these parameters should not be set directly because the system controls them itself. Instead, the list-colors style should be used (see [Completion System Configuration](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System-Configuration)).\n\n* * *\n\n### 22.7.2 Scrolling in completion listings\n\nTo enable scrolling through a completion list, the LISTPROMPT parameter must be set. Its value will be used as the prompt; if it is the empty string, a default prompt will be used. The value may contain escapes of the form ‘%x’. It supports the escapes ‘%B’, ‘%b’, ‘%S’, ‘%s’, ‘%U’, ‘%u’, ‘%F’, ‘%f’, ‘%K’, ‘%k’ and ‘%{...%}’ used also in shell prompts as well as three pairs of additional sequences: a ‘%l’ or ‘%L’ is replaced by the number of the last line shown and the total number of lines in the form ‘number/total’; a ‘%m’ or ‘%M’ is replaced with the number of the last match shown and the total number of matches; and ‘%p’ or ‘%P’ is replaced with ‘Top’, ‘Bottom’ or the position of the first line shown in percent of the total number of lines, respectively. In each of these cases the form with the uppercase letter will be replaced with a string of fixed width, padded to the right with spaces, while the lowercase form will not be padded.\n\nIf the parameter LISTPROMPT is set, the completion code will not ask if the list should be shown. Instead it immediately starts displaying the list, stopping after the first screenful, showing the prompt at the bottom, waiting for a keypress after temporarily switching to the listscroll keymap. Some of the zle functions have a special meaning while scrolling lists:\n\nsend-break\n\nstops listing discarding the key pressed\n\naccept-line, down-history, down-line-or-history\n\ndown-line-or-search, vi-down-line-or-history\n\nscrolls forward one line\n\ncomplete-word, menu-complete, expand-or-complete\n\nexpand-or-complete-prefix, menu-complete-or-expand\n\nscrolls forward one screenful\n\naccept-search\n\nstop listing but take no other action\n\nEvery other character stops listing and immediately processes the key as usual. Any key that is not bound in the listscroll keymap or that is bound to undefined-key is looked up in the keymap currently selected.\n\nAs for the ZLS\\_COLORS and ZLS\\_COLOURS parameters, LISTPROMPT should not be set directly when using the shell function based completion system. Instead, the list-prompt style should be used.\n\n* * *\n\n### 22.7.3 Menu selection\n\nThe zsh/complist module also offers an alternative style of selecting matches from a list, called menu selection, which can be used if the shell is set up to return to the last prompt after showing a completion list (see the ALWAYS\\_LAST\\_PROMPT option in [Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Options)).\n\nMenu selection can be invoked directly by the widget menu-select defined by this module. This is a standard ZLE widget that can be bound to a key in the usual way as described in [Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor).\n\nAlternatively, the parameter MENUSELECT can be set to an integer, which gives the minimum number of matches that must be present before menu selection is automatically turned on. This second method requires that menu completion be started, either directly from a widget such as menu-complete, or due to one of the options MENU\\_COMPLETE or AUTO\\_MENU being set. If MENUSELECT is set, but is 0, 1 or empty, menu selection will always be started during an ambiguous menu completion.\n\nWhen using the completion system based on shell functions, the MENUSELECT parameter should not be used (like the ZLS\\_COLORS and ZLS\\_COLOURS parameters described above). Instead, the menu style should be used with the select=... keyword.\n\nAfter menu selection is started, the matches will be listed. If there are more matches than fit on the screen, only the first screenful is shown. The matches to insert into the command line can be selected from this list. In the list one match is highlighted using the value for ma from the ZLS\\_COLORS or ZLS\\_COLOURS parameter. The default value for this is ‘7’ which forces the selected match to be highlighted using standout mode on a vt100-compatible terminal. If neither ZLS\\_COLORS nor ZLS\\_COLOURS is set, the same terminal control sequence as for the ‘%S’ escape in prompts is used.\n\nIf there are more matches than fit on the screen and the parameter MENUPROMPT is set, its value will be shown below the matches. It supports the same escape sequences as LISTPROMPT, but the number of the match or line shown will be that of the one where the mark is placed. If its value is the empty string, a default prompt will be used.\n\nThe MENUSCROLL parameter can be used to specify how the list is scrolled. If the parameter is unset, this is done line by line, if it is set to ‘0’ (zero), the list will scroll half the number of lines of the screen. If the value is positive, it gives the number of lines to scroll and if it is negative, the list will be scrolled the number of lines of the screen minus the (absolute) value.\n\nAs for the ZLS\\_COLORS, ZLS\\_COLOURS and LISTPROMPT parameters, neither MENUPROMPT nor MENUSCROLL should be set directly when using the shell function based completion system. Instead, the select-prompt and select-scroll styles should be used.\n\nThe completion code sometimes decides not to show all of the matches in the list. These hidden matches are either matches for which the completion function which added them explicitly requested that they not appear in the list (using the \\-n option of the compadd builtin command) or they are matches which duplicate a string already in the list (because they differ only in things like prefixes or suffixes that are not displayed). In the list used for menu selection, however, even these matches are shown so that it is possible to select them. To highlight such matches the hi and du capabilities in the ZLS\\_COLORS and ZLS\\_COLOURS parameters are supported for hidden matches of the first and second kind, respectively.\n\nSelecting matches is done by moving the mark around using the zle movement functions. When not all matches can be shown on the screen at the same time, the list will scroll up and down when crossing the top or bottom line. The following zle functions have special meaning during menu selection. Note that the following always perform the same task within the menu selection map and cannot be replaced by user defined widgets, nor can the set of functions be extended:\n\naccept-line, accept-search\n\naccept the current match and leave menu selection (but do not cause the command line to be accepted)\n\nsend-break\n\nleaves menu selection and restores the previous contents of the command line\n\nredisplay, clear-screen\n\nexecute their normal function without leaving menu selection\n\naccept-and-hold, accept-and-menu-complete\n\naccept the currently inserted match and continue selection allowing to select the next match to insert into the line\n\naccept-and-infer-next-history\n\naccepts the current match and then tries completion with menu selection again; in the case of files this allows one to select a directory and immediately attempt to complete files in it; if there are no matches, a message is shown and one can use undo to go back to completion on the previous level, every other key leaves menu selection (including the other zle functions which are otherwise special during menu selection)\n\nundo\n\nremoves matches inserted during the menu selection by one of the three functions before\n\ndown-history, down-line-or-history\n\nvi-down-line-or-history, down-line-or-search\n\nmoves the mark one line down\n\nup-history, up-line-or-history\n\nvi-up-line-or-history, up-line-or-search\n\nmoves the mark one line up\n\nforward-char, vi-forward-char\n\nmoves the mark one column right\n\nbackward-char, vi-backward-char\n\nmoves the mark one column left\n\nforward-word, vi-forward-word\n\nvi-forward-word-end, emacs-forward-word\n\nmoves the mark one screenful down\n\nbackward-word, vi-backward-word, emacs-backward-word\n\nmoves the mark one screenful up\n\nvi-forward-blank-word, vi-forward-blank-word-end\n\nmoves the mark to the first line of the next group of matches\n\nvi-backward-blank-word\n\nmoves the mark to the last line of the previous group of matches\n\nbeginning-of-history\n\nmoves the mark to the first line\n\nend-of-history\n\nmoves the mark to the last line\n\nbeginning-of-buffer-or-history, beginning-of-line\n\nbeginning-of-line-hist, vi-beginning-of-line\n\nmoves the mark to the leftmost column\n\nend-of-buffer-or-history, end-of-line\n\nend-of-line-hist, vi-end-of-line\n\nmoves the mark to the rightmost column\n\ncomplete-word, menu-complete, expand-or-complete\n\nexpand-or-complete-prefix, menu-expand-or-complete\n\nmoves the mark to the next match\n\nreverse-menu-complete\n\nmoves the mark to the previous match\n\nvi-insert\n\nthis toggles between normal and interactive mode; in interactive mode the keys bound to self-insert and self-insert-unmeta insert into the command line as in normal editing mode but without leaving menu selection; after each character completion is tried again and the list changes to contain only the new matches; the completion widgets make the longest unambiguous string be inserted in the command line and undo and backward-delete-char go back to the previous set of matches\n\nhistory-incremental-search-forward\n\nhistory-incremental-search-backward\n\nthis starts incremental searches in the list of completions displayed; in this mode, accept-line only leaves incremental search, going back to the normal menu selection mode\n\nAll movement functions wrap around at the edges; any other zle function not listed leaves menu selection and executes that function. It is possible to make widgets in the above list do the same by using the form of the widget with a ‘.’ in front. For example, the widget ‘.accept-line’ has the effect of leaving menu selection and accepting the entire command line.\n\nDuring this selection the widget uses the keymap menuselect. Any key that is not defined in this keymap or that is bound to undefined-key is looked up in the keymap currently selected. This is used to ensure that the most important keys used during selection (namely the cursor keys, return, and TAB) have sensible defaults. However, keys in the menuselect keymap can be modified directly using the bindkey builtin command (see [The zsh/zle Module](#The-zsh_002fzle-Module)). For example, to make the return key leave menu selection without accepting the match currently selected one could call\n\nbindkey -M menuselect '^M' send-break\n\nafter loading the zsh/complist module.\n\n* * *\n\n## 22.8 The zsh/computil Module\n\nThe zsh/computil module adds several builtin commands that are used by some of the completion functions in the completion system based on shell functions (see [Completion System](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System) ). Except for compquote these builtin commands are very specialised and thus not very interesting when writing your own completion functions. In summary, these builtin commands are:\n\ncomparguments\n\nThis is used by the \\_arguments function to do the argument and command line parsing. Like compdescribe it has an option \\-i to do the parsing and initialize some internal state and various options to access the state information to decide what should be completed.\n\ncompdescribe\n\nThis is used by the \\_describe function to build the displays for the matches and to get the strings to add as matches with their options. On the first call one of the options \\-i or \\-I should be supplied as the first argument. In the first case, display strings without the descriptions will be generated, in the second case, the string used to separate the matches from their descriptions must be given as the second argument and the descriptions (if any) will be shown. All other arguments are like the definition arguments to \\_describe itself.\n\nOnce compdescribe has been called with either the \\-i or the \\-I option, it can be repeatedly called with the \\-g option and the names of four parameters as its arguments. This will step through the different sets of matches and store the value of compstate\\[list\\] in the first scalar, the options for compadd in the second array, the matches in the third array, and the strings to be displayed in the completion listing in the fourth array. The arrays may then be directly given to compadd to register the matches with the completion code.\n\ncompfiles\n\nUsed by the \\_path\\_files function to optimize complex recursive filename generation (globbing). It does three things. With the \\-p and \\-P options it builds the glob patterns to use, including the paths already handled and trying to optimize the patterns with respect to the prefix and suffix from the line and the match specification currently used. The \\-i option does the directory tests for the ignore-parents style and the \\-r option tests if a component for some of the matches are equal to the string on the line and removes all other matches if that is true.\n\ncompgroups\n\nUsed by the \\_tags function to implement the internals of the group-order style. This only takes its arguments as names of completion groups and creates the groups for it (all six types: sorted and unsorted, both without removing duplicates, with removing all duplicates and with removing consecutive duplicates).\n\ncompquote \\[ \\-p \\] names ...\n\nThere may be reasons to write completion functions that have to add the matches using the \\-Q option to compadd and perform quoting themselves. Instead of interpreting the first character of the all\\_quotes key of the compstate special association and using the q flag for parameter expansions, one can use this builtin command. The arguments are the names of scalar or array parameters and the values of these parameters are quoted as needed for the innermost quoting level. If the \\-p option is given, quoting is done as if there is some prefix before the values of the parameters, so that a leading equal sign will not be quoted.\n\nThe return status is non-zero in case of an error and zero otherwise.\n\ncomptags\n\ncomptry\n\nThese implement the internals of the tags mechanism.\n\ncompvalues\n\nLike comparguments, but for the \\_values function.\n\n* * *\n\n## 22.9 The zsh/curses Module\n\nThe zsh/curses module makes available one builtin command and various parameters.\n\n* * *\n\n### 22.9.1 Builtin\n\nzcurses init\n\nzcurses end\n\nzcurses addwin targetwin nlines ncols begin\\_y begin\\_x \\[ parentwin \\]\n\nzcurses delwin targetwin\n\nzcurses refresh \\[ targetwin ... \\]\n\nzcurses touch targetwin ...\n\nzcurses move targetwin new\\_y new\\_x\n\nzcurses clear targetwin \\[ redraw | eol | bot \\]\n\nzcurses position targetwin array\n\nzcurses char targetwin character\n\nzcurses string targetwin string\n\nzcurses border targetwin border\n\nzcurses attr targetwin \\[ \\[+|\\-\\]attribute | fg\\_col/bg\\_col \\] \\[...\\]\n\nzcurses bg targetwin \\[ \\[+|\\-\\]attribute | fg\\_col/bg\\_col | @char \\] \\[...\\]\n\nzcurses scroll targetwin \\[ on | off | \\[+|\\-\\]lines \\]\n\nzcurses input targetwin \\[ param \\[ kparam \\[ mparam \\] \\] \\]\n\nzcurses mouse \\[ delay num | \\[+|\\-\\]motion \\]\n\nzcurses timeout targetwin intval\n\nzcurses querychar targetwin \\[ param \\]\n\nzcurses resize height width \\[ endwin | nosave | endwin\\_nosave \\]\n\nManipulate curses windows. All uses of this command should be bracketed by ‘zcurses init’ to initialise use of curses, and ‘zcurses end’ to end it; omitting ‘zcurses end’ can cause the terminal to be in an unwanted state.\n\nThe subcommand addwin creates a window with nlines lines and ncols columns. Its upper left corner will be placed at row begin\\_y and column begin\\_x of the screen. targetwin is a string and refers to the name of a window that is not currently assigned. Note in particular the curses convention that vertical values appear before horizontal values.\n\nIf addwin is given an existing window as the final argument, the new window is created as a subwindow of parentwin. This differs from an ordinary new window in that the memory of the window contents is shared with the parent’s memory. Subwindows must be deleted before their parent. Note that the coordinates of subwindows are relative to the screen, not the parent, as with other windows.\n\nUse the subcommand delwin to delete a window created with addwin. Note that end does _not_ implicitly delete windows, and that delwin does not erase the screen image of the window.\n\nThe window corresponding to the full visible screen is called stdscr; it always exists after ‘zcurses init’ and cannot be delete with delwin.\n\nThe subcommand refresh will refresh window targetwin; this is necessary to make any pending changes (such as characters you have prepared for output with char) visible on the screen. refresh without an argument causes the screen to be cleared and redrawn. If multiple windows are given, the screen is updated once at the end.\n\nThe subcommand touch marks the targetwins listed as changed. This is necessary before refreshing windows if a window that was in front of another window (which may be stdscr) is deleted.\n\nThe subcommand move moves the cursor position in targetwin to new coordinates new\\_y and new\\_x. Note that the subcommand string (but not the subcommand char) advances the cursor position over the characters added.\n\nThe subcommand clear erases the contents of targetwin. One (and no more than one) of three options may be specified. With the option redraw, in addition the next refresh of targetwin will cause the screen to be cleared and repainted. With the option eol, targetwin is only cleared to the end of the current cursor line. With the option bot, targetwin is cleared to the end of the window, i.e everything to the right and below the cursor is cleared.\n\nThe subcommand position writes various positions associated with targetwin into the array named array. These are, in order:\n\n\\-\n\nThe y and x coordinates of the cursor relative to the top left of targetwin\n\n\\-\n\nThe y and x coordinates of the top left of targetwin on the screen\n\n\\-\n\nThe size of targetwin in y and x dimensions.\n\nOutputting characters and strings are achieved by char and string respectively.\n\nTo draw a border around window targetwin, use border. Note that the border is not subsequently handled specially: in other words, the border is simply a set of characters output at the edge of the window. Hence it can be overwritten, can scroll off the window, etc.\n\nThe subcommand attr will set targetwin’s attributes or foreground/background color pair for any successive character output. Each attribute given on the line may be prepended by a + to set or a \\- to unset that attribute; + is assumed if absent. The attributes supported are blink, bold, dim, reverse, standout, and underline.\n\nEach fg\\_col/bg\\_col attribute (to be read as ‘fg\\_col on bg\\_col’) sets the foreground and background color for character output. The color default is sometimes available (in particular if the library is ncurses), specifying the foreground or background color with which the terminal started. The color pair default/default is always available. To use more than the 8 named colors (red, green, etc.) construct the fg\\_col/bg\\_col pairs where fg\\_col and bg\\_col are decimal integers, e.g 128/200. The maximum color value is 254 if the terminal supports 256 colors.\n\nbg overrides the color and other attributes of all characters in the window. Its usual use is to set the background initially, but it will overwrite the attributes of any characters at the time when it is called. In addition to the arguments allowed with attr, an argument @char specifies a character to be shown in otherwise blank areas of the window. Owing to limitations of curses this cannot be a multibyte character (use of ASCII characters only is recommended). As the specified set of attributes override the existing background, turning attributes off in the arguments is not useful, though this does not cause an error.\n\nThe subcommand scroll can be used with on or off to enabled or disable scrolling of a window when the cursor would otherwise move below the window due to typing or output. It can also be used with a positive or negative integer to scroll the window up or down the given number of lines without changing the current cursor position (which therefore appears to move in the opposite direction relative to the window). In the second case, if scrolling is off it is temporarily turned on to allow the window to be scrolled.\n\nThe subcommand input reads a single character from the window without echoing it back. If param is supplied the character is assigned to the parameter param, else it is assigned to the parameter REPLY.\n\nIf both param and kparam are supplied, the key is read in ‘keypad’ mode. In this mode special keys such as function keys and arrow keys return the name of the key in the parameter kparam. The key names are the macros defined in the curses.h or ncurses.h with the prefix ‘KEY\\_’ removed; see also the description of the parameter zcurses\\_keycodes below. Other keys cause a value to be set in param as before. On a successful return only one of param or kparam contains a non-empty string; the other is set to an empty string.\n\nIf mparam is also supplied, input attempts to handle mouse input. This is only available with the ncurses library; mouse handling can be detected by checking for the exit status of ‘zcurses mouse’ with no arguments. If a mouse button is clicked (or double- or triple-clicked, or pressed or released with a configurable delay from being clicked) then kparam is set to the string MOUSE, and mparam is set to an array consisting of the following elements:\n\n\\-\n\nAn identifier to discriminate different input devices; this is only rarely useful.\n\n\\-\n\nThe x, y and z coordinates of the mouse click relative to the full screen, as three elements in that order (i.e. the y coordinate is, unusually, after the x coordinate). The z coordinate is only available for a few unusual input devices and is otherwise set to zero.\n\n\\-\n\nAny events that occurred as separate items; usually there will be just one. An event consists of PRESSED, RELEASED, CLICKED, DOUBLE\\_CLICKED or TRIPLE\\_CLICKED followed immediately (in the same element) by the number of the button.\n\n\\-\n\nIf the shift key was pressed, the string SHIFT.\n\n\\-\n\nIf the control key was pressed, the string CTRL.\n\n\\-\n\nIf the alt key was pressed, the string ALT.\n\nNot all mouse events may be passed through to the terminal window; most terminal emulators handle some mouse events themselves. Note that the ncurses manual implies that using input both with and without mouse handling may cause the mouse cursor to appear and disappear.\n\nThe subcommand mouse can be used to configure the use of the mouse. There is no window argument; mouse options are global. ‘zcurses mouse’ with no arguments returns status 0 if mouse handling is possible, else status 1. Otherwise, the possible arguments (which may be combined on the same command line) are as follows. delay num sets the maximum delay in milliseconds between press and release events to be considered as a click; the value 0 disables click resolution, and the default is one sixth of a second. motion proceeded by an optional ‘+’ (the default) or \\- turns on or off reporting of mouse motion in addition to clicks, presses and releases, which are always reported. However, it appears reports for mouse motion are not currently implemented.\n\nThe subcommand timeout specifies a timeout value for input from targetwin. If intval is negative, ‘zcurses input’ waits indefinitely for a character to be typed; this is the default. If intval is zero, ‘zcurses input’ returns immediately; if there is typeahead it is returned, else no input is done and status 1 is returned. If intval is positive, ‘zcurses input’ waits intval milliseconds for input and if there is none at the end of that period returns status 1.\n\nThe subcommand querychar queries the character at the current cursor position. The return values are stored in the array named param if supplied, else in the array reply. The first value is the character (which may be a multibyte character if the system supports them); the second is the color pair in the usual fg\\_col/bg\\_col notation, or 0 if color is not supported. Any attributes other than color that apply to the character, as set with the subcommand attr, appear as additional elements.\n\nThe subcommand resize resizes stdscr and all windows to given dimensions (windows that stick out from the new dimensions are resized down). The underlying curses extension (resize\\_term call) can be unavailable. To verify, zeroes can be used for height and width. If the result of the subcommand is 0, resize\\_term is available (2 otherwise). Tests show that resizing can be normally accomplished by calling zcurses end and zcurses refresh. The resize subcommand is provided for versatility. Multiple system configurations have been checked and zcurses end and zcurses refresh are still needed for correct terminal state after resize. To invoke them with resize, use endwin argument. Using nosave argument will cause new terminal state to not be saved internally by zcurses. This is also provided for versatility and should normally be not needed.\n\n* * *\n\n### 22.9.2 Parameters\n\nZCURSES\\_COLORS\n\nReadonly integer. The maximum number of colors the terminal supports. This value is initialised by the curses library and is not available until the first time zcurses init is run.\n\nZCURSES\\_COLOR\\_PAIRS\n\nReadonly integer. The maximum number of color pairs fg\\_col/bg\\_col that may be defined in ‘zcurses attr’ commands; note this limit applies to all color pairs that have been used whether or not they are currently active. This value is initialised by the curses library and is not available until the first time zcurses init is run.\n\nzcurses\\_attrs\n\nReadonly array. The attributes supported by zsh/curses; available as soon as the module is loaded.\n\nzcurses\\_colors\n\nReadonly array. The colors supported by zsh/curses; available as soon as the module is loaded.\n\nzcurses\\_keycodes\n\nReadonly array. The values that may be returned in the second parameter supplied to ‘zcurses input’ in the order in which they are defined internally by curses. Not all function keys are listed, only F0; curses reserves space for F0 up to F63.\n\nzcurses\\_windows\n\nReadonly array. The current list of windows, i.e. all windows that have been created with ‘zcurses addwin’ and not removed with ‘zcurses delwin’.\n\n* * *\n\n## 22.10 The zsh/datetime Module\n\nThe zsh/datetime module makes available one builtin command:\n\nstrftime \\[ \\-s scalar | \\-n \\] format \\[ epochtime \\[ nanoseconds \\] \\]\n\nstrftime \\-r \\[ \\-q \\] \\[ \\-s scalar | \\-n \\] format timestring\n\nOutput the date in the format specified. With no epochtime, the current system date/time is used; optionally, epochtime may be used to specify the number of seconds since the epoch, and nanoseconds may additionally be used to specify the number of nanoseconds past the second (otherwise that number is assumed to be 0). See strftime(3) for details. The zsh extensions described in [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion) are also available.\n\n\\-n\n\nSuppress printing a newline after the formatted string.\n\n\\-q\n\nRun quietly; suppress printing of all error messages described below. Errors for invalid epochtime values are always printed.\n\n\\-r\n\nWith the option \\-r (reverse), use format to parse the input string timestring and output the number of seconds since the epoch at which the time occurred. The parsing is implemented by the system function strptime; see strptime(3). This means that zsh format extensions are not available, but for reverse lookup they are not required.\n\nIn most implementations of strftime any timezone in the timestring is ignored and the local timezone declared by the TZ environment variable is used; other parameters are set to zero if not present.\n\nIf timestring does not match format the command returns status 1 and prints an error message. If timestring matches format but not all characters in timestring were used, the conversion succeeds but also prints an error message.\n\nIf either of the system functions strptime or mktime is not available, status 2 is returned and an error message is printed.\n\n\\-s scalar\n\nAssign the date string (or epoch time in seconds if \\-r is given) to scalar instead of printing it.\n\nNote that depending on the system’s declared integral time type, strftime may produce incorrect results for epoch times greater than 2147483647 which corresponds to 2038-01-19 03:14:07 +0000.\n\nThe zsh/datetime module makes available several parameters; all are readonly:\n\nEPOCHREALTIME\n\nA floating point value representing the number of seconds since the epoch. The notional accuracy is to nanoseconds if the clock\\_gettime call is available and to microseconds otherwise, but in practice the range of double precision floating point and shell scheduling latencies may be significant effects.\n\nEPOCHSECONDS\n\nAn integer value representing the number of seconds since the epoch.\n\nepochtime\n\nAn array value containing the number of seconds since the epoch in the first element and the remainder of the time since the epoch in nanoseconds in the second element. To ensure the two elements are consistent the array should be copied or otherwise referenced as a single substitution before the values are used. The following idiom may be used:\n\nfor secs nsecs in $epochtime; do\n  ...\ndone\n\n* * *\n\n## 22.11 The zsh/db/gdbm Module\n\nThe zsh/db/gdbm module is used to create \"tied\" associative arrays that interface to database files. If the GDBM interface is not available, the builtins defined by this module will report an error. This module is also intended as a prototype for creating additional database interfaces, so the ztie builtin may move to a more generic module in the future.\n\nThe builtins in this module are:\n\nztie -d db/gdbm -f filename \\[ \\-r \\] arrayname\n\nOpen the GDBM database identified by filename and, if successful, create the associative array arrayname linked to the file. To create a local tied array, the parameter must first be declared, so commands similar to the following would be executed inside a function scope:\n\nlocal -A sampledb\nztie -d db/gdbm -f sample.gdbm sampledb\n\nThe \\-r option opens the database file for reading only, creating a parameter with the readonly attribute. Without this option, using ‘ztie’ on a file for which the user does not have write permission is an error. If writable, the database is opened synchronously so fields changed in arrayname are immediately written to filename.\n\nChanges to the file modes filename after it has been opened do not alter the state of arrayname, but ‘typeset -r arrayname’ works as expected.\n\nzuntie \\[ \\-u \\] arrayname ...\n\nClose the GDBM database associated with each arrayname and then unset the parameter. The \\-u option forces an unset of parameters made readonly with ‘ztie -r’.\n\nThis happens automatically if the parameter is explicitly unset or its local scope (function) ends. Note that a readonly parameter may not be explicitly unset, so the only way to unset a global parameter created with ‘ztie -r’ is to use ‘zuntie -u’.\n\nzgdbmpath parametername\n\nPut path to database file assigned to parametername into REPLY scalar.\n\nzgdbm\\_tied\n\nArray holding names of all tied parameters.\n\nThe fields of an associative array tied to GDBM are neither cached nor otherwise stored in memory, they are read from or written to the database on each reference. Thus, for example, the values in a readonly array may be changed by a second writer of the same database file.\n\n* * *\n\n## 22.12 The zsh/deltochar Module\n\nThe zsh/deltochar module makes available two ZLE functions:\n\ndelete-to-char\n\nRead a character from the keyboard, and delete from the cursor position up to and including the next (or, with repeat count n, the nth) instance of that character. Negative repeat counts mean delete backwards.\n\nzap-to-char\n\nThis behaves like delete-to-char, except that the final occurrence of the character itself is not deleted.\n\n* * *\n\n## 22.13 The zsh/example Module\n\nThe zsh/example module makes available one builtin command:\n\nexample \\[ \\-flags \\] \\[ args ... \\]\n\nDisplays the flags and arguments it is invoked with.\n\nThe purpose of the module is to serve as an example of how to write a module.\n\n* * *\n\n## 22.14 The zsh/files Module\n\nThe zsh/files module makes available some common commands for file manipulation as builtins; these commands are probably not needed for many normal situations but can be useful in emergency recovery situations with constrained resources. The commands do not implement all features now required by relevant standards committees.\n\nFor all commands, a variant beginning zf\\_ is also available and loaded automatically. Using the features capability of zmodload will let you load only those names you want. Note that it’s possible to load only the builtins with zsh-specific names using the following command:\n\nzmodload -m -F zsh/files b:zf\\_\\\\\\*\n\nThe commands loaded by default are:\n\nchgrp \\[ \\-hRs \\] group filename ...\n\nChanges group of files specified. This is equivalent to chown with a user-spec argument of ‘:group’.\n\nchmod \\[ \\-Rs \\] mode filename ...\n\nChanges mode of files specified.\n\nThe specified mode must be in octal.\n\nThe \\-R option causes chmod to recursively descend into directories, changing the mode of all files in the directory after changing the mode of the directory itself.\n\nThe \\-s option is a zsh extension to chmod functionality. It enables paranoid behaviour, intended to avoid security problems involving a chmod being tricked into affecting files other than the ones intended. It will refuse to follow symbolic links, so that (for example) ‘‘chmod 600 /tmp/foo/passwd’’ can’t accidentally chmod /etc/passwd if /tmp/foo happens to be a link to /etc. It will also check where it is after leaving directories, so that a recursive chmod of a deep directory tree can’t end up recursively chmoding /usr as a result of directories being moved up the tree.\n\nchown \\[ \\-hRs \\] user-spec filename ...\n\nChanges ownership and group of files specified.\n\nThe user-spec can be in four forms:\n\nuser\n\nchange owner to user; do not change group\n\nuser::\n\nchange owner to user; do not change group\n\nuser:\n\nchange owner to user; change group to user’s primary group\n\nuser:group\n\nchange owner to user; change group to group\n\n:group\n\ndo not change owner; change group to group\n\nIn each case, the ‘:’ may instead be a ‘.’. The rule is that if there is a ‘:’ then the separator is ‘:’, otherwise if there is a ‘.’ then the separator is ‘.’, otherwise there is no separator.\n\nEach of user and group may be either a username (or group name, as appropriate) or a decimal user ID (group ID). Interpretation as a name takes precedence, if there is an all-numeric username (or group name).\n\nIf the target is a symbolic link, the \\-h option causes chown to set the ownership of the link instead of its target.\n\nThe \\-R option causes chown to recursively descend into directories, changing the ownership of all files in the directory after changing the ownership of the directory itself.\n\nThe \\-s option is a zsh extension to chown functionality. It enables paranoid behaviour, intended to avoid security problems involving a chown being tricked into affecting files other than the ones intended. It will refuse to follow symbolic links, so that (for example) ‘‘chown luser /tmp/foo/passwd’’ can’t accidentally chown /etc/passwd if /tmp/foo happens to be a link to /etc. It will also check where it is after leaving directories, so that a recursive chown of a deep directory tree can’t end up recursively chowning /usr as a result of directories being moved up the tree.\n\nln \\[ \\-dfhins \\] filename dest\n\nln \\[ \\-dfhins \\] filename ... dir\n\nCreates hard (or, with \\-s, symbolic) links. In the first form, the specified destination is created, as a link to the specified filename. In the second form, each of the filenames is taken in turn, and linked to a pathname in the specified directory that has the same last pathname component.\n\nNormally, ln will not attempt to create hard links to directories. This check can be overridden using the \\-d option. Typically only the super-user can actually succeed in creating hard links to directories. This does not apply to symbolic links in any case.\n\nBy default, existing files cannot be replaced by links. The \\-i option causes the user to be queried about replacing existing files. The \\-f option causes existing files to be silently deleted, without querying. \\-f takes precedence.\n\nThe \\-h and \\-n options are identical and both exist for compatibility; either one indicates that if the target is a symlink then it should not be dereferenced. Typically this is used in combination with \\-sf so that if an existing link points to a directory then it will be removed, instead of followed. If this option is used with multiple filenames and the target is a symbolic link pointing to a directory then the result is an error.\n\nmkdir \\[ \\-p \\] \\[ \\-m mode \\] dir ...\n\nCreates directories. With the \\-p option, non-existing parent directories are first created if necessary, and there will be no complaint if the directory already exists. The \\-m option can be used to specify (in octal) a set of file permissions for the created directories, otherwise mode 777 modified by the current umask (see umask(2)) is used.\n\nmv \\[ \\-fi \\] filename dest\n\nmv \\[ \\-fi \\] filename ... dir\n\nMoves files. In the first form, the specified filename is moved to the specified destination. In the second form, each of the filenames is taken in turn, and moved to a pathname in the specified directory that has the same last pathname component.\n\nBy default, the user will be queried before replacing any file that the user cannot write to, but writable files will be silently removed. The \\-i option causes the user to be queried about replacing any existing files. The \\-f option causes any existing files to be silently deleted, without querying. \\-f takes precedence.\n\nNote that this mv will not move files across devices. Historical versions of mv, when actual renaming is impossible, fall back on copying and removing files; if this behaviour is desired, use cp and rm manually. This may change in a future version.\n\nrm \\[ \\-dfiRrs \\] filename ...\n\nRemoves files and directories specified.\n\nNormally, rm will not remove directories (except with the \\-R or \\-r options). The \\-d option causes rm to try removing directories with unlink (see unlink(2)), the same method used for files. Typically only the super-user can actually succeed in unlinking directories in this way. \\-d takes precedence over \\-R and \\-r.\n\nBy default, the user will be queried before removing any file that the user cannot write to, but writable files will be silently removed. The \\-i option causes the user to be queried about removing any files. The \\-f option causes files to be silently deleted, without querying, and suppresses all error indications. \\-f takes precedence.\n\nThe \\-R and \\-r options cause rm to recursively descend into directories, deleting all files in the directory before removing the directory with the rmdir system call (see rmdir(2)).\n\nThe \\-s option is a zsh extension to rm functionality. It enables paranoid behaviour, intended to avoid common security problems involving a root-run rm being tricked into removing files other than the ones intended. It will refuse to follow symbolic links, so that (for example) ‘‘rm /tmp/foo/passwd’’ can’t accidentally remove /etc/passwd if /tmp/foo happens to be a link to /etc. It will also check where it is after leaving directories, so that a recursive removal of a deep directory tree can’t end up recursively removing /usr as a result of directories being moved up the tree.\n\nrmdir dir ...\n\nRemoves empty directories specified.\n\nsync\n\nCalls the system call of the same name (see sync(2)), which flushes dirty buffers to disk. It might return before the I/O has actually been completed.\n\n* * *\n\n## 22.15 The zsh/langinfo Module\n\nThe zsh/langinfo module makes available one parameter:\n\nlanginfo\n\nAn associative array that maps langinfo elements to their values.\n\nYour implementation may support a number of the following keys:\n\nCODESET, D\\_T\\_FMT, D\\_FMT, T\\_FMT, RADIXCHAR, THOUSEP, YESEXPR, NOEXPR, CRNCYSTR, ABDAY\\_{1..7}, DAY\\_{1..7}, ABMON\\_{1..12}, MON\\_{1..12}, T\\_FMT\\_AMPM, AM\\_STR, PM\\_STR, ERA, ERA\\_D\\_FMT, ERA\\_D\\_T\\_FMT, ERA\\_T\\_FMT, ALT\\_DIGITS\n\n* * *\n\n## 22.16 The zsh/mapfile Module\n\nThe zsh/mapfile module provides one special associative array parameter of the same name.\n\nmapfile\n\nThis associative array takes as keys the names of files; the resulting value is the content of the file. The value is treated identically to any other text coming from a parameter. The value may also be assigned to, in which case the file in question is written (whether or not it originally existed); or an element may be unset, which will delete the file in question. For example, ‘vared ’mapfile\\[myfile\\]’’ works as expected, editing the file ‘myfile’.\n\nWhen the array is accessed as a whole, the keys are the names of files in the current directory, and the values are empty (to save a huge overhead in memory). Thus ${(k)mapfile} has the same effect as the glob operator \\*(D), since files beginning with a dot are not special. Care must be taken with expressions such as rm ${(k)mapfile}, which will delete every file in the current directory without the usual ‘rm \\*’ test.\n\nThe parameter mapfile may be made read-only; in that case, files referenced may not be written or deleted.\n\nA file may conveniently be read into an array as one line per element with the form ‘array\\=(\"${(f@)mapfile\\[filename\\]}\")’. The double quotes and the ‘@’ are necessary to prevent empty lines from being removed. Note that if the file ends with a newline, the shell will split on the final newline, generating an additional empty field; this can be suppressed by using ‘array\\=(\"${(f@)${mapfile\\[filename\\]%$’\\\\n’}}\")’.\n\n* * *\n\n### 22.16.1 Limitations\n\nAlthough reading and writing of the file in question is efficiently handled, zsh’s internal memory management may be arbitrarily baroque; however, mapfile is usually very much more efficient than anything involving a loop. Note in particular that the whole contents of the file will always reside physically in memory when accessed (possibly multiple times, due to standard parameter substitution operations). In particular, this means handling of sufficiently long files (greater than the machine’s swap space, or than the range of the pointer type) will be incorrect.\n\nNo errors are printed or flagged for non-existent, unreadable, or unwritable files, as the parameter mechanism is too low in the shell execution hierarchy to make this convenient.\n\nIt is unfortunate that the mechanism for loading modules does not yet allow the user to specify the name of the shell parameter to be given the special behaviour.\n\n* * *\n\n## 22.17 The zsh/mathfunc Module\n\nThe zsh/mathfunc module provides standard mathematical functions for use when evaluating mathematical formulae. The syntax agrees with normal C and FORTRAN conventions, for example,\n\nassigns the sine of 0.3 to the parameter f.\n\nMost functions take floating point arguments and return a floating point value. However, any necessary conversions from or to integer type will be performed automatically by the shell. Apart from atan with a second argument and the abs, int and float functions, all functions behave as noted in the manual page for the corresponding C function, except that any arguments out of range for the function in question will be detected by the shell and an error reported.\n\nThe following functions take a single floating point argument: acos, acosh, asin, asinh, atan, atanh, cbrt, ceil, cos, cosh, erf, erfc, exp, expm1, fabs, floor, gamma, j0, j1, lgamma, log, log10, log1p, log2, logb, sin, sinh, sqrt, tan, tanh, y0, y1. The atan function can optionally take a second argument, in which case it behaves like the C function atan2. The ilogb function takes a single floating point argument, but returns an integer.\n\nThe function signgam takes no arguments, and returns an integer, which is the C variable of the same name, as described in gamma(3). Note that it is therefore only useful immediately after a call to gamma or lgamma. Note also that ‘signgam()’ and ‘signgam’ are distinct expressions.\n\nThe functions min, max, and sum are defined not in this module but in the zmathfunc autoloadable function, described in [Mathematical Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Mathematical-Functions).\n\nThe following functions take two floating point arguments: copysign, fmod, hypot, nextafter.\n\nThe following take an integer first argument and a floating point second argument: jn, yn.\n\nThe following take a floating point first argument and an integer second argument: ldexp, scalb.\n\nThe function abs does not convert the type of its single argument; it returns the absolute value of either a floating point number or an integer. The functions float and int convert their arguments into a floating point or integer value (by truncation) respectively.\n\nNote that the C pow function is available in ordinary math evaluation as the ‘\\*\\*’ operator and is not provided here.\n\nThe function rand48 is available if your system’s mathematical library has the function erand48(3). It returns a pseudo-random floating point number between 0 and 1. It takes a single string optional argument.\n\nIf the argument is not present, the random number seed is initialised by three calls to the rand(3) function — this produces the same random numbers as the next three values of $RANDOM.\n\nIf the argument is present, it gives the name of a scalar parameter where the current random number seed will be stored. On the first call, the value must contain at least twelve hexadecimal digits (the remainder of the string is ignored), or the seed will be initialised in the same manner as for a call to rand48 with no argument. Subsequent calls to rand48(param) will then maintain the seed in the parameter param as a string of twelve hexadecimal digits, with no base signifier. The random number sequences for different parameters are completely independent, and are also independent from that used by calls to rand48 with no argument.\n\nFor example, consider\n\nprint $(( rand48(seed) ))\nprint $(( rand48() ))\nprint $(( rand48(seed) ))\n\nAssuming $seed does not exist, it will be initialised by the first call. In the second call, the default seed is initialised; note, however, that because of the properties of rand() there is a correlation between the seeds used for the two initialisations, so for more secure uses, you should generate your own 12-byte seed. The third call returns to the same sequence of random numbers used in the first call, unaffected by the intervening rand48().\n\n* * *\n\n## 22.18 The zsh/nearcolor Module\n\nThe zsh/nearcolor module replaces colours specified as hex triplets with the nearest colour in the 88 or 256 colour palettes that are widely used by terminal emulators. By default, 24-bit true colour escape codes are generated when colours are specified using hex triplets. These are not supported by all terminals. The purpose of this module is to make it easier to define colour preferences in a form that can work across a range of terminal emulators.\n\nAside from the default colour, the ANSI standard for terminal escape codes provides for eight colours. The bright attribute brings this to sixteen. These basic colours are commonly used in terminal applications due to being widely supported. Expanded 88 and 256 colour palettes are also common and, while the first sixteen colours vary somewhat between terminals and configurations, these add a generally consistent and predictable set of colours.\n\nIn order to use the zsh/nearcolor module, it only needs to be loaded. Thereafter, whenever a colour is specified using a hex triplet, it will be compared against each of the available colours and the closest will be selected. The first sixteen colours are never matched in this process due to being unpredictable.\n\nIt isn’t possible to reliably detect support for true colour in the terminal emulator. It is therefore recommended to be selective in loading the zsh/nearcolor module. For example, the following checks the COLORTERM environment variable:\n\n\\[\\[ $COLORTERM = \\*(24bit|truecolor)\\* \\]\\] || zmodload zsh/nearcolor\n\nNote that some terminals accept the true color escape codes but map them internally to a more limited palette in a similar manner to the zsh/nearcolor module.\n\n* * *\n\n## 22.19 The zsh/newuser Module\n\nThe zsh/newuser module is loaded at boot if it is available, the RCS option is set, and the PRIVILEGED option is not set (all three are true by default). This takes place immediately after commands in the global zshenv file (typically /etc/zshenv), if any, have been executed. If the module is not available it is silently ignored by the shell; the module may safely be removed from $MODULE\\_PATH by the administrator if it is not required.\n\nOn loading, the module tests if any of the start-up files .zshenv, .zprofile, .zshrc or .zlogin exist in the directory given by the environment variable ZDOTDIR, or the user’s home directory if that is not set. The test is not performed and the module halts processing if the shell was in an emulation mode (i.e. had been invoked as some other shell than zsh).\n\nIf none of the start-up files were found, the module then looks for the file newuser first in a sitewide directory, usually the parent directory of the site-functions directory, and if that is not found the module searches in a version-specific directory, usually the parent of the functions directory containing version-specific functions. (These directories can be configured when zsh is built using the –enable-site-scriptdir=dir and –enable-scriptdir=dir flags to configure, respectively; the defaults are prefix/share/zsh and prefix/share/zsh/$ZSH\\_VERSION where the default prefix is /usr/local.)\n\nIf the file newuser is found, it is then sourced in the same manner as a start-up file. The file is expected to contain code to install start-up files for the user, however any valid shell code will be executed.\n\nThe zsh/newuser module is then unconditionally unloaded.\n\nNote that it is possible to achieve exactly the same effect as the zsh/newuser module by adding code to /etc/zshenv. The module exists simply to allow the shell to make arrangements for new users without the need for intervention by package maintainers and system administrators.\n\nThe script supplied with the module invokes the shell function zsh-newuser-install. This may be invoked directly by the user even if the zsh/newuser module is disabled. Note, however, that if the module is not installed the function will not be installed either. The function is documented in [User Configuration Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#User-Configuration-Functions).\n\n* * *\n\n## 22.20 The zsh/parameter Module\n\nThe zsh/parameter module gives access to some of the internal hash tables used by the shell by defining some special parameters.\n\noptions\n\nThe keys for this associative array are the names of the options that can be set and unset using the setopt and unsetopt builtins. The value of each key is either the string on if the option is currently set, or the string off if the option is unset. Setting a key to one of these strings is like setting or unsetting the option, respectively. Unsetting a key in this array is like setting it to the value off.\n\ncommands\n\nThis array gives access to the command hash table. The keys are the names of external commands, the values are the pathnames of the files that would be executed when the command would be invoked. Setting a key in this array defines a new entry in this table in the same way as with the hash builtin. Unsetting a key as in ‘unset \"commands\\[foo\\]\"’ removes the entry for the given key from the command hash table.\n\nfunctions\n\nThis associative array maps names of enabled functions to their definitions. Setting a key in it is like defining a function with the name given by the key and the body given by the value. Unsetting a key removes the definition for the function named by the key.\n\ndis\\_functions\n\nLike functions but for disabled functions.\n\nfunctions\\_source\n\nThis readonly associative array maps names of enabled functions to the name of the file containing the source of the function.\n\nFor an autoloaded function that has already been loaded, or marked for autoload with an absolute path, or that has had its path resolved with ‘functions -r’, this is the file found for autoloading, resolved to an absolute path.\n\nFor a function defined within the body of a script or sourced file, this is the name of that file. In this case, this is the exact path originally used to that file, which may be a relative path.\n\nFor any other function, including any defined at an interactive prompt or an autoload function whose path has not yet been resolved, this is the empty string. However, the hash element is reported as defined just so long as the function is present: the keys to this hash are the same as those to $functions.\n\ndis\\_functions\\_source\n\nLike functions\\_source but for disabled functions.\n\nbuiltins\n\nThis associative array gives information about the builtin commands currently enabled. The keys are the names of the builtin commands and the values are either ‘undefined’ for builtin commands that will automatically be loaded from a module if invoked or ‘defined’ for builtin commands that are already loaded.\n\ndis\\_builtins\n\nLike builtins but for disabled builtin commands.\n\nreswords\n\nThis array contains the enabled reserved words.\n\ndis\\_reswords\n\nLike reswords but for disabled reserved words.\n\npatchars\n\nThis array contains the enabled pattern characters.\n\ndis\\_patchars\n\nLike patchars but for disabled pattern characters.\n\naliases\n\nThis maps the names of the regular aliases currently enabled to their expansions.\n\ndis\\_aliases\n\nLike aliases but for disabled regular aliases.\n\ngaliases\n\nLike aliases, but for global aliases.\n\ndis\\_galiases\n\nLike galiases but for disabled global aliases.\n\nsaliases\n\nLike raliases, but for suffix aliases.\n\ndis\\_saliases\n\nLike saliases but for disabled suffix aliases.\n\nparameters\n\nThe keys in this associative array are the names of the parameters currently defined. The values are strings describing the type of the parameter, in the same format used by the t parameter flag, see [Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) . Setting or unsetting keys in this array is not possible.\n\nmodules\n\nAn associative array giving information about modules. The keys are the names of the modules loaded, registered to be autoloaded, or aliased. The value says which state the named module is in and is one of the strings ‘loaded’, ‘autoloaded’, or ‘alias:name’, where name is the name the module is aliased to.\n\nSetting or unsetting keys in this array is not possible.\n\ndirstack\n\nA normal array holding the elements of the directory stack. Note that the output of the dirs builtin command includes one more directory, the current working directory.\n\nhistory\n\nThis associative array maps history event numbers to the full history lines. Although it is presented as an associative array, the array of all values (${history\\[@\\]}) is guaranteed to be returned in order from most recent to oldest history event, that is, by decreasing history event number.\n\nhistorywords\n\nA special array containing the words stored in the history. These also appear in most to least recent order.\n\njobdirs\n\nThis associative array maps job numbers to the directories from which the job was started (which may not be the current directory of the job).\n\nThe keys of the associative arrays are usually valid job numbers, and these are the values output with, for example, ${(k)jobdirs}. Non-numeric job references may be used when looking up a value; for example, ${jobdirs\\[%+\\]} refers to the current job.\n\nSee the jobs builtin for how job information is provided in a subshell.\n\njobtexts\n\nThis associative array maps job numbers to the texts of the command lines that were used to start the jobs.\n\nHandling of the keys of the associative array is as described for jobdirs above.\n\nSee the jobs builtin for how job information is provided in a subshell.\n\njobstates\n\nThis associative array gives information about the states of the jobs currently known. The keys are the job numbers and the values are strings of the form ‘job-state:mark:pid\\=state...’. The job-state gives the state the whole job is currently in, one of ‘running’, ‘suspended’, or ‘done’. The mark is ‘+’ for the current job, ‘\\-’ for the previous job and empty otherwise. This is followed by one ‘:pid\\=state’ for every process in the job. The pids are, of course, the process IDs and the state describes the state of that process.\n\nHandling of the keys of the associative array is as described for jobdirs above.\n\nSee the jobs builtin for how job information is provided in a subshell.\n\nnameddirs\n\nThis associative array maps the names of named directories to the pathnames they stand for.\n\nuserdirs\n\nThis associative array maps user names to the pathnames of their home directories.\n\nusergroups\n\nThis associative array maps names of system groups of which the current user is a member to the corresponding group identifiers. The contents are the same as the groups output by the id command.\n\nfuncfiletrace\n\nThis array contains the absolute line numbers and corresponding file names for the point where the current function, sourced file, or (if EVAL\\_LINENO is set) eval command was called. The array is of the same length as funcsourcetrace and functrace, but differs from funcsourcetrace in that the line and file are the point of call, not the point of definition, and differs from functrace in that all values are absolute line numbers in files, rather than relative to the start of a function, if any.\n\nfuncsourcetrace\n\nThis array contains the file names and line numbers of the points where the functions, sourced files, and (if EVAL\\_LINENO is set) eval commands currently being executed were defined. The line number is the line where the ‘function name’ or ‘name ()’ started. In the case of an autoloaded function the line number is reported as zero. The format of each element is filename:lineno.\n\nFor functions autoloaded from a file in native zsh format, where only the body of the function occurs in the file, or for files that have been executed by the source or ‘.’ builtins, the trace information is shown as filename:0, since the entire file is the definition. The source file name is resolved to an absolute path when the function is loaded or the path to it otherwise resolved.\n\nMost users will be interested in the information in the funcfiletrace array instead.\n\nfuncstack\n\nThis array contains the names of the functions, sourced files, and (if EVAL\\_LINENO is set) eval commands. currently being executed. The first element is the name of the function using the parameter.\n\nThe standard shell array zsh\\_eval\\_context can be used to determine the type of shell construct being executed at each depth: note, however, that is in the opposite order, with the most recent item last, and it is more detailed, for example including an entry for toplevel, the main shell code being executed either interactively or from a script, which is not present in $funcstack.\n\nfunctrace\n\nThis array contains the names and line numbers of the callers corresponding to the functions currently being executed. The format of each element is name:lineno. Callers are also shown for sourced files; the caller is the point where the source or ‘.’ command was executed.\n\n* * *\n\n## 22.21 The zsh/pcre Module\n\nThe zsh/pcre module makes some commands available as builtins:\n\npcre\\_compile \\[ \\-aimxs \\] PCRE\n\nCompiles a perl-compatible regular expression.\n\nOption \\-a will force the pattern to be anchored. Option \\-i will compile a case-insensitive pattern. Option \\-m will compile a multi-line pattern; that is, ^ and $ will match newlines within the pattern. Option \\-x will compile an extended pattern, wherein whitespace and # comments are ignored. Option \\-s makes the dot metacharacter match all characters, including those that indicate newline.\n\npcre\\_study\n\nStudies the previously-compiled PCRE which may result in faster matching.\n\npcre\\_match \\[ \\-v var \\] \\[ \\-a arr \\] \\[ \\-n offset \\] \\[ \\-b \\] string\n\nReturns successfully if string matches the previously-compiled PCRE.\n\nUpon successful match, if the expression captures substrings within parentheses, pcre\\_match will set the array match to those substrings, unless the \\-a option is given, in which case it will set the array arr. Similarly, the variable MATCH will be set to the entire matched portion of the string, unless the \\-v option is given, in which case the variable var will be set. No variables are altered if there is no successful match. A \\-n option starts searching for a match from the byte offset position in string. If the \\-b option is given, the variable ZPCRE\\_OP will be set to an offset pair string, representing the byte offset positions of the entire matched portion within the string. For example, a ZPCRE\\_OP set to \"32 45\" indicates that the matched portion began on byte offset 32 and ended on byte offset 44. Here, byte offset position 45 is the position directly after the matched portion. Keep in mind that the byte position isn’t necessarily the same as the character position when UTF-8 characters are involved. Consequently, the byte offset positions are only to be relied on in the context of using them for subsequent searches on string, using an offset position as an argument to the \\-n option. This is mostly used to implement the \"find all non-overlapping matches\" functionality.\n\nA simple example of \"find all non-overlapping matches\":\n\nstring=\"The following zip codes: 78884 90210 99513\"\npcre\\_compile -m \"\\\\d{5}\"\naccum=()\npcre\\_match -b -- $string\nwhile \\[\\[ $? -eq 0 \\]\\] do\n    b=($=ZPCRE\\_OP)\n    accum+=$MATCH\n    pcre\\_match -b -n $b\\[2\\] -- $string\ndone\nprint -l $accum\n\nThe zsh/pcre module makes available the following test condition:\n\nexpr \\-pcre-match pcre\n\nMatches a string against a perl-compatible regular expression.\n\nFor example,\n\n\\[\\[ \"$text\" -pcre-match ^d+$ \\]\\] &&\nprint text variable contains only \"d's\".\n\nIf the REMATCH\\_PCRE option is set, the \\=~ operator is equivalent to \\-pcre-match, and the NO\\_CASE\\_MATCH option may be used. Note that NO\\_CASE\\_MATCH never applies to the pcre\\_match builtin, instead use the \\-i switch of pcre\\_compile.\n\n* * *\n\n## 22.22 The zsh/param/private Module\n\nThe zsh/param/private module is used to create parameters whose scope is limited to the current function body, and _not_ to other functions called by the current function.\n\nThis module provides a single autoloaded builtin:\n\nprivate \\[ {+|\\-}AHUahlmrtux \\] \\[ {+|\\-}EFLRZi \\[ n \\] \\] \\[ name\\[\\=value\\] ... \\]\n\nThe private builtin accepts all the same options and arguments as local ([Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)) except for the ‘\\-T’ option. Tied parameters may not be made private.\n\nThe ‘\\-p’ option is presently a no-op because the state of private parameters cannot reliably be reloaded. This also applies to printing private parameters with ‘typeset -p’.\n\nIf used at the top level (outside a function scope), private creates a normal parameter in the same manner as declare or typeset. A warning about this is printed if WARN\\_CREATE\\_GLOBAL is set ([Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Options)). Used inside a function scope, private creates a local parameter similar to one declared with local, except having special properties noted below.\n\nSpecial parameters which expose or manipulate internal shell state, such as ARGC, argv, COLUMNS, LINES, UID, EUID, IFS, PROMPT, RANDOM, SECONDS, etc., cannot be made private unless the ‘\\-h’ option is used to hide the special meaning of the parameter. This may change in the future.\n\nAs with other typeset equivalents, private is both a builtin and a reserved word, so arrays may be assigned with parenthesized word list name\\=(value...) syntax. However, the reserved word ‘private’ is not available until zsh/param/private is loaded, so care must be taken with order of execution and parsing for function definitions which use private. To compensate for this, the module also adds the option ‘\\-P’ to the ‘local’ builtin to declare private parameters.\n\nFor example, this construction fails if zsh/param/private has not yet been loaded when ‘bad\\_declaration’ is defined:\n\nbad\\_declaration() {\n  zmodload zsh/param/private\n  private array=( one two three )\n}\n\nThis construction works because local is already a keyword, and the module is loaded before the statement is executed:\n\ngood\\_declaration() {\n  zmodload zsh/param/private\n  local -P array=( one two three )\n}\n\nThe following is usable in scripts but may have trouble with autoload:\n\nzmodload zsh/param/private\niffy\\_declaration() {\n  private array=( one two three )\n}\n\nThe private builtin may always be used with scalar assignments and for declarations without assignments.\n\nParameters declared with private have the following properties:\n\n*   Within the function body where it is declared, the parameter behaves as a local, except as noted above for tied or special parameters.\n*   The type of a parameter declared private cannot be changed in the scope where it was declared, even if the parameter is unset. Thus an array cannot be assigned to a private scalar, etc.\n*   Within any other function called by the declaring function, the private parameter does _NOT_ hide other parameters of the same name, so for example a global parameter of the same name is visible and may be assigned or unset. This includes calls to anonymous functions, although that may also change in the future. However, the private name may not be created outside the local scope when it was not previously declared.\n*   An exported private remains in the environment of inner scopes but appears unset for the current shell in those scopes. Generally, exporting private parameters should be avoided.\n\nNote that this differs from the static scope defined by compiled languages derived from C, in that the a new call to the same function creates a new scope, i.e., the parameter is still associated with the call stack rather than with the function definition. It differs from ksh ‘typeset -S’ because the syntax used to define the function has no bearing on whether the parameter scope is respected.\n\n* * *\n\n## 22.23 The zsh/regex Module\n\nThe zsh/regex module makes available the following test condition:\n\nexpr \\-regex-match regex\n\nMatches a string against a POSIX extended regular expression. On successful match, matched portion of the string will normally be placed in the MATCH variable. If there are any capturing parentheses within the regex, then the match array variable will contain those. If the match is not successful, then the variables will not be altered.\n\nFor example,\n\n\\[\\[ alphabetical -regex-match ^a(\\[^a\\]+)a(\\[^a\\]+)a \\]\\] &&\nprint -l $MATCH X $match\n\nIf the option REMATCH\\_PCRE is not set, then the \\=~ operator will automatically load this module as needed and will invoke the \\-regex-match operator.\n\nIf BASH\\_REMATCH is set, then the array BASH\\_REMATCH will be set instead of MATCH and match.\n\nNote that the zsh/regex module logic relies on the host system. The same expr and regex pair could produce different results on different platforms if a regex with non-standard syntax is given.\n\nFor example, no syntax for matching a word boundary is defined in the POSIX extended regular expression standard. GNU libc and BSD libc both provide such syntaxes as extensions (\\\\b and \\[\\[:<:\\]\\]/\\[\\[:>:\\]\\] respectively), but neither of these syntaxes is supported by both of these implementations.\n\nRefer to the regcomp(3) and re\\_format(7) manual pages on your system for locally-supported syntax.\n\n* * *\n\n## 22.24 The zsh/sched Module\n\nThe zsh/sched module makes available one builtin command and one parameter.\n\nsched \\[\\-o\\] \\[+\\]hh:mm\\[:ss\\] command ...\n\nsched \\[\\-o\\] \\[+\\]seconds command ...\n\nsched \\[ \\-item \\]\n\nMake an entry in the scheduled list of commands to execute. The time may be specified in either absolute or relative time, and either as hours, minutes and (optionally) seconds separated by a colon, or seconds alone. An absolute number of seconds indicates the time since the epoch (1970/01/01 00:00); this is useful in combination with the features in the zsh/datetime module, see [The zsh/datetime Module](#The-zsh_002fdatetime-Module).\n\nWith no arguments, prints the list of scheduled commands. If the scheduled command has the \\-o flag set, this is shown at the start of the command.\n\nWith the argument ‘\\-item’, removes the given item from the list. The numbering of the list is continuous and entries are in time order, so the numbering can change when entries are added or deleted.\n\nCommands are executed either immediately before a prompt, or while the shell’s line editor is waiting for input. In the latter case it is useful to be able to produce output that does not interfere with the line being edited. Providing the option \\-o causes the shell to clear the command line before the event and redraw it afterwards. This should be used with any scheduled event that produces visible output to the terminal; it is not needed, for example, with output that updates a terminal emulator’s title bar.\n\nTo effect changes to the editor buffer when an event executes, use the ‘zle’ command with no arguments to test whether the editor is active, and if it is, then use ‘zle widget’ to access the editor via the named widget.\n\nThe sched builtin is not made available by default when the shell starts in a mode emulating another shell. It can be made available with the command ‘zmodload -F zsh/sched b:sched’.\n\nzsh\\_scheduled\\_events\n\nA readonly array corresponding to the events scheduled by the sched builtin. The indices of the array correspond to the numbers shown when sched is run with no arguments (provided that the KSH\\_ARRAYS option is not set). The value of the array consists of the scheduled time in seconds since the epoch (see [The zsh/datetime Module](#The-zsh_002fdatetime-Module) for facilities for using this number), followed by a colon, followed by any options (which may be empty but will be preceded by a ‘\\-’ otherwise), followed by a colon, followed by the command to be executed.\n\nThe sched builtin should be used for manipulating the events. Note that this will have an immediate effect on the contents of the array, so that indices may become invalid.\n\n* * *\n\n## 22.25 The zsh/net/socket Module\n\nThe zsh/net/socket module makes available one builtin command:\n\nzsocket \\[ \\-altv \\] \\[ \\-d fd \\] \\[ args \\]\n\nzsocket is implemented as a builtin to allow full use of shell command line editing, file I/O, and job control mechanisms.\n\n* * *\n\n### 22.25.1 Outbound Connections\n\nzsocket \\[ \\-v \\] \\[ \\-d fd \\] filename\n\nOpen a new Unix domain connection to filename. The shell parameter REPLY will be set to the file descriptor associated with that connection. Currently, only stream connections are supported.\n\nIf \\-d is specified, its argument will be taken as the target file descriptor for the connection.\n\nIn order to elicit more verbose output, use \\-v.\n\nFile descriptors can be closed with normal shell syntax when no longer needed, for example:\n\n* * *\n\n### 22.25.2 Inbound Connections\n\nzsocket \\-l \\[ \\-v \\] \\[ \\-d fd \\] filename\n\nzsocket -l will open a socket listening on filename. The shell parameter REPLY will be set to the file descriptor associated with that listener. The file descriptor remains open in subshells and forked external executables.\n\nIf \\-d is specified, its argument will be taken as the target file descriptor for the connection.\n\nIn order to elicit more verbose output, use \\-v.\n\nzsocket \\-a \\[ \\-tv \\] \\[ \\-d targetfd \\] listenfd\n\nzsocket -a will accept an incoming connection to the socket associated with listenfd. The shell parameter REPLY will be set to the file descriptor associated with the inbound connection. The file descriptor remains open in subshells and forked external executables.\n\nIf \\-d is specified, its argument will be taken as the target file descriptor for the connection.\n\nIf \\-t is specified, zsocket will return if no incoming connection is pending. Otherwise it will wait for one.\n\nIn order to elicit more verbose output, use \\-v.\n\n* * *\n\n## 22.26 The zsh/stat Module\n\nThe zsh/stat module makes available one builtin command under two possible names:\n\nzstat \\[ \\-gnNolLtTrs \\] \\[ \\-f fd \\] \\[ \\-H hash \\] \\[ \\-A array \\] \\[ \\-F fmt \\]\n\n      \\[ +element \\] \\[ file ... \\]\n\nstat ...\n\nThe command acts as a front end to the stat system call (see stat(2)). The same command is provided with two names; as the name stat is often used by an external command it is recommended that only the zstat form of the command is used. This can be arranged by loading the module with the command ‘zmodload -F zsh/stat b:zstat’.\n\nIf the stat call fails, the appropriate system error message printed and status 1 is returned. The fields of struct stat give information about the files provided as arguments to the command. In addition to those available from the stat call, an extra element ‘link’ is provided. These elements are:\n\ndevice\n\nThe number of the device on which the file resides.\n\ninode\n\nThe unique number of the file on this device (‘_inode_’ number).\n\nmode\n\nThe mode of the file; that is, the file’s type and access permissions. With the \\-s option, this will be returned as a string corresponding to the first column in the display of the ls -l command.\n\nnlink\n\nThe number of hard links to the file.\n\nuid\n\nThe user ID of the owner of the file. With the \\-s option, this is displayed as a user name.\n\ngid\n\nThe group ID of the file. With the \\-s option, this is displayed as a group name.\n\nrdev\n\nThe raw device number. This is only useful for special devices.\n\nsize\n\nThe size of the file in bytes.\n\natime\n\nmtime\n\nctime\n\nThe last access, modification and inode change times of the file, respectively, as the number of seconds since midnight GMT on 1st January, 1970. With the \\-s option, these are printed as strings for the local time zone; the format can be altered with the \\-F option, and with the \\-g option the times are in GMT.\n\nblksize\n\nThe number of bytes in one allocation block on the device on which the file resides.\n\nblock\n\nThe number of disk blocks used by the file.\n\nlink\n\nIf the file is a link and the \\-L option is in effect, this contains the name of the file linked to, otherwise it is empty. Note that if this element is selected (‘‘zstat +link’’) then the \\-L option is automatically used.\n\nA particular element may be selected by including its name preceded by a ‘+’ in the option list; only one element is allowed. The element may be shortened to any unique set of leading characters. Otherwise, all elements will be shown for all files.\n\nOptions:\n\n\\-A array\n\nInstead of displaying the results on standard output, assign them to an array, one struct stat element per array element for each file in order. In this case neither the name of the element nor the name of the files appears in array unless the \\-t or \\-n options were given, respectively. If \\-t is given, the element name appears as a prefix to the appropriate array element; if \\-n is given, the file name appears as a separate array element preceding all the others. Other formatting options are respected.\n\n\\-H hash\n\nSimilar to \\-A, but instead assign the values to hash. The keys are the elements listed above. If the \\-n option is provided then the name of the file is included in the hash with key name.\n\n\\-f fd\n\nUse the file on file descriptor fd instead of named files; no list of file names is allowed in this case.\n\n\\-F fmt\n\nSupplies a strftime (see strftime(3)) string for the formatting of the time elements. The format string supports all of the zsh extensions described in [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion). In particular, \\-F %s.%N can be used to show timestamps with nanosecond precision if supported by the system. The \\-s option is implied.\n\n\\-g\n\nShow the time elements in the GMT time zone. The \\-s option is implied.\n\n\\-l\n\nList the names of the type elements (to standard output or an array as appropriate) and return immediately; arguments, and options other than \\-A, are ignored.\n\n\\-L\n\nPerform an lstat (see lstat(2)) rather than a stat system call. In this case, if the file is a link, information about the link itself rather than the target file is returned. This option is required to make the link element useful. It’s important to note that this is the exact opposite from ls(1), etc.\n\n\\-n\n\nAlways show the names of files. Usually these are only shown when output is to standard output and there is more than one file in the list.\n\n\\-N\n\nNever show the names of files.\n\n\\-o\n\nIf a raw file mode is printed, show it in octal, which is more useful for human consumption than the default of decimal. A leading zero will be printed in this case. Note that this does not affect whether a raw or formatted file mode is shown, which is controlled by the \\-r and \\-s options, nor whether a mode is shown at all.\n\n\\-r\n\nPrint raw data (the default format) alongside string data (the \\-s format); the string data appears in parentheses after the raw data.\n\n\\-s\n\nPrint mode, uid, gid and the three time elements as strings instead of numbers. In each case the format is like that of ls -l.\n\n\\-t\n\nAlways show the type names for the elements of struct stat. Usually these are only shown when output is to standard output and no individual element has been selected.\n\n\\-T\n\nNever show the type names of the struct stat elements.\n\n* * *\n\n## 22.27 The zsh/system Module\n\nThe zsh/system module makes available various builtin commands and parameters.\n\n* * *\n\n### 22.27.1 Builtins\n\nsyserror \\[ \\-e errvar \\] \\[ \\-p prefix \\] \\[ errno | errname \\]\n\nThis command prints out the error message associated with errno, a system error number, followed by a newline to standard error.\n\nInstead of the error number, a name errname, for example ENOENT, may be used. The set of names is the same as the contents of the array errnos, see below.\n\nIf the string prefix is given, it is printed in front of the error message, with no intervening space.\n\nIf errvar is supplied, the entire message, without a newline, is assigned to the parameter names errvar and nothing is output.\n\nA return status of 0 indicates the message was successfully printed (although it may not be useful if the error number was out of the system’s range), a return status of 1 indicates an error in the parameters, and a return status of 2 indicates the error name was not recognised (no message is printed for this).\n\nsysopen \\[ \\-arw \\] \\[ \\-m permissions \\] \\[ \\-o options \\]\n\n        \\-u fd file\n\nThis command opens a file. The \\-r, \\-w and \\-a flags indicate whether the file should be opened for reading, writing and appending, respectively. The \\-m option allows the initial permissions to use when creating a file to be specified in octal form. The file descriptor is specified with \\-u. Either an explicit file descriptor in the range 0 to 9 can be specified or a variable name can be given to which the file descriptor number will be assigned.\n\nThe \\-o option allows various system specific options to be specified as a comma-separated list. The following is a list of possible options. Note that, depending on the system, some may not be available.\n\ncloexec\n\nmark file to be closed when other programs are executed (else the file descriptor remains open in subshells and forked external executables)\n\ncreate\n\ncreat\n\ncreate file if it does not exist\n\nexcl\n\ncreate file, error if it already exists\n\nnoatime\n\nsuppress updating of the file atime\n\nnofollow\n\nfail if file is a symbolic link\n\nnonblock\n\nthe file is opened in nonblocking mode\n\nsync\n\nrequest that writes wait until data has been physically written\n\ntruncate\n\ntrunc\n\ntruncate file to size 0\n\nTo close the file, use one of the following:\n\nexec {fd}<&-\nexec {fd}>&-\n\nsysread \\[ \\-c countvar \\] \\[ \\-i infd \\] \\[ \\-o outfd \\]\n\n        \\[ \\-s bufsize \\] \\[ \\-t timeout \\] \\[ param \\]\n\nPerform a single system read from file descriptor infd, or zero if that is not given. The result of the read is stored in param or REPLY if that is not given. If countvar is given, the number of bytes read is assigned to the parameter named by countvar.\n\nThe maximum number of bytes read is bufsize or 8192 if that is not given, however the command returns as soon as any number of bytes was successfully read.\n\nIf timeout is given, it specifies a timeout in seconds, which may be zero to poll the file descriptor. This is handled by the poll system call if available, otherwise the select system call if available.\n\nIf outfd is given, an attempt is made to write all the bytes just read to the file descriptor outfd. If this fails, because of a system error other than EINTR or because of an internal zsh error during an interrupt, the bytes read but not written are stored in the parameter named by param if supplied (no default is used in this case), and the number of bytes read but not written is stored in the parameter named by countvar if that is supplied. If it was successful, countvar contains the full number of bytes transferred, as usual, and param is not set.\n\nThe error EINTR (interrupted system call) is handled internally so that shell interrupts are transparent to the caller. Any other error causes a return.\n\nThe possible return statuses are\n\n0\n\nAt least one byte of data was successfully read and, if appropriate, written.\n\n1\n\nThere was an error in the parameters to the command. This is the only error for which a message is printed to standard error.\n\n2\n\nThere was an error on the read, or on polling the input file descriptor for a timeout. The parameter ERRNO gives the error.\n\n3\n\nData were successfully read, but there was an error writing them to outfd. The parameter ERRNO gives the error.\n\n4\n\nThe attempt to read timed out. Note this does not set ERRNO as this is not a system error.\n\n5\n\nNo system error occurred, but zero bytes were read. This usually indicates end of file. The parameters are set according to the usual rules; no write to outfd is attempted.\n\nsysseek \\[ \\-u fd \\] \\[ \\-w start|end|current \\] offset\n\nThe current file position at which future reads and writes will take place is adjusted to the specified byte offset. The offset is evaluated as a math expression. The \\-u option allows the file descriptor to be specified. By default the offset is specified relative to the start or the file but, with the \\-w option, it is possible to specify that the offset should be relative to the current position or the end of the file.\n\nsyswrite \\[ \\-c countvar \\] \\[ \\-o outfd \\] data\n\nThe data (a single string of bytes) are written to the file descriptor outfd, or 1 if that is not given, using the write system call. Multiple write operations may be used if the first does not write all the data.\n\nIf countvar is given, the number of byte written is stored in the parameter named by countvar; this may not be the full length of data if an error occurred.\n\nThe error EINTR (interrupted system call) is handled internally by retrying; otherwise an error causes the command to return. For example, if the file descriptor is set to non-blocking output, an error EAGAIN (on some systems, EWOULDBLOCK) may result in the command returning early.\n\nThe return status may be 0 for success, 1 for an error in the parameters to the command, or 2 for an error on the write; no error message is printed in the last case, but the parameter ERRNO will reflect the error that occurred.\n\nzsystem flock \\[ \\-t timeout \\] \\[ \\-i interval \\] \\[ \\-f var \\] \\[\\-er\\] file\n\nzsystem flock -u fd\\_expr\n\nThe builtin zsystem’s subcommand flock performs advisory file locking (via the fcntl(2) system call) over the entire contents of the given file. This form of locking requires the processes accessing the file to cooperate; its most obvious use is between two instances of the shell itself.\n\nIn the first form the named file, which must already exist, is locked by opening a file descriptor to the file and applying a lock to the file descriptor. The lock terminates when the shell process that created the lock exits; it is therefore often convenient to create file locks within subshells, since the lock is automatically released when the subshell exits. Note that use of the print builtin with the \\-u option will, as a side effect, release the lock, as will redirection to the file in the shell holding the lock. To work around this use a subshell, e.g. ‘(print message) >> file’. Status 0 is returned if the lock succeeds, else status 1.\n\nIn the second form the file descriptor given by the arithmetic expression fd\\_expr is closed, releasing a lock. The file descriptor can be queried by using the ‘\\-f var’ form during the lock; on a successful lock, the shell variable var is set to the file descriptor used for locking. The lock will be released if the file descriptor is closed by any other means, for example using ‘exec {var}>&-’; however, the form described here performs a safety check that the file descriptor is in use for file locking.\n\nBy default the shell waits indefinitely for the lock to succeed. The option \\-t timeout specifies a timeout for the lock in seconds; fractional seconds are allowed. During this period, the shell will attempt to lock the file every interval seconds if the \\-i interval option is given, otherwise once a second. (This interval is shortened before the last attempt if needed, so that the shell waits only until the timeout and not longer.) If the attempt times out, status 2 is returned.\n\n(Note: timeout is limited to 2^30-1 seconds (about 34 years), and interval to 0.999 \\* LONG\\_MAX microseconds (only about 35 minutes on 32-bit systems).)\n\nIf the option \\-e is given, the file descriptor for the lock is preserved when the shell uses exec to start a new process; otherwise it is closed at that point and the lock released.\n\nIf the option \\-r is given, the lock is only for reading, otherwise it is for reading and writing. The file descriptor is opened accordingly.\n\nzsystem supports subcommand\n\nThe builtin zsystem’s subcommand supports tests whether a given subcommand is supported. It returns status 0 if so, else status 1. It operates silently unless there was a syntax error (i.e. the wrong number of arguments), in which case status 255 is returned. Status 1 can indicate one of two things: subcommand is known but not supported by the current operating system, or subcommand is not known (possibly because this is an older version of the shell before it was implemented).\n\n* * *\n\n### 22.27.2 Math Functions\n\nsystell(fd)\n\nThe systell math function returns the current file position for the file descriptor passed as an argument.\n\n* * *\n\n### 22.27.3 Parameters\n\nerrnos\n\nA readonly array of the names of errors defined on the system. These are typically macros defined in C by including the system header file errno.h. The index of each name (assuming the option KSH\\_ARRAYS is unset) corresponds to the error number. Error numbers num before the last known error which have no name are given the name Enum in the array.\n\nNote that aliases for errors are not handled; only the canonical name is used.\n\nsysparams\n\nA readonly associative array. The keys are:\n\npid\n\nReturns the process ID of the current process, even in subshells. Compare $$, which returns the process ID of the main shell process.\n\nppid\n\nReturns the current process ID of the parent of the current process, even in subshells. Compare $PPID, which returns the process ID of the initial parent of the main shell process.\n\nprocsubstpid\n\nReturns the process ID of the last process started for process substitution, i.e. the <(...) and \\>(...) expansions.\n\n* * *\n\n## 22.28 The zsh/net/tcp Module\n\nThe zsh/net/tcp module makes available one builtin command:\n\nztcp \\[ \\-acflLtv \\] \\[ \\-d fd \\] \\[ args \\]\n\nztcp is implemented as a builtin to allow full use of shell command line editing, file I/O, and job control mechanisms.\n\nIf ztcp is run with no options, it will output the contents of its session table.\n\nIf it is run with only the option \\-L, it will output the contents of the session table in a format suitable for automatic parsing. The option is ignored if given with a command to open or close a session. The output consists of a set of lines, one per session, each containing the following elements separated by spaces:\n\nFile descriptor\n\nThe file descriptor in use for the connection. For normal inbound (I) and outbound (O) connections this may be read and written by the usual shell mechanisms. However, it should only be close with ‘ztcp -c’.\n\nConnection type\n\nA letter indicating how the session was created:\n\nZ\n\nA session created with the zftp command.\n\nL\n\nA connection opened for listening with ‘ztcp -l’.\n\nI\n\nAn inbound connection accepted with ‘ztcp -a’.\n\nO\n\nAn outbound connection created with ‘ztcp host ...’.\n\nThe local host\n\nThis is usually set to an all-zero IP address as the address of the localhost is irrelevant.\n\nThe local port\n\nThis is likely to be zero unless the connection is for listening.\n\nThe remote host\n\nThis is the fully qualified domain name of the peer, if available, else an IP address. It is an all-zero IP address for a session opened for listening.\n\nThe remote port\n\nThis is zero for a connection opened for listening.\n\n* * *\n\n### 22.28.1 Outbound Connections\n\nztcp \\[ \\-v \\] \\[ \\-d fd \\] host \\[ port \\]\n\nOpen a new TCP connection to host. If the port is omitted, it will default to port 23. The connection will be added to the session table and the shell parameter REPLY will be set to the file descriptor associated with that connection.\n\nIf \\-d is specified, its argument will be taken as the target file descriptor for the connection.\n\nIn order to elicit more verbose output, use \\-v.\n\n* * *\n\n### 22.28.2 Inbound Connections\n\nztcp \\-l \\[ \\-v \\] \\[ \\-d fd \\] port\n\nztcp -l will open a socket listening on TCP port. The socket will be added to the session table and the shell parameter REPLY will be set to the file descriptor associated with that listener.\n\nIf \\-d is specified, its argument will be taken as the target file descriptor for the connection.\n\nIn order to elicit more verbose output, use \\-v.\n\nztcp \\-a \\[ \\-tv \\] \\[ \\-d targetfd \\] listenfd\n\nztcp -a will accept an incoming connection to the port associated with listenfd. The connection will be added to the session table and the shell parameter REPLY will be set to the file descriptor associated with the inbound connection.\n\nIf \\-d is specified, its argument will be taken as the target file descriptor for the connection.\n\nIf \\-t is specified, ztcp will return if no incoming connection is pending. Otherwise it will wait for one.\n\nIn order to elicit more verbose output, use \\-v.\n\n* * *\n\n### 22.28.3 Closing Connections\n\nztcp \\-cf \\[ \\-v \\] \\[ fd \\]\n\nztcp \\-c \\[ \\-v \\] \\[ fd \\]\n\nztcp -c will close the socket associated with fd. The socket will be removed from the session table. If fd is not specified, ztcp will close everything in the session table.\n\nNormally, sockets registered by zftp (see [The zsh/zftp Module](#The-zsh_002fzftp-Module) ) cannot be closed this way. In order to force such a socket closed, use \\-f.\n\nIn order to elicit more verbose output, use \\-v.\n\n* * *\n\n### 22.28.4 Example\n\nHere is how to create a TCP connection between two instances of zsh. We need to pick an unassigned port; here we use the randomly chosen 5123.\n\nOn host1,\n\nzmodload zsh/net/tcp\nztcp -l 5123\nlistenfd=$REPLY\nztcp -a $listenfd\nfd=$REPLY\n\nThe second from last command blocks until there is an incoming connection.\n\nNow create a connection from host2 (which may, of course, be the same machine):\n\nzmodload zsh/net/tcp\nztcp host1 5123\nfd=$REPLY\n\nNow on each host, $fd contains a file descriptor for talking to the other. For example, on host1:\n\nprint This is a message >&$fd\n\nand on host2:\n\nread -r line <&$fd; print -r - $line\n\nprints ‘This is a message’.\n\nTo tidy up, on host1:\n\nztcp -c $listenfd\nztcp -c $fd\n\nand on host2\n\n* * *\n\n## 22.29 The zsh/termcap Module\n\nThe zsh/termcap module makes available one builtin command:\n\nechotc cap \\[ arg ... \\]\n\nOutput the termcap value corresponding to the capability cap, with optional arguments.\n\nThe zsh/termcap module makes available one parameter:\n\ntermcap\n\nAn associative array that maps termcap capability codes to their values.\n\n* * *\n\n## 22.30 The zsh/terminfo Module\n\nThe zsh/terminfo module makes available one builtin command:\n\nechoti cap \\[ arg \\]\n\nOutput the terminfo value corresponding to the capability cap, instantiated with arg if applicable.\n\nThe zsh/terminfo module makes available one parameter:\n\nterminfo\n\nAn associative array that maps terminfo capability names to their values.\n\n* * *\n\n## 22.31 The zsh/watch Module\n\nThe zsh/watch module can be used to report when specific users log in or out. This is controlled via the following parameters.\n\nLOGCHECK\n\nThe interval in seconds between checks for login/logout activity using the watch parameter.\n\nwatch <S> <Z> (WATCH <S>)\n\nAn array (colon-separated list) of login/logout events to report.\n\nIf it contains the single word ‘all’, then all login/logout events are reported. If it contains the single word ‘notme’, then all events are reported as with ‘all’ except $USERNAME.\n\nAn entry in this list may consist of a username, an ‘@’ followed by a remote hostname, and a ‘%’ followed by a line (tty). Any of these may be a pattern (be sure to quote this during the assignment to watch so that it does not immediately perform file generation); the setting of the EXTENDED\\_GLOB option is respected. Any or all of these components may be present in an entry; if a login/logout event matches all of them, it is reported.\n\nFor example, with the EXTENDED\\_GLOB option set, the following:\n\ncauses reports for activity associated with any user other than pws or barts.\n\nWATCHFMT\n\nThe format of login/logout reports if the watch parameter is set. Default is ‘%n has %a %l from %m’. Recognizes the following escape sequences:\n\n%n\n\nThe name of the user that logged in/out.\n\n%a\n\nThe observed action, i.e. \"logged on\" or \"logged off\".\n\n%l\n\nThe line (tty) the user is logged in on.\n\n%M\n\nThe full hostname of the remote host.\n\n%m\n\nThe hostname up to the first ‘.’. If only the IP address is available or the utmp field contains the name of an X-windows display, the whole name is printed.\n\n_NOTE:_ The ‘%m’ and ‘%M’ escapes will work only if there is a host name field in the utmp on your machine. Otherwise they are treated as ordinary strings.\n\n%F{color} (%f)\n\nStart (stop) using a different foreground color.\n\n%K{color} (%k)\n\nStart (stop) using a different background color.\n\n%S (%s)\n\nStart (stop) standout mode.\n\n%U (%u)\n\nStart (stop) underline mode.\n\n%B (%b)\n\nStart (stop) boldface mode.\n\n%t\n\n%@\n\nThe time, in 12-hour, am/pm format.\n\n%T\n\nThe time, in 24-hour format.\n\n%w\n\nThe date in ‘day\\-dd’ format.\n\n%W\n\nThe date in ‘mm/dd/yy’ format.\n\n%D\n\nThe date in ‘yy\\-mm\\-dd’ format.\n\n%D{string}\n\nThe date formatted as string using the strftime function, with zsh extensions as described by [Prompt Expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Prompt-Expansion).\n\n%(x:true-text:false-text)\n\nSpecifies a ternary expression. The character following the x is arbitrary; the same character is used to separate the text for the \"true\" result from that for the \"false\" result. Both the separator and the right parenthesis may be escaped with a backslash. Ternary expressions may be nested.\n\nThe test character x may be any one of ‘l’, ‘n’, ‘m’ or ‘M’, which indicate a ‘true’ result if the corresponding escape sequence would return a non-empty value; or it may be ‘a’, which indicates a ‘true’ result if the watched user has logged in, or ‘false’ if he has logged out. Other characters evaluate to neither true nor false; the entire expression is omitted in this case.\n\nIf the result is ‘true’, then the true-text is formatted according to the rules above and printed, and the false-text is skipped. If ‘false’, the true-text is skipped and the false-text is formatted and printed. Either or both of the branches may be empty, but both separators must be present in any case.\n\nFurthermore, the zsh/watch module makes available one builtin command:\n\nlog\n\nList all users currently logged in who are affected by the current setting of the watch parameter.\n\n* * *\n\n## 22.32 The zsh/zftp Module\n\nThe zsh/zftp module makes available one builtin command:\n\nzftp subcommand \\[ args \\]\n\nThe zsh/zftp module is a client for FTP (file transfer protocol). It is implemented as a builtin to allow full use of shell command line editing, file I/O, and job control mechanisms. Often, users will access it via shell functions providing a more powerful interface; a set is provided with the zsh distribution and is described in [Zftp Function System](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Zftp-Function-System). However, the zftp command is entirely usable in its own right.\n\nAll commands consist of the command name zftp followed by the name of a subcommand. These are listed below. The return status of each subcommand is supposed to reflect the success or failure of the remote operation. See a description of the variable ZFTP\\_VERBOSE for more information on how responses from the server may be printed.\n\n* * *\n\n### 22.32.1 Subcommands\n\nopen host\\[:port\\] \\[ user \\[ password \\[ account \\] \\] \\]\n\nOpen a new FTP session to host, which may be the name of a TCP/IP connected host or an IP number in the standard dot notation. If the argument is in the form host:port, open a connection to TCP port port instead of the standard FTP port 21. This may be the name of a TCP service or a number: see the description of ZFTP\\_PORT below for more information.\n\nIf IPv6 addresses in colon format are used, the host should be surrounded by quoted square brackets to distinguish it from the port, for example ’\\[fe80::203:baff:fe02:8b56\\]’. For consistency this is allowed with all forms of host.\n\nRemaining arguments are passed to the login subcommand. Note that if no arguments beyond host are supplied, open will _not_ automatically call login. If no arguments at all are supplied, open will use the parameters set by the params subcommand.\n\nAfter a successful open, the shell variables ZFTP\\_HOST, ZFTP\\_PORT, ZFTP\\_IP and ZFTP\\_SYSTEM are available; see ‘Variables’ below.\n\nlogin \\[ name \\[ password \\[ account \\] \\] \\]\n\nuser \\[ name \\[ password \\[ account \\] \\] \\]\n\nLogin the user name with parameters password and account. Any of the parameters can be omitted, and will be read from standard input if needed (name is always needed). If standard input is a terminal, a prompt for each one will be printed on standard error and password will not be echoed. If any of the parameters are not used, a warning message is printed.\n\nAfter a successful login, the shell variables ZFTP\\_USER, ZFTP\\_ACCOUNT and ZFTP\\_PWD are available; see ‘Variables’ below.\n\nThis command may be re-issued when a user is already logged in, and the server will first be reinitialized for a new user.\n\nparams \\[ host \\[ user \\[ password \\[ account \\] \\] \\] \\]\n\nparams \\-\n\nStore the given parameters for a later open command with no arguments. Only those given on the command line will be remembered. If no arguments are given, the parameters currently set are printed, although the password will appear as a line of stars; the return status is one if no parameters were set, zero otherwise.\n\nAny of the parameters may be specified as a ‘?’, which may need to be quoted to protect it from shell expansion. In this case, the appropriate parameter will be read from stdin as with the login subcommand, including special handling of password. If the ‘?’ is followed by a string, that is used as the prompt for reading the parameter instead of the default message (any necessary punctuation and whitespace should be included at the end of the prompt). The first letter of the parameter (only) may be quoted with a ‘\\\\’; hence an argument \"\\\\\\\\$word\" guarantees that the string from the shell parameter $word will be treated literally, whether or not it begins with a ‘?’.\n\nIf instead a single ‘\\-’ is given, the existing parameters, if any, are deleted. In that case, calling open with no arguments will cause an error.\n\nThe list of parameters is not deleted after a close, however it will be deleted if the zsh/zftp module is unloaded.\n\nFor example,\n\nzftp params ftp.elsewhere.xx juser '?Password for juser: '\n\nwill store the host ftp.elsewhere.xx and the user juser and then prompt the user for the corresponding password with the given prompt.\n\ntest\n\nTest the connection; if the server has reported that it has closed the connection (maybe due to a timeout), return status 2; if no connection was open anyway, return status 1; else return status 0. The test subcommand is silent, apart from messages printed by the $ZFTP\\_VERBOSE mechanism, or error messages if the connection closes. There is no network overhead for this test.\n\nThe test is only supported on systems with either the select(2) or poll(2) system calls; otherwise the message ‘not supported on this system’ is printed instead.\n\nThe test subcommand will automatically be called at the start of any other subcommand for the current session when a connection is open.\n\ncd directory\n\nChange the remote directory to directory. Also alters the shell variable ZFTP\\_PWD.\n\ncdup\n\nChange the remote directory to the one higher in the directory tree. Note that cd .. will also work correctly on non-UNIX systems.\n\ndir \\[ arg ... \\]\n\nGive a (verbose) listing of the remote directory. The args are passed directly to the server. The command’s behaviour is implementation dependent, but a UNIX server will typically interpret args as arguments to the ls command and with no arguments return the result of ‘ls -l’. The directory is listed to standard output.\n\nls \\[ arg ... \\]\n\nGive a (short) listing of the remote directory. With no arg, produces a raw list of the files in the directory, one per line. Otherwise, up to vagaries of the server implementation, behaves similar to dir.\n\ntype \\[ type \\]\n\nChange the type for the transfer to type, or print the current type if type is absent. The allowed values are ‘A’ (ASCII), ‘I’ (Image, i.e. binary), or ‘B’ (a synonym for ‘I’).\n\nThe FTP default for a transfer is ASCII. However, if zftp finds that the remote host is a UNIX machine with 8-bit byes, it will automatically switch to using binary for file transfers upon open. This can subsequently be overridden.\n\nThe transfer type is only passed to the remote host when a data connection is established; this command involves no network overhead.\n\nascii\n\nThe same as type A.\n\nbinary\n\nThe same as type I.\n\nmode \\[ S | B \\]\n\nSet the mode type to stream (S) or block (B). Stream mode is the default; block mode is not widely supported.\n\nremote file ...\n\nlocal \\[ file ... \\]\n\nPrint the size and last modification time of the remote or local files. If there is more than one item on the list, the name of the file is printed first. The first number is the file size, the second is the last modification time of the file in the format CCYYMMDDhhmmSS consisting of year, month, date, hour, minutes and seconds in GMT. Note that this format, including the length, is guaranteed, so that time strings can be directly compared via the \\[\\[ builtin’s < and \\> operators, even if they are too long to be represented as integers.\n\nNot all servers support the commands for retrieving this information. In that case, the remote command will print nothing and return status 2, compared with status 1 for a file not found.\n\nThe local command (but not remote) may be used with no arguments, in which case the information comes from examining file descriptor zero. This is the same file as seen by a put command with no further redirection.\n\nget file ...\n\nRetrieve all files from the server, concatenating them and sending them to standard output.\n\nput file ...\n\nFor each file, read a file from standard input and send that to the remote host with the given name.\n\nappend file ...\n\nAs put, but if the remote file already exists, data is appended to it instead of overwriting it.\n\ngetat file point\n\nputat file point\n\nappendat file point\n\nVersions of get, put and append which will start the transfer at the given point in the remote file. This is useful for appending to an incomplete local file. However, note that this ability is not universally supported by servers (and is not quite the behaviour specified by the standard).\n\ndelete file ...\n\nDelete the list of files on the server.\n\nmkdir directory\n\nCreate a new directory directory on the server.\n\nrmdir directory\n\nDelete the directory directory on the server.\n\nrename old-name new-name\n\nRename file old-name to new-name on the server.\n\nsite arg ...\n\nSend a host-specific command to the server. You will probably only need this if instructed by the server to use it.\n\nquote arg ...\n\nSend the raw FTP command sequence to the server. You should be familiar with the FTP command set as defined in RFC959 before doing this. Useful commands may include STAT and HELP. Note also the mechanism for returning messages as described for the variable ZFTP\\_VERBOSE below, in particular that all messages from the control connection are sent to standard error.\n\nclose\n\nquit\n\nClose the current data connection. This unsets the shell parameters ZFTP\\_HOST, ZFTP\\_PORT, ZFTP\\_IP, ZFTP\\_SYSTEM, ZFTP\\_USER, ZFTP\\_ACCOUNT, ZFTP\\_PWD, ZFTP\\_TYPE and ZFTP\\_MODE.\n\nsession \\[ sessname \\]\n\nAllows multiple FTP sessions to be used at once. The name of the session is an arbitrary string of characters; the default session is called ‘default’. If this command is called without an argument, it will list all the current sessions; with an argument, it will either switch to the existing session called sessname, or create a new session of that name.\n\nEach session remembers the status of the connection, the set of connection-specific shell parameters (the same set as are unset when a connection closes, as given in the description of close), and any user parameters specified with the params subcommand. Changing to a previous session restores those values; changing to a new session initialises them in the same way as if zftp had just been loaded. The name of the current session is given by the parameter ZFTP\\_SESSION.\n\nrmsession \\[ sessname \\]\n\nDelete a session; if a name is not given, the current session is deleted. If the current session is deleted, the earliest existing session becomes the new current session, otherwise the current session is not changed. If the session being deleted is the only one, a new session called ‘default’ is created and becomes the current session; note that this is a new session even if the session being deleted is also called ‘default’. It is recommended that sessions not be deleted while background commands which use zftp are still active.\n\n* * *\n\n### 22.32.2 Parameters\n\nThe following shell parameters are used by zftp. Currently none of them are special.\n\nZFTP\\_TMOUT\n\nInteger. The time in seconds to wait for a network operation to complete before returning an error. If this is not set when the module is loaded, it will be given the default value 60. A value of zero turns off timeouts. If a timeout occurs on the control connection it will be closed. Use a larger value if this occurs too frequently.\n\nZFTP\\_IP\n\nReadonly. The IP address of the current connection in dot notation.\n\nZFTP\\_HOST\n\nReadonly. The hostname of the current remote server. If the host was opened as an IP number, ZFTP\\_HOST contains that instead; this saves the overhead for a name lookup, as IP numbers are most commonly used when a nameserver is unavailable.\n\nZFTP\\_PORT\n\nReadonly. The number of the remote TCP port to which the connection is open (even if the port was originally specified as a named service). Usually this is the standard FTP port, 21.\n\nIn the unlikely event that your system does not have the appropriate conversion functions, this appears in network byte order. If your system is little-endian, the port then consists of two swapped bytes and the standard port will be reported as 5376. In that case, numeric ports passed to zftp open will also need to be in this format.\n\nZFTP\\_SYSTEM\n\nReadonly. The system type string returned by the server in response to an FTP SYST request. The most interesting case is a string beginning \"UNIX Type: L8\", which ensures maximum compatibility with a local UNIX host.\n\nZFTP\\_TYPE\n\nReadonly. The type to be used for data transfers , either ‘A’ or ‘I’. Use the type subcommand to change this.\n\nZFTP\\_USER\n\nReadonly. The username currently logged in, if any.\n\nZFTP\\_ACCOUNT\n\nReadonly. The account name of the current user, if any. Most servers do not require an account name.\n\nZFTP\\_PWD\n\nReadonly. The current directory on the server.\n\nZFTP\\_CODE\n\nReadonly. The three digit code of the last FTP reply from the server as a string. This can still be read after the connection is closed, and is not changed when the current session changes.\n\nZFTP\\_REPLY\n\nReadonly. The last line of the last reply sent by the server. This can still be read after the connection is closed, and is not changed when the current session changes.\n\nZFTP\\_SESSION\n\nReadonly. The name of the current FTP session; see the description of the session subcommand.\n\nZFTP\\_PREFS\n\nA string of preferences for altering aspects of zftp’s behaviour. Each preference is a single character. The following are defined:\n\nP\n\nPassive: attempt to make the remote server initiate data transfers. This is slightly more efficient than sendport mode. If the letter S occurs later in the string, zftp will use sendport mode if passive mode is not available.\n\nS\n\nSendport: initiate transfers by the FTP PORT command. If this occurs before any P in the string, passive mode will never be attempted.\n\nD\n\nDumb: use only the bare minimum of FTP commands. This prevents the variables ZFTP\\_SYSTEM and ZFTP\\_PWD from being set, and will mean all connections default to ASCII type. It may prevent ZFTP\\_SIZE from being set during a transfer if the server does not send it anyway (many servers do).\n\nIf ZFTP\\_PREFS is not set when zftp is loaded, it will be set to a default of ‘PS’, i.e. use passive mode if available, otherwise fall back to sendport mode.\n\nZFTP\\_VERBOSE\n\nA string of digits between 0 and 5 inclusive, specifying which responses from the server should be printed. All responses go to standard error. If any of the numbers 1 to 5 appear in the string, raw responses from the server with reply codes beginning with that digit will be printed to standard error. The first digit of the three digit reply code is defined by RFC959 to correspond to:\n\n1.\n\nA positive preliminary reply.\n\n2.\n\nA positive completion reply.\n\n3.\n\nA positive intermediate reply.\n\n4.\n\nA transient negative completion reply.\n\n5.\n\nA permanent negative completion reply.\n\nIt should be noted that, for unknown reasons, the reply ‘Service not available’, which forces termination of a connection, is classified as 421, i.e. ‘transient negative’, an interesting interpretation of the word ‘transient’.\n\nThe code 0 is special: it indicates that all but the last line of multiline replies read from the server will be printed to standard error in a processed format. By convention, servers use this mechanism for sending information for the user to read. The appropriate reply code, if it matches the same response, takes priority.\n\nIf ZFTP\\_VERBOSE is not set when zftp is loaded, it will be set to the default value 450, i.e., messages destined for the user and all errors will be printed. A null string is valid and specifies that no messages should be printed.\n\n* * *\n\n### 22.32.3 Functions\n\nzftp\\_chpwd\n\nIf this function is set by the user, it is called every time the directory changes on the server, including when a user is logged in, or when a connection is closed. In the last case, $ZFTP\\_PWD will be unset; otherwise it will reflect the new directory.\n\nzftp\\_progress\n\nIf this function is set by the user, it will be called during a get, put or append operation each time sufficient data has been received from the host. During a get, the data is sent to standard output, so it is vital that this function should write to standard error or directly to the terminal, _not_ to standard output.\n\nWhen it is called with a transfer in progress, the following additional shell parameters are set:\n\nZFTP\\_FILE\n\nThe name of the remote file being transferred from or to.\n\nZFTP\\_TRANSFER\n\nA G for a get operation and a P for a put operation.\n\nZFTP\\_SIZE\n\nThe total size of the complete file being transferred: the same as the first value provided by the remote and local subcommands for a particular file. If the server cannot supply this value for a remote file being retrieved, it will not be set. If input is from a pipe the value may be incorrect and correspond simply to a full pipe buffer.\n\nZFTP\\_COUNT\n\nThe amount of data so far transferred; a number between zero and $ZFTP\\_SIZE, if that is set. This number is always available.\n\nThe function is initially called with ZFTP\\_TRANSFER set appropriately and ZFTP\\_COUNT set to zero. After the transfer is finished, the function will be called one more time with ZFTP\\_TRANSFER set to GF or PF, in case it wishes to tidy up. It is otherwise never called twice with the same value of ZFTP\\_COUNT.\n\nSometimes the progress meter may cause disruption. It is up to the user to decide whether the function should be defined and to use unfunction when necessary.\n\n* * *\n\n### 22.32.4 Problems\n\nA connection may not be opened in the left hand side of a pipe as this occurs in a subshell and the file information is not updated in the main shell. In the case of type or mode changes or closing the connection in a subshell, the information is returned but variables are not updated until the next call to zftp. Other status changes in subshells will not be reflected by changes to the variables (but should be otherwise harmless).\n\nDeleting sessions while a zftp command is active in the background can have unexpected effects, even if it does not use the session being deleted. This is because all shell subprocesses share information on the state of all connections, and deleting a session changes the ordering of that information.\n\nOn some operating systems, the control connection is not valid after a fork(), so that operations in subshells, on the left hand side of a pipeline, or in the background are not possible, as they should be. This is presumably a bug in the operating system.\n\n* * *\n\n## 22.33 The zsh/zle Module\n\nThe zsh/zle module contains the Zsh Line Editor. See [Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor).\n\n* * *\n\n## 22.34 The zsh/zleparameter Module\n\nThe zsh/zleparameter module defines two special parameters that can be used to access internal information of the Zsh Line Editor (see [Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor)).\n\nkeymaps\n\nThis array contains the names of the keymaps currently defined.\n\nwidgets\n\nThis associative array contains one entry per widget. The name of the widget is the key and the value gives information about the widget. It is either the string ‘builtin’ for builtin widgets, a string of the form ‘user:name’ for user-defined widgets, where name is the name of the shell function implementing the widget, a string of the form ‘completion:type:name’ for completion widgets, or a null value if the widget is not yet fully defined. In the penultimate case, type is the name of the builtin widget the completion widget imitates in its behavior and name is the name of the shell function implementing the completion widget.\n\n* * *\n\n## 22.35 The zsh/zprof Module\n\nWhen loaded, the zsh/zprof causes shell functions to be profiled. The profiling results can be obtained with the zprof builtin command made available by this module. There is no way to turn profiling off other than unloading the module.\n\nzprof \\[ \\-c \\]\n\nWithout the \\-c option, zprof lists profiling results to standard output. The format is comparable to that of commands like gprof.\n\nAt the top there is a summary listing all functions that were called at least once. This summary is sorted in decreasing order of the amount of time spent in each. The lines contain the number of the function in order, which is used in other parts of the list in suffixes of the form ‘\\[num\\]’, then the number of calls made to the function. The next three columns list the time in milliseconds spent in the function and its descendants, the average time in milliseconds spent in the function and its descendants per call and the percentage of time spent in all shell functions used in this function and its descendants. The following three columns give the same information, but counting only the time spent in the function itself. The final column shows the name of the function.\n\nAfter the summary, detailed information about every function that was invoked is listed, sorted in decreasing order of the amount of time spent in each function and its descendants. Each of these entries consists of descriptions for the functions that called the function described, the function itself, and the functions that were called from it. The description for the function itself has the same format as in the summary (and shows the same information). The other lines don’t show the number of the function at the beginning and have their function named indented to make it easier to distinguish the line showing the function described in the section from the surrounding lines.\n\nThe information shown in this case is almost the same as in the summary, but only refers to the call hierarchy being displayed. For example, for a calling function the column showing the total running time lists the time spent in the described function and its descendants only for the times when it was called from that particular calling function. Likewise, for a called function, this columns lists the total time spent in the called function and its descendants only for the times when it was called from the function described.\n\nAlso in this case, the column showing the number of calls to a function also shows a slash and then the total number of invocations made to the called function.\n\nAs long as the zsh/zprof module is loaded, profiling will be done and multiple invocations of the zprof builtin command will show the times and numbers of calls since the module was loaded. With the \\-c option, the zprof builtin command will reset its internal counters and will not show the listing.\n\n* * *\n\n## 22.36 The zsh/zpty Module\n\nThe zsh/zpty module offers one builtin:\n\nzpty \\[ \\-e \\] \\[ \\-b \\] name \\[ arg ... \\]\n\nThe arguments following name are concatenated with spaces between, then executed as a command, as if passed to the eval builtin. The command runs under a newly assigned pseudo-terminal; this is useful for running commands non-interactively which expect an interactive environment. The name is not part of the command, but is used to refer to this command in later calls to zpty.\n\nWith the \\-e option, the pseudo-terminal is set up so that input characters are echoed.\n\nWith the \\-b option, input to and output from the pseudo-terminal are made non-blocking.\n\nThe shell parameter REPLY is set to the file descriptor assigned to the master side of the pseudo-terminal. This allows the terminal to be monitored with ZLE descriptor handlers (see [Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins)) or manipulated with sysread and syswrite (see [The zsh/system Module](#The-zsh_002fsystem-Module)). _Warning_: Use of sysread and syswrite is _not_ recommended; use zpty -r and zpty -w unless you know exactly what you are doing.\n\nzpty \\-d \\[ name ... \\]\n\nThe second form, with the \\-d option, is used to delete commands previously started, by supplying a list of their names. If no name is given, all commands are deleted. Deleting a command causes the HUP signal to be sent to the corresponding process.\n\nzpty \\-w \\[ \\-n \\] name \\[ string ... \\]\n\nThe \\-w option can be used to send the to command name the given strings as input (separated by spaces). If the \\-n option is _not_ given, a newline is added at the end.\n\nIf no string is provided, the standard input is copied to the pseudo-terminal; this may stop before copying the full input if the pseudo-terminal is non-blocking. The exact input is always copied: the \\-n option is not applied.\n\nNote that the command under the pseudo-terminal sees this input as if it were typed, so beware when sending special tty driver characters such as word-erase, line-kill, and end-of-file.\n\nzpty \\-r \\[ \\-mt \\] name \\[ param \\[ pattern \\] \\]\n\nThe \\-r option can be used to read the output of the command name. With only a name argument, the output read is copied to the standard output. Unless the pseudo-terminal is non-blocking, copying continues until the command under the pseudo-terminal exits; when non-blocking, only as much output as is immediately available is copied. The return status is zero if any output is copied.\n\nWhen also given a param argument, at most one line is read and stored in the parameter named param. Less than a full line may be read if the pseudo-terminal is non-blocking. The return status is zero if at least one character is stored in param.\n\nIf a pattern is given as well, output is read until the whole string read matches the pattern, even in the non-blocking case. The return status is zero if the string read matches the pattern, or if the command has exited but at least one character could still be read. If the option \\-m is present, the return status is zero only if the pattern matches. As of this writing, a maximum of one megabyte of output can be consumed this way; if a full megabyte is read without matching the pattern, the return status is non-zero.\n\nIn all cases, the return status is non-zero if nothing could be read, and is 2 if this is because the command has finished.\n\nIf the \\-r option is combined with the \\-t option, zpty tests whether output is available before trying to read. If no output is available, zpty immediately returns the status 1. When used with a pattern, the behaviour on a failed poll is similar to when the command has exited: the return value is zero if at least one character could still be read even if the pattern failed to match.\n\nzpty \\-t name\n\nThe \\-t option without the \\-r option can be used to test whether the command name is still running. It returns a zero status if the command is running and a non-zero value otherwise.\n\nzpty \\[ \\-L \\]\n\nThe last form, without any arguments, is used to list the commands currently defined. If the \\-L option is given, this is done in the form of calls to the zpty builtin.\n\n* * *\n\n## 22.37 The zsh/zselect Module\n\nThe zsh/zselect module makes available one builtin command:\n\nzselect \\[ \\-rwe \\] \\[ \\-t timeout \\] \\[ \\-a array \\] \\[ \\-A assoc \\] \\[ fd ... \\]\n\nThe zselect builtin is a front-end to the ‘select’ system call, which blocks until a file descriptor is ready for reading or writing, or has an error condition, with an optional timeout. If this is not available on your system, the command prints an error message and returns status 2 (normal errors return status 1). For more information, see your system’s documentation for select(3). Note there is no connection with the shell builtin of the same name.\n\nArguments and options may be intermingled in any order. Non-option arguments are file descriptors, which must be decimal integers. By default, file descriptors are to be tested for reading, i.e. zselect will return when data is available to be read from the file descriptor, or more precisely, when a read operation from the file descriptor will not block. After a \\-r, \\-w and \\-e, the given file descriptors are to be tested for reading, writing, or error conditions. These options and an arbitrary list of file descriptors may be given in any order.\n\n(The presence of an ‘error condition’ is not well defined in the documentation for many implementations of the select system call. According to recent versions of the POSIX specification, it is really an _exception_ condition, of which the only standard example is out-of-band data received on a socket. So zsh users are unlikely to find the \\-e option useful.)\n\nThe option ‘\\-t timeout’ specifies a timeout in hundredths of a second. This may be zero, in which case the file descriptors will simply be polled and zselect will return immediately. It is possible to call zselect with no file descriptors and a non-zero timeout for use as a finer-grained replacement for ‘sleep’; note, however, the return status is always 1 for a timeout.\n\nThe option ‘\\-a array’ indicates that array should be set to indicate the file descriptor(s) which are ready. If the option is not given, the array reply will be used for this purpose. The array will contain a string similar to the arguments for zselect. For example,\n\nmight return immediately with status 0 and $reply containing ‘\\-r 0 -w 1’ to show that both file descriptors are ready for the requested operations.\n\nThe option ‘\\-A assoc’ indicates that the associative array assoc should be set to indicate the file descriptor(s) which are ready. This option overrides the option \\-a, nor will reply be modified. The keys of assoc are the file descriptors, and the corresponding values are any of the characters ‘rwe’ to indicate the condition.\n\nThe command returns status 0 if some file descriptors are ready for reading. If the operation timed out, or a timeout of 0 was given and no file descriptors were ready, or there was an error, it returns status 1 and the array will not be set (nor modified in any way). If there was an error in the select operation the appropriate error message is printed.\n\n* * *\n\n## 22.38 The zsh/zutil Module\n\nThe zsh/zutil module only adds some builtins:\n\nzstyle \\[ \\-L \\[ metapattern \\[ style \\] \\] \\]\n\nzstyle \\[ \\-e | \\- | \\-\\- \\] pattern style string ...\n\nzstyle -d \\[ pattern \\[ style ... \\] \\]\n\nzstyle -g name \\[ pattern \\[ style \\] \\]\n\nzstyle -{a|b|s} context style name \\[ sep \\]\n\nzstyle -{T|t} context style \\[ string ... \\]\n\nzstyle -m context style pattern\n\nThis builtin command is used to define and lookup styles. Styles are pairs of names and values, where the values consist of any number of strings. They are stored together with patterns and lookup is done by giving a string, called the ‘_context_’, which is matched against the patterns. The definition stored for the most specific pattern that matches will be returned.\n\nA pattern is considered to be more specific than another if it contains more components (substrings separated by colons) or if the patterns for the components are more specific, where simple strings are considered to be more specific than patterns and complex patterns are considered to be more specific than the pattern ‘\\*’. A ‘\\*’ in the pattern will match zero or more characters in the context; colons are not treated specially in this regard. If two patterns are equally specific, the tie is broken in favour of the pattern that was defined first.\n\n_Example_\n\nFor example, a fictional ‘weather’ plugin might state in its documentation that it looks up the preferred-precipitation style under the ‘:weather:continent:day-of-the-week:phase-of-the-moon’ context. According to this, you might set the following in your zshrc:\n\nzstyle ':weather:europe:\\*' preferred-precipitation rain\nzstyle ':weather:\\*:Sunday:\\*' preferred-precipitation snow\n\nThen the plugin would run under the hood a command such as\n\nzstyle -s \":weather:${continent}:${day\\_of\\_week}:${moon\\_phase}\" preferred-precipitation REPLY\n\nin order to retrieve your preference into the scalar variable $REPLY. On Sundays $REPLY would be set to ‘snow’; in Europe it would be set to ‘rain’; and on Sundays in Europe it would be set to ‘snow’ again, because the patterns ‘:weather:europe:\\*’ and ‘:weather:\\*:Sunday:\\*’ both match the context argument to zstyle -s, are equally specific, and the latter is more specific (because it has more colon-separated components).\n\n_Usage_\n\nThe forms that operate on patterns are the following.\n\nzstyle \\[ \\-L \\[ metapattern \\[ style \\] \\] \\]\n\nWithout arguments, lists style definitions. Styles are shown in alphabetic order and patterns are shown in the order zstyle will test them.\n\nIf the \\-L option is given, listing is done in the form of calls to zstyle. The optional first argument, metapattern, is a pattern which will be matched against the string supplied as pattern when the style was defined. Note: this means, for example, ‘zstyle -L \":completion:\\*\"’ will match any supplied pattern beginning ‘:completion:’, not just \":completion:\\*\": use ’:completion:\\\\\\*’ to match that. The optional second argument limits the output to a specific style (not a pattern). \\-L is not compatible with any other options.\n\nzstyle \\[ \\- | \\-\\- | \\-e \\] pattern style string ...\n\nDefines the given style for the pattern with the strings as the value. If the \\-e option is given, the strings will be concatenated (separated by spaces) and the resulting string will be evaluated (in the same way as it is done by the eval builtin command) when the style is looked up. In this case the parameter ‘reply’ must be assigned to set the strings returned after the evaluation. Before evaluating the value, reply is unset, and if it is still unset after the evaluation, the style is treated as if it were not set.\n\nzstyle -d \\[ pattern \\[ style ... \\] \\]\n\nDelete style definitions. Without arguments all definitions are deleted, with a pattern all definitions for that pattern are deleted and if any styles are given, then only those styles are deleted for the pattern.\n\nzstyle -g name \\[ pattern \\[ style \\] \\]\n\nRetrieve a style definition. The name is used as the name of an array in which the results are stored. Without any further arguments, all patterns defined are returned. With a pattern the styles defined for that pattern are returned and with both a pattern and a style, the value strings of that combination is returned.\n\nThe other forms can be used to look up or test styles for a given context.\n\nzstyle -s context style name \\[ sep \\]\n\nThe parameter name is set to the value of the style interpreted as a string. If the value contains several strings they are concatenated with spaces (or with the sep string if that is given) between them.\n\nReturn 0 if the style is set, 1 otherwise.\n\nzstyle -b context style name\n\nThe value is stored in name as a boolean, i.e. as the string ‘yes’ if the value has only one string and that string is equal to one of ‘yes’, ‘true’, ‘on’, or ‘1’. If the value is any other string or has more than one string, the parameter is set to ‘no’.\n\nReturn 0 if name is set to ‘yes’, 1 otherwise.\n\nzstyle -a context style name\n\nThe value is stored in name as an array. If name is declared as an associative array, the first, third, etc. strings are used as the keys and the other strings are used as the values.\n\nReturn 0 if the style is set, 1 otherwise.\n\nzstyle -t context style \\[ string ... \\]\n\nzstyle -T context style \\[ string ... \\]\n\nTest the value of a style, i.e. the \\-t option only returns a status (sets $?). Without any string the return status is zero if the style is defined for at least one matching pattern, has only one string in its value, and that is equal to one of ‘true’, ‘yes’, ‘on’ or ‘1’. If any strings are given the status is zero if and only if at least one of the strings is equal to at least one of the strings in the value. If the style is defined but doesn’t match, the return status is 1. If the style is not defined, the status is 2.\n\nThe \\-T option tests the values of the style like \\-t, but it returns status zero (rather than 2) if the style is not defined for any matching pattern.\n\nzstyle -m context style pattern\n\nMatch a value. Returns status zero if the pattern matches at least one of the strings in the value.\n\nzformat -f param format spec ...\n\nzformat -F param format spec ...\n\nzformat -a array sep spec ...\n\nThis builtin provides different forms of formatting. The first form is selected with the \\-f option. In this case the format string will be modified by replacing sequences starting with a percent sign in it with strings from the specs. Each spec should be of the form ‘char:string’ which will cause every appearance of the sequence ‘%char’ in format to be replaced by the string. The ‘%’ sequence may also contain optional minimum and maximum field width specifications between the ‘%’ and the ‘char’ in the form ‘%min.maxc’, i.e. the minimum field width is given first and if the maximum field width is used, it has to be preceded by a dot. Specifying a minimum field width makes the result be padded with spaces to the right if the string is shorter than the requested width. Padding to the left can be achieved by giving a negative minimum field width. If a maximum field width is specified, the string will be truncated after that many characters. After all ‘%’ sequences for the given specs have been processed, the resulting string is stored in the parameter param.\n\nThe %\\-escapes also understand ternary expressions in the form used by prompts. The % is followed by a ‘(’ and then an ordinary format specifier character as described above. There may be a set of digits either before or after the ‘(’; these specify a test number, which defaults to zero. Negative numbers are also allowed. An arbitrary delimiter character follows the format specifier, which is followed by a piece of ‘true’ text, the delimiter character again, a piece of ‘false’ text, and a closing parenthesis. The complete expression (without the digits) thus looks like ‘%(X.text1.text2)’, except that the ‘.’ character is arbitrary. The value given for the format specifier in the char:string expressions is evaluated as a mathematical expression, and compared with the test number. If they are the same, text1 is output, else text2 is output. A parenthesis may be escaped in text2 as %). Either of text1 or text2 may contain nested %\\-escapes.\n\nFor example:\n\nzformat -f REPLY \"The answer is '%3(c.yes.no)'.\" c:3\n\noutputs \"The answer is ’yes’.\" to REPLY since the value for the format specifier c is 3, agreeing with the digit argument to the ternary expression.\n\nWith \\-F instead of \\-f, ternary expressions choose between the ‘true’ or ‘false’ text on the basis of whether the format specifier is present and non-empty. A test number indicates a minimum width for the value given in the format specifier. Negative numbers reverse this, so the test is for whether the value exceeds a maximum width.\n\nThe form, using the \\-a option, can be used for aligning strings. Here, the specs are of the form ‘left:right’ where ‘left’ and ‘right’ are arbitrary strings. These strings are modified by replacing the colons by the sep string and padding the left strings with spaces to the right so that the sep strings in the result (and hence the right strings after them) are all aligned if the strings are printed below each other. All strings without a colon are left unchanged and all strings with an empty right string have the trailing colon removed. In both cases the lengths of the strings are not used to determine how the other strings are to be aligned. A colon in the left string can be escaped with a backslash. The resulting strings are stored in the array.\n\nzregexparse\n\nThis implements some internals of the \\_regex\\_arguments function.\n\nzparseopts \\[ \\-D \\-E \\-F \\-K \\-M \\] \\[ \\-a array \\] \\[ \\-A assoc \\] \\[ \\- \\] spec ...\n\nThis builtin simplifies the parsing of options in positional parameters, i.e. the set of arguments given by $\\*. Each spec describes one option and must be of the form ‘opt\\[\\=array\\]’. If an option described by opt is found in the positional parameters it is copied into the array specified with the \\-a option; if the optional ‘\\=array’ is given, it is instead copied into that array, which should be declared as a normal array and never as an associative array.\n\nNote that it is an error to give any spec without an ‘\\=array’ unless one of the \\-a or \\-A options is used.\n\nUnless the \\-E option is given, parsing stops at the first string that isn’t described by one of the specs. Even with \\-E, parsing always stops at a positional parameter equal to ‘\\-’ or ‘\\-\\-’. See also \\-F.\n\nThe opt description must be one of the following. Any of the special characters can appear in the option name provided it is preceded by a backslash.\n\nname\n\nname+\n\nThe name is the name of the option without the leading ‘\\-’. To specify a GNU-style long option, one of the usual two leading ‘\\-’ must be included in name; for example, a ‘\\-\\-file’ option is represented by a name of ‘\\-file’.\n\nIf a ‘+’ appears after name, the option is appended to array each time it is found in the positional parameters; without the ‘+’ only the _last_ occurrence of the option is preserved.\n\nIf one of these forms is used, the option takes no argument, so parsing stops if the next positional parameter does not also begin with ‘\\-’ (unless the \\-E option is used).\n\nname:\n\nname:-\n\nname::\n\nIf one or two colons are given, the option takes an argument; with one colon, the argument is mandatory and with two colons it is optional. The argument is appended to the array after the option itself.\n\nAn optional argument is put into the same array element as the option name (note that this makes empty strings as arguments indistinguishable). A mandatory argument is added as a separate element unless the ‘:-’ form is used, in which case the argument is put into the same element.\n\nA ‘+’ as described above may appear between the name and the first colon.\n\nIn all cases, option-arguments must appear either immediately following the option in the same positional parameter or in the next one. Even an optional argument may appear in the next parameter, unless it begins with a ‘\\-’. There is no special handling of ‘\\=’ as with GNU-style argument parsers; given the spec ‘\\-foo:’, the positional parameter ‘\\-\\-foo=bar’ is parsed as ‘\\-\\-foo’ with an argument of ‘\\=bar’.\n\nWhen the names of two options that take no arguments overlap, the longest one wins, so that parsing for the specs ‘\\-foo -foobar’ (for example) is unambiguous. However, due to the aforementioned handling of option-arguments, ambiguities may arise when at least one overlapping spec takes an argument, as in ‘\\-foo: -foobar’. In that case, the last matching spec wins.\n\nThe options of zparseopts itself cannot be stacked because, for example, the stack ‘\\-DEK’ is indistinguishable from a spec for the GNU-style long option ‘\\-\\-DEK’. The options of zparseopts itself are:\n\n\\-a array\n\nAs described above, this names the default array in which to store the recognised options.\n\n\\-A assoc\n\nIf this is given, the options and their values are also put into an associative array with the option names as keys and the arguments (if any) as the values.\n\n\\-D\n\nIf this option is given, all options found are removed from the positional parameters of the calling shell or shell function, up to but not including any not described by the specs. If the first such parameter is ‘\\-’ or ‘\\-\\-’, it is removed as well. This is similar to using the shift builtin.\n\n\\-E\n\nThis changes the parsing rules to _not_ stop at the first string that isn’t described by one of the specs. It can be used to test for or (if used together with \\-D) extract options and their arguments, ignoring all other options and arguments that may be in the positional parameters. As indicated above, parsing still stops at the first ‘\\-’ or ‘\\-\\-’ not described by a spec, but it is not removed when used with \\-D.\n\n\\-F\n\nIf this option is given, zparseopts immediately stops at the first option-like parameter not described by one of the specs, prints an error message, and returns status 1. Removal (\\-D) and extraction (\\-E) are not performed, and option arrays are not updated. This provides basic validation for the given options.\n\nNote that the appearance in the positional parameters of an option without its required argument always aborts parsing and returns an error as described above regardless of whether this option is used.\n\n\\-K\n\nWith this option, the arrays specified with the \\-a option and with the ‘\\=array’ forms are kept unchanged when none of the specs for them is used. Otherwise the entire array is replaced when any of the specs is used. Individual elements of associative arrays specified with the \\-A option are preserved by \\-K. This allows assignment of default values to arrays before calling zparseopts.\n\n\\-M\n\nThis changes the assignment rules to implement a map among equivalent option names. If any spec uses the ‘\\=array’ form, the string array is interpreted as the name of another spec, which is used to choose where to store the values. If no other spec is found, the values are stored as usual. This changes only the way the values are stored, not the way $\\* is parsed, so results may be unpredictable if the ‘name+’ specifier is used inconsistently.\n\nFor example,\n\nset -- -a -bx -c y -cz baz -cend\nzparseopts a=foo b:=bar c+:=bar\n\nwill have the effect of\n\nfoo=(-a)\nbar=(-b x -c y -c z)\n\nThe arguments from ‘baz’ on will not be used.\n\nAs an example for the \\-E option, consider:\n\nset -- -a x -b y -c z arg1 arg2\nzparseopts -E -D b:=bar\n\nwill have the effect of\n\nbar=(-b y)\nset -- -a x -c z arg1 arg2\n\nI.e., the option \\-b and its arguments are taken from the positional parameters and put into the array bar.\n\nThe \\-M option can be used like this:\n\nset -- -a -bx -c y -cz baz -cend\nzparseopts -A bar -M a=foo b+: c:=b\n\nto have the effect of\n\nfoo=(-a)\nbar=(-a '' -b xyz)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 898,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Modules-html-Zsh-Modules-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Modules-html-Zsh-Modules-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Modules-html-Zsh-Modules-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Modules-html-Zsh-Modules-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Zsh-Modules-html-Zsh-Modules-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 169200,
      "readableText": 207928,
      "none": 294392,
      "readableTextIfPossible": 207928,
      "result": 207928,
      "markdown": 155432
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/Completion-System.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System",
    "loadedTime": "2025-05-08T06:51:34.514Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/",
    "depth": 1,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-System",
    "title": "zsh: 20 Completion System",
    "description": "zsh: 20 Completion System",
    "author": null,
    "keywords": "zsh: 20 Completion System",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:29 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-4ca2f\"",
      "expires": "Thu, 08 May 2025 06:52:29 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c707645fb936d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: 20 Completion System\n20.1 Description\nThis describes the shell code for the ‘new’ completion system, referred to as compsys. It is written in shell functions based on the features described in the previous chapter, Completion Widgets. \nThe features are contextual, sensitive to the point at which completion is started. Many completions are already provided. For this reason, a user can perform a great many tasks without knowing any details beyond how to initialize the system, which is described in Initialization. \nThe context that decides what completion is to be performed may be \nan argument or option position: these describe the position on the command line at which completion is requested. For example ‘first argument to rmdir, the word being completed names a directory’; \na special context, denoting an element in the shell’s syntax. For example ‘a word in command position’ or ‘an array subscript’. \nA full context specification contains other elements, as we shall describe. \nBesides commands names and contexts, the system employs two more concepts, styles and tags. These provide ways for the user to configure the system’s behaviour. \nTags play a dual role. They serve as a classification system for the matches, typically indicating a class of object that the user may need to distinguish. For example, when completing arguments of the ls command the user may prefer to try files before directories, so both of these are tags. They also appear as the rightmost element in a context specification. \nStyles modify various operations of the completion system, such as output formatting, but also what kinds of completers are used (and in what order), or which tags are examined. Styles may accept arguments and are manipulated using the zstyle command described in The zsh/zutil Module. \nIn summary, tags describe what the completion objects are, and style how they are to be completed. At various points of execution, the completion system checks what styles and/or tags are defined for the current context, and uses that to modify its behavior. The full description of context handling, which determines how tags and other elements of the context influence the behaviour of styles, is described in Completion System Configuration. \nWhen a completion is requested, a dispatcher function is called; see the description of _main_complete in the list of control functions below. This dispatcher decides which function should be called to produce the completions, and calls it. The result is passed to one or more completers, functions that implement individual completion strategies: simple completion, error correction, completion with error correction, menu selection, etc. \nMore generally, the shell functions contained in the completion system are of two types: \nthose beginning ‘comp’ are to be called directly; there are only a few of these; \nthose beginning ‘_’ are called by the completion code. The shell functions of this set, which implement completion behaviour and may be bound to keystrokes, are referred to as ‘widgets’. These proliferate as new completions are required. \n20.2 Initialization\nIf the system was installed completely, it should be enough to call the shell function compinit from your initialization file; see the next section. However, the function compinstall can be run by a user to configure various aspects of the completion system. \nUsually, compinstall will insert code into .zshrc, although if that is not writable it will save it in another file and tell you that file’s location. Note that it is up to you to make sure that the lines added to .zshrc are actually run; you may, for example, need to move them to an earlier place in the file if .zshrc usually returns early. So long as you keep them all together (including the comment lines at the start and finish), you can rerun compinstall and it will correctly locate and modify these lines. Note, however, that any code you add to this section by hand is likely to be lost if you rerun compinstall, although lines using the command ‘zstyle’ should be gracefully handled. \nThe new code will take effect next time you start the shell, or run .zshrc by hand; there is also an option to make them take effect immediately. However, if compinstall has removed definitions, you will need to restart the shell to see the changes. \nTo run compinstall you will need to make sure it is in a directory mentioned in your fpath parameter, which should already be the case if zsh was properly configured as long as your startup files do not remove the appropriate directories from fpath. Then it must be autoloaded (‘autoload -U compinstall’ is recommended). You can abort the installation any time you are being prompted for information, and your .zshrc will not be altered at all; changes only take place right at the end, where you are specifically asked for confirmation. \n20.2.1 Use of compinit\nThis section describes the use of compinit to initialize completion for the current session when called directly; if you have run compinstall it will be called automatically from your .zshrc. \nTo initialize the system, the function compinit should be in a directory mentioned in the fpath parameter, and should be autoloaded (‘autoload -U compinit’ is recommended), and then run simply as ‘compinit’. This will define a few utility functions, arrange for all the necessary shell functions to be autoloaded, and will then re-define all widgets that do completion to use the new system. If you use the menu-select widget, which is part of the zsh/complist module, you should make sure that that module is loaded before the call to compinit so that that widget is also re-defined. If completion styles (see below) are set up to perform expansion as well as completion by default, and the TAB key is bound to expand-or-complete, compinit will rebind it to complete-word; this is necessary to use the correct form of expansion. \nShould you need to use the original completion commands, you can still bind keys to the old widgets by putting a ‘.’ in front of the widget name, e.g. ‘.expand-or-complete’. \nTo speed up the running of compinit, it can be made to produce a dumped configuration that will be read in on future invocations; this is the default, but can be turned off by calling compinit with the option -D. The dumped file is .zcompdump in the same directory as the startup files (i.e. $ZDOTDIR or $HOME); alternatively, an explicit file name can be given by ‘compinit -d dumpfile’. The next invocation of compinit will read the dumped file instead of performing a full initialization. \nIf the number of completion files changes, compinit will recognise this and produce a new dump file. However, if the name of a function or the arguments in the first line of a #compdef function (as described below) change, it is easiest to delete the dump file by hand so that compinit will re-create it the next time it is run. The check performed to see if there are new functions can be omitted by giving the option -C. In this case the dump file will only be created if there isn’t one already. \nThe dumping is actually done by another function, compdump, but you will only need to run this yourself if you change the configuration (e.g. using compdef) and then want to dump the new one. The name of the old dumped file will be remembered for this purpose. \nIf the parameter _compdir is set, compinit uses it as a directory where completion functions can be found; this is only necessary if they are not already in the function search path. \nFor security reasons compinit also checks if the completion system would use files not owned by root or by the current user, or files in directories that are world- or group-writable or that are not owned by root or by the current user. If such files or directories are found, compinit will ask if the completion system should really be used. To avoid these tests and make all files found be used without asking, use the option -u, and to make compinit silently ignore all insecure files and directories use the option -i. This security check is skipped entirely when the -C option is given, provided the dumpfile exists. \nThe security check can be retried at any time by running the function compaudit. This is the same check used by compinit, but when it is executed directly any changes to fpath are made local to the function so they do not persist. The directories to be checked may be passed as arguments; if none are given, compaudit uses fpath and _compdir to find completion system directories, adding missing ones to fpath as necessary. To force a check of exactly the directories currently named in fpath, set _compdir to an empty string before calling compaudit or compinit. \nThe function bashcompinit provides compatibility with bash’s programmable completion system. When run it will define the functions, compgen and complete which correspond to the bash builtins with the same names. It will then be possible to use completion specifications and functions written for bash. \n20.2.2 Autoloaded files\nThe convention for autoloaded functions used in completion is that they start with an underscore; as already mentioned, the fpath/FPATH parameter must contain the directory in which they are stored. If zsh was properly installed on your system, then fpath/FPATH automatically contains the required directories for the standard functions. \nFor incomplete installations, if compinit does not find enough files beginning with an underscore (fewer than twenty) in the search path, it will try to find more by adding the directory _compdir to the search path. If that directory has a subdirectory named Base, all subdirectories will be added to the path. Furthermore, if the subdirectory Base has a subdirectory named Core, compinit will add all subdirectories of the subdirectories to the path: this allows the functions to be in the same format as in the zsh source distribution. \nWhen compinit is run, it searches all such files accessible via fpath/FPATH and reads the first line of each of them. This line should contain one of the tags described below. Files whose first line does not start with one of these tags are not considered to be part of the completion system and will not be treated specially. \nThe tags are: \n#compdef name ... [ -{p|P} pattern ... [ -N name ... ] ] \nThe file will be made autoloadable and the function defined in it will be called when completing names, each of which is either the name of a command whose arguments are to be completed or one of a number of special contexts in the form -context- described below. \nEach name may also be of the form ‘cmd=service’. When completing the command cmd, the function typically behaves as if the command (or special context) service was being completed instead. This provides a way of altering the behaviour of functions that can perform many different completions. It is implemented by setting the parameter $service when calling the function; the function may choose to interpret this how it wishes, and simpler functions will probably ignore it. \nIf the #compdef line contains one of the options -p or -P, the words following are taken to be patterns. The function will be called when completion is attempted for a command or context that matches one of the patterns. The options -p and -P are used to specify patterns to be tried before or after other completions respectively. Hence -P may be used to specify default actions. \nThe option -N is used after a list following -p or -P; it specifies that remaining words no longer define patterns. It is possible to toggle between the three options as many times as necessary. \n#compdef -k style key-sequence ... \nThis option creates a widget behaving like the builtin widget style and binds it to the given key-sequences, if any. The style must be one of the builtin widgets that perform completion, namely complete-word, delete-char-or-list, expand-or-complete, expand-or-complete-prefix, list-choices, menu-complete, menu-expand-or-complete, or reverse-menu-complete. If the zsh/complist module is loaded (see The zsh/complist Module) the widget menu-select is also available. \nWhen one of the key-sequences is typed, the function in the file will be invoked to generate the matches. Note that a key will not be re-bound if it already was (that is, was bound to something other than undefined-key). The widget created has the same name as the file and can be bound to any other keys using bindkey as usual. \n#compdef -K widget-name style key-sequence [ name style seq ... ] \nThis is similar to -k except that only one key-sequence argument may be given for each widget-name style pair. However, the entire set of three arguments may be repeated with a different set of arguments. Note in particular that the widget-name must be distinct in each set. If it does not begin with ‘_’ this will be added. The widget-name should not clash with the name of any existing widget: names based on the name of the function are most useful. For example, \n#compdef -K _foo_complete complete-word \"^X^C\" \\ \n  _foo_list list-choices \"^X^D\"\n(all on one line) defines a widget _foo_complete for completion, bound to ‘^X^C’, and a widget _foo_list for listing, bound to ‘^X^D’. \n#autoload [ options ] \nFunctions with the #autoload tag are marked for autoloading but are not otherwise treated specially. Typically they are to be called from within one of the completion functions. Any options supplied will be passed to the autoload builtin; a typical use is +X to force the function to be loaded immediately. Note that the -U and -z flags are always added implicitly. \nThe # is part of the tag name and no white space is allowed after it. The #compdef tags use the compdef function described below; the main difference is that the name of the function is supplied implicitly. \nThe special contexts for which completion functions can be defined are: \n-array-value- \nThe right hand side of an array-assignment (‘name=(...)’) \n-assign-parameter- \nThe name of a parameter in an assignment, i.e. on the left hand side of an ‘=’ \n-brace-parameter- \nThe name of a parameter expansion within braces (‘${...}’) \n-command- \nA word in command position \n-condition- \nA word inside a condition (‘[[...]]’) \n-default- \nAny word for which no other completion is defined \n-equal- \nA word beginning with an equals sign \n-first- \nThis is tried before any other completion function. The function called may set the _compskip parameter to one of various values: all: no further completion is attempted; a string containing the substring patterns: no pattern completion functions will be called; a string containing default: the function for the ‘-default-’ context will not be called, but functions defined for commands will be. \n-math- \nInside mathematical contexts, such as ‘((...))’ \n-parameter- \nThe name of a parameter expansion (‘$...’) \n-redirect- \nThe word after a redirection operator. \n-subscript- \nThe contents of a parameter subscript. \n-tilde- \nAfter an initial tilde (‘~’), but before the first slash in the word. \n-value- \nOn the right hand side of an assignment. \nDefault implementations are supplied for each of these contexts. In most cases the context -context- is implemented by a corresponding function _context, for example the context ‘-tilde-’ and the function ‘_tilde’). \nThe contexts -redirect- and -value- allow extra context-specific information. (Internally, this is handled by the functions for each context calling the function _dispatch.) The extra information is added separated by commas. \nFor the -redirect- context, the extra information is in the form ‘-redirect-,op,command’, where op is the redirection operator and command is the name of the command on the line. If there is no command on the line yet, the command field will be empty. \nFor the -value- context, the form is ‘-value-,name,command’, where name is the name of the parameter on the left hand side of the assignment. In the case of elements of an associative array, for example ‘assoc=(key <TAB>’, name is expanded to ‘name-key’. In certain special contexts, such as completing after ‘make CFLAGS=’, the command part gives the name of the command, here make; otherwise it is empty. \nIt is not necessary to define fully specific completions as the functions provided will try to generate completions by progressively replacing the elements with ‘-default-’. For example, when completing after ‘foo=<TAB>’, _value will try the names ‘-value-,foo,’ (note the empty command part), ‘-value-,foo,-default-’ and‘-value-,-default-,-default-’, in that order, until it finds a function to handle the context. \nAs an example: \ncompdef '_files -g \"*.log\"' '-redirect-,2>,-default-'\ncompletes files matching ‘*.log’ after ‘2> <TAB>’ for any command with no more specific handler defined. \nAlso: \ncompdef _foo -value-,-default-,-default-\nspecifies that _foo provides completions for the values of parameters for which no special function has been defined. This is usually handled by the function _value itself. \nThe same lookup rules are used when looking up styles (as described below); for example \nzstyle ':completion:*:*:-redirect-,2>,*:*' file-patterns '*.log'\nis another way to make completion after ‘2> <TAB>’ complete files matching ‘*.log’. \n20.2.3 Functions\nThe following function is defined by compinit and may be called directly. \ncompdef [ -ane ] function name ... [ -{p|P} pattern ... [ -N name ...]] compdef -d name ... compdef -k [ -an ] function style key-sequence [ key-sequence ... ] compdef -K [ -an ] function name style key-seq [ name style seq ... ] \nThe first form defines the function to call for completion in the given contexts as described for the #compdef tag above. \nAlternatively, all the arguments may have the form ‘cmd=service’. Here service should already have been defined by ‘cmd1=service’ lines in #compdef files, as described above. The argument for cmd will be completed in the same way as service. \nThe function argument may alternatively be a string containing almost any shell code. If the string contains an equal sign, the above will take precedence. The option -e may be used to specify the first argument is to be evaluated as shell code even if it contains an equal sign. The string will be executed using the eval builtin command to generate completions. This provides a way of avoiding having to define a new completion function. For example, to complete files ending in ‘.h’ as arguments to the command foo: \ncompdef '_files -g \"*.h\"' foo\nThe option -n prevents any completions already defined for the command or context from being overwritten. \nThe option -d deletes any completion defined for the command or contexts listed. \nThe names may also contain -p, -P and -N options as described for the #compdef tag. The effect on the argument list is identical, switching between definitions of patterns tried initially, patterns tried finally, and normal commands and contexts. \nThe parameter $_compskip may be set by any function defined for a pattern context. If it is set to a value containing the substring ‘patterns’ none of the pattern-functions will be called; if it is set to a value containing the substring ‘all’, no other function will be called. Setting $_compskip in this manner is of particular utility when using the -p option, as otherwise the dispatcher will move on to additional functions (likely the default one) after calling the pattern-context one, which can mangle the display of completion possibilities if not handled properly. \nThe form with -k defines a widget with the same name as the function that will be called for each of the key-sequences; this is like the #compdef -k tag. The function should generate the completions needed and will otherwise behave like the builtin widget whose name is given as the style argument. The widgets usable for this are: complete-word, delete-char-or-list, expand-or-complete, expand-or-complete-prefix, list-choices, menu-complete, menu-expand-or-complete, and reverse-menu-complete, as well as menu-select if the zsh/complist module is loaded. The option -n prevents the key being bound if it is already to bound to something other than undefined-key. \nThe form with -K is similar and defines multiple widgets based on the same function, each of which requires the set of three arguments name, style and key-sequence, where the latter two are as for -k and the first must be a unique widget name beginning with an underscore. \nWherever applicable, the -a option makes the function autoloadable, equivalent to autoload -U function. \nThe function compdef can be used to associate existing completion functions with new commands. For example, \nuses the function _pids to complete process IDs for the command foo. \nNote also the _gnu_generic function described below, which can be used to complete options for commands that understand the ‘--help’ option. \n20.3 Completion System Configuration\nThis section gives a short overview of how the completion system works, and then more detail on how users can configure how and when matches are generated. \n20.3.1 Overview\nWhen completion is attempted somewhere on the command line the completion system begins building the context. The context represents everything that the shell knows about the meaning of the command line and the significance of the cursor position. This takes account of a number of things including the command word (such as ‘grep’ or ‘zsh’) and options to which the current word may be an argument (such as the ‘-o’ option to zsh which takes a shell option as an argument). \nThe context starts out very generic (\"we are beginning a completion\") and becomes more specific as more is learned (\"the current word is in a position that is usually a command name\" or \"the current word might be a variable name\" and so on). Therefore the context will vary during the same call to the completion system. \nThis context information is condensed into a string consisting of multiple fields separated by colons, referred to simply as ‘the context’ in the remainder of the documentation. Note that a user of the completion system rarely needs to compose a context string, unless for example a new function is being written to perform completion for a new command. What a user may need to do is compose a style pattern, which is matched against a context when needed to look up context-sensitive options that configure the completion system. \nThe next few paragraphs explain how a context is composed within the completion function suite. Following that is discussion of how styles are defined. Styles determine such things as how the matches are generated, similarly to shell options but with much more control. They are defined with the zstyle builtin command (The zsh/zutil Module). \nThe context string always consists of a fixed set of fields, separated by colons and with a leading colon before the first. Fields which are not yet known are left empty, but the surrounding colons appear anyway. The fields are always in the order :completion:function:completer:command:argument:tag. These have the following meaning: \nThe literal string completion, saying that this style is used by the completion system. This distinguishes the context from those used by, for example, zle widgets and ZFTP functions. \nThe function, if completion is called from a named widget rather than through the normal completion system. Typically this is blank, but it is set by special widgets such as predict-on and the various functions in the Widget directory of the distribution to the name of that function, often in an abbreviated form. \nThe completer currently active, the name of the function without the leading underscore and with other underscores converted to hyphens. A ‘completer’ is in overall control of how completion is to be performed; ‘complete’ is the simplest, but other completers exist to perform related tasks such as correction, or to modify the behaviour of a later completer. See Control Functions for more information. \nThe command or a special -context-, just at it appears following the #compdef tag or the compdef function. Completion functions for commands that have sub-commands usually modify this field to contain the name of the command followed by a minus sign and the sub-command. For example, the completion function for the cvs command sets this field to cvs-add when completing arguments to the add subcommand. \nThe argument; this indicates which command line or option argument we are completing. For command arguments this generally takes the form argument-n, where n is the number of the argument, and for arguments to options the form option-opt-n where n is the number of the argument to option opt. However, this is only the case if the command line is parsed with standard UNIX-style options and arguments, so many completions do not set this. \nThe tag. As described previously, tags are used to discriminate between the types of matches a completion function can generate in a certain context. Any completion function may use any tag name it likes, but a list of the more common ones is given below. \nThe context is gradually put together as the functions are executed, starting with the main entry point, which adds :completion: and the function element if necessary. The completer then adds the completer element. The contextual completion adds the command and argument options. Finally, the tag is added when the types of completion are known. For example, the context name \n:completion::complete:dvips:option-o-1:files\nsays that normal completion was attempted as the first argument to the option -o of the command dvips: \nand the completion function will generate filenames. \nUsually completion will be tried for all possible tags in an order given by the completion function. However, this can be altered by using the tag-order style. Completion is then restricted to the list of given tags in the given order. \nThe _complete_help bindable command shows all the contexts and tags available for completion at a particular point. This provides an easy way of finding information for tag-order and other styles. It is described in Bindable Commands. \nWhen looking up styles the completion system uses full context names, including the tag. Looking up the value of a style therefore consists of two things: the context, which is matched to the most specific (best fitting) pattern, and the name of the style itself, which must be matched exactly. The following examples demonstrate that patterns may be loosely defined for styles that apply broadly, or as tightly defined as desired for styles that apply in narrower circumstances. \nFor example, many completion functions can generate matches in a simple and a verbose form and use the verbose style to decide which form should be used. To make all such functions use the verbose form, put \nzstyle ':completion:*' verbose yes\nin a startup file (probably .zshrc). This gives the verbose style the value yes in every context inside the completion system, unless that context has a more specific definition. It is best to avoid giving the pattern as ‘*’ in case the style has some meaning outside the completion system. \nMany such general purpose styles can be configured simply by using the compinstall function. \nA more specific example of the use of the verbose style is by the completion for the kill builtin. If the style is set, the builtin lists full job texts and process command lines; otherwise it shows the bare job numbers and PIDs. To turn the style off for this use only: \nzstyle ':completion:*:*:kill:*:*' verbose no\nFor even more control, the style can use one of the tags ‘jobs’ or ‘processes’. To turn off verbose display only for jobs: \nzstyle ':completion:*:*:kill:*:jobs' verbose no\nThe -e option to zstyle even allows completion function code to appear as the argument to a style; this requires some understanding of the internals of completion functions (see Completion Widgets)). For example, \nzstyle -e ':completion:*' hosts 'reply=($myhosts)'\nThis forces the value of the hosts style to be read from the variable myhosts each time a host name is needed; this is useful if the value of myhosts can change dynamically. For another useful example, see the example in the description of the file-list style below. This form can be slow and should be avoided for commonly examined styles such as menu and list-rows-first. \nNote that the order in which styles are defined does not matter; the style mechanism uses the most specific possible match for a particular style to determine the set of values. Strings are preferred over patterns (for example, ‘:completion::complete:::foo’ is more specific than ‘:completion::complete:::*’), and longer patterns are preferred over the pattern ‘*’. See The zsh/zutil Module for details. \nContext patterns that use something other than a wildcard (*) to match the middle parts of the context — the completer, command, and argument in :completion:function:completer:command:argument:tag — should include all six colons (:) explicitly. Without this, a pattern such as :completion:*:foo:* could match foo against a component other than the intended one (for example, against completer when a match against command was intended). \nStyle names like those of tags are arbitrary and depend on the completion function. However, the following two sections list some of the most common tags and styles. \n20.3.2 Standard Tags\nSome of the following are only used when looking up particular styles and do not refer to a type of match. \naccounts \nused to look up the users-hosts style \nall-expansions \nused by the _expand completer when adding the single string containing all possible expansions \nall-files \nfor the names of all files (as distinct from a particular subset, see the globbed-files tag). \narguments \nfor arguments to a command \narrays \nfor names of array parameters \nassociation-keys \nfor keys of associative arrays; used when completing inside a subscript to a parameter of this type \nbookmarks \nwhen completing bookmarks (e.g. for URLs and the zftp function suite) \nbuiltins \nfor names of builtin commands \ncharacters \nfor single characters in arguments of commands such as stty. Also used when completing character classes after an opening bracket \ncolormapids \nfor X colormap ids \ncolors \nfor color names \ncommands \nfor names of external commands. Also used by complex commands such as cvs when completing names subcommands. \ncontexts \nfor contexts in arguments to the zstyle builtin command \ncorrections \nused by the _approximate and _correct completers for possible corrections \ncursors \nfor cursor names used by X programs \ndefault \nused in some contexts to provide a way of supplying a default when more specific tags are also valid. Note that this tag is used when only the function field of the context name is set \ndescriptions \nused when looking up the value of the format style to generate descriptions for types of matches \ndevices \nfor names of device special files \ndirectories \nfor names of directories — local-directories is used instead when completing arguments of cd and related builtin commands when the cdpath array is set \ndirectory-stack \nfor entries in the directory stack \ndisplays \nfor X display names \ndomains \nfor network domains \nemail-plugin \nfor email addresses from the ‘_email-plugin’ backend of _email_addresses \nexpansions \nused by the _expand completer for individual words (as opposed to the complete set of expansions) resulting from the expansion of a word on the command line \nextensions \nfor X server extensions \nfile-descriptors \nfor numbers of open file descriptors \nfiles \nthe generic file-matching tag used by functions completing filenames \nfonts \nfor X font names \nfstypes \nfor file system types (e.g. for the mount command) \nfunctions \nnames of functions — normally shell functions, although certain commands may understand other kinds of function \nglobbed-files \nfor filenames when the name has been generated by pattern matching \ngroups \nfor names of user groups \nhistory-words \nfor words from the history \nhosts \nfor hostnames \nindexes \nfor array indexes \ninterfaces \nfor network interfaces \njobs \nfor jobs (as listed by the ‘jobs’ builtin) \nkeymaps \nfor names of zsh keymaps \nkeysyms \nfor names of X keysyms \nlibraries \nfor names of system libraries \nlimits \nfor system limits \nlocal-directories \nfor names of directories that are subdirectories of the current working directory when completing arguments of cd and related builtin commands (compare path-directories) — when the cdpath array is unset, directories is used instead \nmailboxes \nfor e-mail folders \nmanuals \nfor names of manual pages \nmaps \nfor map names (e.g. NIS maps) \nmessages \nused to look up the format style for messages \nmodifiers \nfor names of X modifiers \nmodules \nfor modules (e.g. zsh modules) \nmy-accounts \nused to look up the users-hosts style \nnamed-directories \nfor named directories (you wouldn’t have guessed that, would you?) \nnames \nfor all kinds of names \nnewsgroups \nfor USENET groups \nnicknames \nfor nicknames of NIS maps \noptions \nfor command options \noriginal \nused by the _approximate, _correct and _expand completers when offering the original string as a match \nother-accounts \nused to look up the users-hosts style \npackages \nfor packages (e.g. rpm or installed Debian packages) \nparameters \nfor names of parameters \npath-directories \nfor names of directories found by searching the cdpath array when completing arguments of cd and related builtin commands (compare local-directories) \npaths \nused to look up the values of the expand, ambiguous and special-dirs styles \npods \nfor perl pods (documentation files) \nports \nfor communication ports \nprefixes \nfor prefixes (like those of a URL) \nprinters \nfor print queue names \nprocesses \nfor process identifiers \nprocesses-names \nused to look up the command style when generating the names of processes for killall \nsequences \nfor sequences (e.g. mh sequences) \nsessions \nfor sessions in the zftp function suite \nsignals \nfor signal names \nstrings \nfor strings (e.g. the replacement strings for the cd builtin command) \nstyles \nfor styles used by the zstyle builtin command \nsuffixes \nfor filename extensions \ntags \nfor tags (e.g. rpm tags) \ntargets \nfor makefile targets \ntime-zones \nfor time zones (e.g. when setting the TZ parameter) \ntypes \nfor types of whatever (e.g. address types for the xhost command) \nurls \nused to look up the urls and local styles when completing URLs \nusers \nfor usernames \nvalues \nfor one of a set of values in certain lists \nvariant \nused by _pick_variant to look up the command to run when determining what program is installed for a particular command name. \nvisuals \nfor X visuals \nwarnings \nused to look up the format style for warnings \nwidgets \nfor zsh widget names \nwindows \nfor IDs of X windows \nzsh-options \nfor shell options \n20.3.3 Standard Styles\nNote that the values of several of these styles represent boolean values. Any of the strings ‘true’, ‘on’, ‘yes’, and ‘1’ can be used for the value ‘true’ and any of the strings ‘false’, ‘off’, ‘no’, and ‘0’ for the value ‘false’. The behavior for any other value is undefined except where explicitly mentioned. The default value may be either ‘true’ or ‘false’ if the style is not set. \nSome of these styles are tested first for every possible tag corresponding to a type of match, and if no style was found, for the default tag. The most notable styles of this type are menu, list-colors and styles controlling completion listing such as list-packed and last-prompt. When tested for the default tag, only the function field of the context will be set so that a style using the default tag will normally be defined along the lines of: \nzstyle ':completion:*:default' menu ...\naccept-exact \nThis is tested for the default tag in addition to the tags valid for the current context. If it is set to ‘true’ and any of the trial matches is the same as the string on the command line, this match will immediately be accepted (even if it would otherwise be considered ambiguous). \nWhen completing pathnames (where the tag used is ‘paths’) this style accepts any number of patterns as the value in addition to the boolean values. Pathnames matching one of these patterns will be accepted immediately even if the command line contains some more partially typed pathname components and these match no file under the directory accepted. \nThis style is also used by the _expand completer to decide if words beginning with a tilde or parameter expansion should be expanded. For example, if there are parameters foo and foobar, the string ‘$foo’ will only be expanded if accept-exact is set to ‘true’; otherwise the completion system will be allowed to complete $foo to $foobar. If the style is set to ‘continue’, _expand will add the expansion as a match and the completion system will also be allowed to continue. \naccept-exact-dirs \nThis is used by filename completion. Unlike accept-exact it is a boolean. By default, filename completion examines all components of a path to see if there are completions of that component, even if the component matches an existing directory. For example, when completion after /usr/bin/, the function examines possible completions to /usr. \nWhen this style is ‘true’, any prefix of a path that matches an existing directory is accepted without any attempt to complete it further. Hence, in the given example, the path /usr/bin/ is accepted immediately and completion tried in that directory. \nThis style is also useful when completing after directories that magically appear when referenced, such as ZFS .zfs directories or NetApp .snapshot directories. When the style is set the shell does not check for the existence of the directory within the parent directory. \nIf you wish to inhibit this behaviour entirely, set the path-completion style (see below) to ‘false’. \nadd-space \nThis style is used by the _expand completer. If it is ‘true’ (the default), a space will be inserted after all words resulting from the expansion, or a slash in the case of directory names. If the value is ‘file’, the completer will only add a space to names of existing files. Either a boolean ‘true’ or the value ‘file’ may be combined with ‘subst’, in which case the completer will not add a space to words generated from the expansion of a substitution of the form ‘$(...)’ or ‘${...}’. \nThe _prefix completer uses this style as a simple boolean value to decide if a space should be inserted before the suffix. \nambiguous \nThis applies when completing non-final components of filename paths, in other words those with a trailing slash. If it is set, the cursor is left after the first ambiguous component, even if menu completion is in use. The style is always tested with the paths tag. \nassign-list \nWhen completing after an equals sign that is being treated as an assignment, the completion system normally completes only one filename. In some cases the value may be a list of filenames separated by colons, as with PATH and similar parameters. This style can be set to a list of patterns matching the names of such parameters. \nThe default is to complete lists when the word on the line already contains a colon. \nauto-description \nIf set, this style’s value will be used as the description for options that are not described by the completion functions, but that have exactly one argument. The sequence ‘%d’ in the value will be replaced by the description for this argument. Depending on personal preferences, it may be useful to set this style to something like ‘specify: %d’. Note that this may not work for some commands. \navoid-completer \nThis is used by the _all_matches completer to decide if the string consisting of all matches should be added to the list currently being generated. Its value is a list of names of completers. If any of these is the name of the completer that generated the matches in this completion, the string will not be added. \nThe default value for this style is ‘_expand _old_list _correct _approximate’, i.e. it contains the completers for which a string with all matches will almost never be wanted. \ncache-path \nThis style defines the path where any cache files containing dumped completion data are stored. It defaults to ‘$ZDOTDIR/.zcompcache’, or ‘$HOME/.zcompcache’ if $ZDOTDIR is not defined. The completion cache will not be used unless the use-cache style is set. \ncache-policy \nThis style defines the function that will be used to determine whether a cache needs rebuilding. See the section on the _cache_invalid function below. \ncall-command \nThis style is used in the function for commands such as make and ant where calling the command directly to generate matches suffers problems such as being slow or, as in the case of make can potentially cause actions in the makefile to be executed. If it is set to ‘true’ the command is called to generate matches. The default value of this style is ‘false’. \ncommand \nIn many places, completion functions need to call external commands to generate the list of completions. This style can be used to override the command that is called in some such cases. The elements of the value are joined with spaces to form a command line to execute. The value can also start with a hyphen, in which case the usual command will be added to the end; this is most useful for putting ‘builtin’ or ‘command’ in front to make sure the appropriate version of a command is called, for example to avoid calling a shell function with the same name as an external command. \nAs an example, the completion function for process IDs uses this style with the processes tag to generate the IDs to complete and the list of processes to display (if the verbose style is ‘true’). The list produced by the command should look like the output of the ps command. The first line is not displayed, but is searched for the string ‘PID’ (or ‘pid’) to find the position of the process IDs in the following lines. If the line does not contain ‘PID’, the first numbers in each of the other lines are taken as the process IDs to complete. \nNote that the completion function generally has to call the specified command for each attempt to generate the completion list. Hence care should be taken to specify only commands that take a short time to run, and in particular to avoid any that may never terminate. \ncommand-path \nThis is a list of directories to search for commands to complete. The default for this style is the value of the special parameter path. \ncommands \nThis is used by the function completing sub-commands for the system initialisation scripts (residing in /etc/init.d or somewhere not too far away from that). Its values give the default commands to complete for those commands for which the completion function isn’t able to find them out automatically. The default for this style are the two strings ‘start’ and ‘stop’. \ncomplete \nThis is used by the _expand_alias function when invoked as a bindable command. If set to ‘true’ and the word on the command line is not the name of an alias, matching alias names will be completed. \ncomplete-options \nThis is used by the completer for cd, chdir and pushd. For these commands a - is used to introduce a directory stack entry and completion of these is far more common than completing options. Hence unless the value of this style is ‘true’ options will not be completed, even after an initial -. If it is ‘true’, options will be completed after an initial - unless there is a preceding -- on the command line. \ncompleter \nThe strings given as the value of this style provide the names of the completer functions to use. The available completer functions are described in Control Functions. \nEach string may be either the name of a completer function or a string of the form ‘function:name’. In the first case the completer field of the context will contain the name of the completer without the leading underscore and with all other underscores replaced by hyphens. In the second case the function is the name of the completer to call, but the context will contain the user-defined name in the completer field of the context. If the name starts with a hyphen, the string for the context will be build from the name of the completer function as in the first case with the name appended to it. For example: \nzstyle ':completion:*' completer _complete _complete:-foo\nHere, completion will call the _complete completer twice, once using ‘complete’ and once using ‘complete-foo’ in the completer field of the context. Normally, using the same completer more than once only makes sense when used with the ‘functions:name’ form, because otherwise the context name will be the same in all calls to the completer; possible exceptions to this rule are the _ignored and _prefix completers. \nThe default value for this style is ‘_complete _ignored’: only completion will be done, first using the ignored-patterns style and the $fignore array and then without ignoring matches. \ncondition \nThis style is used by the _list completer function to decide if insertion of matches should be delayed unconditionally. The default is ‘true’. \ndelimiters \nThis style is used when adding a delimiter for use with history modifiers or glob qualifiers that have delimited arguments. It is an array of preferred delimiters to add. Non-special characters are preferred as the completion system may otherwise become confused. The default list is :, +, /, -, %. The list may be empty to force a delimiter to be typed. \ndisabled \nIf this is set to ‘true’, the _expand_alias completer and bindable command will try to expand disabled aliases, too. The default is ‘false’. \ndomains \nA list of names of network domains for completion. If this is not set, domain names will be taken from the file /etc/resolv.conf. \nenviron \nThe environ style is used when completing for ‘sudo’. It is set to an array of ‘VAR=value’ assignments to be exported into the local environment before the completion for the target command is invoked. \nzstyle ':completion:*:sudo::' environ \\ \n  PATH=\"/sbin:/usr/sbin:$PATH\" HOME=\"/root\"\nexpand \nThis style is used when completing strings consisting of multiple parts, such as path names. \nIf one of its values is the string ‘prefix’, the partially typed word from the line will be expanded as far as possible even if trailing parts cannot be completed. \nIf one of its values is the string ‘suffix’, matching names for components after the first ambiguous one will also be added. This means that the resulting string is the longest unambiguous string possible. However, menu completion can be used to cycle through all matches. \nextra-verbose \nIf set, the completion listing is more verbose at the cost of a probable decrease in completion speed. Completion performance will suffer if this style is set to ‘true’. \nfake \nThis style may be set for any completion context. It specifies additional strings that will always be completed in that context. The form of each string is ‘value:description’; the colon and description may be omitted, but any literal colons in value must be quoted with a backslash. Any description provided is shown alongside the value in completion listings. \nIt is important to use a sufficiently restrictive context when specifying fake strings. Note that the styles fake-files and fake-parameters provide additional features when completing files or parameters. \nfake-always \nThis works identically to the fake style except that the ignored-patterns style is not applied to it. This makes it possible to override a set of matches completely by setting the ignored patterns to ‘*’. \nThe following shows a way of supplementing any tag with arbitrary data, but having it behave for display purposes like a separate tag. In this example we use the features of the tag-order style to divide the named-directories tag into two when performing completion with the standard completer complete for arguments of cd. The tag named-directories-normal behaves as normal, but the tag named-directories-mine contains a fixed set of directories. This has the effect of adding the match group ‘extra directories’ with the given completions. \nzstyle ':completion::complete:cd:*' tag-order \\ \n  'named-directories:-mine:extra\\ directories\n  named-directories:-normal:named\\ directories *'\nzstyle ':completion::complete:cd:*:named-directories-mine' \\ \n  fake-always mydir1 mydir2\nzstyle ':completion::complete:cd:*:named-directories-mine' \\ \n  ignored-patterns '*'\nfake-files \nThis style is used when completing files and looked up without a tag. Its values are of the form ‘dir:names...’. This will add the names (strings separated by spaces) as possible matches when completing in the directory dir, even if no such files really exist. The dir may be a pattern; pattern characters or colons in dir should be quoted with a backslash to be treated literally. \nThis can be useful on systems that support special file systems whose top-level pathnames can not be listed or generated with glob patterns (but see accept-exact-dirs for a more general way of dealing with this problem). It can also be used for directories for which one does not have read permission. \nThe pattern form can be used to add a certain ‘magic’ entry to all directories on a particular file system. \nfake-parameters \nThis is used by the completion function for parameter names. Its values are names of parameters that might not yet be set but should be completed nonetheless. Each name may also be followed by a colon and a string specifying the type of the parameter (like ‘scalar’, ‘array’ or ‘integer’). If the type is given, the name will only be completed if parameters of that type are required in the particular context. Names for which no type is specified will always be completed. \nfile-list \nThis style controls whether files completed using the standard builtin mechanism are to be listed with a long list similar to ls -l. Note that this feature uses the shell module zsh/stat for file information; this loads the builtin stat which will replace any external stat executable. To avoid this the following code can be included in an initialization file: \nzmodload -i zsh/stat\ndisable stat\nThe style may either be set to a ‘true’ value (or ‘all’), or one of the values ‘insert’ or ‘list’, indicating that files are to be listed in long format in all circumstances, or when attempting to insert a file name, or when listing file names without attempting to insert one. \nMore generally, the value may be an array of any of the above values, optionally followed by =num. If num is present it gives the maximum number of matches for which long listing style will be used. For example, \nzstyle ':completion:*' file-list list=20 insert=10\nspecifies that long format will be used when listing up to 20 files or inserting a file with up to 10 matches (assuming a listing is to be shown at all, for example on an ambiguous completion), else short format will be used. \nzstyle -e ':completion:*' file-list \\ \n       '(( ${+NUMERIC} )) && reply=(true)'\nspecifies that long format will be used any time a numeric argument is supplied, else short format. \nfile-patterns \nThis is used by the standard function for completing filenames, _files. If the style is unset up to three tags are offered, ‘globbed-files’,‘directories’ and ‘all-files’, depending on the types of files expected by the caller of _files. The first two (‘globbed-files’ and ‘directories’) are normally offered together to make it easier to complete files in sub-directories. \nThe file-patterns style provides alternatives to the default tags, which are not used. Its value consists of elements of the form ‘pattern:tag’; each string may contain any number of such specifications separated by spaces. \nThe pattern is a pattern that is to be used to generate filenames. Any occurrence of the sequence ‘%p’ is replaced by any pattern(s) passed by the function calling _files. Colons in the pattern must be preceded by a backslash to make them distinguishable from the colon before the tag. If more than one pattern is needed, the patterns can be given inside braces, separated by commas. \nThe tags of all strings in the value will be offered by _files and used when looking up other styles. Any tags in the same word will be offered at the same time and before later words. If no ‘:tag’ is given the ‘files’ tag will be used. \nThe tag may also be followed by an optional second colon and a description, which will be used for the ‘%d’ in the value of the format style (if that is set) instead of the default description supplied by the completion function. The inclusion of a description also gives precedence to associated options such as for completion grouping so it can be used where files should be separated. \nFor example, to make the rm command first complete only names of object files and then the names of all files if there is no matching object file: \nzstyle ':completion:*:*:rm:*:*' file-patterns \\ \n    '*.o:object-files' '%p:all-files'\nTo alter the default behaviour of file completion — offer files matching a pattern and directories on the first attempt, then all files — to offer only matching files on the first attempt, then directories, and finally all files: \nzstyle ':completion:*' file-patterns \\ \n    '%p:globbed-files' '*(-/):directories' '*:all-files'\nThis works even where there is no special pattern: _files matches all files using the pattern ‘*’ at the first step and stops when it sees this pattern. Note also it will never try a pattern more than once for a single completion attempt. \nTo separate directories into a separate group from the files but still complete them at the first attempt, a description needs to be given. Note that directories need to be explicitly excluded from the globbed-files because ‘*’ will match directories. For grouping, it is also necessary to set the group-name style. \nzstyle ':completion:*' file-patterns \\ \n    '%p(^-/):globbed-files *(-/):directories:location'\nDuring the execution of completion functions, the EXTENDED_GLOB option is in effect, so the characters ‘#’, ‘~’ and ‘^’ have special meanings in the patterns. \nfile-sort \nThe standard filename completion function uses this style without a tag to determine in which order the names should be listed; menu completion will cycle through them in the same order. The possible values are: ‘size’ to sort by the size of the file; ‘links’ to sort by the number of links to the file; ‘modification’ (or ‘time’ or ‘date’) to sort by the last modification time; ‘access’ to sort by the last access time; and ‘inode’ (or ‘change’) to sort by the last inode change time. If the style is set to any other value, or is unset, files will be sorted alphabetically by name. If the value contains the string ‘reverse’, sorting is done in the opposite order. If the value contains the string ‘follow’, timestamps are associated with the targets of symbolic links; the default is to use the timestamps of the links themselves. \nfile-split-chars \nA set of characters that will cause all file completions for the given context to be split at the point where any of the characters occurs. A typical use is to set the style to :; then everything up to and including the last : in the string so far is ignored when completing files. As this is quite heavy-handed, it is usually preferable to update completion functions for contexts where this behaviour is useful. \nfilter \nThe ldap plugin of email address completion (see _email_addresses) uses this style to specify the attributes to match against when filtering entries. So for example, if the style is set to ‘sn’, matching is done against surnames. Standard LDAP filtering is used so normal completion matching is bypassed. If this style is not set, the LDAP plugin is skipped. You may also need to set the command style to specify how to connect to your LDAP server. \nforce-list \nThis forces a list of completions to be shown at any point where listing is done, even in cases where the list would usually be suppressed. For example, normally the list is only shown if there are at least two different matches. By setting this style to ‘always’, the list will always be shown, even if there is only a single match that will immediately be accepted. The style may also be set to a number. In this case the list will be shown if there are at least that many matches, even if they would all insert the same string. \nThis style is tested for the default tag as well as for each tag valid for the current completion. Hence the listing can be forced only for certain types of match. \nformat \nIf this is set for the descriptions tag, its value is used as a string to display above matches in completion lists. The sequence ‘%d’ in this string will be replaced with a short description of what these matches are. This string may also contain the output attribute sequences understood by compadd -X (see Completion Widgets). \nThe style is tested with each tag valid for the current completion before it is tested for the descriptions tag. Hence different format strings can be defined for different types of match. \nNote also that some completer functions define additional ‘%’-sequences. These are described for the completer functions that make use of them. \nSome completion functions display messages that may be customised by setting this style for the messages tag. Here, the ‘%d’ is replaced with a message given by the completion function. \nFinally, the format string is looked up with the warnings tag, for use when no matches could be generated at all. In this case the ‘%d’ is replaced with the descriptions for the matches that were expected separated by spaces. The sequence ‘%D’ is replaced with the same descriptions separated by newlines. \nIt is possible to use printf-style field width specifiers with ‘%d’ and similar escape sequences. This is handled by the zformat builtin command from the zsh/zutil module, see The zsh/zutil Module. \ngain-privileges \nIf set to true, this style enables the use of commands like sudo or doas to gain extra privileges when retrieving information for completion. This is only done when a command such as sudo appears on the command-line. To force the use of, e.g. sudo or to override any prefix that might be added due to gain-privileges, the command style can be used with a value that begins with a hyphen. \nglob \nThis is used by the _expand completer. If it is set to ‘true’ (the default), globbing will be attempted on the words resulting from a previous substitution (see the substitute style) or else the original string from the line. \nglobal \nIf this is set to ‘true’ (the default), the _expand_alias completer and bindable command will try to expand global aliases. \ngroup-name \nThe completion system can group different types of matches, which appear in separate lists. This style can be used to give the names of groups for particular tags. For example, in command position the completion system generates names of builtin and external commands, names of aliases, shell functions and parameters and reserved words as possible completions. To have the external commands and shell functions listed separately: \nzstyle ':completion:*:*:-command-:*:commands' \\ \n       group-name commands\nzstyle ':completion:*:*:-command-:*:functions' \\ \n       group-name functions\nAs a consequence, any match with the same tag will be displayed in the same group. \nIf the name given is the empty string the name of the tag for the matches will be used as the name of the group. So, to have all different types of matches displayed separately, one can just set: \nzstyle ':completion:*' group-name ''\nAll matches for which no group name is defined will be put in a group named -default-. \nTo display the group name in the output, see the format style (q.v.) under the descriptions tag. \ngroup-order \nThis style is additional to the group-name style to specify the order for display of the groups defined by that style (compare tag-order, which determines which completions appear at all). The groups named are shown in the given order; any other groups are shown in the order defined by the completion function. \nFor example, to have names of builtin commands, shell functions and external commands appear in that order when completing in command position: \nzstyle ':completion:*:*:-command-:*:*' group-order \\ \n       builtins functions commands\ngroups \nA list of names of UNIX groups. If this is not set, group names are taken from the YP database or the file ‘/etc/group’. \nhidden \nIf this is set to ‘true’, matches for the given context will not be listed, although any description for the matches set with the format style will be shown. If it is set to ‘all’, not even the description will be displayed. \nNote that the matches will still be completed; they are just not shown in the list. To avoid having matches considered as possible completions at all, the tag-order style can be modified as described below. \nhosts \nA list of names of hosts that should be completed. If this is not set, hostnames are taken from the file ‘/etc/hosts’. \nhosts-ports \nThis style is used by commands that need or accept hostnames and network ports. The strings in the value should be of the form ‘host:port’. Valid ports are determined by the presence of hostnames; multiple ports for the same host may appear. \nignore-line \nThis is tested for each tag valid for the current completion. If it is set to ‘true’, none of the words that are already on the line will be considered as possible completions. If it is set to ‘current’, the word the cursor is on will not be considered as a possible completion. The value ‘current-shown’ is similar but only applies if the list of completions is currently shown on the screen. Finally, if the style is set to ‘other’, all words on the line except for the current one will be excluded from the possible completions. \nThe values ‘current’ and ‘current-shown’ are a bit like the opposite of the accept-exact style: only strings with missing characters will be completed. \nNote that you almost certainly don’t want to set this to ‘true’ or ‘other’ for a general context such as ‘:completion:*’. This is because it would disallow completion of, for example, options multiple times even if the command in question accepts the option more than once. \nignore-parents \nThe style is tested without a tag by the function completing pathnames in order to determine whether to ignore the names of directories already mentioned in the current word, or the name of the current working directory. The value must include one or both of the following strings: \nparent \nThe name of any directory whose path is already contained in the word on the line is ignored. For example, when completing after foo/../, the directory foo will not be considered a valid completion. \npwd \nThe name of the current working directory will not be completed; hence, for example, completion after ../ will not use the name of the current directory. \nIn addition, the value may include one or both of: \n.. \nIgnore the specified directories only when the word on the line contains the substring ‘../’. \ndirectory \nIgnore the specified directories only when names of directories are completed, not when completing names of files. \nExcluded values act in a similar fashion to values of the ignored-patterns style, so they can be restored to consideration by the _ignored completer. \nignored-patterns \nA list of patterns; any trial completion matching one of the patterns will be excluded from consideration. The _ignored completer can appear in the list of completers to restore the ignored matches. This is a more configurable version of the shell parameter $fignore. \nNote that the EXTENDED_GLOB option is set during the execution of completion functions, so the characters ‘#’, ‘~’ and ‘^’ have special meanings in the patterns. \ninsert \nThis style is used by the _all_matches completer to decide whether to insert the list of all matches unconditionally instead of adding the list as another match. \ninsert-ids \nWhen completing process IDs, for example as arguments to the kill and wait builtins the name of a command may be converted to the appropriate process ID. A problem arises when the process name typed is not unique. By default (or if this style is set explicitly to ‘menu’) the name will be converted immediately to a set of possible IDs, and menu completion will be started to cycle through them. \nIf the value of the style is ‘single’, the shell will wait until the user has typed enough to make the command unique before converting the name to an ID; attempts at completion will be unsuccessful until that point. If the value is any other string, menu completion will be started when the string typed by the user is longer than the common prefix to the corresponding IDs. \ninsert-sections \nThis style is used with tags of the form ‘manuals.X’ when completing names of manual pages. If set and the X in the tag name matches the section number of the page being completed, the section number is inserted along with the page name. For example, given \nzstyle ':completion:*:manuals.*' insert-sections true\nman ssh_<TAB> may be completed to man 5 ssh_config. \nThe value may also be set to one of ‘prepend’, or ‘suffix’. ‘prepend’ behaves the same as ‘true’ as in the above example, while ‘suffix’ would complete man ssh_<TAB> as man ssh_config.5. \nThis is especially useful in conjunction with separate-sections, as it ensures that the page requested of man corresponds to the one displayed in the completion listing when there are multiple pages with the same name (e.g., printf(1) and printf(3)). \nThe default for this style is ‘false’. \ninsert-tab \nIf this is set to ‘true’, the completion system will insert a TAB character (assuming that was used to start completion) instead of performing completion when there is no non-blank character to the left of the cursor. If it is set to ‘false’, completion will be done even there. \nThe value may also contain the substrings ‘pending’ or ‘pending=val’. In this case, the typed character will be inserted instead of starting completion when there is unprocessed input pending. If a val is given, completion will not be done if there are at least that many characters of unprocessed input. This is often useful when pasting characters into a terminal. Note however, that it relies on the $PENDING special parameter from the zsh/zle module being set properly which is not guaranteed on all platforms. \nThe default value of this style is ‘true’ except for completion within vared builtin command where it is ‘false’. \ninsert-unambiguous \nThis is used by the _match and _approximate completers. These completers are often used with menu completion since the word typed may bear little resemblance to the final completion. However, if this style is ‘true’, the completer will start menu completion only if it could find no unambiguous initial string at least as long as the original string typed by the user. \nIn the case of the _approximate completer, the completer field in the context will already have been set to one of correct-num or approximate-num, where num is the number of errors that were accepted. \nIn the case of the _match completer, the style may also be set to the string ‘pattern’. Then the pattern on the line is left unchanged if it does not match unambiguously. \nkeep-prefix \nThis style is used by the _expand completer. If it is ‘true’, the completer will try to keep a prefix containing a tilde or parameter expansion. Hence, for example, the string ‘~/f*’ would be expanded to ‘~/foo’ instead of ‘/home/user/foo’. If the style is set to ‘changed’ (the default), the prefix will only be left unchanged if there were other changes between the expanded words and the original word from the command line. Any other value forces the prefix to be expanded unconditionally. \nThe behaviour of _expand when this style is ‘true’ is to cause _expand to give up when a single expansion with the restored prefix is the same as the original; hence any remaining completers may be called. \nknown-hosts-files \nThis style should contain a list of files to search for host names and (if the use-ip style is set) IP addresses in a format compatible with ssh known_hosts files. If it is not set, the files /etc/ssh/ssh_known_hosts and ~/.ssh/known_hosts are used. \nlast-prompt \nThis is a more flexible form of the ALWAYS_LAST_PROMPT option. If it is ‘true’, the completion system will try to return the cursor to the previous command line after displaying a completion list. It is tested for all tags valid for the current completion, then the default tag. The cursor will be moved back to the previous line if this style is ‘true’ for all types of match. Note that unlike the ALWAYS_LAST_PROMPT option this is independent of the numeric argument. \nlist \nThis style is used by the _history_complete_word bindable command. If it is set to ‘true’ it has no effect. If it is set to ‘false’ matches will not be listed. This overrides the setting of the options controlling listing behaviour, in particular AUTO_LIST. The context always starts with ‘:completion:history-words’. \nlist-colors \nIf the zsh/complist module is loaded, this style can be used to set color specifications. This mechanism replaces the use of the ZLS_COLORS and ZLS_COLOURS parameters described in The zsh/complist Module, but the syntax is the same. \nIf this style is set for the default tag, the strings in the value are taken as specifications that are to be used everywhere. If it is set for other tags, the specifications are used only for matches of the type described by the tag. For this to work best, the group-name style must be set to an empty string. \nIn addition to setting styles for specific tags, it is also possible to use group names specified explicitly by the group-name tag together with the ‘(group)’ syntax allowed by the ZLS_COLORS and ZLS_COLOURS parameters and simply using the default tag. \nIt is possible to use any color specifications already set up for the GNU version of the ls command: \nzstyle ':completion:*:default' list-colors \\ \n       ${(s.:.)LS_COLORS}\nThe default colors are the same as for the GNU ls command and can be obtained by setting the style to an empty string (i.e. ’’). \nlist-dirs-first \nThis is used by file completion and corresponds to a particular setting of the file-patterns style. If set, the default directories to be completed are listed separately from and before completion for other files. \nlist-grouped \nIf this style is ‘true’ (the default), the completion system will try to make certain completion listings more compact by grouping matches. For example, options for commands that have the same description (shown when the verbose style is set to ‘true’) will appear as a single entry. However, menu selection can be used to cycle through all the matches. \nlist-packed \nThis is tested for each tag valid in the current context as well as the default tag. If it is set to ‘true’, the corresponding matches appear in listings as if the LIST_PACKED option were set. If it is set to ‘false’, they are listed normally. \nlist-prompt \nIf this style is set for the default tag, completion lists that don’t fit on the screen can be scrolled (see The zsh/complist Module). The value, if not the empty string, will be displayed after every screenful and the shell will prompt for a key press; if the style is set to the empty string, a default prompt will be used. \nThe value may contain the escape sequences: ‘%l’ or ‘%L’, which will be replaced by the number of the last line displayed and the total number of lines; ‘%m’ or ‘%M’, the number of the last match shown and the total number of matches; and ‘%p’ and ‘%P’, ‘Top’ when at the beginning of the list, ‘Bottom’ when at the end and the position shown as a percentage of the total length otherwise. In each case the form with the uppercase letter will be replaced by a string of fixed width, padded to the right with spaces, while the lowercase form will be replaced by a variable width string. As in other prompt strings, the escape sequences ‘%S’, ‘%s’, ‘%B’, ‘%b’, ‘%U’, ‘%u’ for entering and leaving the display modes standout, bold and underline, and ‘%F’, ‘%f’, ‘%K’, ‘%k’ for changing the foreground background colour, are also available, as is the form ‘%{...%}’ for enclosing escape sequences which display with zero (or, with a numeric argument, some other) width. \nAfter deleting this prompt the variable LISTPROMPT should be unset for the removal to take effect. \nlist-rows-first \nThis style is tested in the same way as the list-packed style and determines whether matches are to be listed in a rows-first fashion as if the LIST_ROWS_FIRST option were set. \nlist-separator \nThe value of this style is used in completion listing to separate the string to complete from a description when possible (e.g. when completing options). It defaults to ‘--’ (two hyphens). \nlist-suffixes \nThis style is used by the function that completes filenames. If it is ‘true’, and completion is attempted on a string containing multiple partially typed pathname components, all ambiguous components will be shown. Otherwise, completion stops at the first ambiguous component. \nlocal \nThis is for use with functions that complete URLs for which the corresponding files are available directly from the file system. Its value should consist of three strings: a hostname, the path to the default web pages for the server, and the directory name used by a user placing web pages within their home area. \nFor example: \nzstyle ':completion:*' local toast \\ \n    /var/http/public/toast public_html\nCompletion after ‘http://toast/stuff/’ will look for files in the directory /var/http/public/toast/stuff, while completion after ‘http://toast/~yousir/’ will look for files in the directory ~yousir/public_html. \nmail-directory \nIf set, zsh will assume that mailbox files can be found in the directory specified. It defaults to ‘~/Mail’. \nmatch-original \nThis is used by the _match completer. If it is set to only, _match will try to generate matches without inserting a ‘*’ at the cursor position. If set to any other non-empty value, it will first try to generate matches without inserting the ‘*’ and if that yields no matches, it will try again with the ‘*’ inserted. If it is unset or set to the empty string, matching will only be performed with the ‘*’ inserted. \nmatcher \nThis style is tested separately for each tag valid in the current context. Its value is placed before any match specifications given by the matcher-list style so can override them via the use of an x: specification. The value should be in the form described in Completion Matching Control. For examples of this, see the description of the tag-order style. \nFor notes comparing the use of this and the matcher-list style, see under the description of the tag-order style. \nmatcher-list \nThis style can be set to a list of match specifications that are to be applied everywhere. Match specifications are described in Completion Matching Control. The completion system will try them one after another for each completer selected. For example, to try first simple completion and, if that generates no matches, case-insensitive completion: \nzstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'\nBy default each specification replaces the previous one; however, if a specification is prefixed with +, it is added to the existing list. Hence it is possible to create increasingly general specifications without repetition: \nzstyle ':completion:*' matcher-list \\ \n       '' '+m:{a-z}={A-Z}' '+m:{A-Z}={a-z}'\nIt is possible to create match specifications valid for particular completers by using the third field of the context. This applies only to completers that override the global matcher-list, which as of this writing includes only _prefix and _ignored. For example, to use the completers _complete and _prefix but allow case-insensitive completion only with _complete: \nzstyle ':completion:*' completer _complete _prefix\nzstyle ':completion:*:complete:*:*:*' matcher-list \\ \n       '' 'm:{a-zA-Z}={A-Za-z}'\nUser-defined names, as explained for the completer style, are available. This makes it possible to try the same completer more than once with different match specifications each time. For example, to try normal completion without a match specification, then normal completion with case-insensitive matching, then correction, and finally partial-word completion: \nzstyle ':completion:*' completer \\ \n    _complete _correct _complete:foo\nzstyle ':completion:*:complete:*:*:*' matcher-list \\ \n    '' 'm:{a-zA-Z}={A-Za-z}'\nzstyle ':completion:*:foo:*:*:*' matcher-list \\ \n    'm:{a-zA-Z}={A-Za-z} r:|[-_./]=* r:|=*'\nIf the style is unset in any context no match specification is applied. Note also that some completers such as _correct and _approximate do not use the match specifications at all, though these completers will only ever be called once even if the matcher-list contains more than one element. \nWhere multiple specifications are useful, note that the entire completion is done for each element of matcher-list, which can quickly reduce the shell’s performance. As a rough rule of thumb, one to three strings will give acceptable performance. On the other hand, putting multiple space-separated values into the same string does not have an appreciable impact on performance. \nIf there is no current matcher or it is empty, and the option NO_CASE_GLOB is in effect, the matching for files is performed case-insensitively in any case. However, any matcher must explicitly specify case-insensitive matching if that is required. \nFor notes comparing the use of this and the matcher style, see under the description of the tag-order style. \nmax-errors \nThis is used by the _approximate and _correct completer functions to determine the maximum number of errors to allow. The completer will try to generate completions by first allowing one error, then two errors, and so on, until either a match or matches were found or the maximum number of errors given by this style has been reached. \nIf the value for this style contains the string ‘numeric’, the completer function will take any numeric argument as the maximum number of errors allowed. For example, with \nzstyle ':completion:*:approximate:::' max-errors 2 numeric\ntwo errors are allowed if no numeric argument is given, but with a numeric argument of six (as in ‘ESC-6 TAB’), up to six errors are accepted. Hence with a value of ‘0 numeric’, no correcting completion will be attempted unless a numeric argument is given. \nIf the value contains the string ‘not-numeric’, the completer will not try to generate corrected completions when given a numeric argument, so in this case the number given should be greater than zero. For example, ‘2 not-numeric’ specifies that correcting completion with two errors will usually be performed, but if a numeric argument is given, correcting completion will not be performed. \nThe default value for this style is ‘2 numeric’. \nmax-matches-width \nThis style is used to determine the trade off between the width of the display used for matches and the width used for their descriptions when the verbose style is in effect. The value gives the number of display columns to reserve for the matches. The default is half the width of the screen. \nThis has the most impact when several matches have the same description and so will be grouped together. Increasing the style will allow more matches to be grouped together; decreasing it will allow more of the description to be visible. \nmenu \nIf this is ‘true’ in the context of any of the tags defined for the current completion menu completion will be used. The value for a specific tag will take precedence over that for the ‘default’ tag. \nIf none of the values found in this way is ‘true’ but at least one is set to ‘auto’, the shell behaves as if the AUTO_MENU option is set. \nIf one of the values is explicitly set to ‘false’, menu completion will be explicitly turned off, overriding the MENU_COMPLETE option and other settings. \nIn the form ‘yes=num’, where ‘yes’ may be any of the ‘true’ values (‘yes’, ‘true’, ‘on’ and ‘1’), menu completion will be turned on if there are at least num matches. In the form ‘yes=long’, menu completion will be turned on if the list does not fit on the screen. This does not activate menu completion if the widget normally only lists completions, but menu completion can be activated in that case with the value ‘yes=long-list’ (Typically, the value ‘select=long-list’ described later is more useful as it provides control over scrolling.) \nSimilarly, with any of the ‘false’ values (as in ‘no=10’), menu completion will not be used if there are num or more matches. \nThe value of this widget also controls menu selection, as implemented by the zsh/complist module. The following values may appear either alongside or instead of the values above. \nIf the value contains the string ‘select’, menu selection will be started unconditionally. \nIn the form ‘select=num’, menu selection will only be started if there are at least num matches. If the values for more than one tag provide a number, the smallest number is taken. \nMenu selection can be turned off explicitly by defining a value containing the string‘no-select’. \nIt is also possible to start menu selection only if the list of matches does not fit on the screen by using the value ‘select=long’. To start menu selection even if the current widget only performs listing, use the value ‘select=long-list’. \nTo turn on menu completion or menu selection when there are a certain number of matches or the list of matches does not fit on the screen, both of ‘yes=’ and ‘select=’ may be given twice, once with a number and once with ‘long’ or ‘long-list’. \nFinally, it is possible to activate two special modes of menu selection. The word ‘interactive’ in the value causes interactive mode to be entered immediately when menu selection is started; see The zsh/complist Module for a description of interactive mode. Including the string ‘search’ does the same for incremental search mode. To select backward incremental search, include the string ‘search-backward’. \nmuttrc \nIf set, gives the location of the mutt configuration file. It defaults to ‘~/.muttrc’. \nnumbers \nThis is used with the jobs tag. If it is ‘true’, the shell will complete job numbers instead of the shortest unambiguous prefix of the job command text. If the value is a number, job numbers will only be used if that many words from the job descriptions are required to resolve ambiguities. For example, if the value is ‘1’, strings will only be used if all jobs differ in the first word on their command lines. \nold-list \nThis is used by the _oldlist completer. If it is set to ‘always’, then standard widgets which perform listing will retain the current list of matches, however they were generated; this can be turned off explicitly with the value ‘never’, giving the behaviour without the _oldlist completer. If the style is unset, or any other value, then the existing list of completions is displayed if it is not already; otherwise, the standard completion list is generated; this is the default behaviour of _oldlist. However, if there is an old list and this style contains the name of the completer function that generated the list, then the old list will be used even if it was generated by a widget which does not do listing. \nFor example, suppose you type ^Xc to use the _correct_word widget, which generates a list of corrections for the word under the cursor. Usually, typing ^D would generate a standard list of completions for the word on the command line, and show that. With _oldlist, it will instead show the list of corrections already generated. \nAs another example consider the _match completer: with the insert-unambiguous style set to ‘true’ it inserts only a common prefix string, if there is any. However, this may remove parts of the original pattern, so that further completion could produce more matches than on the first attempt. By using the _oldlist completer and setting this style to _match, the list of matches generated on the first attempt will be used again. \nold-matches \nThis is used by the _all_matches completer to decide if an old list of matches should be used if one exists. This is selected by one of the ‘true’ values or by the string ‘only’. If the value is ‘only’, _all_matches will only use an old list and won’t have any effect on the list of matches currently being generated. \nIf this style is set it is generally unwise to call the _all_matches completer unconditionally. One possible use is for either this style or the completer style to be defined with the -e option to zstyle to make the style conditional. \nold-menu \nThis is used by the _oldlist completer. It controls how menu completion behaves when a completion has already been inserted and the user types a standard completion key such as TAB. The default behaviour of _oldlist is that menu completion always continues with the existing list of completions. If this style is set to ‘false’, however, a new completion is started if the old list was generated by a different completion command; this is the behaviour without the _oldlist completer. \nFor example, suppose you type ^Xc to generate a list of corrections, and menu completion is started in one of the usual ways. Usually, or with this style set to ‘false’, typing TAB at this point would start trying to complete the line as it now appears. With _oldlist, it instead continues to cycle through the list of corrections. \noriginal \nThis is used by the _approximate and _correct completers to decide if the original string should be added as a possible completion. Normally, this is done only if there are at least two possible corrections, but if this style is set to ‘true’, it is always added. Note that the style will be examined with the completer field in the context name set to correct-num or approximate-num, where num is the number of errors that were accepted. \npackageset \nThis style is used when completing arguments of the Debian ‘dpkg’ program. It contains an override for the default package set for a given context. For example, \nzstyle ':completion:*:complete:dpkg:option--status-1:*' \\ \n               packageset avail\ncauses available packages, rather than only installed packages, to be completed for ‘dpkg --status’. \npath \nThe function that completes color names uses this style with the colors tag. The value should be the pathname of a file containing color names in the format of an X11 rgb.txt file. If the style is not set but this file is found in one of various standard locations it will be used as the default. \npath-completion \nThis is used by filename completion. By default, filename completion examines all components of a path to see if there are completions of that component. For example, /u/b/z can be completed to /usr/bin/zsh. Explicitly setting this style to ‘false’ inhibits this behaviour for path components up to the / before the cursor; this overrides the setting of accept-exact-dirs. \nEven with the style set to ‘false’, it is still possible to complete multiple paths by setting the option COMPLETE_IN_WORD and moving the cursor back to the first component in the path to be completed. For example, /u/b/z can be completed to /usr/bin/zsh if the cursor is after the /u. \npine-directory \nIf set, specifies the directory containing PINE mailbox files. There is no default, since recursively searching this directory is inconvenient for anyone who doesn’t use PINE. \nports \nA list of Internet service names (network ports) to complete. If this is not set, service names are taken from the file ‘/etc/services’. \nprefix-hidden \nThis is used for certain completions which share a common prefix, for example command options beginning with dashes. If it is ‘true’, the prefix will not be shown in the list of matches. \nThe default value for this style is ‘false’. \nprefix-needed \nThis style is also relevant for matches with a common prefix. If it is set to ‘true’ this common prefix must be typed by the user to generate the matches. \nThe style is applicable to the options, signals, jobs, functions, and parameters completion tags. \nFor command options, this means that the initial ‘-’, ‘+’, or ‘--’ must be typed explicitly before option names will be completed. \nFor signals, an initial ‘-’ is required before signal names will be completed. \nFor jobs, an initial ‘%’ is required before job names will be completed. \nFor function and parameter names, an initial ‘_’ or ‘.’ is required before function or parameter names starting with those characters will be completed. \nThe default value for this style is ‘false’ for function and parameter completions, and ‘true’ otherwise. \npreserve-prefix \nThis style is used when completing path names. Its value should be a pattern matching an initial prefix of the word to complete that should be left unchanged under all circumstances. For example, on some Unices an initial ‘//’ (double slash) has a special meaning; setting this style to the string ‘//’ will preserve it. As another example, setting this style to ‘?:/’ under Cygwin would allow completion after ‘a:/...’ and so on. \nrange \nThis is used by the _history completer and the _history_complete_word bindable command to decide which words should be completed. \nIf it is a single number, only the last N words from the history will be completed. \nIf it is a range of the form ‘max:slice’, the last slice words will be completed; then if that yields no matches, the slice words before those will be tried and so on. This process stops either when at least one match has been found, or max words have been tried. \nThe default is to complete all words from the history at once. \nrecursive-files \nIf this style is set, its value is an array of patterns to be tested against ‘$PWD/’: note the trailing slash, which allows directories in the pattern to be delimited unambiguously by including slashes on both sides. If an ordinary file completion fails and the word on the command line does not yet have a directory part to its name, the style is retrieved using the same tag as for the completion just attempted, then the elements tested against $PWD/ in turn. If one matches, then the shell reattempts completion by prepending the word on the command line with each directory in the expansion of **/*(/) in turn. Typically the elements of the style will be set to restrict the number of directories beneath the current one to a manageable number, for example ‘*/.git/*’. \nFor example, \nzstyle ':completion:*' recursive-files '*/zsh/*'\nIf the current directory is /home/pws/zsh/Src, then zle_tr<TAB> can be completed to Zle/zle_tricky.c. \nregular \nThis style is used by the _expand_alias completer and bindable command. If set to ‘true’ (the default), regular aliases will be expanded but only in command position. If it is set to ‘false’, regular aliases will never be expanded. If it is set to ‘always’, regular aliases will be expanded even if not in command position. \nrehash \nIf this is set when completing external commands, the internal list (hash) of commands will be updated for each search by issuing the rehash command. There is a speed penalty for this which is only likely to be noticeable when directories in the path have slow file access. \nremote-access \nIf set to ‘false’, certain commands will be prevented from making Internet connections to retrieve remote information. This includes the completion for the CVS command. \nIt is not always possible to know if connections are in fact to a remote site, so some may be prevented unnecessarily. \nremove-all-dups \nThe _history_complete_word bindable command and the _history completer use this to decide if all duplicate matches should be removed, rather than just consecutive duplicates. \nselect-prompt \nIf this is set for the default tag, its value will be displayed during menu selection (see the menu style above) when the completion list does not fit on the screen as a whole. The same escapes as for the list-prompt style are understood, except that the numbers refer to the match or line the mark is on. A default prompt is used when the value is the empty string. \nselect-scroll \nThis style is tested for the default tag and determines how a completion list is scrolled during a menu selection (see the menu style above) when the completion list does not fit on the screen as a whole. If the value is ‘0’ (zero), the list is scrolled by half-screenfuls; if it is a positive integer, the list is scrolled by the given number of lines; if it is a negative number, the list is scrolled by a screenful minus the absolute value of the given number of lines. The default is to scroll by single lines. \nseparate-sections \nThis style is used with the manuals tag when completing names of manual pages. If it is ‘true’, entries for different sections are added separately using tag names of the form ‘manuals.X’, where X is the section number. When the group-name style is also in effect, pages from different sections will appear separately. This style is also used similarly with the words style when completing words for the dict command. It allows words from different dictionary databases to be added separately. See also insert-sections. \nThe default for this style is ‘false’. \nshow-ambiguity \nIf the zsh/complist module is loaded, this style can be used to highlight the first ambiguous character in completion lists. The value is either a color indication such as those supported by the list-colors style or, with a value of ‘true’, a default of underlining is selected. The highlighting is only applied if the completion display strings correspond to the actual matches. \nshow-completer \nTested whenever a new completer is tried. If it is ‘true’, the completion system outputs a progress message in the listing area showing what completer is being tried. The message will be overwritten by any output when completions are found and is removed after completion is finished. \nsingle-ignored \nThis is used by the _ignored completer when there is only one match. If its value is ‘show’, the single match will be displayed but not inserted. If the value is ‘menu’, then the single match and the original string are both added as matches and menu completion is started, making it easy to select either of them. \nsort \nThis allows the standard ordering of matches to be overridden. \nIf its value is ‘true’ or ‘false’, sorting is enabled or disabled. Additionally the values associated with the ‘-o’ option to compadd can also be listed: match, nosort, numeric, reverse. If it is not set for the context, the standard behaviour of the calling widget is used. \nThe style is tested first against the full context including the tag, and if that fails to produce a value against the context without the tag. \nIn many cases where a calling widget explicitly selects a particular ordering in lieu of the default, a value of ‘true’ is not honoured. An example of where this is not the case is for command history where the default of sorting matches chronologically may be overridden by setting the style to ‘true’. \nIn the _expand completer, if it is set to ‘true’, the expansions generated will always be sorted. If it is set to ‘menu’, then the expansions are only sorted when they are offered as single strings but not in the string containing all possible expansions. \nspecial-dirs \nNormally, the completion code will not produce the directory names ‘.’ and ‘..’ as possible completions. If this style is set to ‘true’, it will add both ‘.’ and ‘..’ as possible completions; if it is set to ‘..’, only ‘..’ will be added. \nThe following example sets special-dirs to ‘..’ when the current prefix is empty, is a single ‘.’, or consists only of a path beginning with ‘../’. Otherwise the value is ‘false’. \nzstyle -e ':completion:*' special-dirs \\ \n   '[[ $PREFIX = (../)#(|.|..) ]] && reply=(..)'\nsqueeze-slashes \nIf set to ‘true’, sequences of slashes in filename paths (for example in ‘foo//bar’) will be treated as a single slash. This is the usual behaviour of UNIX paths. However, by default the file completion function behaves as if there were a ‘*’ between the slashes. \nstop \nIf set to ‘true’, the _history_complete_word bindable command will stop once when reaching the beginning or end of the history. Invoking _history_complete_word will then wrap around to the opposite end of the history. If this style is set to ‘false’ (the default), _history_complete_word will loop immediately as in a menu completion. \nstrip-comments \nIf set to ‘true’, this style causes non-essential comment text to be removed from completion matches. Currently it is only used when completing e-mail addresses where it removes any display name from the addresses, cutting them down to plain user@host form. \nsubst-globs-only \nThis is used by the _expand completer. If it is set to ‘true’, the expansion will only be used if it resulted from globbing; hence, if expansions resulted from the use of the substitute style described below, but these were not further changed by globbing, the expansions will be rejected. \nThe default for this style is ‘false’. \nsubstitute \nThis boolean style controls whether the _expand completer will first try to expand all substitutions in the string (such as ‘$(...)’ and ‘${...}’). \nThe default is ‘true’. \nsuffix \nThis is used by the _expand completer if the word starts with a tilde or contains a parameter expansion. If it is set to ‘true’, the word will only be expanded if it doesn’t have a suffix, i.e. if it is something like ‘~foo’ or ‘$foo’ rather than ‘~foo/’ or ‘$foo/bar’, unless that suffix itself contains characters eligible for expansion. The default for this style is ‘true’. \ntag-order \nThis provides a mechanism for sorting how the tags available in a particular context will be used. \nThe values for the style are sets of space-separated lists of tags. The tags in each value will be tried at the same time; if no match is found, the next value is used. (See the file-patterns style for an exception to this behavior.) \nFor example: \nzstyle ':completion:*:complete:-command-:*:*' tag-order \\ \n    'commands functions'\nspecifies that completion in command position first offers external commands and shell functions. Remaining tags will be tried if no completions are found. \nIn addition to tag names, each string in the value may take one of the following forms: \n- \nIf any value consists of only a hyphen, then only the tags specified in the other values are generated. Normally all tags not explicitly selected are tried last if the specified tags fail to generate any matches. This means that a single value consisting only of a single hyphen turns off completion. \n! tags... \nA string starting with an exclamation mark specifies names of tags that are not to be used. The effect is the same as if all other possible tags for the context had been listed. \ntag:label ... \nHere, tag is one of the standard tags and label is an arbitrary name. Matches are generated as normal but the name label is used in contexts instead of tag. This is not useful in words starting with !. \nIf the label starts with a hyphen, the tag is prepended to the label to form the name used for lookup. This can be used to make the completion system try a certain tag more than once, supplying different style settings for each attempt; see below for an example. \ntag:label:description \nAs before, but description will replace the ‘%d’ in the value of the format style instead of the default description supplied by the completion function. Spaces in the description must be quoted with a backslash. A ‘%d’ appearing in description is replaced with the description given by the completion function. \nIn any of the forms above the tag may be a pattern or several patterns in the form ‘{pat1,pat2...}’. In this case all matching tags will be used except for any given explicitly in the same string. \nOne use of these features is to try one tag more than once, setting other styles differently on each attempt, but still to use all the other tags without having to repeat them all. For example, to make completion of function names in command position ignore all the completion functions starting with an underscore the first time completion is tried: \nzstyle ':completion:*:*:-command-:*:*' tag-order \\ \n    'functions:-non-comp *' functions\nzstyle ':completion:*:functions-non-comp' \\ \n    ignored-patterns '_*'\nOn the first attempt, all tags will be offered but the functions tag will be replaced by functions-non-comp. The ignored-patterns style is set for this tag to exclude functions starting with an underscore. If there are no matches, the second value of the tag-order style is used which completes functions using the default tag, this time presumably including all function names. \nThe matches for one tag can be split into different groups. For example: \nzstyle ':completion:*' tag-order \\ \n    'options:-long:long\\ options\n     options:-short:short\\ options\n     options:-single-letter:single\\ letter\\ options'\nzstyle ':completion:*:options-long' \\ \n     ignored-patterns '[-+](|-|[^-]*)'\nzstyle ':completion:*:options-short' \\ \n     ignored-patterns '--*' '[-+]?'\nzstyle ':completion:*:options-single-letter' \\ \n     ignored-patterns '???*'\nWith the group-names style set, options beginning with ‘--’, options beginning with a single ‘-’ or ‘+’ but containing multiple characters, and single-letter options will be displayed in separate groups with different descriptions. \nAnother use of patterns is to try multiple match specifications one after another. The matcher-list style offers something similar, but it is tested very early in the completion system and hence can’t be set for single commands nor for more specific contexts. Here is how to try normal completion without any match specification and, if that generates no matches, try again with case-insensitive matching, restricting the effect to arguments of the command foo: \nzstyle ':completion:*:*:foo:*:*' tag-order '*' '*:-case'\nzstyle ':completion:*-case' matcher 'm:{a-z}={A-Z}'\nFirst, all the tags offered when completing after foo are tried using the normal tag name. If that generates no matches, the second value of tag-order is used, which tries all tags again except that this time each has -case appended to its name for lookup of styles. Hence this time the value for the matcher style from the second call to zstyle in the example is used to make completion case-insensitive. \nIt is possible to use the -e option of the zstyle builtin command to specify conditions for the use of particular tags. For example: \nzstyle -e '*:-command-:*' tag-order '\n    if [[ -n $PREFIX$SUFFIX ]]; then\n      reply=( )\n    else\n      reply=( - )\n    fi'\nCompletion in command position will be attempted only if the string typed so far is not empty. This is tested using the PREFIX special parameter; see Completion Widgets for a description of parameters which are special inside completion widgets. Setting reply to an empty array provides the default behaviour of trying all tags at once; setting it to an array containing only a hyphen disables the use of all tags and hence of all completions. \nIf no tag-order style has been defined for a context, the strings ‘(|*-)argument-* (|*-)option-* values’ and ‘options’ plus all tags offered by the completion function will be used to provide a sensible default behavior that causes arguments (whether normal command arguments or arguments of options) to be completed before option names for most commands. \nurls \nThis is used together with the urls tag by functions completing URLs. \nIf the value consists of more than one string, or if the only string does not name a file or directory, the strings are used as the URLs to complete. \nIf the value contains only one string which is the name of a normal file the URLs are taken from that file (where the URLs may be separated by white space or newlines). \nFinally, if the only string in the value names a directory, the directory hierarchy rooted at this directory gives the completions. The top level directory should be the file access method, such as ‘http’, ‘ftp’, ‘bookmark’ and so on. In many cases the next level of directories will be a filename. The directory hierarchy can descend as deep as necessary. \nFor example, \nzstyle ':completion:*' urls ~/.urls\nmkdir -p ~/.urls/ftp/ftp.zsh.org/pub\n\nallows completion of all the components of the URL ftp://ftp.zsh.org/pub after suitable commands such as ‘netscape’ or ‘lynx’. Note, however, that access methods and files are completed separately, so if the hosts style is set hosts can be completed without reference to the urls style. \nSee the description in the function _urls itself for more information (e.g. ‘more $^fpath/_urls(N)’). \nuse-cache \nIf this is set, the completion caching layer is activated for any completions which use it (via the _store_cache, _retrieve_cache, and _cache_invalid functions). The directory containing the cache files can be changed with the cache-path style. \nuse-compctl \nIf this style is set to a string not equal to false, 0, no, and off, the completion system may use any completion specifications defined with the compctl builtin command. If the style is unset, this is done only if the zsh/compctl module is loaded. The string may also contain the substring ‘first’ to use completions defined with ‘compctl -T’, and the substring ‘default’ to use the completion defined with ‘compctl -D’. \nNote that this is only intended to smooth the transition from compctl to the new completion system and may disappear in the future. \nNote also that the definitions from compctl will only be used if there is no specific completion function for the command in question. For example, if there is a function _foo to complete arguments to the command foo, compctl will never be invoked for foo. However, the compctl version will be tried if foo only uses default completion. \nuse-ip \nBy default, the function _hosts that completes host names strips IP addresses from entries read from host databases such as NIS and ssh files. If this style is ‘true’, the corresponding IP addresses can be completed as well. This style is not use in any context where the hosts style is set; note also it must be set before the cache of host names is generated (typically the first completion attempt). \nusers \nThis may be set to a list of usernames to be completed. If it is not set all usernames will be completed. Note that if it is set only that list of users will be completed; this is because on some systems querying all users can take a prohibitive amount of time. \nusers-hosts \nThe values of this style should be of the form ‘user@host’ or ‘user:host’. It is used for commands that need pairs of user- and hostnames. These commands will complete usernames from this style (only), and will restrict subsequent hostname completion to hosts paired with that user in one of the values of the style. \nIt is possible to group values for sets of commands which allow a remote login, such as rlogin and ssh, by using the my-accounts tag. Similarly, values for sets of commands which usually refer to the accounts of other people, such as talk and finger, can be grouped by using the other-accounts tag. More ambivalent commands may use the accounts tag. \nusers-hosts-ports \nLike users-hosts but used for commands like telnet and containing strings of the form ‘user@host:port’. \nverbose \nIf set, as it is by default, the completion listing is more verbose. In particular many commands show descriptions for options if this style is ‘true’. \nword \nThis is used by the _list completer, which prevents the insertion of completions until a second completion attempt when the line has not changed. The normal way of finding out if the line has changed is to compare its entire contents between the two occasions. If this style is ‘true’, the comparison is instead performed only on the current word. Hence if completion is performed on another word with the same contents, completion will not be delayed. \n20.4 Control Functions\nThe initialization script compinit redefines all the widgets which perform completion to call the supplied widget function _main_complete. This function acts as a wrapper calling the so-called ‘completer’ functions that generate matches. If _main_complete is called with arguments, these are taken as the names of completer functions to be called in the order given. If no arguments are given, the set of functions to try is taken from the completer style. For example, to use normal completion and correction if that doesn’t generate any matches: \nzstyle ':completion:*' completer _complete _correct\nafter calling compinit. The default value for this style is ‘_complete _ignored’, i.e. normally only ordinary completion is tried, first with the effect of the ignored-patterns style and then without it. The _main_complete function uses the return status of the completer functions to decide if other completers should be called. If the return status is zero, no other completers are tried and the _main_complete function returns. \nIf the first argument to _main_complete is a single hyphen, the arguments will not be taken as names of completers. Instead, the second argument gives a name to use in the completer field of the context and the other arguments give a command name and arguments to call to generate the matches. \nThe following completer functions are contained in the distribution, although users may write their own. Note that in contexts the leading underscore is stripped, for example basic completion is performed in the context ‘:completion::complete:...’. \n_all_matches \nThis completer can be used to add a string consisting of all other matches. As it influences later completers it must appear as the first completer in the list. The list of all matches is affected by the avoid-completer and old-matches styles described above. \nIt may be useful to use the _generic function described below to bind _all_matches to its own keystroke, for example: \nzle -C all-matches complete-word _generic\nbindkey '^Xa' all-matches\nzstyle ':completion:all-matches:*' old-matches only\nzstyle ':completion:all-matches::::' completer _all_matches\nNote that this does not generate completions by itself: first use any of the standard ways of generating a list of completions, then use ^Xa to show all matches. It is possible instead to add a standard completer to the list and request that the list of all matches should be directly inserted: \nzstyle ':completion:all-matches::::' completer \\ \n       _all_matches _complete\nzstyle ':completion:all-matches:*' insert true\nIn this case the old-matches style should not be set. \n_approximate \nThis is similar to the basic _complete completer but allows the completions to undergo corrections. The maximum number of errors can be specified by the max-errors style; see the description of approximate matching in Filename Generation for how errors are counted. Normally this completer will only be tried after the normal _complete completer: \nzstyle ':completion:*' completer _complete _approximate\nThis will give correcting completion if and only if normal completion yields no possible completions. When corrected completions are found, the completer will normally start menu completion allowing you to cycle through these strings. \nThis completer uses the tags corrections and original when generating the possible corrections and the original string. The format style for the former may contain the additional sequences ‘%e’ and ‘%o’ which will be replaced by the number of errors accepted to generate the corrections and the original string, respectively. \nThe completer progressively increases the number of errors allowed up to the limit by the max-errors style, hence if a completion is found with one error, no completions with two errors will be shown, and so on. It modifies the completer name in the context to indicate the number of errors being tried: on the first try the completer field contains ‘approximate-1’, on the second try ‘approximate-2’, and so on. \nWhen _approximate is called from another function, the number of errors to accept may be passed with the -a option. The argument is in the same format as the max-errors style, all in one string. \nNote that this completer (and the _correct completer mentioned below) can be quite expensive to call, especially when a large number of errors are allowed. One way to avoid this is to set up the completer style using the -e option to zstyle so that some completers are only used when completion is attempted a second time on the same string, e.g.: \nzstyle -e ':completion:*' completer '\n  if [[ $_last_try != \"$HISTNO$BUFFER$CURSOR\" ]]; then\n    _last_try=\"$HISTNO$BUFFER$CURSOR\"\n    reply=(_complete _match _prefix)\n  else\n    reply=(_ignored _correct _approximate)\n  fi'\nThis uses the HISTNO parameter and the BUFFER and CURSOR special parameters that are available inside zle and completion widgets to find out if the command line hasn’t changed since the last time completion was tried. Only then are the _ignored, _correct and _approximate completers called. \n_canonical_paths [ -A var ] [ -N ] [ -MJV12nfX ] tag descr [ paths ... ] \nThis completion function completes all paths given to it, and also tries to offer completions which point to the same file as one of the paths given (relative path when an absolute path is given, and vice versa; when ..’s are present in the word to be completed; and some paths got from symlinks). \n-A, if specified, takes the paths from the array variable specified. Paths can also be specified on the command line as shown above. -N, if specified, prevents canonicalizing the paths given before using them for completion, in case they are already so. The options -M, -J, -V, -1, -2, -n, -F, -X are passed to compadd. \nSee _description for a description of tag and descr. \n_cmdambivalent \nCompletes the remaining positional arguments as an external command. The external command and its arguments are completed as separate arguments (in a manner appropriate for completing /usr/bin/env) if there are two or more remaining positional arguments on the command line, and as a quoted command string (in the manner of system(...)) otherwise. See also _cmdstring and _precommand. \nThis function takes no arguments. \n_cmdstring \nCompletes an external command as a single argument, as for system(...). \n_complete \nThis completer generates all possible completions in a context-sensitive manner, i.e. using the settings defined with the compdef function explained above and the current settings of all special parameters. This gives the normal completion behaviour. \nTo complete arguments of commands, _complete uses the utility function _normal, which is in turn responsible for finding the particular function; it is described below. Various contexts of the form -context- are handled specifically. These are all mentioned above as possible arguments to the #compdef tag. \nBefore trying to find a function for a specific context, _complete checks if the parameter ‘compcontext’ is set. Setting ‘compcontext’ allows the usual completion dispatching to be overridden which is useful in places such as a function that uses vared for input. If it is set to an array, the elements are taken to be the possible matches which will be completed using the tag ‘values’ and the description ‘value’. If it is set to an associative array, the keys are used as the possible completions and the values (if non-empty) are used as descriptions for the matches. If ‘compcontext’ is set to a string containing colons, it should be of the form ‘tag:descr:action’. In this case the tag and descr give the tag and description to use and the action indicates what should be completed in one of the forms accepted by the _arguments utility function described below. \nFinally, if ‘compcontext’ is set to a string without colons, the value is taken as the name of the context to use and the function defined for that context will be called. For this purpose, there is a special context named -command-line- that completes whole command lines (commands and their arguments). This is not used by the completion system itself but is nonetheless handled when explicitly called. \n_correct \nGenerate corrections, but not completions, for the current word; this is similar to _approximate but will not allow any number of extra characters at the cursor as that completer does. The effect is similar to spell-checking. It is based on _approximate, but the completer field in the context name is correct. \nFor example, with: \nzstyle ':completion:::::' completer \\ \n       _complete _correct _approximate\nzstyle ':completion:*:correct:::' max-errors 2 not-numeric\nzstyle ':completion:*:approximate:::' max-errors 3 numeric\ncorrection will accept up to two errors. If a numeric argument is given, correction will not be performed, but correcting completion will be, and will accept as many errors as given by the numeric argument. Without a numeric argument, first correction and then correcting completion will be tried, with the first one accepting two errors and the second one accepting three errors. \nWhen _correct is called as a function, the number of errors to accept may be given following the -a option. The argument is in the same form a values to the accept style, all in one string. \nThis completer function is intended to be used without the _approximate completer or, as in the example, just before it. Using it after the _approximate completer is useless since _approximate will at least generate the corrected strings generated by the _correct completer — and probably more. \n_expand \nThis completer function does not really perform completion, but instead checks if the word on the command line is eligible for expansion and, if it is, gives detailed control over how this expansion is done. For this to happen, the completion system needs to be invoked with complete-word, not expand-or-complete (the default binding for TAB), as otherwise the string will be expanded by the shell’s internal mechanism before the completion system is started. Note also this completer should be called before the _complete completer function. \nThe tags used when generating expansions are all-expansions for the string containing all possible expansions, expansions when adding the possible expansions as single matches and original when adding the original string from the line. The order in which these strings are generated, if at all, can be controlled by the group-order and tag-order styles, as usual. \nThe format string for all-expansions and for expansions may contain the sequence ‘%o’ which will be replaced by the original string from the line. \nThe kind of expansion to be tried is controlled by the substitute, glob and subst-globs-only styles. \nIt is also possible to call _expand as a function, in which case the different modes may be selected with options: -s for substitute, -g for glob and -o for subst-globs-only. \n_expand_alias \nIf the word the cursor is on is an alias, it is expanded and no other completers are called. The types of aliases which are to be expanded can be controlled with the styles regular, global and disabled. \nThis function is also a bindable command, see Bindable Commands. \n_extensions \nIf the cursor follows the string ‘*.’, filename extensions are completed. The extensions are taken from files in current directory or a directory specified at the beginning of the current word. For exact matches, completion continues to allow other completers such as _expand to expand the pattern. The standard add-space and prefix-hidden styles are observed. \n_external_pwds \nCompletes current directories of other zsh processes belonging to the current user. \nThis is intended to be used via _generic, bound to a custom key combination. Note that pattern matching is enabled so matching is performed similar to how it works with the _match completer. \n_history \nComplete words from the shell’s command history. This completer can be controlled by the remove-all-dups, and sort styles as for the _history_complete_word bindable command, see Bindable Commands and Completion System Configuration. \n_ignored \nThe ignored-patterns style can be set to a list of patterns which are compared against possible completions; matching ones are removed. With this completer those matches can be reinstated, as if no ignored-patterns style were set. The completer actually generates its own list of matches; which completers are invoked is determined in the same way as for the _prefix completer. The single-ignored style is also available as described above. \n_list \nThis completer allows the insertion of matches to be delayed until completion is attempted a second time without the word on the line being changed. On the first attempt, only the list of matches will be shown. It is affected by the styles condition and word, see Completion System Configuration. \n_match \nThis completer is intended to be used after the _complete completer. It behaves similarly but the string on the command line may be a pattern to match against trial completions. This gives the effect of the GLOB_COMPLETE option. \nNormally completion will be performed by taking the pattern from the line, inserting a ‘*’ at the cursor position and comparing the resulting pattern with the possible completions generated. This can be modified with the match-original style described above. \nThe generated matches will be offered in a menu completion unless the insert-unambiguous style is set to ‘true’; see the description above for other options for this style. \nNote that matcher specifications defined globally or used by the completion functions (the styles matcher-list and matcher) will not be used. \n_menu \nThis completer was written as simple example function to show how menu completion can be enabled in shell code. However, it has the notable effect of disabling menu selection which can be useful with _generic based widgets. It should be used as the first completer in the list. Note that this is independent of the setting of the MENU_COMPLETE option and does not work with the other menu completion widgets such as reverse-menu-complete, or accept-and-menu-complete. \n_oldlist \nThis completer controls how the standard completion widgets behave when there is an existing list of completions which may have been generated by a special completion (i.e. a separately-bound completion command). It allows the ordinary completion keys to continue to use the list of completions thus generated, instead of producing a new list of ordinary contextual completions. It should appear in the list of completers before any of the widgets which generate matches. It uses two styles: old-list and old-menu, see Completion System Configuration. \n_precommand \nComplete an external command in word-separated arguments, as for exec and /usr/bin/env. \n_prefix \nThis completer can be used to try completion with the suffix (everything after the cursor) ignored. In other words, the suffix will not be considered to be part of the word to complete. The effect is similar to the expand-or-complete-prefix command. \nThe completer style is used to decide which other completers are to be called to generate matches. If this style is unset, the list of completers set for the current context is used — except, of course, the _prefix completer itself. Furthermore, if this completer appears more than once in the list of completers only those completers not already tried by the last invocation of _prefix will be called. \nFor example, consider this global completer style: \nzstyle ':completion:*' completer \\ \n    _complete _prefix _correct _prefix:foo\nHere, the _prefix completer tries normal completion but ignoring the suffix. If that doesn’t generate any matches, and neither does the call to the _correct completer after it, _prefix will be called a second time and, now only trying correction with the suffix ignored. On the second invocation the completer part of the context appears as ‘foo’. \nTo use _prefix as the last resort and try only normal completion when it is invoked: \nzstyle ':completion:*' completer _complete ... _prefix\nzstyle ':completion::prefix:*' completer _complete\nThe add-space style is also respected. If it is set to ‘true’ then _prefix will insert a space between the matches generated (if any) and the suffix. \nNote that this completer is only useful if the COMPLETE_IN_WORD option is set; otherwise, the cursor will be moved to the end of the current word before the completion code is called and hence there will be no suffix. \n_user_expand \nThis completer behaves similarly to the _expand completer but instead performs expansions defined by users. The styles add-space and sort styles specific to the _expand completer are usable with _user_expand in addition to other styles handled more generally by the completion system. The tag all-expansions is also available. \nThe expansion depends on the array style user-expand being defined for the current context; remember that the context for completers is less specific than that for contextual completion as the full context has not yet been determined. Elements of the array may have one of the following forms: \n$hash \nhash is the name of an associative array. Note this is not a full parameter expression, merely a $, suitably quoted to prevent immediate expansion, followed by the name of an associative array. If the trial expansion word matches a key in hash, the resulting expansion is the corresponding value. \n_func \n_func is the name of a shell function whose name must begin with _ but is not otherwise special to the completion system. The function is called with the trial word as an argument. If the word is to be expanded, the function should set the array reply to a list of expansions. Optionally, it can set REPLY to a word that will be used as a description for the set of expansions. The return status of the function is irrelevant. \n20.5 Bindable Commands\nIn addition to the context-dependent completions provided, which are expected to work in an intuitively obvious way, there are a few widgets implementing special behaviour which can be bound separately to keys. The following is a list of these and their default bindings. \n_bash_completions \nThis function is used by two widgets, _bash_complete-word and _bash_list-choices. It exists to provide compatibility with completion bindings in bash. The last character of the binding determines what is completed: ‘!’, command names; ‘$’, environment variables; ‘@’, host names; ‘/’, file names; ‘~’ user names. In bash, the binding preceded by ‘\\e’ gives completion, and preceded by ‘^X’ lists options. As some of these bindings clash with standard zsh bindings, only ‘\\e~’ and ‘^X~’ are bound by default. To add the rest, the following should be added to .zshrc after compinit has been run: \nfor key in '!' '$' '@' '/' '~'; do\n  bindkey \"\\e$key\" _bash_complete-word\n  bindkey \"^X$key\" _bash_list-choices\ndone\nThis includes the bindings for ‘~’ in case they were already bound to something else; the completion code does not override user bindings. \n_correct_filename (^XC) \nCorrect the filename path at the cursor position. Allows up to six errors in the name. Can also be called with an argument to correct a filename path, independently of zle; the correction is printed on standard output. \n_correct_word (^Xc) \nPerforms correction of the current argument using the usual contextual completions as possible choices. This stores the string ‘correct-word’ in the function field of the context name and then calls the _correct completer. \n_expand_alias (^Xa) \nThis function can be used as a completer and as a bindable command. It expands the word the cursor is on if it is an alias. The types of alias expanded can be controlled with the styles regular, global and disabled. \nWhen used as a bindable command there is one additional feature that can be selected by setting the complete style to ‘true’. In this case, if the word is not the name of an alias, _expand_alias tries to complete the word to a full alias name without expanding it. It leaves the cursor directly after the completed word so that invoking _expand_alias once more will expand the now-complete alias name. \n_expand_word (^Xe) \nPerforms expansion on the current word: equivalent to the standard expand-word command, but using the _expand completer. Before calling it, the function field of the context is set to ‘expand-word’. \n_generic \nThis function is not defined as a widget and not bound by default. However, it can be used to define a widget and will then store the name of the widget in the function field of the context and call the completion system. This allows custom completion widgets with their own set of style settings to be defined easily. For example, to define a widget that performs normal completion and starts menu selection: \nzle -C foo complete-word _generic\nbindkey '...' foo\nzstyle ':completion:foo:*' menu yes select=1\nNote in particular that the completer style may be set for the context in order to change the set of functions used to generate possible matches. If _generic is called with arguments, those are passed through to _main_complete as the list of completers in place of those defined by the completer style. \n_history_complete_word (\\e/) \nComplete words from the shell’s command history. This uses the list, remove-all-dups, sort, and stop styles. \n_most_recent_file (^Xm) \nComplete the name of the most recently modified file matching the pattern on the command line (which may be blank). If given a numeric argument N, complete the Nth most recently modified file. Note the completion, if any, is always unique. \n_next_tags (^Xn) \nThis command alters the set of matches used to that for the next tag, or set of tags, either as given by the tag-order style or as set by default; these matches would otherwise not be available. Successive invocations of the command cycle through all possible sets of tags. \n_read_comp (^X^R) \nPrompt the user for a string, and use that to perform completion on the current word. There are two possibilities for the string. First, it can be a set of words beginning ‘_’, for example ‘_files -/’, in which case the function with any arguments will be called to generate the completions. Unambiguous parts of the function name will be completed automatically (normal completion is not available at this point) until a space is typed. \nSecond, any other string will be passed as a set of arguments to compadd and should hence be an expression specifying what should be completed. \nA very restricted set of editing commands is available when reading the string: ‘DEL’ and ‘^H’ delete the last character; ‘^U’ deletes the line, and ‘^C’ and ‘^G’ abort the function, while ‘RET’ accepts the completion. Note the string is used verbatim as a command line, so arguments must be quoted in accordance with standard shell rules. \nOnce a string has been read, the next call to _read_comp will use the existing string instead of reading a new one. To force a new string to be read, call _read_comp with a numeric argument. \n_complete_debug (^X?) \nThis widget performs ordinary completion, but captures in a temporary file a trace of the shell commands executed by the completion system. Each completion attempt gets its own file. A command to view each of these files is pushed onto the editor buffer stack. \n_complete_help (^Xh) \nThis widget displays information about the context names, the tags, and the completion functions used when completing at the current cursor position. If given a numeric argument other than 1 (as in ‘ESC-2 ^Xh’), then the styles used and the contexts for which they are used will be shown, too. \nNote that the information about styles may be incomplete; it depends on the information available from the completion functions called, which in turn is determined by the user’s own styles and other settings. \n_complete_help_generic \nUnlike other commands listed here, this must be created as a normal ZLE widget rather than a completion widget (i.e. with zle -N). It is used for generating help with a widget bound to the _generic widget that is described above. \nIf this widget is created using the name of the function, as it is by default, then when executed it will read a key sequence. This is expected to be bound to a call to a completion function that uses the _generic widget. That widget will be executed, and information provided in the same format that the _complete_help widget displays for contextual completion. \nIf the widget’s name contains debug, for example if it is created as ‘zle -N _complete_debug_generic _complete_help_generic’, it will read and execute the keystring for a generic widget as before, but then generate debugging information as done by _complete_debug for contextual completion. \nIf the widget’s name contains noread, it will not read a keystring but instead arrange that the next use of a generic widget run in the same shell will have the effect as described above. \nThe widget works by setting the shell parameter ZSH_TRACE_GENERIC_WIDGET which is read by _generic. Unsetting the parameter cancels any pending effect of the noread form. \nFor example, after executing the following: \nzle -N _complete_debug_generic _complete_help_generic\nbindkey '^x:' _complete_debug_generic\ntyping ‘C-x :’ followed by the key sequence for a generic widget will cause trace output for that widget to be saved to a file. \n_complete_tag (^Xt) \nThis widget completes symbol tags created by the etags or ctags programmes (note there is no connection with the completion system’s tags) stored in a file TAGS, in the format used by etags, or tags, in the format created by ctags. It will look back up the path hierarchy for the first occurrence of either file; if both exist, the file TAGS is preferred. You can specify the full path to a TAGS or tags file by setting the parameter $TAGSFILE or $tagsfile respectively. The corresponding completion tags used are etags and vtags, after emacs and vi respectively. \n20.6 Utility Functions\nDescriptions follow for utility functions that may be useful when writing completion functions. If functions are installed in subdirectories, most of these reside in the Base subdirectory. Like the example functions for commands in the distribution, the utility functions generating matches all follow the convention of returning status zero if they generated completions and non-zero if no matching completions could be added. \n_absolute_command_paths \nThis function completes external commands as absolute paths (unlike _command_names -e which completes their basenames). It takes no arguments. \n_all_labels [ -x ] [ -12VJ ] tag name descr [ command arg ... ] \nThis is a convenient interface to the _next_label function below, implementing the loop shown in the _next_label example. The command and its arguments are called to generate the matches. The options stored in the parameter name will automatically be inserted into the args passed to the command. Normally, they are put directly after the command, but if one of the args is a single hyphen, they are inserted directly before that. If the hyphen is the last argument, it will be removed from the argument list before the command is called. This allows _all_labels to be used in almost all cases where the matches can be generated by a single call to the compadd builtin command or by a call to one of the utility functions. \nFor example: \nlocal expl\n...\nif _requested foo; then\n  ...\n  _all_labels foo expl '...' compadd ... - $matches\nfi\nWill complete the strings from the matches parameter, using compadd with additional options which will take precedence over those generated by _all_labels. \n_alternative [ -O name ] [ -C name ] spec ... \nThis function is useful in simple cases where multiple tags are available. Essentially it implements a loop like the one described for the _tags function below. \nThe tags to use and the action to perform if a tag is requested are described using the specs which are of the form: ‘tag:descr:action’. The tags are offered using _tags and if the tag is requested, the action is executed with the given description descr. The actions are those accepted by the _arguments function (described below), with the following exceptions: \nThe ‘->state’ and ‘=...’ forms are not supported. \nThe ‘((a\\:bar b\\:baz))’ form does not need the colon to be escaped, since the specs have no colon-separated fields after the action. \nFor example, the action may be a simple function call: \n_alternative \\ \n    'users:user:_users' \\ \n    'hosts:host:_hosts'\noffers usernames and hostnames as possible matches, generated by the _users and _hosts functions respectively. \nLike _arguments, this function uses _all_labels to execute the actions, which will loop over all sets of tags. Special handling is only required if there is an additional valid tag, for example inside a function called from _alternative. \nThe option ‘-O name’ is used in the same way as by the _arguments function. In other words, the elements of the name array will be passed to compadd when executing an action. \nLike _tags this function supports the -C option to give a different name for the argument context field. \n_arguments [ -nswWCRS ] [ -A pat ] [ -O name ] [ -M matchspec ] [ : ] spec ... _arguments [ opt ... ] -- [ -l ] [ -i pats ] [ -s pair ] [ helpspec ...] \nThis function can be used to give a complete specification for completion for a command whose arguments follow standard UNIX option and argument conventions. \nOptions Overview \nOptions to _arguments itself must be in separate words, i.e. -s -w, not -sw. The options are followed by specs that describe options and arguments of the analyzed command. To avoid ambiguity, all options to _arguments itself may be separated from the spec forms by a single colon. \nThe ‘--’ form is used to intuit spec forms from the help output of the command being analyzed, and is described in detail below. The opts for the ‘--’ form are otherwise the same options as the first form. Note that ‘-s’ following ‘--’ has a distinct meaning from ‘-s’ preceding ‘--’, and both may appear. \nThe option switches -s, -S, -A, -w, and -W affect how _arguments parses the analyzed command line’s options. These switches are useful for commands with standard argument parsing. \nThe options of _arguments have the following meanings: \n-n \nWith this option, _arguments sets the parameter NORMARG to the position of the first normal argument in the $words array, i.e. the position after the end of the options. If that argument has not been reached, NORMARG is set to -1. The caller should declare ‘integer NORMARG’ if the -n option is passed; otherwise the parameter is not used. \n-s \nEnable option stacking for single-letter options, whereby multiple single-letter options may be combined into a single word. For example, the two options ‘-x’ and ‘-y’ may be combined into a single word ‘-xy’. By default, every word corresponds to a single option name (‘-xy’ is a single option named ‘xy’). \nOptions beginning with a single hyphen or plus sign are eligible for stacking; words beginning with two hyphens are not. \nNote that -s after -- has a different meaning, which is documented in the segment entitled ‘Deriving spec forms from the help output’. \n-w \nIn combination with -s, allow option stacking even if one or more of the options take arguments. For example, if -x takes an argument, with no -s, ‘-xy’ is considered as a single (unhandled) option; with -s, -xy is an option with the argument ‘y’; with both -s and -w, -xy is the option -x and the option -y with arguments to -x (and to -y, if it takes arguments) still to come in subsequent words. \n-W \nThis option takes -w a stage further: it is possible to complete single-letter options even after an argument that occurs in the same word. However, it depends on the action performed whether options will really be completed at this point. For more control, use a utility function like _guard as part of the action. \n-C \nModify the curcontext parameter for an action of the form ‘->state’. This is discussed in detail below. \n-R \nReturn status 300 instead of zero when a $state is to be handled, in the ‘->string’ syntax. \n-S \nDo not complete options after a ‘--’ appearing on the line, and ignore the ‘--’. For example, with -S, in the line \nthe ‘-x’ is considered an option, the ‘-y’ is considered an argument, and the ‘--’ is considered to be neither. \n-A pat \nDo not complete options after the first non-option argument on the line. pat is a pattern matching all strings which are not to be taken as arguments. For example, to make _arguments stop completing options after the first normal argument, but ignoring all strings starting with a hyphen even if they are not described by one of the optspecs, the form is ‘-A \"-*\"’. \n-O name \nPass the elements of the array name as arguments to functions called to execute actions. This is discussed in detail below. \n-M matchspec \nUse the match specification matchspec for completing option names and values. The default matchspec allows partial word completion after ‘_’ and ‘-’, such as completing ‘-f-b’ to ‘-foo-bar’. The default matchspec is: \n-0 \nWhen populating values of the ‘opt_args’ associative array, don’t backslash-escape colons and backslashes and use NUL rather than colon for joining multiple values. This option is described in more detail below, under the heading specs: actions. \nspecs: overview \nEach of the following forms is a spec describing individual sets of options or arguments on the command line being analyzed. \nn:message:action n::message:action \nThis describes the n’th normal argument. The message will be printed above the matches generated and the action indicates what can be completed in this position (see below). If there are two colons before the message the argument is optional. If the message contains only white space, nothing will be printed above the matches unless the action adds an explanation string itself. \n:message:action ::message:action \nSimilar, but describes the next argument, whatever number that happens to be. If all arguments are specified in this form in the correct order the numbers are unnecessary. \n*:message:action *::message:action *:::message:action \nThis describes how arguments (usually non-option arguments, those not beginning with - or +) are to be completed when neither of the first two forms was provided. Any number of arguments can be completed in this fashion. \nWith two colons before the message, the words special array and the CURRENT special parameter are modified to refer only to the normal arguments when the action is executed or evaluated. With three colons before the message they are modified to refer only to the normal arguments covered by this description. \noptspec optspec:... \nThis describes an option. The colon indicates handling for one or more arguments to the option; if it is not present, the option is assumed to take no arguments. \nThe following forms are available for the initial optspec, whether or not the option has arguments. \n*optspec \nHere optspec is one of the remaining forms below. This indicates the following optspec may be repeated. Otherwise if the corresponding option is already present on the command line to the left of the cursor it will not be offered again. \n-optname +optname \nIn the simplest form the optspec is just the option name beginning with a minus or a plus sign, such as ‘-foo’. The first argument for the option (if any) must follow as a separate word directly after the option. \nEither of ‘-+optname’ and ‘+-optname’ can be used to specify that -optname and +optname are both valid. \nIn all the remaining forms, the leading ‘-’ may be replaced by or paired with ‘+’ in this way. \n-optname- \nThe first argument of the option must come directly after the option name in the same word. For example, ‘-foo-:...’ specifies that the completed option and argument will look like ‘-fooarg’. \n-optname+ \nThe first argument may appear immediately after optname in the same word, or may appear as a separate word after the option. For example, ‘-foo+:...’ specifies that the completed option and argument will look like either ‘-fooarg’ or ‘-foo arg’. \n-optname= \nThe argument may appear as the next word, or in same word as the option name provided that it is separated from it by an equals sign, for example ‘-foo=arg’ or ‘-foo arg’. \n-optname=- \nThe argument to the option must appear after an equals sign in the same word, and may not be given in the next argument. \noptspec[explanation] \nAn explanation string may be appended to any of the preceding forms of optspec by enclosing it in brackets, as in ‘-q[query operation]’. \nThe verbose style is used to decide whether the explanation strings are displayed with the option in a completion listing. \nIf no bracketed explanation string is given but the auto-description style is set and only one argument is described for this optspec, the value of the style is displayed, with any appearance of the sequence ‘%d’ in it replaced by the message of the first optarg that follows the optspec; see below. \nIt is possible for options with a literal ‘+’ or ‘=’ to appear, but that character must be quoted, for example ‘-\\+’. \nEach optarg following an optspec must take one of the following forms: \n:message:action ::message:action \nAn argument to the option; message and action are treated as for ordinary arguments. In the first form, the argument is mandatory, and in the second form it is optional. \nThis group may be repeated for options which take multiple arguments. In other words, :message1:action1:message2:action2 specifies that the option takes two arguments. \n:*pattern:message:action :*pattern::message:action :*pattern:::message:action \nThis describes multiple arguments. Only the last optarg for an option taking multiple arguments may be given in this form. If the pattern is empty (i.e. :*:), all the remaining words on the line are to be completed as described by the action; otherwise, all the words up to and including a word matching the pattern are to be completed using the action. \nMultiple colons are treated as for the ‘*:...’ forms for ordinary arguments: when the message is preceded by two colons, the words special array and the CURRENT special parameter are modified during the execution or evaluation of the action to refer only to the words after the option. When preceded by three colons, they are modified to refer only to the words covered by this description. \nAny literal colon in an optname, message, or action must be preceded by a backslash, ‘\\:’. \nEach of the forms above may be preceded by a list in parentheses of option names and argument numbers. If the given option is on the command line, the options and arguments indicated in parentheses will not be offered. For example, ‘(-two -three 1)-one:...’ completes the option ‘-one’; if this appears on the command line, the options -two and -three and the first ordinary argument will not be completed after it. ‘(-foo):...’ specifies an ordinary argument completion; -foo will not be completed if that argument is already present. \nOther items may appear in the list of excluded options to indicate various other items that should not be applied when the current specification is matched: a single star (*) for the rest arguments (i.e. a specification of the form ‘*:...’); a colon (:) for all normal (non-option-) arguments; and a hyphen (-) for all options. For example, if ‘(*)’ appears before an option and the option appears on the command line, the list of remaining arguments (those shown in the above table beginning with ‘*:’) will not be completed. \nTo aid in reuse of specifications, it is possible to precede any of the forms above with ‘!’; then the form will no longer be completed, although if the option or argument appears on the command line they will be skipped as normal. The main use for this is when the arguments are given by an array, and _arguments is called repeatedly for more specific contexts: on the first call ‘_arguments $global_options’ is used, and on subsequent calls ‘_arguments !$^global_options’. \nspecs: actions \nIn each of the forms above the action determines how completions should be generated. Except for the ‘->string’ form below, the action will be executed by calling the _all_labels function to process all tag labels. No special handling of tags is needed unless a function call introduces a new one. \nThe functions called to execute actions will be called with the elements of the array named by the ‘-O name’ option as arguments. This can be used, for example, to pass the same set of options for the compadd builtin to all actions. \nThe forms for action are as follows. \n(single unquoted space) \nThis is useful where an argument is required but it is not possible or desirable to generate matches for it. The message will be displayed but no completions listed. Note that even in this case the colon at the end of the message is needed; it may only be omitted when neither a message nor an action is given. \n(item1 item2 ...) \nOne of a list of possible matches, for example: \n((item1\\:desc1 ...)) \nSimilar to the above, but with descriptions for each possible match. Note the backslash before the colon. For example, \nThe matches will be listed together with their descriptions if the description style is set with the values tag in the context. \n->string \nIn this form, _arguments processes the arguments and options and then returns control to the calling function with parameters set to indicate the state of processing; the calling function then makes its own arrangements for generating completions. For example, functions that implement a state machine can use this type of action. \nWhere _arguments encounters action in the ‘->string’ format, it will strip all leading and trailing whitespace from string and set the array state to the set of all strings for which an action is to be performed. The elements of the array state_descr are assigned the corresponding message field from each optarg containing such an action. \nBy default and in common with all other well behaved completion functions, _arguments returns status zero if it was able to add matches and non-zero otherwise. However, if the -R option is given, _arguments will instead return a status of 300 to indicate that $state is to be handled. \nIn addition to $state and $state_descr, _arguments also sets the global parameters ‘context’, ‘line’ and ‘opt_args’ as described below, and does not reset any changes made to the special parameters such as PREFIX and words. This gives the calling function the choice of resetting these parameters or propagating changes in them. \nA function calling _arguments with at least one action containing a ‘->string’ must therefore declare appropriate local parameters: \nlocal context state state_descr line\ntypeset -A opt_args\nto prevent _arguments from altering the global environment. \n{eval-string} \nA string in braces is evaluated as shell code to generate matches. If the eval-string itself does not begin with an opening parenthesis or brace it is split into separate words before execution. \n= action \nIf the action starts with ‘= ’ (an equals sign followed by a space), _arguments will insert the contents of the argument field of the current context as the new first element in the words special array and increment the value of the CURRENT special parameter. This has the effect of inserting a dummy word onto the completion command line while not changing the point at which completion is taking place. \nThis is most useful with one of the specifiers that restrict the words on the command line on which the action is to operate (the two- and three-colon forms above). One particular use is when an action itself causes _arguments on a restricted range; it is necessary to use this trick to insert an appropriate command name into the range for the second call to _arguments to be able to parse the line. \nword... word... \nThis covers all forms other than those above. If the action starts with a space, the remaining list of words will be invoked unchanged. \nOtherwise it will be invoked with some extra strings placed after the first word; these are to be passed down as options to the compadd builtin. They ensure that the state specified by _arguments, in particular the descriptions of options and arguments, is correctly passed to the completion command. These additional arguments are taken from the array parameter ‘expl’; this will be set up before executing the action and hence may be referred to inside it, typically in an expansion of the form ‘$expl[@]’ which preserves empty elements of the array. \nDuring the performance of the action the array ‘line’ will be set to the normal arguments from the command line, i.e. the words from the command line after the command name excluding all options and their arguments. Options are stored in the associative array ‘opt_args’ with option names as keys and their arguments as the values. By default, all colons and backslashes in the value are escaped with backslashes, and if an option has multiple arguments (for example, when using an optspec of the form ‘*optspec’), they are joined with (unescaped) colons. However, if the -0 option was passed, no backslash escaping is performed, and multiple values are joined with NUL bytes. For example, after ‘zsh -o foo:foo -o bar:bar -o <TAB>’, the contents of ‘opt_args’ would be \ntypeset -A opt_args=( [-o]='foo\\:foo:bar\\:bar:' )\nby default, and \ntypeset -A opt_args=( [-o]=$'foo:foo\\x00bar:bar\\x00' )\nif _arguments had been called with the -0 option. \nThe parameter ‘context’ is set when returning to the calling function to perform an action of the form ‘->string’. It is set to an array of elements corresponding to the elements of $state. Each element is a suitable name for the argument field of the context: either a string of the form ‘option-opt-n’ for the n’th argument of the option -opt, or a string of the form ‘argument-n’ for the n’th argument. For ‘rest’ arguments, that is those in the list at the end not handled by position, n is the string ‘rest’. For example, when completing the argument of the -o option, the name is ‘option-o-1’, while for the second normal (non-option-) argument it is ‘argument-2’. \nFurthermore, during the evaluation of the action the context name in the curcontext parameter is altered to append the same string that is stored in the context parameter. \nThe option -C tells _arguments to modify the curcontext parameter for an action of the form ‘->state’. This is the standard parameter used to keep track of the current context. Here it (and not the context array) should be made local to the calling function to avoid passing back the modified value and should be initialised to the current value at the start of the function: \nlocal curcontext=\"$curcontext\"\nThis is useful where it is not possible for multiple states to be valid together. \nGrouping Options \nOptions can be grouped to simplify exclusion lists. A group is introduced with ‘+’ followed by a name for the group in the subsequent word. Whole groups can then be referenced in an exclusion list or a group name can be used to disambiguate between two forms of the same option. For example: \n_arguments \\ \n    '(group2--x)-a' \\ \n  + group1 \\ \n    -m \\ \n    '(group2)-n' \\ \n  + group2 \\ \n    -x -y\nIf the name of a group is specified in the form ‘(name)’ then only one value from that group will ever be completed; more formally, all specifications are mutually exclusive to all other specifications in that group. This is useful for defining options that are aliases for each other. For example: \n_arguments \\ \n    -a -b \\ \n  + '(operation)' \\ \n    {-c,--compress}'[compress]' \\ \n    {-d,--decompress}'[decompress]' \\ \n    {-l,--list}'[list]'\nIf an option in a group appears on the command line, it is stored in the associative array ‘opt_args’ with ’group-option’ as a key. In the example above, a key ‘operation–c’ is used if the option ‘-c’ is present on the command line. \nSpecifying Multiple Sets of Arguments \nIt is possible to specify multiple sets of options and arguments with the sets separated by single hyphens. This differs from groups in that sets are considered to be mutually exclusive of each other. \nSpecifications before the first set and from any group are common to all sets. For example: \n_arguments \\ \n    -a \\ \n  - set1 \\ \n    -c \\ \n  - set2 \\ \n    -d \\ \n    ':arg:(x2 y2)'\nThis defines two sets. When the command line contains the option ‘-c’, the ‘-d’ option and the argument will not be considered possible completions. When it contains ‘-d’ or an argument, the option ‘-c’ will not be considered. However, after ‘-a’ both sets will still be considered valid. \nAs for groups, the name of a set may appear in exclusion lists, either alone or preceding a normal option or argument specification. \nThe completion code has to parse the command line separately for each set. This can be slow so sets should only be used when necessary. A useful alternative is often an option specification with rest-arguments (as in ‘-foo:*:...’); here the option -foo swallows up all remaining arguments as described by the optarg definitions. \nDeriving spec forms from the help output \nThe option ‘--’ allows _arguments to work out the names of long options that support the ‘--help’ option which is standard in many GNU commands. The command word is called with the argument ‘--help’ and the output examined for option names. Clearly, it can be dangerous to pass this to commands which may not support this option as the behaviour of the command is unspecified. \nIn addition to options, ‘_arguments --’ will try to deduce the types of arguments available for options when the form ‘--opt=val’ is valid. It is also possible to provide hints by examining the help text of the command and adding helpspec of the form ‘pattern:message:action’; note that other _arguments spec forms are not used. The pattern is matched against the help text for an option, and if it matches the message and action are used as for other argument specifiers. The special case of ‘*:’ means both message and action are empty, which has the effect of causing options having no description in the help output to be ordered in listings ahead of options that have a description. \nFor example: \n_arguments -- '*\\*:toggle:(yes no)' \\ \n              '*=FILE*:file:_files' \\ \n              '*=DIR*:directory:_files -/' \\ \n              '*=PATH*:directory:_files -/'\nHere, ‘yes’ and ‘no’ will be completed as the argument of options whose description ends in a star; file names will be completed for options that contain the substring ‘=FILE’ in the description; and directories will be completed for options whose description contains ‘=DIR’ or ‘=PATH’. The last three are in fact the default and so need not be given explicitly, although it is possible to override the use of these patterns. A typical help text which uses this feature is: \n -C, --directory=DIR          change to directory DIR\nso that the above specifications will cause directories to be completed after ‘--directory’, though not after ‘-C’. \nNote also that _arguments tries to find out automatically if the argument for an option is optional. This can be specified explicitly by doubling the colon before the message. \nIf the pattern ends in ‘(-)’, this will be removed from the pattern and the action will be used only directly after the ‘=’, not in the next word. This is the behaviour of a normal specification defined with the form ‘=-’. \nBy default, the command (with the option ‘–help’) is run after resetting all the locale categories (except for LC_CTYPE) to ‘C’. If the localized help output is known to work, the option ‘-l’ can be specified after the ‘_arguments --’ so that the command is run in the current locale. \nThe ‘_arguments --’ can be followed by the option ‘-i patterns’ to give patterns for options which are not to be completed. The patterns can be given as the name of an array parameter or as a literal list in parentheses. For example, \n_arguments -- -i \\ \n    \"(--(en|dis)able-FEATURE*)\"\nwill cause completion to ignore the options ‘--enable-FEATURE’ and ‘--disable-FEATURE’ (this example is useful with GNU configure). \nThe ‘_arguments --’ form can also be followed by the option ‘-s pair’ to describe option aliases. The pair consists of a list of alternating patterns and corresponding replacements, enclosed in parens and quoted so that it forms a single argument word in the _arguments call. \nFor example, some configure-script help output describes options only as ‘--enable-foo’, but the script also accepts the negated form ‘--disable-foo’. To allow completion of the second form: \n_arguments -- -s \"((#s)--enable- --disable-)\"\nMiscellaneous notes \nFinally, note that _arguments generally expects to be the primary function handling any completion for which it is used. It may have side effects which change the treatment of any matches added by other functions called after it. To combine _arguments with other functions, those functions should be called either before _arguments, as an action within a spec, or in handlers for ‘->state’ actions. \nHere is a more general example of the use of _arguments: \n_arguments '-l+:left border:' \\ \n           '-format:paper size:(letter A4)' \\ \n           '*-copy:output file:_files::resolution:(300 600)' \\ \n           ':postscript file:_files -g \\*.\\(ps\\|eps\\)' \\ \n           '*:page number:'\nThis describes three options: ‘-l’, ‘-format’, and ‘-copy’. The first takes one argument described as ‘left border’ for which no completion will be offered because of the empty action. Its argument may come directly after the ‘-l’ or it may be given as the next word on the line. \nThe ‘-format’ option takes one argument in the next word, described as ‘paper size’ for which only the strings ‘letter’ and ‘A4’ will be completed. \nThe ‘-copy’ option may appear more than once on the command line and takes two arguments. The first is mandatory and will be completed as a filename. The second is optional (because of the second colon before the description ‘resolution’) and will be completed from the strings ‘300’ and ‘600’. \nThe last two descriptions say what should be completed as arguments. The first describes the first argument as a ‘postscript file’ and makes files ending in ‘ps’ or ‘eps’ be completed. The last description gives all other arguments the description ‘page number’ but does not offer completions. \n_cache_invalid cache_identifier \nThis function returns status zero if the completions cache corresponding to the given cache identifier needs rebuilding. It determines this by looking up the cache-policy style for the current context. This should provide a function name which is run with the full path to the relevant cache file as the only argument. \nExample: \n_example_caching_policy () {\n    # rebuild if cache is more than a week old\n    local -a oldp\n    oldp=( \"$1\"(Nm+7) )\n    (( $#oldp ))\n}\n_call_function return name [ arg ... ] \nIf a function name exists, it is called with the arguments args. The return argument gives the name of a parameter in which the return status from the function name should be stored; if return is empty or a single hyphen it is ignored. \nThe return status of _call_function itself is zero if the function name exists and was called and non-zero otherwise. \n_call_program [ -l ] [ -p ] tag string ... \nThis function provides a mechanism for the user to override the use of an external command. It looks up the command style with the supplied tag. If the style is set, its value is used as the command to execute. The strings from the call to _call_program, or from the style if set, are concatenated with spaces between them and the resulting string is evaluated. The return status is the return status of the command called. \nBy default, the command is run in an environment where all the locale categories (except for LC_CTYPE) are reset to ‘C’ by calling the utility function _comp_locale (see below). If the option ‘-l’ is given, the command is run with the current locale. \nIf the option ‘-p’ is supplied it indicates that the command output is influenced by the permissions it is run with. If the gain-privileges style is set to true, _call_program will make use of commands such as sudo, if present on the command-line, to match the permissions to whatever the final command is likely to run under. When looking up the gain-privileges and command styles, the command component of the zstyle context will end with a slash (‘/’) followed by the command that would be used to gain privileges. \n_combination [ -s pattern ] tag style spec ... field opts ... \nThis function is used to complete combinations of values, for example pairs of hostnames and usernames. The style argument gives the style which defines the pairs; it is looked up in a context with the tag specified. \nThe style name consists of field names separated by hyphens, for example ‘users-hosts-ports’. For each field for a value is already known, a spec of the form ‘field=pattern’ is given. For example, if the command line so far specifies a user ‘pws’, the argument ‘users=pws’ should appear. \nThe next argument with no equals sign is taken as the name of the field for which completions should be generated (presumably not one of the fields for which the value is known). \nThe matches generated will be taken from the value of the style. These should contain the possible values for the combinations in the appropriate order (users, hosts, ports in the example above). The values for the different fields are separated by colons. This can be altered with the option -s to _combination which specifies a pattern. Typically this is a character class, as for example ‘-s \"[:@]\"’ in the case of the users-hosts style. Each ‘field=pattern’ specification restricts the completions which apply to elements of the style with appropriately matching fields. \nIf no style with the given name is defined for the given tag, or if none of the strings in style’s value match, but a function name of the required field preceded by an underscore is defined, that function will be called to generate the matches. For example, if there is no ‘users-hosts-ports’ or no matching hostname when a host is required, the function ‘_hosts’ will automatically be called. \nIf the same name is used for more than one field, in both the ‘field=pattern’ and the argument that gives the name of the field to be completed, the number of the field (starting with one) may be given after the fieldname, separated from it by a colon. \nAll arguments after the required field name are passed to compadd when generating matches from the style value, or to the functions for the fields if they are called. \n_command_names [ -e | - ] \nThis function completes words that are valid at command position: names of aliases, builtins, hashed commands, functions, and so on. With the -e flag, only hashed commands are completed. The - flag is ignored. \n_comp_locale \nThis function resets all the locale categories other than LC_CTYPE to ‘C’ so that the output from external commands can be easily analyzed by the completion system. LC_CTYPE retains the current value (taking LC_ALL and LANG into account), ensuring that non-ASCII characters in file names are still handled properly. \nThis function should normally be run only in a subshell, because the new locale is exported to the environment. Typical usage would be ‘$(_comp_locale; command ...)’. \n_completers [ -p ] \nThis function completes names of completers. \n-p \nInclude the leading underscore (‘_’) in the matches. \n_default \nThis function corresponds to the -default- special context which is applied where no completion is defined. It is useful to call it under certain error conditions such as completion after an unrecognised subcommand. This applies the concept of graceful degradation to the completion system, allowing it to fallback on basic completion of commonly useful things like filenames. \n_describe [-12JVx] [ -oO | -t tag ] descr name1 [ name2 ] [ opt ... ] [ -- name1 [ name2 ] [ opt ... ] ... ] \nThis function associates completions with descriptions. Multiple groups separated by -- can be supplied, potentially with different completion options opts. \nThe descr is taken as a string to display above the matches if the format style for the descriptions tag is set. This is followed by one or two names of arrays followed by options to pass to compadd. The array name1 contains the possible completions with their descriptions in the form ‘completion:description’. Any literal colons in completion must be quoted with a backslash. If a name2 is given, it should have the same number of elements as name1; in this case the corresponding elements are added as possible completions instead of the completion strings from name1. The completion list will retain the descriptions from name1. Finally, a set of completion options can appear. \nIf the option ‘-o’ appears before the first argument, the matches added will be treated as names of command options (N.B. not shell options), typically following a ‘-’, ‘--’ or ‘+’ on the command line. In this case _describe uses the prefix-hidden, prefix-needed and verbose styles to find out if the strings should be added as completions and if the descriptions should be shown. Without the ‘-o’ option, only the verbose style is used to decide how descriptions are shown. If ‘-O’ is used instead of ‘-o’, command options are completed as above but _describe will not handle the prefix-needed style. \nWith the -t option a tag can be specified. The default is ‘values’ or, if the -o option is given, ‘options’. \nThe options -1, -2, -J, -V, -x are passed to _next_label. \nIf selected by the list-grouped style, strings with the same description will appear together in the list. \n_describe uses the _all_labels function to generate the matches, so it does not need to appear inside a loop over tag labels. \n_description [ -x ] [ -12VJ ] tag name descr [ spec ... ] \nThis function is not to be confused with the previous one; it is used as a helper function for creating options to compadd. It is buried inside many of the higher level completion functions and so often does not need to be called directly. \nThe styles listed below are tested in the current context using the given tag. The resulting options for compadd are put into the array named name (this is traditionally ‘expl’, but this convention is not enforced). The description for the corresponding set of matches is passed to the function in descr. \nThe styles tested are: format, hidden, matcher, ignore-line, ignored-patterns, group-name and sort. The format style is first tested for the given tag and then for the descriptions tag if no value was found, while the remainder are only tested for the tag given as the first argument. The function also calls _setup which tests some more styles. \nThe string returned by the format style (if any) will be modified so that the sequence ‘%d’ is replaced by the descr given as the third argument without any leading or trailing white space. If, after removing the white space, the descr is the empty string, the format style will not be used and the options put into the name array will not contain an explanation string to be displayed above the matches. \nIf _description is called with more than three arguments, the additional specs should be of the form ‘char:str’. These supply escape sequence replacements for the format style: every appearance of ‘%char’ will be replaced by string. If no additional specs are given but the description in descr conforms to a common form then further escape sequences are set for elements of that description. These elements correspond to a default value (‘%o’), the units (‘%m’) range of acceptable values (‘%r’) and the remaining initial part of the description (‘%h’). The form the description takes consists of specifying the units and range in parentheses and the default value in square brackets, for example: \n_description times expl 'timeout (seconds) (0-60) [20]'\nIt is possible to use zformat conditional expressions when styling these elements. So, for example, to add ‘default:’ as a tag but only when there is a default value to show, the format style might include ‘%(o.default: %o.)’. \nIf the -x option is given, the description will be passed to compadd using the -x option instead of the default -X. This means that the description will be displayed even if there are no corresponding matches. \nThe options placed in the array name take account of the group-name style, so matches are placed in a separate group where necessary. The group normally has its elements sorted (by passing the option -J to compadd), but if an option starting with ‘-V’, ‘-J’, ‘-1’, or ‘-2’ is passed to _description, that option will be included in the array. Hence it is possible for the completion group to be unsorted by giving the option ‘-V’, ‘-1V’, or ‘-2V’. \nIn most cases, the function will be used like this: \nlocal expl\n_description files expl file\ncompadd \"$expl[@]\" - \"$files[@]\"\nNote the use of the parameter expl, the hyphen, and the list of matches. Almost all calls to compadd within the completion system use a similar format; this ensures that user-specified styles are correctly passed down to the builtins which implement the internals of completion. \n_dir_list [ -s sep ] [ -S ] \nComplete a list of directory names separated by colons (the same format as $PATH). \n-s sep \nUse sep as separator between items. sep defaults to a colon (‘:’). \n-S \nAdd sep instead of slash (‘/’) as an autoremoveable suffix. \n_dispatch context string ... \nThis sets the current context to context and looks for completion functions to handle this context by hunting through the list of command names or special contexts (as described above for compdef) given as strings. The first completion function to be defined for one of the contexts in the list is used to generate matches. Typically, the last string is -default- to cause the function for default completion to be used as a fallback. \nThe function sets the parameter $service to the string being tried, and sets the context/command field (the fourth) of the $curcontext parameter to the context given as the first argument. \n_email_addresses [ -c ] [ -n plugin ] \nComplete email addresses. Addresses are provided by plugins. \n-c \nComplete bare localhost@domain.tld addresses, without a name part or a comment. Without this option, RFC822 ‘Firstname Lastname <address>’ strings are completed. \n-n plugin \nComplete aliases from plugin. \nThe following plugins are available by default: _email-ldap (see the filter style), _email-local (completes user@hostname Unix addresses), _email-mail (completes aliases from ~/.mailrc), _email-mush, _email-mutt, and _email-pine. \nAddresses from the _email-foo plugin are added under the tag ‘email-foo’. \nWriting plugins \nPlugins are written as separate functions with names starting with ‘_email-’. They are invoked with the -c option and compadd options. They should either do their own completion or set the $reply array to a list of ‘alias:address’ elements and return 300. New plugins will be picked up and run automatically. \n_files \nThe function _files is a wrapper around _path_files. It supports all of the same functionality, with some enhancements — notably, it respects the list-dirs-first style, and it allows users to override the behaviour of the -g and -/ options with the file-patterns style. _files should therefore be preferred over _path_files in most cases. \nThis function accepts the full set of options allowed by _path_files, described below. \n_gnu_generic \nThis function is a simple wrapper around the _arguments function described above. It can be used to determine automatically the long options understood by commands that produce a list when passed the option ‘--help’. It is intended to be used as a top-level completion function in its own right. For example, to enable option completion for the commands foo and bar, use \ncompdef _gnu_generic foo bar\nafter the call to compinit. \nThe completion system as supplied is conservative in its use of this function, since it is important to be sure the command understands the option ‘--help’. \n_guard [ options ] pattern descr \nThis function displays descr if pattern matches the string to be completed. It is intended to be used in the action for the specifications passed to _arguments and similar functions. \nThe return status is zero if the message was displayed and the word to complete is not empty, and non-zero otherwise. \nThe pattern may be preceded by any of the options understood by compadd that are passed down from _description, namely -M, -J, -V, -1, -2, -n, -F and -X. All of these options will be ignored. This fits in conveniently with the argument-passing conventions of actions for _arguments. \nAs an example, consider a command taking the options -n and -none, where -n must be followed by a numeric value in the same word. By using: \n_arguments '-n-: :_guard \"[0-9]#\" \"numeric value\"' '-none'\n_arguments can be made to both display the message ‘numeric value’ and complete options after ‘-n<TAB>’. If the ‘-n’ is already followed by one or more digits (the pattern passed to _guard) only the message will be displayed; if the ‘-n’ is followed by another character, only options are completed. \n_message [ -r12 ] [ -VJ group ] descr _message -e [ tag ] descr \nThe descr is used in the same way as the third argument to the _description function, except that the resulting string will always be shown whether or not matches were generated. This is useful for displaying a help message in places where no completions can be generated. \nThe format style is examined with the messages tag to find a message; the usual tag, descriptions, is used only if the style is not set with the former. \nIf the -r option is given, no style is used; the descr is taken literally as the string to display. This is most useful when the descr comes from a pre-processed argument list which already contains an expanded description. Note that this option does not disable the ‘%’-sequence parsing done by compadd. \nThe -12VJ options and the group are passed to compadd and hence determine the group the message string is added to. \nThe second -e form gives a description for completions with the tag tag to be shown even if there are no matches for that tag. This form is called by _arguments in the event that there is no action for an option specification. The tag can be omitted and if so the tag is taken from the parameter $curtag; this is maintained by the completion system and so is usually correct. Note that if there are no matches at the time this function is called, compstate[insert] is cleared, so additional matches generated later are not inserted on the command line. \n_multi_parts [ -i ] sep array \nThe argument sep is a separator character. The array may be either the name of an array parameter or a literal array in the form ‘(foo bar)’, a parenthesised list of words separated by whitespace. The possible completions are the strings from the array. However, each chunk delimited by sep will be completed separately. For example, the _tar function uses ‘_multi_parts / patharray’ to complete partial file paths from the given array of complete file paths. \nThe -i option causes _multi_parts to insert a unique match even if that requires multiple separators to be inserted. This is not usually the expected behaviour with filenames, but certain other types of completion, for example those with a fixed set of possibilities, may be more suited to this form. \nLike other utility functions, this function accepts the ‘-V’, ‘-J’, ‘-1’, ‘-2’, ‘-n’, ‘-f’, ‘-X’, ‘-M’, ‘-P’, ‘-S’, ‘-r’, ‘-R’, and ‘-q’ options and passes them to the compadd builtin. \n_next_label [ -x ] [ -12VJ ] tag name descr [ option ... ] \nThis function is used to implement the loop over different tag labels for a particular tag as described above for the tag-order style. On each call it checks to see if there are any more tag labels; if there is it returns status zero, otherwise non-zero. As this function requires a current tag to be set, it must always follow a call to _tags or _requested. \nThe -x12VJ options and the first three arguments are passed to the _description function. Where appropriate the tag will be replaced by a tag label in this call. Any description given in the tag-order style is preferred to the descr passed to _next_label. \nThe options given after the descr are set in the parameter given by name, and hence are to be passed to compadd or whatever function is called to add the matches. \nHere is a typical use of this function for the tag foo. The call to _requested determines if tag foo is required at all; the loop over _next_label handles any labels defined for the tag in the tag-order style. \nlocal expl ret=1\n...\nif _requested foo; then\n  ...\n  while _next_label foo expl '...'; do\n    compadd \"$expl[@]\" ... && ret=0\n  done\n  ...\nfi\nreturn ret\n_normal [ -P | -p precommand ] \nThis is the standard function called to handle completion outside any special -context-. It is called both to complete the command word and also the arguments for a command. In the second case, _normal looks for a special completion for that command, and if there is none it uses the completion for the -default- context. \nA second use is to reexamine the command line specified by the $words array and the $CURRENT parameter after those have been modified. For example, the function _precommand, which completes after precommand specifiers such as nohup, removes the first word from the words array, decrements the CURRENT parameter, then calls ‘_normal -p $service’. The effect is that ‘nohup cmd ...’ is treated in the same way as ‘cmd ...’. \n-P \nReset the list of precommands. This option should be used if completing a command line which allows internal commands (e.g. builtins and functions) regardless of prior precommands (e.g. ‘zsh -c’). \n-p precommand \nAppend precommand to the list of precommands. This option should be used in nearly all cases in which -P is not applicable. \nIf the command name matches one of the patterns given by one of the options -p or -P to compdef, the corresponding completion function is called and then the parameter _compskip is checked. If it is set completion is terminated at that point even if no matches have been found. This is the same effect as in the -first- context. \n_numbers [ option ... ] [ description ] [ suffix ... ] \nThis can be used where a number is followed by a suffix to indicate the units. The unit suffixes are completed and can also be included in the description used when completion is invoked for the preceding number. \nIn addition to common compadd options, _numbers accepts the following options: \n-t tag \nSpecify a tag to use instead of the default of numbers. \n-u units \nIndicate the default units for the number, e.g. bytes. \n-l min \nSpecify the lowest possible value for the number. \n-m max \nSpecify the highest possible value for the number. \n-d default \nSpecify the default value. \n-N \nAllow negative numbers. This is implied if the range includes a negative. \n-f \nAllow decimal numbers. \nWhere a particular suffix represents the default units for a number, it should be prefixed with a colon. Additionally, suffixes can be followed by a colon and a description. So for example, the following allows the age of something to be specified, either in seconds or with an optional suffix with a longer unit of time: \n_numbers -u seconds age :s:seconds m:minutes h:hours d:days\nIt is typically helpful for units to be presented in order of magnitude when completed. To facilitate this, the order in which they are given is preserved. \nWhen the format style is looked up with the descriptions tag or the tag specified with -t, the list of suffixes is available as a ‘%x’ escape sequence. This is in addition to the usual sequences documented under the format style. The form this list takes can also be configured. To this end, the format style is first looked up with the tag unit-suffixes. The retrieved format is applied to each suffix in turn and the results are then concatenated to form the completed list. For the unit-suffixes format, ‘%x’ expands to the individual suffix and ‘%X’ to its description. %d’ indicates a default suffix and can be used in a condition. The index and reverse index are set in ‘%i’ and ‘%r’ respectively and are useful for text included only with the first and last suffixes in the list. So for example, the following joins the suffixes together as a comma-separated list: \nzstyle ':completion:*:unit-suffixes' format '%x%(r::,)'\n_options \nThis can be used to complete the names of shell options. It provides a matcher specification that ignores a leading ‘no’, ignores underscores and allows upper-case letters to match their lower-case counterparts (for example, ‘glob’, ‘noglob’, ‘NO_GLOB’ are all completed). Any arguments are propagated to the compadd builtin. \n_options_set and _options_unset \nThese functions complete only set or unset options, with the same matching specification used in the _options function. \nNote that you need to uncomment a few lines in the _main_complete function for these functions to work properly. The lines in question are used to store the option settings in effect before the completion widget locally sets the options it needs. Hence these functions are not generally used by the completion system. \n_parameters \nThis is used to complete the names of shell parameters. \nThe option ‘-g pattern’ limits the completion to parameters whose type matches the pattern. The type of a parameter is that shown by ‘print ${(t)param}’, hence judicious use of ‘*’ in pattern is probably necessary. \nAll other arguments are passed to the compadd builtin. \n_path_files \nThis function is used throughout the completion system to complete filenames. It allows completion of partial paths. For example, the string ‘/u/i/s/sig’ may be completed to ‘/usr/include/sys/signal.h’. \nThe options accepted by both _path_files and _files are: \n-f \nComplete all filenames. This is the default. \n-/ \nSpecifies that only directories should be completed. \n-g pattern \nSpecifies that only files matching the pattern should be completed. \n-W paths \nSpecifies path prefixes that are to be prepended to the string from the command line to generate the filenames but that should not be inserted as completions nor shown in completion listings. Here, paths may be the name of an array parameter, a literal list of paths enclosed in parentheses or an absolute pathname. \n-F ignored-files \nThis behaves as for the corresponding option to the compadd builtin. It gives direct control over which filenames should be ignored. If the option is not present, the ignored-patterns style is used. \nBoth _path_files and _files also accept the following options which are passed to compadd: ‘-J’, ‘-V’, ‘-1’, ‘-2’, ‘-n’, ‘-X’, ‘-M’, ‘-P’, ‘-S’, ‘-q’, ‘-r’, and ‘-R’. \nFinally, the _path_files function uses the styles expand, ambiguous, special-dirs, list-suffixes and file-sort described above. \n_pick_variant [ -b builtin-label ] [ -c command ] [ -r name ] label=pattern ... label [ arg ... ] \nThis function is used to resolve situations where a single command name requires more than one type of handling, either because it has more than one variant or because there is a name clash between two different commands. \nThe command to run is taken from the first element of the array words unless this is overridden by the option -c. This command is run and its output is compared with a series of patterns. Arguments to be passed to the command can be specified at the end after all the other arguments. The patterns to try in order are given by the arguments label=pattern; if the output of ‘command arg ...’ contains pattern, then label is selected as the label for the command variant. If none of the patterns match, the final command label is selected and status 1 is returned. \nIf the ‘-b builtin-label’ is given, the command is tested to see if it is provided as a shell builtin, possibly autoloaded; if so, the label builtin-label is selected as the label for the variant. \nIf the ‘-r name’ is given, the label picked is stored in the parameter named name. \nThe results are also cached in the _cmd_variant associative array indexed by the name of the command run. \n_regex_arguments name spec ... \nThis function generates a completion function name which matches the specifications specs, a set of regular expressions as described below. After running _regex_arguments, the function name should be called as a normal completion function. The pattern to be matched is given by the contents of the words array up to the current cursor position joined together with null characters; no quotation is applied. \nThe arguments are grouped as sets of alternatives separated by ‘|’, which are tried one after the other until one matches. Each alternative consists of a one or more specifications which are tried left to right, with each pattern matched being stripped in turn from the command line being tested, until all of the group succeeds or until one fails; in the latter case, the next alternative is tried. This structure can be repeated to arbitrary depth by using parentheses; matching proceeds from inside to outside. \nA special procedure is applied if no test succeeds but the remaining command line string contains no null character (implying the remaining word is the one for which completions are to be generated). The completion target is restricted to the remaining word and any actions for the corresponding patterns are executed. In this case, nothing is stripped from the command line string. The order of evaluation of the actions can be determined by the tag-order style; the various formats supported by _alternative can be used in action. The descr is used for setting up the array parameter expl. \nSpecification arguments take one of following forms, in which metacharacters such as ‘(’, ‘)’, ‘#’ and ‘|’ should be quoted. \n/pattern/ [%lookahead%] [-guard] [:tag:descr:action] \nThis is a single primitive component. The function tests whether the combined pattern ‘(#b)((#B)pattern)lookahead*’ matches the command line string. If so, ‘guard’ is evaluated and its return status is examined to determine if the test has succeeded. The pattern string ‘[]’ is guaranteed never to match. The lookahead is not stripped from the command line before the next pattern is examined. \nThe argument starting with : is used in the same manner as an argument to _alternative. \nA component is used as follows: pattern is tested to see if the component already exists on the command line. If it does, any following specifications are examined to find something to complete. If a component is reached but no such pattern exists yet on the command line, the string containing the action is used to generate matches to insert at that point. \n/pattern/+ [%lookahead%] [-guard] [:tag:descr:action] \nThis is similar to ‘/pattern/ ...’ but the left part of the command line string (i.e. the part already matched by previous patterns) is also considered part of the completion target. \n/pattern/- [%lookahead%] [-guard] [:tag:descr:action] \nThis is similar to ‘/pattern/ ...’ but the actions of the current and previously matched patterns are ignored even if the following ‘pattern’ matches the empty string. \n( spec ) \nParentheses may be used to groups specs; note each parenthesis is a single argument to _regex_arguments. \nspec # \nThis allows any number of repetitions of spec. \nspec spec \nThe two specs are to be matched one after the other as described above. \nspec | spec \nEither of the two specs can be matched. \nThe function _regex_words can be used as a helper function to generate matches for a set of alternative words possibly with their own arguments as a command line argument. \nExamples: \n_regex_arguments _tst /$'[^\\0]#\\0'/ \\ \n    /$'[^\\0]#\\0'/ :'compadd aaa'\nThis generates a function _tst that completes aaa as its only argument. The tag and description for the action have been omitted for brevity (this works but is not recommended in normal use). The first component matches the command word, which is arbitrary; the second matches any argument. As the argument is also arbitrary, any following component would not depend on aaa being present. \n_regex_arguments _tst /$'[^\\0]#\\0'/ \\ \n    /$'aaa\\0'/ :'compadd aaa'\nThis is a more typical use; it is similar, but any following patterns would only match if aaa was present as the first argument. \n_regex_arguments _tst /$'[^\\0]#\\0'/ \\( \\ \n    /$'aaa\\0'/ :'compadd aaa' \\ \n    /$'bbb\\0'/ :'compadd bbb' \\) \\#\nIn this example, an indefinite number of command arguments may be completed. Odd arguments are completed as aaa and even arguments as bbb. Completion fails unless the set of aaa and bbb arguments before the current one is matched correctly. \n_regex_arguments _tst /$'[^\\0]#\\0'/ \\ \n    \\( /$'aaa\\0'/ :'compadd aaa' \\| \\ \n    /$'bbb\\0'/ :'compadd bbb' \\) \\#\nThis is similar, but either aaa or bbb may be completed for any argument. In this case _regex_words could be used to generate a suitable expression for the arguments. \n_regex_words tag description spec ... \nThis function can be used to generate arguments for the _regex_arguments command which may be inserted at any point where a set of rules is expected. The tag and description give a standard tag and description pertaining to the current context. Each spec contains two or three arguments separated by a colon: note that there is no leading colon in this case. \nEach spec gives one of a set of words that may be completed at this point, together with arguments. It is thus roughly equivalent to the _arguments function when used in normal (non-regex) completion. \nThe part of the spec before the first colon is the word to be completed. This may contain a *; the entire word, before and after the * is completed, but only the text before the * is required for the context to be matched, so that further arguments may be completed after the abbreviated form. \nThe second part of spec is a description for the word being completed. \nThe optional third part of the spec describes how words following the one being completed are themselves to be completed. It will be evaluated in order to avoid problems with quoting. This means that typically it contains a reference to an array containing previously generated regex arguments. \nThe option -t term specifies a terminator for the word instead of the usual space. This is handled as an auto-removable suffix in the manner of the option -s sep to _values. \nThe result of the processing by _regex_words is placed in the array reply, which should be made local to the calling function. If the set of words and arguments may be matched repeatedly, a # should be appended to the generated array at that point. \nFor example: \nlocal -a reply\n_regex_words mydb-commands 'mydb commands' \\ \n  'add:add an entry to mydb:$mydb_add_cmds' \\ \n  'show:show entries in mydb'\n_regex_arguments _mydb \"$reply[@]\"\n_mydb \"$@\"\nThis shows a completion function for a command mydb which takes two command arguments, add and show. show takes no arguments, while the arguments for add have already been prepared in an array mydb_add_cmds, quite possibly by a previous call to _regex_words. \n_requested [ -x ] [ -12VJ ] tag [ name descr [ command [ arg ... ] ] \nThis function is called to decide whether a tag already registered by a call to _tags (see below) has been requested by the user and hence completion should be performed for it. It returns status zero if the tag is requested and non-zero otherwise. The function is typically used as part of a loop over different tags as follows: \n_tags foo bar baz\nwhile _tags; do\n  if _requested foo; then\n    ... # perform completion for foo\n  fi\n  ... # test the tags bar and baz in the same way\n  ... # exit loop if matches were generated\ndone\nNote that the test for whether matches were generated is not performed until the end of the _tags loop. This is so that the user can set the tag-order style to specify a set of tags to be completed at the same time. \nIf name and descr are given, _requested calls the _description function with these arguments together with the options passed to _requested. \nIf command is given, the _all_labels function will be called immediately with the same arguments. In simple cases this makes it possible to perform the test for the tag and the matching in one go. For example: \nlocal expl ret=1\n_tags foo bar baz\nwhile _tags; do\n  _requested foo expl 'description' \\ \n      compadd foobar foobaz && ret=0\n  ...\n  (( ret )) || break\ndone\nIf the command is not compadd, it must nevertheless be prepared to handle the same options. \n_retrieve_cache cache_identifier \nThis function retrieves completion information from the file given by cache_identifier, stored in a directory specified by the cache-path style which defaults to ~/.zcompcache. The return status is zero if retrieval was successful. It will only attempt retrieval if the use-cache style is set, so you can call this function without worrying about whether the user wanted to use the caching layer. \nSee _store_cache below for more details. \n_sep_parts \nThis function is passed alternating arrays and separators as arguments. The arrays specify completions for parts of strings to be separated by the separators. The arrays may be the names of array parameters or a quoted list of words in parentheses. For example, with the array ‘hosts=(ftp news)’ the call ‘_sep_parts ’(foo bar)’ @ hosts’ will complete the string ‘f’ to ‘foo’ and the string ‘b@n’ to ‘bar@news’. \nThis function accepts the compadd options ‘-V’, ‘-J’, ‘-1’, ‘-2’, ‘-n’, ‘-X’, ‘-M’, ‘-P’, ‘-S’, ‘-r’, ‘-R’, and ‘-q’ and passes them on to the compadd builtin used to add the matches. \n_sequence [ -s sep ] [ -n max ] [ -d ] function [ - ] ... \nThis function is a wrapper to other functions for completing items in a separated list. The same function is used to complete each item in the list. The separator is specified with the -s option. If -s is omitted it will use ‘,’. Duplicate values are not matched unless -d is specified. If there is a fixed or maximum number of items in the list, this can be specified with the -n option. \nCommon compadd options are passed on to the function. It is possible to use compadd directly with _sequence, though _values may be more appropriate in this situation. \n_setup tag [ group ] \nThis function sets up the special parameters used by the completion system appropriately for the tag given as the first argument. It uses the styles list-colors, list-packed, list-rows-first, last-prompt, accept-exact, menu and force-list. \nThe optional group supplies the name of the group in which the matches will be placed. If it is not given, the tag is used as the group name. \nThis function is called automatically from _description and hence is not normally called explicitly. \n_store_cache cache_identifier param ... \nThis function, together with _retrieve_cache and _cache_invalid, implements a caching layer which can be used in any completion function. Data obtained by costly operations are stored in parameters; this function then dumps the values of those parameters to a file. The data can then be retrieved quickly from that file via _retrieve_cache, even in different instances of the shell. \nThe cache_identifier specifies the file which the data should be dumped to. The file is stored in a directory specified by the cache-path style which defaults to ~/.zcompcache. The remaining params arguments are the parameters to dump to the file. \nThe return status is zero if storage was successful. The function will only attempt storage if the use-cache style is set, so you can call this function without worrying about whether the user wanted to use the caching layer. \nThe completion function may avoid calling _retrieve_cache when it already has the completion data available as parameters. However, in that case it should call _cache_invalid to check whether the data in the parameters and in the cache are still valid. \nSee the _perl_modules completion function for a simple example of the usage of the caching layer. \n_tags [ [ -C name ] tag ... ] \nIf called with arguments, these are taken to be the names of tags valid for completions in the current context. These tags are stored internally and sorted by using the tag-order style. \nNext, _tags is called repeatedly without arguments from the same completion function. This successively selects the first, second, etc. set of tags requested by the user. The return status is zero if at least one of the tags is requested and non-zero otherwise. To test if a particular tag is to be tried, the _requested function should be called (see above). \nIf ‘-C name’ is given, name is temporarily stored in the argument field (the fifth) of the context in the curcontext parameter during the call to _tags; the field is restored on exit. This allows _tags to use a more specific context without having to change and reset the curcontext parameter (which has the same effect). \n_tilde_files \nLike _files, but resolve leading tildes according to the rules of filename expansion, so the suggested completions don’t start with a ‘~’ even if the filename on the command-line does. \n_values [ -O name ] [ -s sep ] [ -S sep ] [ -wC ] desc spec ... \nThis is used to complete arbitrary keywords (values) and their arguments, or lists of such combinations. \nIf the first argument is the option ‘-O name’, it will be used in the same way as by the _arguments function. In other words, the elements of the name array will be passed to compadd when executing an action. \nIf the first argument (or the first argument after ‘-O name’) is ‘-s’, the next argument is used as the character that separates multiple values. This character is automatically added after each value in an auto-removable fashion (see below); all values completed by ‘_values -s’ appear in the same word on the command line, unlike completion using _arguments. If this option is not present, only a single value will be completed per word. \nNormally, _values will only use the current word to determine which values are already present on the command line and hence are not to be completed again. If the -w option is given, other arguments are examined as well. \nThe first non-option argument, desc, is used as a string to print as a description before listing the values. \nAll other arguments describe the possible values and their arguments in the same format used for the description of options by the _arguments function (see above). The only differences are that no minus or plus sign is required at the beginning, values can have only one argument, and the forms of action beginning with an equal sign are not supported. \nThe character separating a value from its argument can be set using the option -S (like -s, followed by the character to use as the separator in the next argument). By default the equals sign will be used as the separator between values and arguments. \nExample: \n_values -s , 'description' \\ \n        '*foo[bar]' \\ \n        '(two)*one[number]:first count:' \\ \n        'two[another number]::second count:(1 2 3)'\nThis describes three possible values: ‘foo’, ‘one’, and ‘two’. The first is described as ‘bar’, takes no argument and may appear more than once. The second is described as ‘number’, may appear more than once, and takes one mandatory argument described as ‘first count’; no action is specified, so it will not be completed. The ‘(two)’ at the beginning says that if the value ‘one’ is on the line, the value ‘two’ will no longer be considered a possible completion. Finally, the last value (‘two’) is described as ‘another number’ and takes an optional argument described as ‘second count’ for which the completions (to appear after an ‘=’) are ‘1’, ‘2’, and ‘3’. The _values function will complete lists of these values separated by commas. \nLike _arguments, this function temporarily adds another context name component to the arguments element (the fifth) of the current context while executing the action. Here this name is just the name of the value for which the argument is completed. \nThe style verbose is used to decide if the descriptions for the values (but not those for the arguments) should be printed. \nThe associative array val_args is used to report values and their arguments; this works similarly to the opt_args associative array used by _arguments. Hence the function calling _values should declare the local parameters state, state_descr, line, context and val_args: \nlocal context state state_descr line\ntypeset -A val_args\nwhen using an action of the form ‘->string’. With this function the context parameter will be set to the name of the value whose argument is to be completed. Note that for _values, the state and state_descr are scalars rather than arrays. Only a single matching state is returned. \nNote also that _values normally adds the character used as the separator between values as an auto-removable suffix (similar to a ‘/’ after a directory). However, this is not possible for a ‘->string’ action as the matches for the argument are generated by the calling function. To get the usual behaviour, the calling function can add the separator x as a suffix by passing the options ‘-qS x’ either directly or indirectly to compadd. \nThe option -C is treated in the same way as it is by _arguments. In that case the parameter curcontext should be made local instead of context (as described above). \n_wanted [ -x ] [ -C name ] [ -12VJ ] tag name descr command [ arg ...] \nIn many contexts, completion can only generate one particular set of matches, usually corresponding to a single tag. However, it is still necessary to decide whether the user requires matches of this type. This function is useful in such a case. \nThe arguments to _wanted are the same as those to _requested, i.e. arguments to be passed to _description. However, in this case the command is not optional; all the processing of tags, including the loop over both tags and tag labels and the generation of matches, is carried out automatically by _wanted. \nHence to offer only one tag and immediately add the corresponding matches with the given description: \nlocal expl\n_wanted tag expl 'description' \\ \n    compadd -- match1 match2...\nSee also the use of _wanted in the example function in Dynamic named directories. \nNote that, as for _requested, the command must be able to accept options to be passed down to compadd. \nLike _tags this function supports the -C option to give a different name for the argument context field. The -x option has the same meaning as for _description. \n_widgets [ -g pattern ] \nThis function completes names of zle widgets (see Zle Widgets). The pattern, if present, is matched against values of the $widgets special parameter, documented in The zsh/zleparameter Module. \n20.7 Completion System Variables\nThere are some standard variables, initialised by the _main_complete function and then used from other functions. \nThe standard variables are: \n_comp_caller_options \nThe completion system uses setopt to set a number of options. This allows functions to be written without concern for compatibility with every possible combination of user options. However, sometimes completion needs to know what the user’s option preferences are. These are saved in the _comp_caller_options associative array. Option names, spelled in lowercase without underscores, are mapped to one or other of the strings ‘on’ and ‘off’. \n_comp_priv_prefix \nCompletion functions such as _sudo can set the _comp_priv_prefix array to a command prefix that may then be used by _call_program to match the privileges when calling programs to generate matches. \nTwo more features are offered by the _main_complete function. The arrays compprefuncs and comppostfuncs may contain names of functions that are to be called immediately before or after completion has been tried. A function will only be called once unless it explicitly reinserts itself into the array. \n20.8 Completion Directories\nIn the source distribution, the files are contained in various subdirectories of the Completion directory. They may have been installed in the same structure, or into one single function directory. The following is a description of the files found in the original directory structure. If you wish to alter an installed file, you will need to copy it to some directory which appears earlier in your fpath than the standard directory where it appears. \nBase \nThe core functions and special completion widgets automatically bound to keys. You will certainly need most of these, though will probably not need to alter them. Many of these are documented above. \nZsh \nFunctions for completing arguments of shell builtin commands and utility functions for this. Some of these are also used by functions from the Unix directory. \nUnix \nFunctions for completing arguments of external commands and suites of commands. They may need modifying for your system, although in many cases some attempt is made to decide which version of a command is present. For example, completion for the mount command tries to determine the system it is running on, while completion for many other utilities try to decide whether the GNU version of the command is in use, and hence whether the --help option is supported. \nX, AIX, BSD, ... \nCompletion and utility function for commands available only on some systems. These are not arranged hierarchically, so, for example, both the Linux and Debian directories, as well as the X directory, may be useful on your system. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-System-html-Completion-System-b4doh.html",
  "markdown": "# zsh: 20 Completion System\n\n* * *\n\n## 20.1 Description\n\nThis describes the shell code for the ‘new’ completion system, referred to as compsys. It is written in shell functions based on the features described in the previous chapter, [Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets).\n\nThe features are contextual, sensitive to the point at which completion is started. Many completions are already provided. For this reason, a user can perform a great many tasks without knowing any details beyond how to initialize the system, which is described in [Initialization](#Initialization).\n\nThe context that decides what completion is to be performed may be\n\n*   an argument or option position: these describe the position on the command line at which completion is requested. For example ‘first argument to rmdir, the word being completed names a directory’;\n*   a special context, denoting an element in the shell’s syntax. For example ‘a word in command position’ or ‘an array subscript’.\n\nA full context specification contains other elements, as we shall describe.\n\nBesides commands names and contexts, the system employs two more concepts, _styles_ and _tags_. These provide ways for the user to configure the system’s behaviour.\n\nTags play a dual role. They serve as a classification system for the matches, typically indicating a class of object that the user may need to distinguish. For example, when completing arguments of the ls command the user may prefer to try files before directories, so both of these are tags. They also appear as the rightmost element in a context specification.\n\nStyles modify various operations of the completion system, such as output formatting, but also what kinds of completers are used (and in what order), or which tags are examined. Styles may accept arguments and are manipulated using the zstyle command described in [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module).\n\nIn summary, tags describe _what_ the completion objects are, and style how they are to be completed. At various points of execution, the completion system checks what styles and/or tags are defined for the current context, and uses that to modify its behavior. The full description of context handling, which determines how tags and other elements of the context influence the behaviour of styles, is described in [Completion System Configuration](#Completion-System-Configuration).\n\nWhen a completion is requested, a dispatcher function is called; see the description of \\_main\\_complete in the list of control functions below. This dispatcher decides which function should be called to produce the completions, and calls it. The result is passed to one or more _completers_, functions that implement individual completion strategies: simple completion, error correction, completion with error correction, menu selection, etc.\n\nMore generally, the shell functions contained in the completion system are of two types:\n\n*   those beginning ‘comp’ are to be called directly; there are only a few of these;\n*   those beginning ‘\\_’ are called by the completion code. The shell functions of this set, which implement completion behaviour and may be bound to keystrokes, are referred to as ‘widgets’. These proliferate as new completions are required.\n\n* * *\n\n## 20.2 Initialization\n\nIf the system was installed completely, it should be enough to call the shell function compinit from your initialization file; see the next section. However, the function compinstall can be run by a user to configure various aspects of the completion system.\n\nUsually, compinstall will insert code into .zshrc, although if that is not writable it will save it in another file and tell you that file’s location. Note that it is up to you to make sure that the lines added to .zshrc are actually run; you may, for example, need to move them to an earlier place in the file if .zshrc usually returns early. So long as you keep them all together (including the comment lines at the start and finish), you can rerun compinstall and it will correctly locate and modify these lines. Note, however, that any code you add to this section by hand is likely to be lost if you rerun compinstall, although lines using the command ‘zstyle’ should be gracefully handled.\n\nThe new code will take effect next time you start the shell, or run .zshrc by hand; there is also an option to make them take effect immediately. However, if compinstall has removed definitions, you will need to restart the shell to see the changes.\n\nTo run compinstall you will need to make sure it is in a directory mentioned in your fpath parameter, which should already be the case if zsh was properly configured as long as your startup files do not remove the appropriate directories from fpath. Then it must be autoloaded (‘autoload -U compinstall’ is recommended). You can abort the installation any time you are being prompted for information, and your .zshrc will not be altered at all; changes only take place right at the end, where you are specifically asked for confirmation.\n\n* * *\n\n### 20.2.1 Use of compinit\n\nThis section describes the use of compinit to initialize completion for the current session when called directly; if you have run compinstall it will be called automatically from your .zshrc.\n\nTo initialize the system, the function compinit should be in a directory mentioned in the fpath parameter, and should be autoloaded (‘autoload -U compinit’ is recommended), and then run simply as ‘compinit’. This will define a few utility functions, arrange for all the necessary shell functions to be autoloaded, and will then re-define all widgets that do completion to use the new system. If you use the menu-select widget, which is part of the zsh/complist module, you should make sure that that module is loaded before the call to compinit so that that widget is also re-defined. If completion styles (see below) are set up to perform expansion as well as completion by default, and the TAB key is bound to expand-or-complete, compinit will rebind it to complete-word; this is necessary to use the correct form of expansion.\n\nShould you need to use the original completion commands, you can still bind keys to the old widgets by putting a ‘.’ in front of the widget name, e.g. ‘.expand-or-complete’.\n\nTo speed up the running of compinit, it can be made to produce a dumped configuration that will be read in on future invocations; this is the default, but can be turned off by calling compinit with the option \\-D. The dumped file is .zcompdump in the same directory as the startup files (i.e. $ZDOTDIR or $HOME); alternatively, an explicit file name can be given by ‘compinit -d dumpfile’. The next invocation of compinit will read the dumped file instead of performing a full initialization.\n\nIf the number of completion files changes, compinit will recognise this and produce a new dump file. However, if the name of a function or the arguments in the first line of a #compdef function (as described below) change, it is easiest to delete the dump file by hand so that compinit will re-create it the next time it is run. The check performed to see if there are new functions can be omitted by giving the option \\-C. In this case the dump file will only be created if there isn’t one already.\n\nThe dumping is actually done by another function, compdump, but you will only need to run this yourself if you change the configuration (e.g. using compdef) and then want to dump the new one. The name of the old dumped file will be remembered for this purpose.\n\nIf the parameter \\_compdir is set, compinit uses it as a directory where completion functions can be found; this is only necessary if they are not already in the function search path.\n\nFor security reasons compinit also checks if the completion system would use files not owned by root or by the current user, or files in directories that are world- or group-writable or that are not owned by root or by the current user. If such files or directories are found, compinit will ask if the completion system should really be used. To avoid these tests and make all files found be used without asking, use the option \\-u, and to make compinit silently ignore all insecure files and directories use the option \\-i. This security check is skipped entirely when the \\-C option is given, provided the dumpfile exists.\n\nThe security check can be retried at any time by running the function compaudit. This is the same check used by compinit, but when it is executed directly any changes to fpath are made local to the function so they do not persist. The directories to be checked may be passed as arguments; if none are given, compaudit uses fpath and \\_compdir to find completion system directories, adding missing ones to fpath as necessary. To force a check of exactly the directories currently named in fpath, set \\_compdir to an empty string before calling compaudit or compinit.\n\nThe function bashcompinit provides compatibility with bash’s programmable completion system. When run it will define the functions, compgen and complete which correspond to the bash builtins with the same names. It will then be possible to use completion specifications and functions written for bash.\n\n* * *\n\n### 20.2.2 Autoloaded files\n\nThe convention for autoloaded functions used in completion is that they start with an underscore; as already mentioned, the fpath/FPATH parameter must contain the directory in which they are stored. If zsh was properly installed on your system, then fpath/FPATH automatically contains the required directories for the standard functions.\n\nFor incomplete installations, if compinit does not find enough files beginning with an underscore (fewer than twenty) in the search path, it will try to find more by adding the directory \\_compdir to the search path. If that directory has a subdirectory named Base, all subdirectories will be added to the path. Furthermore, if the subdirectory Base has a subdirectory named Core, compinit will add all subdirectories of the subdirectories to the path: this allows the functions to be in the same format as in the zsh source distribution.\n\nWhen compinit is run, it searches all such files accessible via fpath/FPATH and reads the first line of each of them. This line should contain one of the tags described below. Files whose first line does not start with one of these tags are not considered to be part of the completion system and will not be treated specially.\n\nThe tags are:\n\n#compdef name ... \\[ \\-{p|P} pattern ... \\[ \\-N name ... \\] \\]\n\nThe file will be made autoloadable and the function defined in it will be called when completing names, each of which is either the name of a command whose arguments are to be completed or one of a number of special contexts in the form \\-context\\- described below.\n\nEach name may also be of the form ‘cmd\\=service’. When completing the command cmd, the function typically behaves as if the command (or special context) service was being completed instead. This provides a way of altering the behaviour of functions that can perform many different completions. It is implemented by setting the parameter $service when calling the function; the function may choose to interpret this how it wishes, and simpler functions will probably ignore it.\n\nIf the #compdef line contains one of the options \\-p or \\-P, the words following are taken to be patterns. The function will be called when completion is attempted for a command or context that matches one of the patterns. The options \\-p and \\-P are used to specify patterns to be tried before or after other completions respectively. Hence \\-P may be used to specify default actions.\n\nThe option \\-N is used after a list following \\-p or \\-P; it specifies that remaining words no longer define patterns. It is possible to toggle between the three options as many times as necessary.\n\n#compdef -k style key-sequence ...\n\nThis option creates a widget behaving like the builtin widget style and binds it to the given key-sequences, if any. The style must be one of the builtin widgets that perform completion, namely complete-word, delete-char-or-list, expand-or-complete, expand-or-complete-prefix, list-choices, menu-complete, menu-expand-or-complete, or reverse-menu-complete. If the zsh/complist module is loaded (see [The zsh/complist Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomplist-Module)) the widget menu-select is also available.\n\nWhen one of the key-sequences is typed, the function in the file will be invoked to generate the matches. Note that a key will not be re-bound if it already was (that is, was bound to something other than undefined-key). The widget created has the same name as the file and can be bound to any other keys using bindkey as usual.\n\n#compdef -K widget-name style key-sequence \\[ name style seq ... \\]\n\nThis is similar to \\-k except that only one key-sequence argument may be given for each widget-name style pair. However, the entire set of three arguments may be repeated with a different set of arguments. Note in particular that the widget-name must be distinct in each set. If it does not begin with ‘\\_’ this will be added. The widget-name should not clash with the name of any existing widget: names based on the name of the function are most useful. For example,\n\n#compdef -K \\_foo\\_complete complete-word \"^X^C\" \\\\ \n  \\_foo\\_list list-choices \"^X^D\"\n\n(all on one line) defines a widget \\_foo\\_complete for completion, bound to ‘^X^C’, and a widget \\_foo\\_list for listing, bound to ‘^X^D’.\n\n#autoload \\[ options \\]\n\nFunctions with the #autoload tag are marked for autoloading but are not otherwise treated specially. Typically they are to be called from within one of the completion functions. Any options supplied will be passed to the autoload builtin; a typical use is +X to force the function to be loaded immediately. Note that the \\-U and \\-z flags are always added implicitly.\n\nThe # is part of the tag name and no white space is allowed after it. The #compdef tags use the compdef function described below; the main difference is that the name of the function is supplied implicitly.\n\nThe special contexts for which completion functions can be defined are:\n\n\\-array-value-\n\nThe right hand side of an array-assignment (‘name\\=(...)’)\n\n\\-assign-parameter-\n\nThe name of a parameter in an assignment, i.e. on the left hand side of an ‘\\=’\n\n\\-brace-parameter-\n\nThe name of a parameter expansion within braces (‘${...}’)\n\n\\-command-\n\nA word in command position\n\n\\-condition-\n\nA word inside a condition (‘\\[\\[...\\]\\]’)\n\n\\-default-\n\nAny word for which no other completion is defined\n\n\\-equal-\n\nA word beginning with an equals sign\n\n\\-first-\n\nThis is tried before any other completion function. The function called may set the \\_compskip parameter to one of various values: all: no further completion is attempted; a string containing the substring patterns: no pattern completion functions will be called; a string containing default: the function for the ‘\\-default-’ context will not be called, but functions defined for commands will be.\n\n\\-math-\n\nInside mathematical contexts, such as ‘((...))’\n\n\\-parameter-\n\nThe name of a parameter expansion (‘$...’)\n\n\\-redirect-\n\nThe word after a redirection operator.\n\n\\-subscript-\n\nThe contents of a parameter subscript.\n\n\\-tilde-\n\nAfter an initial tilde (‘~’), but before the first slash in the word.\n\n\\-value-\n\nOn the right hand side of an assignment.\n\nDefault implementations are supplied for each of these contexts. In most cases the context \\-context\\- is implemented by a corresponding function \\_context, for example the context ‘\\-tilde-’ and the function ‘\\_tilde’).\n\nThe contexts \\-redirect- and \\-value- allow extra context-specific information. (Internally, this is handled by the functions for each context calling the function \\_dispatch.) The extra information is added separated by commas.\n\nFor the \\-redirect- context, the extra information is in the form ‘\\-redirect-,op,command’, where op is the redirection operator and command is the name of the command on the line. If there is no command on the line yet, the command field will be empty.\n\nFor the \\-value- context, the form is ‘\\-value-,name,command’, where name is the name of the parameter on the left hand side of the assignment. In the case of elements of an associative array, for example ‘assoc=(key <TAB>’, name is expanded to ‘name\\-key’. In certain special contexts, such as completing after ‘make CFLAGS=’, the command part gives the name of the command, here make; otherwise it is empty.\n\nIt is not necessary to define fully specific completions as the functions provided will try to generate completions by progressively replacing the elements with ‘\\-default-’. For example, when completing after ‘foo=<TAB>’, \\_value will try the names ‘\\-value-,foo,’ (note the empty command part), ‘\\-value-,foo,-default-’ and‘\\-value-,-default-,-default-’, in that order, until it finds a function to handle the context.\n\nAs an example:\n\ncompdef '\\_files -g \"\\*.log\"' '-redirect-,2>,-default-'\n\ncompletes files matching ‘\\*.log’ after ‘2> <TAB>’ for any command with no more specific handler defined.\n\nAlso:\n\ncompdef \\_foo -value-,-default-,-default-\n\nspecifies that \\_foo provides completions for the values of parameters for which no special function has been defined. This is usually handled by the function \\_value itself.\n\nThe same lookup rules are used when looking up styles (as described below); for example\n\nzstyle ':completion:\\*:\\*:-redirect-,2>,\\*:\\*' file-patterns '\\*.log'\n\nis another way to make completion after ‘2> <TAB>’ complete files matching ‘\\*.log’.\n\n* * *\n\n### 20.2.3 Functions\n\nThe following function is defined by compinit and may be called directly.\n\ncompdef \\[ \\-ane \\] function name ... \\[ \\-{p|P} pattern ... \\[ \\-N name ...\\]\\]\n\ncompdef -d name ...\n\ncompdef -k \\[ \\-an \\] function style key-sequence \\[ key-sequence ... \\]\n\ncompdef -K \\[ \\-an \\] function name style key-seq \\[ name style seq ... \\]\n\nThe first form defines the function to call for completion in the given contexts as described for the #compdef tag above.\n\nAlternatively, all the arguments may have the form ‘cmd\\=service’. Here service should already have been defined by ‘cmd1\\=service’ lines in #compdef files, as described above. The argument for cmd will be completed in the same way as service.\n\nThe function argument may alternatively be a string containing almost any shell code. If the string contains an equal sign, the above will take precedence. The option \\-e may be used to specify the first argument is to be evaluated as shell code even if it contains an equal sign. The string will be executed using the eval builtin command to generate completions. This provides a way of avoiding having to define a new completion function. For example, to complete files ending in ‘.h’ as arguments to the command foo:\n\ncompdef '\\_files -g \"\\*.h\"' foo\n\nThe option \\-n prevents any completions already defined for the command or context from being overwritten.\n\nThe option \\-d deletes any completion defined for the command or contexts listed.\n\nThe names may also contain \\-p, \\-P and \\-N options as described for the #compdef tag. The effect on the argument list is identical, switching between definitions of patterns tried initially, patterns tried finally, and normal commands and contexts.\n\nThe parameter $\\_compskip may be set by any function defined for a pattern context. If it is set to a value containing the substring ‘patterns’ none of the pattern-functions will be called; if it is set to a value containing the substring ‘all’, no other function will be called. Setting $\\_compskip in this manner is of particular utility when using the \\-p option, as otherwise the dispatcher will move on to additional functions (likely the default one) after calling the pattern-context one, which can mangle the display of completion possibilities if not handled properly.\n\nThe form with \\-k defines a widget with the same name as the function that will be called for each of the key-sequences; this is like the #compdef -k tag. The function should generate the completions needed and will otherwise behave like the builtin widget whose name is given as the style argument. The widgets usable for this are: complete-word, delete-char-or-list, expand-or-complete, expand-or-complete-prefix, list-choices, menu-complete, menu-expand-or-complete, and reverse-menu-complete, as well as menu-select if the zsh/complist module is loaded. The option \\-n prevents the key being bound if it is already to bound to something other than undefined-key.\n\nThe form with \\-K is similar and defines multiple widgets based on the same function, each of which requires the set of three arguments name, style and key-sequence, where the latter two are as for \\-k and the first must be a unique widget name beginning with an underscore.\n\nWherever applicable, the \\-a option makes the function autoloadable, equivalent to autoload -U function.\n\nThe function compdef can be used to associate existing completion functions with new commands. For example,\n\nuses the function \\_pids to complete process IDs for the command foo.\n\nNote also the \\_gnu\\_generic function described below, which can be used to complete options for commands that understand the ‘\\-\\-help’ option.\n\n* * *\n\n## 20.3 Completion System Configuration\n\nThis section gives a short overview of how the completion system works, and then more detail on how users can configure how and when matches are generated.\n\n* * *\n\n### 20.3.1 Overview\n\nWhen completion is attempted somewhere on the command line the completion system begins building the context. The context represents everything that the shell knows about the meaning of the command line and the significance of the cursor position. This takes account of a number of things including the command word (such as ‘grep’ or ‘zsh’) and options to which the current word may be an argument (such as the ‘\\-o’ option to zsh which takes a shell option as an argument).\n\nThe context starts out very generic (\"we are beginning a completion\") and becomes more specific as more is learned (\"the current word is in a position that is usually a command name\" or \"the current word might be a variable name\" and so on). Therefore the context will vary during the same call to the completion system.\n\nThis context information is condensed into a string consisting of multiple fields separated by colons, referred to simply as ‘the context’ in the remainder of the documentation. Note that a user of the completion system rarely needs to compose a context string, unless for example a new function is being written to perform completion for a new command. What a user may need to do is compose a _style_ pattern, which is matched against a context when needed to look up context-sensitive options that configure the completion system.\n\nThe next few paragraphs explain how a context is composed within the completion function suite. Following that is discussion of how _styles_ are defined. Styles determine such things as how the matches are generated, similarly to shell options but with much more control. They are defined with the zstyle builtin command ([The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module)).\n\nThe context string always consists of a fixed set of fields, separated by colons and with a leading colon before the first. Fields which are not yet known are left empty, but the surrounding colons appear anyway. The fields are always in the order :completion:function:completer:command:argument:tag. These have the following meaning:\n\n*   The literal string completion, saying that this style is used by the completion system. This distinguishes the context from those used by, for example, zle widgets and ZFTP functions.\n*   The function, if completion is called from a named widget rather than through the normal completion system. Typically this is blank, but it is set by special widgets such as predict-on and the various functions in the Widget directory of the distribution to the name of that function, often in an abbreviated form.\n*   The completer currently active, the name of the function without the leading underscore and with other underscores converted to hyphens. A ‘completer’ is in overall control of how completion is to be performed; ‘complete’ is the simplest, but other completers exist to perform related tasks such as correction, or to modify the behaviour of a later completer. See [Control Functions](#Control-Functions) for more information.\n*   The command or a special \\-context\\-, just at it appears following the #compdef tag or the compdef function. Completion functions for commands that have sub-commands usually modify this field to contain the name of the command followed by a minus sign and the sub-command. For example, the completion function for the cvs command sets this field to cvs-add when completing arguments to the add subcommand.\n*   The argument; this indicates which command line or option argument we are completing. For command arguments this generally takes the form argument-n, where n is the number of the argument, and for arguments to options the form option-opt\\-n where n is the number of the argument to option opt. However, this is only the case if the command line is parsed with standard UNIX-style options and arguments, so many completions do not set this.\n*   The tag. As described previously, tags are used to discriminate between the types of matches a completion function can generate in a certain context. Any completion function may use any tag name it likes, but a list of the more common ones is given below.\n\nThe context is gradually put together as the functions are executed, starting with the main entry point, which adds :completion: and the function element if necessary. The completer then adds the completer element. The contextual completion adds the command and argument options. Finally, the tag is added when the types of completion are known. For example, the context name\n\n:completion::complete:dvips:option-o-1:files\n\nsays that normal completion was attempted as the first argument to the option \\-o of the command dvips:\n\nand the completion function will generate filenames.\n\nUsually completion will be tried for all possible tags in an order given by the completion function. However, this can be altered by using the tag-order style. Completion is then restricted to the list of given tags in the given order.\n\nThe \\_complete\\_help bindable command shows all the contexts and tags available for completion at a particular point. This provides an easy way of finding information for tag-order and other styles. It is described in [Bindable Commands](#Bindable-Commands).\n\nWhen looking up styles the completion system uses full context names, including the tag. Looking up the value of a style therefore consists of two things: the context, which is matched to the most specific (best fitting) pattern, and the name of the style itself, which must be matched exactly. The following examples demonstrate that patterns may be loosely defined for styles that apply broadly, or as tightly defined as desired for styles that apply in narrower circumstances.\n\nFor example, many completion functions can generate matches in a simple and a verbose form and use the verbose style to decide which form should be used. To make all such functions use the verbose form, put\n\nzstyle ':completion:\\*' verbose yes\n\nin a startup file (probably .zshrc). This gives the verbose style the value yes in every context inside the completion system, unless that context has a more specific definition. It is best to avoid giving the pattern as ‘\\*’ in case the style has some meaning outside the completion system.\n\nMany such general purpose styles can be configured simply by using the compinstall function.\n\nA more specific example of the use of the verbose style is by the completion for the kill builtin. If the style is set, the builtin lists full job texts and process command lines; otherwise it shows the bare job numbers and PIDs. To turn the style off for this use only:\n\nzstyle ':completion:\\*:\\*:kill:\\*:\\*' verbose no\n\nFor even more control, the style can use one of the tags ‘jobs’ or ‘processes’. To turn off verbose display only for jobs:\n\nzstyle ':completion:\\*:\\*:kill:\\*:jobs' verbose no\n\nThe \\-e option to zstyle even allows completion function code to appear as the argument to a style; this requires some understanding of the internals of completion functions (see [Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets))). For example,\n\nzstyle -e ':completion:\\*' hosts 'reply=($myhosts)'\n\nThis forces the value of the hosts style to be read from the variable myhosts each time a host name is needed; this is useful if the value of myhosts can change dynamically. For another useful example, see the example in the description of the file-list style below. This form can be slow and should be avoided for commonly examined styles such as menu and list-rows-first.\n\nNote that the order in which styles are _defined_ does not matter; the style mechanism uses the most specific possible match for a particular style to determine the set of values. Strings are preferred over patterns (for example, ‘:completion::complete:::foo’ is more specific than ‘:completion::complete:::\\*’), and longer patterns are preferred over the pattern ‘\\*’. See [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module) for details.\n\nContext patterns that use something other than a wildcard (\\*) to match the middle parts of the context — the completer, command, and argument in :completion:function:completer:command:argument:tag — should include all six colons (:) explicitly. Without this, a pattern such as :completion:\\*:foo:\\* could match foo against a component other than the intended one (for example, against completer when a match against command was intended).\n\nStyle names like those of tags are arbitrary and depend on the completion function. However, the following two sections list some of the most common tags and styles.\n\n* * *\n\n### 20.3.2 Standard Tags\n\nSome of the following are only used when looking up particular styles and do not refer to a type of match.\n\naccounts\n\nused to look up the users-hosts style\n\nall-expansions\n\nused by the \\_expand completer when adding the single string containing all possible expansions\n\nall-files\n\nfor the names of all files (as distinct from a particular subset, see the globbed-files tag).\n\narguments\n\nfor arguments to a command\n\narrays\n\nfor names of array parameters\n\nassociation-keys\n\nfor keys of associative arrays; used when completing inside a subscript to a parameter of this type\n\nbookmarks\n\nwhen completing bookmarks (e.g. for URLs and the zftp function suite)\n\nbuiltins\n\nfor names of builtin commands\n\ncharacters\n\nfor single characters in arguments of commands such as stty. Also used when completing character classes after an opening bracket\n\ncolormapids\n\nfor X colormap ids\n\ncolors\n\nfor color names\n\ncommands\n\nfor names of external commands. Also used by complex commands such as cvs when completing names subcommands.\n\ncontexts\n\nfor contexts in arguments to the zstyle builtin command\n\ncorrections\n\nused by the \\_approximate and \\_correct completers for possible corrections\n\ncursors\n\nfor cursor names used by X programs\n\ndefault\n\nused in some contexts to provide a way of supplying a default when more specific tags are also valid. Note that this tag is used when only the function field of the context name is set\n\ndescriptions\n\nused when looking up the value of the format style to generate descriptions for types of matches\n\ndevices\n\nfor names of device special files\n\ndirectories\n\nfor names of directories — local-directories is used instead when completing arguments of cd and related builtin commands when the cdpath array is set\n\ndirectory-stack\n\nfor entries in the directory stack\n\ndisplays\n\nfor X display names\n\ndomains\n\nfor network domains\n\nemail-plugin\n\nfor email addresses from the ‘\\_email-plugin’ backend of \\_email\\_addresses\n\nexpansions\n\nused by the \\_expand completer for individual words (as opposed to the complete set of expansions) resulting from the expansion of a word on the command line\n\nextensions\n\nfor X server extensions\n\nfile-descriptors\n\nfor numbers of open file descriptors\n\nfiles\n\nthe generic file-matching tag used by functions completing filenames\n\nfonts\n\nfor X font names\n\nfstypes\n\nfor file system types (e.g. for the mount command)\n\nfunctions\n\nnames of functions — normally shell functions, although certain commands may understand other kinds of function\n\nglobbed-files\n\nfor filenames when the name has been generated by pattern matching\n\ngroups\n\nfor names of user groups\n\nhistory-words\n\nfor words from the history\n\nhosts\n\nfor hostnames\n\nindexes\n\nfor array indexes\n\ninterfaces\n\nfor network interfaces\n\njobs\n\nfor jobs (as listed by the ‘jobs’ builtin)\n\nkeymaps\n\nfor names of zsh keymaps\n\nkeysyms\n\nfor names of X keysyms\n\nlibraries\n\nfor names of system libraries\n\nlimits\n\nfor system limits\n\nlocal-directories\n\nfor names of directories that are subdirectories of the current working directory when completing arguments of cd and related builtin commands (compare path-directories) — when the cdpath array is unset, directories is used instead\n\nmailboxes\n\nfor e-mail folders\n\nmanuals\n\nfor names of manual pages\n\nmaps\n\nfor map names (e.g. NIS maps)\n\nmessages\n\nused to look up the format style for messages\n\nmodifiers\n\nfor names of X modifiers\n\nmodules\n\nfor modules (e.g. zsh modules)\n\nmy-accounts\n\nused to look up the users-hosts style\n\nnamed-directories\n\nfor named directories (you wouldn’t have guessed that, would you?)\n\nnames\n\nfor all kinds of names\n\nnewsgroups\n\nfor USENET groups\n\nnicknames\n\nfor nicknames of NIS maps\n\noptions\n\nfor command options\n\noriginal\n\nused by the \\_approximate, \\_correct and \\_expand completers when offering the original string as a match\n\nother-accounts\n\nused to look up the users-hosts style\n\npackages\n\nfor packages (e.g. rpm or installed Debian packages)\n\nparameters\n\nfor names of parameters\n\npath-directories\n\nfor names of directories found by searching the cdpath array when completing arguments of cd and related builtin commands (compare local-directories)\n\npaths\n\nused to look up the values of the expand, ambiguous and special-dirs styles\n\npods\n\nfor perl pods (documentation files)\n\nports\n\nfor communication ports\n\nprefixes\n\nfor prefixes (like those of a URL)\n\nprinters\n\nfor print queue names\n\nprocesses\n\nfor process identifiers\n\nprocesses-names\n\nused to look up the command style when generating the names of processes for killall\n\nsequences\n\nfor sequences (e.g. mh sequences)\n\nsessions\n\nfor sessions in the zftp function suite\n\nsignals\n\nfor signal names\n\nstrings\n\nfor strings (e.g. the replacement strings for the cd builtin command)\n\nstyles\n\nfor styles used by the zstyle builtin command\n\nsuffixes\n\nfor filename extensions\n\ntags\n\nfor tags (e.g. rpm tags)\n\ntargets\n\nfor makefile targets\n\ntime-zones\n\nfor time zones (e.g. when setting the TZ parameter)\n\ntypes\n\nfor types of whatever (e.g. address types for the xhost command)\n\nurls\n\nused to look up the urls and local styles when completing URLs\n\nusers\n\nfor usernames\n\nvalues\n\nfor one of a set of values in certain lists\n\nvariant\n\nused by \\_pick\\_variant to look up the command to run when determining what program is installed for a particular command name.\n\nvisuals\n\nfor X visuals\n\nwarnings\n\nused to look up the format style for warnings\n\nwidgets\n\nfor zsh widget names\n\nwindows\n\nfor IDs of X windows\n\nzsh-options\n\nfor shell options\n\n* * *\n\n### 20.3.3 Standard Styles\n\nNote that the values of several of these styles represent boolean values. Any of the strings ‘true’, ‘on’, ‘yes’, and ‘1’ can be used for the value ‘true’ and any of the strings ‘false’, ‘off’, ‘no’, and ‘0’ for the value ‘false’. The behavior for any other value is undefined except where explicitly mentioned. The default value may be either ‘true’ or ‘false’ if the style is not set.\n\nSome of these styles are tested first for every possible tag corresponding to a type of match, and if no style was found, for the default tag. The most notable styles of this type are menu, list-colors and styles controlling completion listing such as list-packed and last-prompt. When tested for the default tag, only the function field of the context will be set so that a style using the default tag will normally be defined along the lines of:\n\nzstyle ':completion:\\*:default' menu ...\n\naccept-exact\n\nThis is tested for the default tag in addition to the tags valid for the current context. If it is set to ‘true’ and any of the trial matches is the same as the string on the command line, this match will immediately be accepted (even if it would otherwise be considered ambiguous).\n\nWhen completing pathnames (where the tag used is ‘paths’) this style accepts any number of patterns as the value in addition to the boolean values. Pathnames matching one of these patterns will be accepted immediately even if the command line contains some more partially typed pathname components and these match no file under the directory accepted.\n\nThis style is also used by the \\_expand completer to decide if words beginning with a tilde or parameter expansion should be expanded. For example, if there are parameters foo and foobar, the string ‘$foo’ will only be expanded if accept-exact is set to ‘true’; otherwise the completion system will be allowed to complete $foo to $foobar. If the style is set to ‘continue’, \\_expand will add the expansion as a match and the completion system will also be allowed to continue.\n\naccept-exact-dirs\n\nThis is used by filename completion. Unlike accept-exact it is a boolean. By default, filename completion examines all components of a path to see if there are completions of that component, even if the component matches an existing directory. For example, when completion after /usr/bin/, the function examines possible completions to /usr.\n\nWhen this style is ‘true’, any prefix of a path that matches an existing directory is accepted without any attempt to complete it further. Hence, in the given example, the path /usr/bin/ is accepted immediately and completion tried in that directory.\n\nThis style is also useful when completing after directories that magically appear when referenced, such as ZFS .zfs directories or NetApp .snapshot directories. When the style is set the shell does not check for the existence of the directory within the parent directory.\n\nIf you wish to inhibit this behaviour entirely, set the path-completion style (see below) to ‘false’.\n\nadd-space\n\nThis style is used by the \\_expand completer. If it is ‘true’ (the default), a space will be inserted after all words resulting from the expansion, or a slash in the case of directory names. If the value is ‘file’, the completer will only add a space to names of existing files. Either a boolean ‘true’ or the value ‘file’ may be combined with ‘subst’, in which case the completer will not add a space to words generated from the expansion of a substitution of the form ‘$(...)’ or ‘${...}’.\n\nThe \\_prefix completer uses this style as a simple boolean value to decide if a space should be inserted before the suffix.\n\nambiguous\n\nThis applies when completing non-final components of filename paths, in other words those with a trailing slash. If it is set, the cursor is left after the first ambiguous component, even if menu completion is in use. The style is always tested with the paths tag.\n\nassign-list\n\nWhen completing after an equals sign that is being treated as an assignment, the completion system normally completes only one filename. In some cases the value may be a list of filenames separated by colons, as with PATH and similar parameters. This style can be set to a list of patterns matching the names of such parameters.\n\nThe default is to complete lists when the word on the line already contains a colon.\n\nauto-description\n\nIf set, this style’s value will be used as the description for options that are not described by the completion functions, but that have exactly one argument. The sequence ‘%d’ in the value will be replaced by the description for this argument. Depending on personal preferences, it may be useful to set this style to something like ‘specify: %d’. Note that this may not work for some commands.\n\navoid-completer\n\nThis is used by the \\_all\\_matches completer to decide if the string consisting of all matches should be added to the list currently being generated. Its value is a list of names of completers. If any of these is the name of the completer that generated the matches in this completion, the string will not be added.\n\nThe default value for this style is ‘\\_expand \\_old\\_list \\_correct \\_approximate’, i.e. it contains the completers for which a string with all matches will almost never be wanted.\n\ncache-path\n\nThis style defines the path where any cache files containing dumped completion data are stored. It defaults to ‘$ZDOTDIR/.zcompcache’, or ‘$HOME/.zcompcache’ if $ZDOTDIR is not defined. The completion cache will not be used unless the use-cache style is set.\n\ncache-policy\n\nThis style defines the function that will be used to determine whether a cache needs rebuilding. See the section on the \\_cache\\_invalid function below.\n\ncall-command\n\nThis style is used in the function for commands such as make and ant where calling the command directly to generate matches suffers problems such as being slow or, as in the case of make can potentially cause actions in the makefile to be executed. If it is set to ‘true’ the command is called to generate matches. The default value of this style is ‘false’.\n\ncommand\n\nIn many places, completion functions need to call external commands to generate the list of completions. This style can be used to override the command that is called in some such cases. The elements of the value are joined with spaces to form a command line to execute. The value can also start with a hyphen, in which case the usual command will be added to the end; this is most useful for putting ‘builtin’ or ‘command’ in front to make sure the appropriate version of a command is called, for example to avoid calling a shell function with the same name as an external command.\n\nAs an example, the completion function for process IDs uses this style with the processes tag to generate the IDs to complete and the list of processes to display (if the verbose style is ‘true’). The list produced by the command should look like the output of the ps command. The first line is not displayed, but is searched for the string ‘PID’ (or ‘pid’) to find the position of the process IDs in the following lines. If the line does not contain ‘PID’, the first numbers in each of the other lines are taken as the process IDs to complete.\n\nNote that the completion function generally has to call the specified command for each attempt to generate the completion list. Hence care should be taken to specify only commands that take a short time to run, and in particular to avoid any that may never terminate.\n\ncommand-path\n\nThis is a list of directories to search for commands to complete. The default for this style is the value of the special parameter path.\n\ncommands\n\nThis is used by the function completing sub-commands for the system initialisation scripts (residing in /etc/init.d or somewhere not too far away from that). Its values give the default commands to complete for those commands for which the completion function isn’t able to find them out automatically. The default for this style are the two strings ‘start’ and ‘stop’.\n\ncomplete\n\nThis is used by the \\_expand\\_alias function when invoked as a bindable command. If set to ‘true’ and the word on the command line is not the name of an alias, matching alias names will be completed.\n\ncomplete-options\n\nThis is used by the completer for cd, chdir and pushd. For these commands a \\- is used to introduce a directory stack entry and completion of these is far more common than completing options. Hence unless the value of this style is ‘true’ options will not be completed, even after an initial \\-. If it is ‘true’, options will be completed after an initial \\- unless there is a preceding \\-\\- on the command line.\n\ncompleter\n\nThe strings given as the value of this style provide the names of the completer functions to use. The available completer functions are described in [Control Functions](#Control-Functions).\n\nEach string may be either the name of a completer function or a string of the form ‘function:name’. In the first case the completer field of the context will contain the name of the completer without the leading underscore and with all other underscores replaced by hyphens. In the second case the function is the name of the completer to call, but the context will contain the user-defined name in the completer field of the context. If the name starts with a hyphen, the string for the context will be build from the name of the completer function as in the first case with the name appended to it. For example:\n\nzstyle ':completion:\\*' completer \\_complete \\_complete:-foo\n\nHere, completion will call the \\_complete completer twice, once using ‘complete’ and once using ‘complete-foo’ in the completer field of the context. Normally, using the same completer more than once only makes sense when used with the ‘functions:name’ form, because otherwise the context name will be the same in all calls to the completer; possible exceptions to this rule are the \\_ignored and \\_prefix completers.\n\nThe default value for this style is ‘\\_complete \\_ignored’: only completion will be done, first using the ignored-patterns style and the $fignore array and then without ignoring matches.\n\ncondition\n\nThis style is used by the \\_list completer function to decide if insertion of matches should be delayed unconditionally. The default is ‘true’.\n\ndelimiters\n\nThis style is used when adding a delimiter for use with history modifiers or glob qualifiers that have delimited arguments. It is an array of preferred delimiters to add. Non-special characters are preferred as the completion system may otherwise become confused. The default list is :, +, /, \\-, %. The list may be empty to force a delimiter to be typed.\n\ndisabled\n\nIf this is set to ‘true’, the \\_expand\\_alias completer and bindable command will try to expand disabled aliases, too. The default is ‘false’.\n\ndomains\n\nA list of names of network domains for completion. If this is not set, domain names will be taken from the file /etc/resolv.conf.\n\nenviron\n\nThe environ style is used when completing for ‘sudo’. It is set to an array of ‘VAR\\=value’ assignments to be exported into the local environment before the completion for the target command is invoked.\n\nzstyle ':completion:\\*:sudo::' environ \\\\ \n  PATH=\"/sbin:/usr/sbin:$PATH\" HOME=\"/root\"\n\nexpand\n\nThis style is used when completing strings consisting of multiple parts, such as path names.\n\nIf one of its values is the string ‘prefix’, the partially typed word from the line will be expanded as far as possible even if trailing parts cannot be completed.\n\nIf one of its values is the string ‘suffix’, matching names for components after the first ambiguous one will also be added. This means that the resulting string is the longest unambiguous string possible. However, menu completion can be used to cycle through all matches.\n\nextra-verbose\n\nIf set, the completion listing is more verbose at the cost of a probable decrease in completion speed. Completion performance will suffer if this style is set to ‘true’.\n\nfake\n\nThis style may be set for any completion context. It specifies additional strings that will always be completed in that context. The form of each string is ‘value:description’; the colon and description may be omitted, but any literal colons in value must be quoted with a backslash. Any description provided is shown alongside the value in completion listings.\n\nIt is important to use a sufficiently restrictive context when specifying fake strings. Note that the styles fake-files and fake-parameters provide additional features when completing files or parameters.\n\nfake-always\n\nThis works identically to the fake style except that the ignored-patterns style is not applied to it. This makes it possible to override a set of matches completely by setting the ignored patterns to ‘\\*’.\n\nThe following shows a way of supplementing any tag with arbitrary data, but having it behave for display purposes like a separate tag. In this example we use the features of the tag-order style to divide the named-directories tag into two when performing completion with the standard completer complete for arguments of cd. The tag named-directories-normal behaves as normal, but the tag named-directories-mine contains a fixed set of directories. This has the effect of adding the match group ‘extra directories’ with the given completions.\n\nzstyle ':completion::complete:cd:\\*' tag-order \\\\ \n  'named-directories:-mine:extra\\\\ directories\n  named-directories:-normal:named\\\\ directories \\*'\nzstyle ':completion::complete:cd:\\*:named-directories-mine' \\\\ \n  fake-always mydir1 mydir2\nzstyle ':completion::complete:cd:\\*:named-directories-mine' \\\\ \n  ignored-patterns '\\*'\n\nfake-files\n\nThis style is used when completing files and looked up without a tag. Its values are of the form ‘dir:names...’. This will add the names (strings separated by spaces) as possible matches when completing in the directory dir, even if no such files really exist. The dir may be a pattern; pattern characters or colons in dir should be quoted with a backslash to be treated literally.\n\nThis can be useful on systems that support special file systems whose top-level pathnames can not be listed or generated with glob patterns (but see accept-exact-dirs for a more general way of dealing with this problem). It can also be used for directories for which one does not have read permission.\n\nThe pattern form can be used to add a certain ‘magic’ entry to all directories on a particular file system.\n\nfake-parameters\n\nThis is used by the completion function for parameter names. Its values are names of parameters that might not yet be set but should be completed nonetheless. Each name may also be followed by a colon and a string specifying the type of the parameter (like ‘scalar’, ‘array’ or ‘integer’). If the type is given, the name will only be completed if parameters of that type are required in the particular context. Names for which no type is specified will always be completed.\n\nfile-list\n\nThis style controls whether files completed using the standard builtin mechanism are to be listed with a long list similar to ls -l. Note that this feature uses the shell module zsh/stat for file information; this loads the builtin stat which will replace any external stat executable. To avoid this the following code can be included in an initialization file:\n\nzmodload -i zsh/stat\ndisable stat\n\nThe style may either be set to a ‘true’ value (or ‘all’), or one of the values ‘insert’ or ‘list’, indicating that files are to be listed in long format in all circumstances, or when attempting to insert a file name, or when listing file names without attempting to insert one.\n\nMore generally, the value may be an array of any of the above values, optionally followed by \\=num. If num is present it gives the maximum number of matches for which long listing style will be used. For example,\n\nzstyle ':completion:\\*' file-list list=20 insert=10\n\nspecifies that long format will be used when listing up to 20 files or inserting a file with up to 10 matches (assuming a listing is to be shown at all, for example on an ambiguous completion), else short format will be used.\n\nzstyle -e ':completion:\\*' file-list \\\\ \n       '(( ${+NUMERIC} )) && reply=(true)'\n\nspecifies that long format will be used any time a numeric argument is supplied, else short format.\n\nfile-patterns\n\nThis is used by the standard function for completing filenames, \\_files. If the style is unset up to three tags are offered, ‘globbed-files’,‘directories’ and ‘all-files’, depending on the types of files expected by the caller of \\_files. The first two (‘globbed-files’ and ‘directories’) are normally offered together to make it easier to complete files in sub-directories.\n\nThe file-patterns style provides alternatives to the default tags, which are not used. Its value consists of elements of the form ‘pattern:tag’; each string may contain any number of such specifications separated by spaces.\n\nThe pattern is a pattern that is to be used to generate filenames. Any occurrence of the sequence ‘%p’ is replaced by any pattern(s) passed by the function calling \\_files. Colons in the pattern must be preceded by a backslash to make them distinguishable from the colon before the tag. If more than one pattern is needed, the patterns can be given inside braces, separated by commas.\n\nThe tags of all strings in the value will be offered by \\_files and used when looking up other styles. Any tags in the same word will be offered at the same time and before later words. If no ‘:tag’ is given the ‘files’ tag will be used.\n\nThe tag may also be followed by an optional second colon and a description, which will be used for the ‘%d’ in the value of the format style (if that is set) instead of the default description supplied by the completion function. The inclusion of a description also gives precedence to associated options such as for completion grouping so it can be used where files should be separated.\n\nFor example, to make the rm command first complete only names of object files and then the names of all files if there is no matching object file:\n\nzstyle ':completion:\\*:\\*:rm:\\*:\\*' file-patterns \\\\ \n    '\\*.o:object-files' '%p:all-files'\n\nTo alter the default behaviour of file completion — offer files matching a pattern and directories on the first attempt, then all files — to offer only matching files on the first attempt, then directories, and finally all files:\n\nzstyle ':completion:\\*' file-patterns \\\\ \n    '%p:globbed-files' '\\*(-/):directories' '\\*:all-files'\n\nThis works even where there is no special pattern: \\_files matches all files using the pattern ‘\\*’ at the first step and stops when it sees this pattern. Note also it will never try a pattern more than once for a single completion attempt.\n\nTo separate directories into a separate group from the files but still complete them at the first attempt, a description needs to be given. Note that directories need to be explicitly excluded from the globbed-files because ‘\\*’ will match directories. For grouping, it is also necessary to set the group-name style.\n\nzstyle ':completion:\\*' file-patterns \\\\ \n    '%p(^-/):globbed-files \\*(-/):directories:location'\n\nDuring the execution of completion functions, the EXTENDED\\_GLOB option is in effect, so the characters ‘#’, ‘~’ and ‘^’ have special meanings in the patterns.\n\nfile-sort\n\nThe standard filename completion function uses this style without a tag to determine in which order the names should be listed; menu completion will cycle through them in the same order. The possible values are: ‘size’ to sort by the size of the file; ‘links’ to sort by the number of links to the file; ‘modification’ (or ‘time’ or ‘date’) to sort by the last modification time; ‘access’ to sort by the last access time; and ‘inode’ (or ‘change’) to sort by the last inode change time. If the style is set to any other value, or is unset, files will be sorted alphabetically by name. If the value contains the string ‘reverse’, sorting is done in the opposite order. If the value contains the string ‘follow’, timestamps are associated with the targets of symbolic links; the default is to use the timestamps of the links themselves.\n\nfile-split-chars\n\nA set of characters that will cause _all_ file completions for the given context to be split at the point where any of the characters occurs. A typical use is to set the style to :; then everything up to and including the last : in the string so far is ignored when completing files. As this is quite heavy-handed, it is usually preferable to update completion functions for contexts where this behaviour is useful.\n\nfilter\n\nThe ldap plugin of email address completion (see \\_email\\_addresses) uses this style to specify the attributes to match against when filtering entries. So for example, if the style is set to ‘sn’, matching is done against surnames. Standard LDAP filtering is used so normal completion matching is bypassed. If this style is not set, the LDAP plugin is skipped. You may also need to set the command style to specify how to connect to your LDAP server.\n\nforce-list\n\nThis forces a list of completions to be shown at any point where listing is done, even in cases where the list would usually be suppressed. For example, normally the list is only shown if there are at least two different matches. By setting this style to ‘always’, the list will always be shown, even if there is only a single match that will immediately be accepted. The style may also be set to a number. In this case the list will be shown if there are at least that many matches, even if they would all insert the same string.\n\nThis style is tested for the default tag as well as for each tag valid for the current completion. Hence the listing can be forced only for certain types of match.\n\nformat\n\nIf this is set for the descriptions tag, its value is used as a string to display above matches in completion lists. The sequence ‘%d’ in this string will be replaced with a short description of what these matches are. This string may also contain the output attribute sequences understood by compadd -X (see [Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets)).\n\nThe style is tested with each tag valid for the current completion before it is tested for the descriptions tag. Hence different format strings can be defined for different types of match.\n\nNote also that some completer functions define additional ‘%’-sequences. These are described for the completer functions that make use of them.\n\nSome completion functions display messages that may be customised by setting this style for the messages tag. Here, the ‘%d’ is replaced with a message given by the completion function.\n\nFinally, the format string is looked up with the warnings tag, for use when no matches could be generated at all. In this case the ‘%d’ is replaced with the descriptions for the matches that were expected separated by spaces. The sequence ‘%D’ is replaced with the same descriptions separated by newlines.\n\nIt is possible to use printf-style field width specifiers with ‘%d’ and similar escape sequences. This is handled by the zformat builtin command from the zsh/zutil module, see [The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module).\n\ngain-privileges\n\nIf set to true, this style enables the use of commands like sudo or doas to gain extra privileges when retrieving information for completion. This is only done when a command such as sudo appears on the command-line. To force the use of, e.g. sudo or to override any prefix that might be added due to gain-privileges, the command style can be used with a value that begins with a hyphen.\n\nglob\n\nThis is used by the \\_expand completer. If it is set to ‘true’ (the default), globbing will be attempted on the words resulting from a previous substitution (see the substitute style) or else the original string from the line.\n\nglobal\n\nIf this is set to ‘true’ (the default), the \\_expand\\_alias completer and bindable command will try to expand global aliases.\n\ngroup-name\n\nThe completion system can group different types of matches, which appear in separate lists. This style can be used to give the names of groups for particular tags. For example, in command position the completion system generates names of builtin and external commands, names of aliases, shell functions and parameters and reserved words as possible completions. To have the external commands and shell functions listed separately:\n\nzstyle ':completion:\\*:\\*:-command-:\\*:commands' \\\\ \n       group-name commands\nzstyle ':completion:\\*:\\*:-command-:\\*:functions' \\\\ \n       group-name functions\n\nAs a consequence, any match with the same tag will be displayed in the same group.\n\nIf the name given is the empty string the name of the tag for the matches will be used as the name of the group. So, to have all different types of matches displayed separately, one can just set:\n\nzstyle ':completion:\\*' group-name ''\n\nAll matches for which no group name is defined will be put in a group named \\-default-.\n\nTo display the group name in the output, see the format style (q.v.) under the descriptions tag.\n\ngroup-order\n\nThis style is additional to the group-name style to specify the order for display of the groups defined by that style (compare tag-order, which determines which completions appear at all). The groups named are shown in the given order; any other groups are shown in the order defined by the completion function.\n\nFor example, to have names of builtin commands, shell functions and external commands appear in that order when completing in command position:\n\nzstyle ':completion:\\*:\\*:-command-:\\*:\\*' group-order \\\\ \n       builtins functions commands\n\ngroups\n\nA list of names of UNIX groups. If this is not set, group names are taken from the YP database or the file ‘/etc/group’.\n\nhidden\n\nIf this is set to ‘true’, matches for the given context will not be listed, although any description for the matches set with the format style will be shown. If it is set to ‘all’, not even the description will be displayed.\n\nNote that the matches will still be completed; they are just not shown in the list. To avoid having matches considered as possible completions at all, the tag-order style can be modified as described below.\n\nhosts\n\nA list of names of hosts that should be completed. If this is not set, hostnames are taken from the file ‘/etc/hosts’.\n\nhosts-ports\n\nThis style is used by commands that need or accept hostnames and network ports. The strings in the value should be of the form ‘host:port’. Valid ports are determined by the presence of hostnames; multiple ports for the same host may appear.\n\nignore-line\n\nThis is tested for each tag valid for the current completion. If it is set to ‘true’, none of the words that are already on the line will be considered as possible completions. If it is set to ‘current’, the word the cursor is on will not be considered as a possible completion. The value ‘current-shown’ is similar but only applies if the list of completions is currently shown on the screen. Finally, if the style is set to ‘other’, all words on the line except for the current one will be excluded from the possible completions.\n\nThe values ‘current’ and ‘current-shown’ are a bit like the opposite of the accept-exact style: only strings with missing characters will be completed.\n\nNote that you almost certainly don’t want to set this to ‘true’ or ‘other’ for a general context such as ‘:completion:\\*’. This is because it would disallow completion of, for example, options multiple times even if the command in question accepts the option more than once.\n\nignore-parents\n\nThe style is tested without a tag by the function completing pathnames in order to determine whether to ignore the names of directories already mentioned in the current word, or the name of the current working directory. The value must include one or both of the following strings:\n\nparent\n\nThe name of any directory whose path is already contained in the word on the line is ignored. For example, when completing after foo/../, the directory foo will not be considered a valid completion.\n\npwd\n\nThe name of the current working directory will not be completed; hence, for example, completion after ../ will not use the name of the current directory.\n\nIn addition, the value may include one or both of:\n\n..\n\nIgnore the specified directories only when the word on the line contains the substring ‘../’.\n\ndirectory\n\nIgnore the specified directories only when names of directories are completed, not when completing names of files.\n\nExcluded values act in a similar fashion to values of the ignored-patterns style, so they can be restored to consideration by the \\_ignored completer.\n\nignored-patterns\n\nA list of patterns; any trial completion matching one of the patterns will be excluded from consideration. The \\_ignored completer can appear in the list of completers to restore the ignored matches. This is a more configurable version of the shell parameter $fignore.\n\nNote that the EXTENDED\\_GLOB option is set during the execution of completion functions, so the characters ‘#’, ‘~’ and ‘^’ have special meanings in the patterns.\n\ninsert\n\nThis style is used by the \\_all\\_matches completer to decide whether to insert the list of all matches unconditionally instead of adding the list as another match.\n\ninsert-ids\n\nWhen completing process IDs, for example as arguments to the kill and wait builtins the name of a command may be converted to the appropriate process ID. A problem arises when the process name typed is not unique. By default (or if this style is set explicitly to ‘menu’) the name will be converted immediately to a set of possible IDs, and menu completion will be started to cycle through them.\n\nIf the value of the style is ‘single’, the shell will wait until the user has typed enough to make the command unique before converting the name to an ID; attempts at completion will be unsuccessful until that point. If the value is any other string, menu completion will be started when the string typed by the user is longer than the common prefix to the corresponding IDs.\n\ninsert-sections\n\nThis style is used with tags of the form ‘manuals.X’ when completing names of manual pages. If set and the X in the tag name matches the section number of the page being completed, the section number is inserted along with the page name. For example, given\n\nzstyle ':completion:\\*:manuals.\\*' insert-sections true\n\nman ssh\\_<TAB> may be completed to man 5 ssh\\_config.\n\nThe value may also be set to one of ‘prepend’, or ‘suffix’. ‘prepend’ behaves the same as ‘true’ as in the above example, while ‘suffix’ would complete man ssh\\_<TAB> as man ssh\\_config.5.\n\nThis is especially useful in conjunction with separate-sections, as it ensures that the page requested of man corresponds to the one displayed in the completion listing when there are multiple pages with the same name (e.g., printf(1) and printf(3)).\n\nThe default for this style is ‘false’.\n\ninsert-tab\n\nIf this is set to ‘true’, the completion system will insert a TAB character (assuming that was used to start completion) instead of performing completion when there is no non-blank character to the left of the cursor. If it is set to ‘false’, completion will be done even there.\n\nThe value may also contain the substrings ‘pending’ or ‘pending=val’. In this case, the typed character will be inserted instead of starting completion when there is unprocessed input pending. If a val is given, completion will not be done if there are at least that many characters of unprocessed input. This is often useful when pasting characters into a terminal. Note however, that it relies on the $PENDING special parameter from the zsh/zle module being set properly which is not guaranteed on all platforms.\n\nThe default value of this style is ‘true’ except for completion within vared builtin command where it is ‘false’.\n\ninsert-unambiguous\n\nThis is used by the \\_match and \\_approximate completers. These completers are often used with menu completion since the word typed may bear little resemblance to the final completion. However, if this style is ‘true’, the completer will start menu completion only if it could find no unambiguous initial string at least as long as the original string typed by the user.\n\nIn the case of the \\_approximate completer, the completer field in the context will already have been set to one of correct-num or approximate-num, where num is the number of errors that were accepted.\n\nIn the case of the \\_match completer, the style may also be set to the string ‘pattern’. Then the pattern on the line is left unchanged if it does not match unambiguously.\n\nkeep-prefix\n\nThis style is used by the \\_expand completer. If it is ‘true’, the completer will try to keep a prefix containing a tilde or parameter expansion. Hence, for example, the string ‘~/f\\*’ would be expanded to ‘~/foo’ instead of ‘/home/user/foo’. If the style is set to ‘changed’ (the default), the prefix will only be left unchanged if there were other changes between the expanded words and the original word from the command line. Any other value forces the prefix to be expanded unconditionally.\n\nThe behaviour of \\_expand when this style is ‘true’ is to cause \\_expand to give up when a single expansion with the restored prefix is the same as the original; hence any remaining completers may be called.\n\nknown-hosts-files\n\nThis style should contain a list of files to search for host names and (if the use-ip style is set) IP addresses in a format compatible with ssh known\\_hosts files. If it is not set, the files /etc/ssh/ssh\\_known\\_hosts and ~/.ssh/known\\_hosts are used.\n\nlast-prompt\n\nThis is a more flexible form of the ALWAYS\\_LAST\\_PROMPT option. If it is ‘true’, the completion system will try to return the cursor to the previous command line after displaying a completion list. It is tested for all tags valid for the current completion, then the default tag. The cursor will be moved back to the previous line if this style is ‘true’ for all types of match. Note that unlike the ALWAYS\\_LAST\\_PROMPT option this is independent of the numeric argument.\n\nlist\n\nThis style is used by the \\_history\\_complete\\_word bindable command. If it is set to ‘true’ it has no effect. If it is set to ‘false’ matches will not be listed. This overrides the setting of the options controlling listing behaviour, in particular AUTO\\_LIST. The context always starts with ‘:completion:history-words’.\n\nlist-colors\n\nIf the zsh/complist module is loaded, this style can be used to set color specifications. This mechanism replaces the use of the ZLS\\_COLORS and ZLS\\_COLOURS parameters described in [The zsh/complist Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomplist-Module), but the syntax is the same.\n\nIf this style is set for the default tag, the strings in the value are taken as specifications that are to be used everywhere. If it is set for other tags, the specifications are used only for matches of the type described by the tag. For this to work best, the group-name style must be set to an empty string.\n\nIn addition to setting styles for specific tags, it is also possible to use group names specified explicitly by the group-name tag together with the ‘(group)’ syntax allowed by the ZLS\\_COLORS and ZLS\\_COLOURS parameters and simply using the default tag.\n\nIt is possible to use any color specifications already set up for the GNU version of the ls command:\n\nzstyle ':completion:\\*:default' list-colors \\\\ \n       ${(s.:.)LS\\_COLORS}\n\nThe default colors are the same as for the GNU ls command and can be obtained by setting the style to an empty string (i.e. ’’).\n\nlist-dirs-first\n\nThis is used by file completion and corresponds to a particular setting of the file-patterns style. If set, the default directories to be completed are listed separately from and before completion for other files.\n\nlist-grouped\n\nIf this style is ‘true’ (the default), the completion system will try to make certain completion listings more compact by grouping matches. For example, options for commands that have the same description (shown when the verbose style is set to ‘true’) will appear as a single entry. However, menu selection can be used to cycle through all the matches.\n\nlist-packed\n\nThis is tested for each tag valid in the current context as well as the default tag. If it is set to ‘true’, the corresponding matches appear in listings as if the LIST\\_PACKED option were set. If it is set to ‘false’, they are listed normally.\n\nlist-prompt\n\nIf this style is set for the default tag, completion lists that don’t fit on the screen can be scrolled (see [The zsh/complist Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomplist-Module)). The value, if not the empty string, will be displayed after every screenful and the shell will prompt for a key press; if the style is set to the empty string, a default prompt will be used.\n\nThe value may contain the escape sequences: ‘%l’ or ‘%L’, which will be replaced by the number of the last line displayed and the total number of lines; ‘%m’ or ‘%M’, the number of the last match shown and the total number of matches; and ‘%p’ and ‘%P’, ‘Top’ when at the beginning of the list, ‘Bottom’ when at the end and the position shown as a percentage of the total length otherwise. In each case the form with the uppercase letter will be replaced by a string of fixed width, padded to the right with spaces, while the lowercase form will be replaced by a variable width string. As in other prompt strings, the escape sequences ‘%S’, ‘%s’, ‘%B’, ‘%b’, ‘%U’, ‘%u’ for entering and leaving the display modes standout, bold and underline, and ‘%F’, ‘%f’, ‘%K’, ‘%k’ for changing the foreground background colour, are also available, as is the form ‘%{...%}’ for enclosing escape sequences which display with zero (or, with a numeric argument, some other) width.\n\nAfter deleting this prompt the variable LISTPROMPT should be unset for the removal to take effect.\n\nlist-rows-first\n\nThis style is tested in the same way as the list-packed style and determines whether matches are to be listed in a rows-first fashion as if the LIST\\_ROWS\\_FIRST option were set.\n\nlist-separator\n\nThe value of this style is used in completion listing to separate the string to complete from a description when possible (e.g. when completing options). It defaults to ‘\\-\\-’ (two hyphens).\n\nlist-suffixes\n\nThis style is used by the function that completes filenames. If it is ‘true’, and completion is attempted on a string containing multiple partially typed pathname components, all ambiguous components will be shown. Otherwise, completion stops at the first ambiguous component.\n\nlocal\n\nThis is for use with functions that complete URLs for which the corresponding files are available directly from the file system. Its value should consist of three strings: a hostname, the path to the default web pages for the server, and the directory name used by a user placing web pages within their home area.\n\nFor example:\n\nzstyle ':completion:\\*' local toast \\\\ \n    /var/http/public/toast public\\_html\n\nCompletion after ‘http://toast/stuff/’ will look for files in the directory /var/http/public/toast/stuff, while completion after ‘http://toast/~yousir/’ will look for files in the directory ~yousir/public\\_html.\n\nmail-directory\n\nIf set, zsh will assume that mailbox files can be found in the directory specified. It defaults to ‘~/Mail’.\n\nmatch-original\n\nThis is used by the \\_match completer. If it is set to only, \\_match will try to generate matches without inserting a ‘\\*’ at the cursor position. If set to any other non-empty value, it will first try to generate matches without inserting the ‘\\*’ and if that yields no matches, it will try again with the ‘\\*’ inserted. If it is unset or set to the empty string, matching will only be performed with the ‘\\*’ inserted.\n\nmatcher\n\nThis style is tested separately for each tag valid in the current context. Its value is placed before any match specifications given by the matcher-list style so can override them via the use of an x: specification. The value should be in the form described in [Completion Matching Control](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Matching-Control). For examples of this, see the description of the tag-order style.\n\nFor notes comparing the use of this and the matcher-list style, see under the description of the tag-order style.\n\nmatcher-list\n\nThis style can be set to a list of match specifications that are to be applied everywhere. Match specifications are described in [Completion Matching Control](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Matching-Control). The completion system will try them one after another for each completer selected. For example, to try first simple completion and, if that generates no matches, case-insensitive completion:\n\nzstyle ':completion:\\*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'\n\nBy default each specification replaces the previous one; however, if a specification is prefixed with +, it is added to the existing list. Hence it is possible to create increasingly general specifications without repetition:\n\nzstyle ':completion:\\*' matcher-list \\\\ \n       '' '+m:{a-z}={A-Z}' '+m:{A-Z}={a-z}'\n\nIt is possible to create match specifications valid for particular completers by using the third field of the context. This applies only to completers that override the global matcher-list, which as of this writing includes only \\_prefix and \\_ignored. For example, to use the completers \\_complete and \\_prefix but allow case-insensitive completion only with \\_complete:\n\nzstyle ':completion:\\*' completer \\_complete \\_prefix\nzstyle ':completion:\\*:complete:\\*:\\*:\\*' matcher-list \\\\ \n       '' 'm:{a-zA-Z}={A-Za-z}'\n\nUser-defined names, as explained for the completer style, are available. This makes it possible to try the same completer more than once with different match specifications each time. For example, to try normal completion without a match specification, then normal completion with case-insensitive matching, then correction, and finally partial-word completion:\n\nzstyle ':completion:\\*' completer \\\\ \n    \\_complete \\_correct \\_complete:foo\nzstyle ':completion:\\*:complete:\\*:\\*:\\*' matcher-list \\\\ \n    '' 'm:{a-zA-Z}={A-Za-z}'\nzstyle ':completion:\\*:foo:\\*:\\*:\\*' matcher-list \\\\ \n    'm:{a-zA-Z}={A-Za-z} r:|\\[-\\_./\\]=\\* r:|=\\*'\n\nIf the style is unset in any context no match specification is applied. Note also that some completers such as \\_correct and \\_approximate do not use the match specifications at all, though these completers will only ever be called once even if the matcher-list contains more than one element.\n\nWhere multiple specifications are useful, note that the _entire_ completion is done for each element of matcher-list, which can quickly reduce the shell’s performance. As a rough rule of thumb, one to three strings will give acceptable performance. On the other hand, putting multiple space-separated values into the same string does not have an appreciable impact on performance.\n\nIf there is no current matcher or it is empty, and the option NO\\_CASE\\_GLOB is in effect, the matching for files is performed case-insensitively in any case. However, any matcher must explicitly specify case-insensitive matching if that is required.\n\nFor notes comparing the use of this and the matcher style, see under the description of the tag-order style.\n\nmax-errors\n\nThis is used by the \\_approximate and \\_correct completer functions to determine the maximum number of errors to allow. The completer will try to generate completions by first allowing one error, then two errors, and so on, until either a match or matches were found or the maximum number of errors given by this style has been reached.\n\nIf the value for this style contains the string ‘numeric’, the completer function will take any numeric argument as the maximum number of errors allowed. For example, with\n\nzstyle ':completion:\\*:approximate:::' max-errors 2 numeric\n\ntwo errors are allowed if no numeric argument is given, but with a numeric argument of six (as in ‘ESC-6 TAB’), up to six errors are accepted. Hence with a value of ‘0 numeric’, no correcting completion will be attempted unless a numeric argument is given.\n\nIf the value contains the string ‘not-numeric’, the completer will _not_ try to generate corrected completions when given a numeric argument, so in this case the number given should be greater than zero. For example, ‘2 not-numeric’ specifies that correcting completion with two errors will usually be performed, but if a numeric argument is given, correcting completion will not be performed.\n\nThe default value for this style is ‘2 numeric’.\n\nmax-matches-width\n\nThis style is used to determine the trade off between the width of the display used for matches and the width used for their descriptions when the verbose style is in effect. The value gives the number of display columns to reserve for the matches. The default is half the width of the screen.\n\nThis has the most impact when several matches have the same description and so will be grouped together. Increasing the style will allow more matches to be grouped together; decreasing it will allow more of the description to be visible.\n\nmenu\n\nIf this is ‘true’ in the context of any of the tags defined for the current completion menu completion will be used. The value for a specific tag will take precedence over that for the ‘default’ tag.\n\nIf none of the values found in this way is ‘true’ but at least one is set to ‘auto’, the shell behaves as if the AUTO\\_MENU option is set.\n\nIf one of the values is explicitly set to ‘false’, menu completion will be explicitly turned off, overriding the MENU\\_COMPLETE option and other settings.\n\nIn the form ‘yes=num’, where ‘yes’ may be any of the ‘true’ values (‘yes’, ‘true’, ‘on’ and ‘1’), menu completion will be turned on if there are at least num matches. In the form ‘yes=long’, menu completion will be turned on if the list does not fit on the screen. This does not activate menu completion if the widget normally only lists completions, but menu completion can be activated in that case with the value ‘yes=long-list’ (Typically, the value ‘select=long-list’ described later is more useful as it provides control over scrolling.)\n\nSimilarly, with any of the ‘false’ values (as in ‘no=10’), menu completion will _not_ be used if there are num or more matches.\n\nThe value of this widget also controls menu selection, as implemented by the zsh/complist module. The following values may appear either alongside or instead of the values above.\n\nIf the value contains the string ‘select’, menu selection will be started unconditionally.\n\nIn the form ‘select=num’, menu selection will only be started if there are at least num matches. If the values for more than one tag provide a number, the smallest number is taken.\n\nMenu selection can be turned off explicitly by defining a value containing the string‘no-select’.\n\nIt is also possible to start menu selection only if the list of matches does not fit on the screen by using the value ‘select=long’. To start menu selection even if the current widget only performs listing, use the value ‘select=long-list’.\n\nTo turn on menu completion or menu selection when there are a certain number of matches _or_ the list of matches does not fit on the screen, both of ‘yes=’ and ‘select=’ may be given twice, once with a number and once with ‘long’ or ‘long-list’.\n\nFinally, it is possible to activate two special modes of menu selection. The word ‘interactive’ in the value causes interactive mode to be entered immediately when menu selection is started; see [The zsh/complist Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomplist-Module) for a description of interactive mode. Including the string ‘search’ does the same for incremental search mode. To select backward incremental search, include the string ‘search-backward’.\n\nmuttrc\n\nIf set, gives the location of the mutt configuration file. It defaults to ‘~/.muttrc’.\n\nnumbers\n\nThis is used with the jobs tag. If it is ‘true’, the shell will complete job numbers instead of the shortest unambiguous prefix of the job command text. If the value is a number, job numbers will only be used if that many words from the job descriptions are required to resolve ambiguities. For example, if the value is ‘1’, strings will only be used if all jobs differ in the first word on their command lines.\n\nold-list\n\nThis is used by the \\_oldlist completer. If it is set to ‘always’, then standard widgets which perform listing will retain the current list of matches, however they were generated; this can be turned off explicitly with the value ‘never’, giving the behaviour without the \\_oldlist completer. If the style is unset, or any other value, then the existing list of completions is displayed if it is not already; otherwise, the standard completion list is generated; this is the default behaviour of \\_oldlist. However, if there is an old list and this style contains the name of the completer function that generated the list, then the old list will be used even if it was generated by a widget which does not do listing.\n\nFor example, suppose you type ^Xc to use the \\_correct\\_word widget, which generates a list of corrections for the word under the cursor. Usually, typing ^D would generate a standard list of completions for the word on the command line, and show that. With \\_oldlist, it will instead show the list of corrections already generated.\n\nAs another example consider the \\_match completer: with the insert-unambiguous style set to ‘true’ it inserts only a common prefix string, if there is any. However, this may remove parts of the original pattern, so that further completion could produce more matches than on the first attempt. By using the \\_oldlist completer and setting this style to \\_match, the list of matches generated on the first attempt will be used again.\n\nold-matches\n\nThis is used by the \\_all\\_matches completer to decide if an old list of matches should be used if one exists. This is selected by one of the ‘true’ values or by the string ‘only’. If the value is ‘only’, \\_all\\_matches will only use an old list and won’t have any effect on the list of matches currently being generated.\n\nIf this style is set it is generally unwise to call the \\_all\\_matches completer unconditionally. One possible use is for either this style or the completer style to be defined with the \\-e option to zstyle to make the style conditional.\n\nold-menu\n\nThis is used by the \\_oldlist completer. It controls how menu completion behaves when a completion has already been inserted and the user types a standard completion key such as TAB. The default behaviour of \\_oldlist is that menu completion always continues with the existing list of completions. If this style is set to ‘false’, however, a new completion is started if the old list was generated by a different completion command; this is the behaviour without the \\_oldlist completer.\n\nFor example, suppose you type ^Xc to generate a list of corrections, and menu completion is started in one of the usual ways. Usually, or with this style set to ‘false’, typing TAB at this point would start trying to complete the line as it now appears. With \\_oldlist, it instead continues to cycle through the list of corrections.\n\noriginal\n\nThis is used by the \\_approximate and \\_correct completers to decide if the original string should be added as a possible completion. Normally, this is done only if there are at least two possible corrections, but if this style is set to ‘true’, it is always added. Note that the style will be examined with the completer field in the context name set to correct-num or approximate-num, where num is the number of errors that were accepted.\n\npackageset\n\nThis style is used when completing arguments of the Debian ‘dpkg’ program. It contains an override for the default package set for a given context. For example,\n\nzstyle ':completion:\\*:complete:dpkg:option--status-1:\\*' \\\\ \n               packageset avail\n\ncauses available packages, rather than only installed packages, to be completed for ‘dpkg -\\-status’.\n\npath\n\nThe function that completes color names uses this style with the colors tag. The value should be the pathname of a file containing color names in the format of an X11 rgb.txt file. If the style is not set but this file is found in one of various standard locations it will be used as the default.\n\npath-completion\n\nThis is used by filename completion. By default, filename completion examines all components of a path to see if there are completions of that component. For example, /u/b/z can be completed to /usr/bin/zsh. Explicitly setting this style to ‘false’ inhibits this behaviour for path components up to the / before the cursor; this overrides the setting of accept-exact-dirs.\n\nEven with the style set to ‘false’, it is still possible to complete multiple paths by setting the option COMPLETE\\_IN\\_WORD and moving the cursor back to the first component in the path to be completed. For example, /u/b/z can be completed to /usr/bin/zsh if the cursor is after the /u.\n\npine-directory\n\nIf set, specifies the directory containing PINE mailbox files. There is no default, since recursively searching this directory is inconvenient for anyone who doesn’t use PINE.\n\nports\n\nA list of Internet service names (network ports) to complete. If this is not set, service names are taken from the file ‘/etc/services’.\n\nprefix-hidden\n\nThis is used for certain completions which share a common prefix, for example command options beginning with dashes. If it is ‘true’, the prefix will not be shown in the list of matches.\n\nThe default value for this style is ‘false’.\n\nprefix-needed\n\nThis style is also relevant for matches with a common prefix. If it is set to ‘true’ this common prefix must be typed by the user to generate the matches.\n\nThe style is applicable to the options, signals, jobs, functions, and parameters completion tags.\n\nFor command options, this means that the initial ‘\\-’, ‘+’, or ‘\\-\\-’ must be typed explicitly before option names will be completed.\n\nFor signals, an initial ‘\\-’ is required before signal names will be completed.\n\nFor jobs, an initial ‘%’ is required before job names will be completed.\n\nFor function and parameter names, an initial ‘\\_’ or ‘.’ is required before function or parameter names starting with those characters will be completed.\n\nThe default value for this style is ‘false’ for function and parameter completions, and ‘true’ otherwise.\n\npreserve-prefix\n\nThis style is used when completing path names. Its value should be a pattern matching an initial prefix of the word to complete that should be left unchanged under all circumstances. For example, on some Unices an initial ‘//’ (double slash) has a special meaning; setting this style to the string ‘//’ will preserve it. As another example, setting this style to ‘?:/’ under Cygwin would allow completion after ‘a:/...’ and so on.\n\nrange\n\nThis is used by the \\_history completer and the \\_history\\_complete\\_word bindable command to decide which words should be completed.\n\nIf it is a single number, only the last N words from the history will be completed.\n\nIf it is a range of the form ‘max:slice’, the last slice words will be completed; then if that yields no matches, the slice words before those will be tried and so on. This process stops either when at least one match has been found, or max words have been tried.\n\nThe default is to complete all words from the history at once.\n\nrecursive-files\n\nIf this style is set, its value is an array of patterns to be tested against ‘$PWD/’: note the trailing slash, which allows directories in the pattern to be delimited unambiguously by including slashes on both sides. If an ordinary file completion fails and the word on the command line does not yet have a directory part to its name, the style is retrieved using the same tag as for the completion just attempted, then the elements tested against $PWD/ in turn. If one matches, then the shell reattempts completion by prepending the word on the command line with each directory in the expansion of \\*\\*/\\*(/) in turn. Typically the elements of the style will be set to restrict the number of directories beneath the current one to a manageable number, for example ‘\\*/.git/\\*’.\n\nFor example,\n\nzstyle ':completion:\\*' recursive-files '\\*/zsh/\\*'\n\nIf the current directory is /home/pws/zsh/Src, then zle\\_tr<TAB> can be completed to Zle/zle\\_tricky.c.\n\nregular\n\nThis style is used by the \\_expand\\_alias completer and bindable command. If set to ‘true’ (the default), regular aliases will be expanded but only in command position. If it is set to ‘false’, regular aliases will never be expanded. If it is set to ‘always’, regular aliases will be expanded even if not in command position.\n\nrehash\n\nIf this is set when completing external commands, the internal list (hash) of commands will be updated for each search by issuing the rehash command. There is a speed penalty for this which is only likely to be noticeable when directories in the path have slow file access.\n\nremote-access\n\nIf set to ‘false’, certain commands will be prevented from making Internet connections to retrieve remote information. This includes the completion for the CVS command.\n\nIt is not always possible to know if connections are in fact to a remote site, so some may be prevented unnecessarily.\n\nremove-all-dups\n\nThe \\_history\\_complete\\_word bindable command and the \\_history completer use this to decide if all duplicate matches should be removed, rather than just consecutive duplicates.\n\nselect-prompt\n\nIf this is set for the default tag, its value will be displayed during menu selection (see the menu style above) when the completion list does not fit on the screen as a whole. The same escapes as for the list-prompt style are understood, except that the numbers refer to the match or line the mark is on. A default prompt is used when the value is the empty string.\n\nselect-scroll\n\nThis style is tested for the default tag and determines how a completion list is scrolled during a menu selection (see the menu style above) when the completion list does not fit on the screen as a whole. If the value is ‘0’ (zero), the list is scrolled by half-screenfuls; if it is a positive integer, the list is scrolled by the given number of lines; if it is a negative number, the list is scrolled by a screenful minus the absolute value of the given number of lines. The default is to scroll by single lines.\n\nseparate-sections\n\nThis style is used with the manuals tag when completing names of manual pages. If it is ‘true’, entries for different sections are added separately using tag names of the form ‘manuals.X’, where X is the section number. When the group-name style is also in effect, pages from different sections will appear separately. This style is also used similarly with the words style when completing words for the dict command. It allows words from different dictionary databases to be added separately. See also insert-sections.\n\nThe default for this style is ‘false’.\n\nshow-ambiguity\n\nIf the zsh/complist module is loaded, this style can be used to highlight the first ambiguous character in completion lists. The value is either a color indication such as those supported by the list-colors style or, with a value of ‘true’, a default of underlining is selected. The highlighting is only applied if the completion display strings correspond to the actual matches.\n\nshow-completer\n\nTested whenever a new completer is tried. If it is ‘true’, the completion system outputs a progress message in the listing area showing what completer is being tried. The message will be overwritten by any output when completions are found and is removed after completion is finished.\n\nsingle-ignored\n\nThis is used by the \\_ignored completer when there is only one match. If its value is ‘show’, the single match will be displayed but not inserted. If the value is ‘menu’, then the single match and the original string are both added as matches and menu completion is started, making it easy to select either of them.\n\nsort\n\nThis allows the standard ordering of matches to be overridden.\n\nIf its value is ‘true’ or ‘false’, sorting is enabled or disabled. Additionally the values associated with the ‘\\-o’ option to compadd can also be listed: match, nosort, numeric, reverse. If it is not set for the context, the standard behaviour of the calling widget is used.\n\nThe style is tested first against the full context including the tag, and if that fails to produce a value against the context without the tag.\n\nIn many cases where a calling widget explicitly selects a particular ordering in lieu of the default, a value of ‘true’ is not honoured. An example of where this is not the case is for command history where the default of sorting matches chronologically may be overridden by setting the style to ‘true’.\n\nIn the \\_expand completer, if it is set to ‘true’, the expansions generated will always be sorted. If it is set to ‘menu’, then the expansions are only sorted when they are offered as single strings but not in the string containing all possible expansions.\n\nspecial-dirs\n\nNormally, the completion code will not produce the directory names ‘.’ and ‘..’ as possible completions. If this style is set to ‘true’, it will add both ‘.’ and ‘..’ as possible completions; if it is set to ‘..’, only ‘..’ will be added.\n\nThe following example sets special-dirs to ‘..’ when the current prefix is empty, is a single ‘.’, or consists only of a path beginning with ‘../’. Otherwise the value is ‘false’.\n\nzstyle -e ':completion:\\*' special-dirs \\\\ \n   '\\[\\[ $PREFIX = (../)#(|.|..) \\]\\] && reply=(..)'\n\nsqueeze-slashes\n\nIf set to ‘true’, sequences of slashes in filename paths (for example in ‘foo//bar’) will be treated as a single slash. This is the usual behaviour of UNIX paths. However, by default the file completion function behaves as if there were a ‘\\*’ between the slashes.\n\nstop\n\nIf set to ‘true’, the \\_history\\_complete\\_word bindable command will stop once when reaching the beginning or end of the history. Invoking \\_history\\_complete\\_word will then wrap around to the opposite end of the history. If this style is set to ‘false’ (the default), \\_history\\_complete\\_word will loop immediately as in a menu completion.\n\nstrip-comments\n\nIf set to ‘true’, this style causes non-essential comment text to be removed from completion matches. Currently it is only used when completing e-mail addresses where it removes any display name from the addresses, cutting them down to plain user@host form.\n\nsubst-globs-only\n\nThis is used by the \\_expand completer. If it is set to ‘true’, the expansion will only be used if it resulted from globbing; hence, if expansions resulted from the use of the substitute style described below, but these were not further changed by globbing, the expansions will be rejected.\n\nThe default for this style is ‘false’.\n\nsubstitute\n\nThis boolean style controls whether the \\_expand completer will first try to expand all substitutions in the string (such as ‘$(...)’ and ‘${...}’).\n\nThe default is ‘true’.\n\nsuffix\n\nThis is used by the \\_expand completer if the word starts with a tilde or contains a parameter expansion. If it is set to ‘true’, the word will only be expanded if it doesn’t have a suffix, i.e. if it is something like ‘~foo’ or ‘$foo’ rather than ‘~foo/’ or ‘$foo/bar’, unless that suffix itself contains characters eligible for expansion. The default for this style is ‘true’.\n\ntag-order\n\nThis provides a mechanism for sorting how the tags available in a particular context will be used.\n\nThe values for the style are sets of space-separated lists of tags. The tags in each value will be tried at the same time; if no match is found, the next value is used. (See the file-patterns style for an exception to this behavior.)\n\nFor example:\n\nzstyle ':completion:\\*:complete:-command-:\\*:\\*' tag-order \\\\ \n    'commands functions'\n\nspecifies that completion in command position first offers external commands and shell functions. Remaining tags will be tried if no completions are found.\n\nIn addition to tag names, each string in the value may take one of the following forms:\n\n\\-\n\nIf any value consists of only a hyphen, then _only_ the tags specified in the other values are generated. Normally all tags not explicitly selected are tried last if the specified tags fail to generate any matches. This means that a single value consisting only of a single hyphen turns off completion.\n\n! tags...\n\nA string starting with an exclamation mark specifies names of tags that are _not_ to be used. The effect is the same as if all other possible tags for the context had been listed.\n\ntag:label ...\n\nHere, tag is one of the standard tags and label is an arbitrary name. Matches are generated as normal but the name label is used in contexts instead of tag. This is not useful in words starting with !.\n\nIf the label starts with a hyphen, the tag is prepended to the label to form the name used for lookup. This can be used to make the completion system try a certain tag more than once, supplying different style settings for each attempt; see below for an example.\n\ntag:label:description\n\nAs before, but description will replace the ‘%d’ in the value of the format style instead of the default description supplied by the completion function. Spaces in the description must be quoted with a backslash. A ‘%d’ appearing in description is replaced with the description given by the completion function.\n\nIn any of the forms above the tag may be a pattern or several patterns in the form ‘{pat1,pat2...}’. In this case all matching tags will be used except for any given explicitly in the same string.\n\nOne use of these features is to try one tag more than once, setting other styles differently on each attempt, but still to use all the other tags without having to repeat them all. For example, to make completion of function names in command position ignore all the completion functions starting with an underscore the first time completion is tried:\n\nzstyle ':completion:\\*:\\*:-command-:\\*:\\*' tag-order \\\\ \n    'functions:-non-comp \\*' functions\nzstyle ':completion:\\*:functions-non-comp' \\\\ \n    ignored-patterns '\\_\\*'\n\nOn the first attempt, all tags will be offered but the functions tag will be replaced by functions-non-comp. The ignored-patterns style is set for this tag to exclude functions starting with an underscore. If there are no matches, the second value of the tag-order style is used which completes functions using the default tag, this time presumably including all function names.\n\nThe matches for one tag can be split into different groups. For example:\n\nzstyle ':completion:\\*' tag-order \\\\ \n    'options:-long:long\\\\ options\n     options:-short:short\\\\ options\n     options:-single-letter:single\\\\ letter\\\\ options'\nzstyle ':completion:\\*:options-long' \\\\ \n     ignored-patterns '\\[-+\\](|-|\\[^-\\]\\*)'\nzstyle ':completion:\\*:options-short' \\\\ \n     ignored-patterns '--\\*' '\\[-+\\]?'\nzstyle ':completion:\\*:options-single-letter' \\\\ \n     ignored-patterns '???\\*'\n\nWith the group-names style set, options beginning with ‘\\-\\-’, options beginning with a single ‘\\-’ or ‘+’ but containing multiple characters, and single-letter options will be displayed in separate groups with different descriptions.\n\nAnother use of patterns is to try multiple match specifications one after another. The matcher-list style offers something similar, but it is tested very early in the completion system and hence can’t be set for single commands nor for more specific contexts. Here is how to try normal completion without any match specification and, if that generates no matches, try again with case-insensitive matching, restricting the effect to arguments of the command foo:\n\nzstyle ':completion:\\*:\\*:foo:\\*:\\*' tag-order '\\*' '\\*:-case'\nzstyle ':completion:\\*-case' matcher 'm:{a-z}={A-Z}'\n\nFirst, all the tags offered when completing after foo are tried using the normal tag name. If that generates no matches, the second value of tag-order is used, which tries all tags again except that this time each has \\-case appended to its name for lookup of styles. Hence this time the value for the matcher style from the second call to zstyle in the example is used to make completion case-insensitive.\n\nIt is possible to use the \\-e option of the zstyle builtin command to specify conditions for the use of particular tags. For example:\n\nzstyle -e '\\*:-command-:\\*' tag-order '\n    if \\[\\[ -n $PREFIX$SUFFIX \\]\\]; then\n      reply=( )\n    else\n      reply=( - )\n    fi'\n\nCompletion in command position will be attempted only if the string typed so far is not empty. This is tested using the PREFIX special parameter; see [Completion Widgets](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Widgets) for a description of parameters which are special inside completion widgets. Setting reply to an empty array provides the default behaviour of trying all tags at once; setting it to an array containing only a hyphen disables the use of all tags and hence of all completions.\n\nIf no tag-order style has been defined for a context, the strings ‘(|\\*-)argument-\\* (|\\*-)option-\\* values’ and ‘options’ plus all tags offered by the completion function will be used to provide a sensible default behavior that causes arguments (whether normal command arguments or arguments of options) to be completed before option names for most commands.\n\nurls\n\nThis is used together with the urls tag by functions completing URLs.\n\nIf the value consists of more than one string, or if the only string does not name a file or directory, the strings are used as the URLs to complete.\n\nIf the value contains only one string which is the name of a normal file the URLs are taken from that file (where the URLs may be separated by white space or newlines).\n\nFinally, if the only string in the value names a directory, the directory hierarchy rooted at this directory gives the completions. The top level directory should be the file access method, such as ‘http’, ‘ftp’, ‘bookmark’ and so on. In many cases the next level of directories will be a filename. The directory hierarchy can descend as deep as necessary.\n\nFor example,\n\nzstyle ':completion:\\*' urls ~/.urls\nmkdir -p ~/.urls/ftp/ftp.zsh.org/pub\n\nallows completion of all the components of the URL ftp://ftp.zsh.org/pub after suitable commands such as ‘netscape’ or ‘lynx’. Note, however, that access methods and files are completed separately, so if the hosts style is set hosts can be completed without reference to the urls style.\n\nSee the description in the function \\_urls itself for more information (e.g. ‘more $^fpath/\\_urls(N)’).\n\nuse-cache\n\nIf this is set, the completion caching layer is activated for any completions which use it (via the \\_store\\_cache, \\_retrieve\\_cache, and \\_cache\\_invalid functions). The directory containing the cache files can be changed with the cache-path style.\n\nuse-compctl\n\nIf this style is set to a string _not_ equal to false, 0, no, and off, the completion system may use any completion specifications defined with the compctl builtin command. If the style is unset, this is done only if the zsh/compctl module is loaded. The string may also contain the substring ‘first’ to use completions defined with ‘compctl -T’, and the substring ‘default’ to use the completion defined with ‘compctl -D’.\n\nNote that this is only intended to smooth the transition from compctl to the new completion system and may disappear in the future.\n\nNote also that the definitions from compctl will only be used if there is no specific completion function for the command in question. For example, if there is a function \\_foo to complete arguments to the command foo, compctl will never be invoked for foo. However, the compctl version will be tried if foo only uses default completion.\n\nuse-ip\n\nBy default, the function \\_hosts that completes host names strips IP addresses from entries read from host databases such as NIS and ssh files. If this style is ‘true’, the corresponding IP addresses can be completed as well. This style is not use in any context where the hosts style is set; note also it must be set before the cache of host names is generated (typically the first completion attempt).\n\nusers\n\nThis may be set to a list of usernames to be completed. If it is not set all usernames will be completed. Note that if it is set only that list of users will be completed; this is because on some systems querying all users can take a prohibitive amount of time.\n\nusers-hosts\n\nThe values of this style should be of the form ‘user@host’ or ‘user:host’. It is used for commands that need pairs of user- and hostnames. These commands will complete usernames from this style (only), and will restrict subsequent hostname completion to hosts paired with that user in one of the values of the style.\n\nIt is possible to group values for sets of commands which allow a remote login, such as rlogin and ssh, by using the my-accounts tag. Similarly, values for sets of commands which usually refer to the accounts of other people, such as talk and finger, can be grouped by using the other-accounts tag. More ambivalent commands may use the accounts tag.\n\nusers-hosts-ports\n\nLike users-hosts but used for commands like telnet and containing strings of the form ‘user@host:port’.\n\nverbose\n\nIf set, as it is by default, the completion listing is more verbose. In particular many commands show descriptions for options if this style is ‘true’.\n\nword\n\nThis is used by the \\_list completer, which prevents the insertion of completions until a second completion attempt when the line has not changed. The normal way of finding out if the line has changed is to compare its entire contents between the two occasions. If this style is ‘true’, the comparison is instead performed only on the current word. Hence if completion is performed on another word with the same contents, completion will not be delayed.\n\n* * *\n\n## 20.4 Control Functions\n\nThe initialization script compinit redefines all the widgets which perform completion to call the supplied widget function \\_main\\_complete. This function acts as a wrapper calling the so-called ‘completer’ functions that generate matches. If \\_main\\_complete is called with arguments, these are taken as the names of completer functions to be called in the order given. If no arguments are given, the set of functions to try is taken from the completer style. For example, to use normal completion and correction if that doesn’t generate any matches:\n\nzstyle ':completion:\\*' completer \\_complete \\_correct\n\nafter calling compinit. The default value for this style is ‘\\_complete \\_ignored’, i.e. normally only ordinary completion is tried, first with the effect of the ignored-patterns style and then without it. The \\_main\\_complete function uses the return status of the completer functions to decide if other completers should be called. If the return status is zero, no other completers are tried and the \\_main\\_complete function returns.\n\nIf the first argument to \\_main\\_complete is a single hyphen, the arguments will not be taken as names of completers. Instead, the second argument gives a name to use in the completer field of the context and the other arguments give a command name and arguments to call to generate the matches.\n\nThe following completer functions are contained in the distribution, although users may write their own. Note that in contexts the leading underscore is stripped, for example basic completion is performed in the context ‘:completion::complete:...’.\n\n\\_all\\_matches\n\nThis completer can be used to add a string consisting of all other matches. As it influences later completers it must appear as the first completer in the list. The list of all matches is affected by the avoid-completer and old-matches styles described above.\n\nIt may be useful to use the \\_generic function described below to bind \\_all\\_matches to its own keystroke, for example:\n\nzle -C all-matches complete-word \\_generic\nbindkey '^Xa' all-matches\nzstyle ':completion:all-matches:\\*' old-matches only\nzstyle ':completion:all-matches::::' completer \\_all\\_matches\n\nNote that this does not generate completions by itself: first use any of the standard ways of generating a list of completions, then use ^Xa to show all matches. It is possible instead to add a standard completer to the list and request that the list of all matches should be directly inserted:\n\nzstyle ':completion:all-matches::::' completer \\\\ \n       \\_all\\_matches \\_complete\nzstyle ':completion:all-matches:\\*' insert true\n\nIn this case the old-matches style should not be set.\n\n\\_approximate\n\nThis is similar to the basic \\_complete completer but allows the completions to undergo corrections. The maximum number of errors can be specified by the max-errors style; see the description of approximate matching in [Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation) for how errors are counted. Normally this completer will only be tried after the normal \\_complete completer:\n\nzstyle ':completion:\\*' completer \\_complete \\_approximate\n\nThis will give correcting completion if and only if normal completion yields no possible completions. When corrected completions are found, the completer will normally start menu completion allowing you to cycle through these strings.\n\nThis completer uses the tags corrections and original when generating the possible corrections and the original string. The format style for the former may contain the additional sequences ‘%e’ and ‘%o’ which will be replaced by the number of errors accepted to generate the corrections and the original string, respectively.\n\nThe completer progressively increases the number of errors allowed up to the limit by the max-errors style, hence if a completion is found with one error, no completions with two errors will be shown, and so on. It modifies the completer name in the context to indicate the number of errors being tried: on the first try the completer field contains ‘approximate-1’, on the second try ‘approximate-2’, and so on.\n\nWhen \\_approximate is called from another function, the number of errors to accept may be passed with the \\-a option. The argument is in the same format as the max-errors style, all in one string.\n\nNote that this completer (and the \\_correct completer mentioned below) can be quite expensive to call, especially when a large number of errors are allowed. One way to avoid this is to set up the completer style using the \\-e option to zstyle so that some completers are only used when completion is attempted a second time on the same string, e.g.:\n\nzstyle -e ':completion:\\*' completer '\n  if \\[\\[ $\\_last\\_try != \"$HISTNO$BUFFER$CURSOR\" \\]\\]; then\n    \\_last\\_try=\"$HISTNO$BUFFER$CURSOR\"\n    reply=(\\_complete \\_match \\_prefix)\n  else\n    reply=(\\_ignored \\_correct \\_approximate)\n  fi'\n\nThis uses the HISTNO parameter and the BUFFER and CURSOR special parameters that are available inside zle and completion widgets to find out if the command line hasn’t changed since the last time completion was tried. Only then are the \\_ignored, \\_correct and \\_approximate completers called.\n\n\\_canonical\\_paths \\[ \\-A var \\] \\[ \\-N \\] \\[ \\-MJV12nfX \\] tag descr \\[ paths ... \\]\n\nThis completion function completes all paths given to it, and also tries to offer completions which point to the same file as one of the paths given (relative path when an absolute path is given, and vice versa; when ..’s are present in the word to be completed; and some paths got from symlinks).\n\n\\-A, if specified, takes the paths from the array variable specified. Paths can also be specified on the command line as shown above. \\-N, if specified, prevents canonicalizing the paths given before using them for completion, in case they are already so. The options \\-M, \\-J, \\-V, \\-1, \\-2, \\-n, \\-F, \\-X are passed to compadd.\n\nSee \\_description for a description of tag and descr.\n\n\\_cmdambivalent\n\nCompletes the remaining positional arguments as an external command. The external command and its arguments are completed as separate arguments (in a manner appropriate for completing /usr/bin/env) if there are two or more remaining positional arguments on the command line, and as a quoted command string (in the manner of system(...)) otherwise. See also \\_cmdstring and \\_precommand.\n\nThis function takes no arguments.\n\n\\_cmdstring\n\nCompletes an external command as a single argument, as for system(...).\n\n\\_complete\n\nThis completer generates all possible completions in a context-sensitive manner, i.e. using the settings defined with the compdef function explained above and the current settings of all special parameters. This gives the normal completion behaviour.\n\nTo complete arguments of commands, \\_complete uses the utility function \\_normal, which is in turn responsible for finding the particular function; it is described below. Various contexts of the form \\-context\\- are handled specifically. These are all mentioned above as possible arguments to the #compdef tag.\n\nBefore trying to find a function for a specific context, \\_complete checks if the parameter ‘compcontext’ is set. Setting ‘compcontext’ allows the usual completion dispatching to be overridden which is useful in places such as a function that uses vared for input. If it is set to an array, the elements are taken to be the possible matches which will be completed using the tag ‘values’ and the description ‘value’. If it is set to an associative array, the keys are used as the possible completions and the values (if non-empty) are used as descriptions for the matches. If ‘compcontext’ is set to a string containing colons, it should be of the form ‘tag:descr:action’. In this case the tag and descr give the tag and description to use and the action indicates what should be completed in one of the forms accepted by the \\_arguments utility function described below.\n\nFinally, if ‘compcontext’ is set to a string without colons, the value is taken as the name of the context to use and the function defined for that context will be called. For this purpose, there is a special context named \\-command-line- that completes whole command lines (commands and their arguments). This is not used by the completion system itself but is nonetheless handled when explicitly called.\n\n\\_correct\n\nGenerate corrections, but not completions, for the current word; this is similar to \\_approximate but will not allow any number of extra characters at the cursor as that completer does. The effect is similar to spell-checking. It is based on \\_approximate, but the completer field in the context name is correct.\n\nFor example, with:\n\nzstyle ':completion:::::' completer \\\\ \n       \\_complete \\_correct \\_approximate\nzstyle ':completion:\\*:correct:::' max-errors 2 not-numeric\nzstyle ':completion:\\*:approximate:::' max-errors 3 numeric\n\ncorrection will accept up to two errors. If a numeric argument is given, correction will not be performed, but correcting completion will be, and will accept as many errors as given by the numeric argument. Without a numeric argument, first correction and then correcting completion will be tried, with the first one accepting two errors and the second one accepting three errors.\n\nWhen \\_correct is called as a function, the number of errors to accept may be given following the \\-a option. The argument is in the same form a values to the accept style, all in one string.\n\nThis completer function is intended to be used without the \\_approximate completer or, as in the example, just before it. Using it after the \\_approximate completer is useless since \\_approximate will at least generate the corrected strings generated by the \\_correct completer — and probably more.\n\n\\_expand\n\nThis completer function does not really perform completion, but instead checks if the word on the command line is eligible for expansion and, if it is, gives detailed control over how this expansion is done. For this to happen, the completion system needs to be invoked with complete-word, not expand-or-complete (the default binding for TAB), as otherwise the string will be expanded by the shell’s internal mechanism before the completion system is started. Note also this completer should be called before the \\_complete completer function.\n\nThe tags used when generating expansions are all-expansions for the string containing all possible expansions, expansions when adding the possible expansions as single matches and original when adding the original string from the line. The order in which these strings are generated, if at all, can be controlled by the group-order and tag-order styles, as usual.\n\nThe format string for all-expansions and for expansions may contain the sequence ‘%o’ which will be replaced by the original string from the line.\n\nThe kind of expansion to be tried is controlled by the substitute, glob and subst-globs-only styles.\n\nIt is also possible to call \\_expand as a function, in which case the different modes may be selected with options: \\-s for substitute, \\-g for glob and \\-o for subst-globs-only.\n\n\\_expand\\_alias\n\nIf the word the cursor is on is an alias, it is expanded and no other completers are called. The types of aliases which are to be expanded can be controlled with the styles regular, global and disabled.\n\nThis function is also a bindable command, see [Bindable Commands](#Bindable-Commands).\n\n\\_extensions\n\nIf the cursor follows the string ‘\\*.’, filename extensions are completed. The extensions are taken from files in current directory or a directory specified at the beginning of the current word. For exact matches, completion continues to allow other completers such as \\_expand to expand the pattern. The standard add-space and prefix-hidden styles are observed.\n\n\\_external\\_pwds\n\nCompletes current directories of other zsh processes belonging to the current user.\n\nThis is intended to be used via \\_generic, bound to a custom key combination. Note that pattern matching is enabled so matching is performed similar to how it works with the \\_match completer.\n\n\\_history\n\nComplete words from the shell’s command history. This completer can be controlled by the remove-all-dups, and sort styles as for the \\_history\\_complete\\_word bindable command, see [Bindable Commands](#Bindable-Commands) and [Completion System Configuration](#Completion-System-Configuration).\n\n\\_ignored\n\nThe ignored-patterns style can be set to a list of patterns which are compared against possible completions; matching ones are removed. With this completer those matches can be reinstated, as if no ignored-patterns style were set. The completer actually generates its own list of matches; which completers are invoked is determined in the same way as for the \\_prefix completer. The single-ignored style is also available as described above.\n\n\\_list\n\nThis completer allows the insertion of matches to be delayed until completion is attempted a second time without the word on the line being changed. On the first attempt, only the list of matches will be shown. It is affected by the styles condition and word, see [Completion System Configuration](#Completion-System-Configuration).\n\n\\_match\n\nThis completer is intended to be used after the \\_complete completer. It behaves similarly but the string on the command line may be a pattern to match against trial completions. This gives the effect of the GLOB\\_COMPLETE option.\n\nNormally completion will be performed by taking the pattern from the line, inserting a ‘\\*’ at the cursor position and comparing the resulting pattern with the possible completions generated. This can be modified with the match-original style described above.\n\nThe generated matches will be offered in a menu completion unless the insert-unambiguous style is set to ‘true’; see the description above for other options for this style.\n\nNote that matcher specifications defined globally or used by the completion functions (the styles matcher-list and matcher) will not be used.\n\n\\_menu\n\nThis completer was written as simple example function to show how menu completion can be enabled in shell code. However, it has the notable effect of disabling menu selection which can be useful with \\_generic based widgets. It should be used as the first completer in the list. Note that this is independent of the setting of the MENU\\_COMPLETE option and does not work with the other menu completion widgets such as reverse-menu-complete, or accept-and-menu-complete.\n\n\\_oldlist\n\nThis completer controls how the standard completion widgets behave when there is an existing list of completions which may have been generated by a special completion (i.e. a separately-bound completion command). It allows the ordinary completion keys to continue to use the list of completions thus generated, instead of producing a new list of ordinary contextual completions. It should appear in the list of completers before any of the widgets which generate matches. It uses two styles: old-list and old-menu, see [Completion System Configuration](#Completion-System-Configuration).\n\n\\_precommand\n\nComplete an external command in word-separated arguments, as for exec and /usr/bin/env.\n\n\\_prefix\n\nThis completer can be used to try completion with the suffix (everything after the cursor) ignored. In other words, the suffix will not be considered to be part of the word to complete. The effect is similar to the expand-or-complete-prefix command.\n\nThe completer style is used to decide which other completers are to be called to generate matches. If this style is unset, the list of completers set for the current context is used — except, of course, the \\_prefix completer itself. Furthermore, if this completer appears more than once in the list of completers only those completers not already tried by the last invocation of \\_prefix will be called.\n\nFor example, consider this global completer style:\n\nzstyle ':completion:\\*' completer \\\\ \n    \\_complete \\_prefix \\_correct \\_prefix:foo\n\nHere, the \\_prefix completer tries normal completion but ignoring the suffix. If that doesn’t generate any matches, and neither does the call to the \\_correct completer after it, \\_prefix will be called a second time and, now only trying correction with the suffix ignored. On the second invocation the completer part of the context appears as ‘foo’.\n\nTo use \\_prefix as the last resort and try only normal completion when it is invoked:\n\nzstyle ':completion:\\*' completer \\_complete ... \\_prefix\nzstyle ':completion::prefix:\\*' completer \\_complete\n\nThe add-space style is also respected. If it is set to ‘true’ then \\_prefix will insert a space between the matches generated (if any) and the suffix.\n\nNote that this completer is only useful if the COMPLETE\\_IN\\_WORD option is set; otherwise, the cursor will be moved to the end of the current word before the completion code is called and hence there will be no suffix.\n\n\\_user\\_expand\n\nThis completer behaves similarly to the \\_expand completer but instead performs expansions defined by users. The styles add-space and sort styles specific to the \\_expand completer are usable with \\_user\\_expand in addition to other styles handled more generally by the completion system. The tag all-expansions is also available.\n\nThe expansion depends on the array style user-expand being defined for the current context; remember that the context for completers is less specific than that for contextual completion as the full context has not yet been determined. Elements of the array may have one of the following forms:\n\n$hash\n\nhash is the name of an associative array. Note this is not a full parameter expression, merely a $, suitably quoted to prevent immediate expansion, followed by the name of an associative array. If the trial expansion word matches a key in hash, the resulting expansion is the corresponding value.\n\n\\_func\n\n\\_func is the name of a shell function whose name must begin with \\_ but is not otherwise special to the completion system. The function is called with the trial word as an argument. If the word is to be expanded, the function should set the array reply to a list of expansions. Optionally, it can set REPLY to a word that will be used as a description for the set of expansions. The return status of the function is irrelevant.\n\n* * *\n\n## 20.5 Bindable Commands\n\nIn addition to the context-dependent completions provided, which are expected to work in an intuitively obvious way, there are a few widgets implementing special behaviour which can be bound separately to keys. The following is a list of these and their default bindings.\n\n\\_bash\\_completions\n\nThis function is used by two widgets, \\_bash\\_complete-word and \\_bash\\_list-choices. It exists to provide compatibility with completion bindings in bash. The last character of the binding determines what is completed: ‘!’, command names; ‘$’, environment variables; ‘@’, host names; ‘/’, file names; ‘~’ user names. In bash, the binding preceded by ‘\\\\e’ gives completion, and preceded by ‘^X’ lists options. As some of these bindings clash with standard zsh bindings, only ‘\\\\e~’ and ‘^X~’ are bound by default. To add the rest, the following should be added to .zshrc after compinit has been run:\n\nfor key in '!' '$' '@' '/' '~'; do\n  bindkey \"\\\\e$key\" \\_bash\\_complete-word\n  bindkey \"^X$key\" \\_bash\\_list-choices\ndone\n\nThis includes the bindings for ‘~’ in case they were already bound to something else; the completion code does not override user bindings.\n\n\\_correct\\_filename (^XC)\n\nCorrect the filename path at the cursor position. Allows up to six errors in the name. Can also be called with an argument to correct a filename path, independently of zle; the correction is printed on standard output.\n\n\\_correct\\_word (^Xc)\n\nPerforms correction of the current argument using the usual contextual completions as possible choices. This stores the string ‘correct-word’ in the function field of the context name and then calls the \\_correct completer.\n\n\\_expand\\_alias (^Xa)\n\nThis function can be used as a completer and as a bindable command. It expands the word the cursor is on if it is an alias. The types of alias expanded can be controlled with the styles regular, global and disabled.\n\nWhen used as a bindable command there is one additional feature that can be selected by setting the complete style to ‘true’. In this case, if the word is not the name of an alias, \\_expand\\_alias tries to complete the word to a full alias name without expanding it. It leaves the cursor directly after the completed word so that invoking \\_expand\\_alias once more will expand the now-complete alias name.\n\n\\_expand\\_word (^Xe)\n\nPerforms expansion on the current word: equivalent to the standard expand-word command, but using the \\_expand completer. Before calling it, the function field of the context is set to ‘expand-word’.\n\n\\_generic\n\nThis function is not defined as a widget and not bound by default. However, it can be used to define a widget and will then store the name of the widget in the function field of the context and call the completion system. This allows custom completion widgets with their own set of style settings to be defined easily. For example, to define a widget that performs normal completion and starts menu selection:\n\nzle -C foo complete-word \\_generic\nbindkey '...' foo\nzstyle ':completion:foo:\\*' menu yes select=1\n\nNote in particular that the completer style may be set for the context in order to change the set of functions used to generate possible matches. If \\_generic is called with arguments, those are passed through to \\_main\\_complete as the list of completers in place of those defined by the completer style.\n\n\\_history\\_complete\\_word (\\\\e/)\n\nComplete words from the shell’s command history. This uses the list, remove-all-dups, sort, and stop styles.\n\n\\_most\\_recent\\_file (^Xm)\n\nComplete the name of the most recently modified file matching the pattern on the command line (which may be blank). If given a numeric argument N, complete the Nth most recently modified file. Note the completion, if any, is always unique.\n\n\\_next\\_tags (^Xn)\n\nThis command alters the set of matches used to that for the next tag, or set of tags, either as given by the tag-order style or as set by default; these matches would otherwise not be available. Successive invocations of the command cycle through all possible sets of tags.\n\n\\_read\\_comp (^X^R)\n\nPrompt the user for a string, and use that to perform completion on the current word. There are two possibilities for the string. First, it can be a set of words beginning ‘\\_’, for example ‘\\_files -/’, in which case the function with any arguments will be called to generate the completions. Unambiguous parts of the function name will be completed automatically (normal completion is not available at this point) until a space is typed.\n\nSecond, any other string will be passed as a set of arguments to compadd and should hence be an expression specifying what should be completed.\n\nA very restricted set of editing commands is available when reading the string: ‘DEL’ and ‘^H’ delete the last character; ‘^U’ deletes the line, and ‘^C’ and ‘^G’ abort the function, while ‘RET’ accepts the completion. Note the string is used verbatim as a command line, so arguments must be quoted in accordance with standard shell rules.\n\nOnce a string has been read, the next call to \\_read\\_comp will use the existing string instead of reading a new one. To force a new string to be read, call \\_read\\_comp with a numeric argument.\n\n\\_complete\\_debug (^X?)\n\nThis widget performs ordinary completion, but captures in a temporary file a trace of the shell commands executed by the completion system. Each completion attempt gets its own file. A command to view each of these files is pushed onto the editor buffer stack.\n\n\\_complete\\_help (^Xh)\n\nThis widget displays information about the context names, the tags, and the completion functions used when completing at the current cursor position. If given a numeric argument other than 1 (as in ‘ESC-2 ^Xh’), then the styles used and the contexts for which they are used will be shown, too.\n\nNote that the information about styles may be incomplete; it depends on the information available from the completion functions called, which in turn is determined by the user’s own styles and other settings.\n\n\\_complete\\_help\\_generic\n\nUnlike other commands listed here, this must be created as a normal ZLE widget rather than a completion widget (i.e. with zle -N). It is used for generating help with a widget bound to the \\_generic widget that is described above.\n\nIf this widget is created using the name of the function, as it is by default, then when executed it will read a key sequence. This is expected to be bound to a call to a completion function that uses the \\_generic widget. That widget will be executed, and information provided in the same format that the \\_complete\\_help widget displays for contextual completion.\n\nIf the widget’s name contains debug, for example if it is created as ‘zle -N \\_complete\\_debug\\_generic \\_complete\\_help\\_generic’, it will read and execute the keystring for a generic widget as before, but then generate debugging information as done by \\_complete\\_debug for contextual completion.\n\nIf the widget’s name contains noread, it will not read a keystring but instead arrange that the next use of a generic widget run in the same shell will have the effect as described above.\n\nThe widget works by setting the shell parameter ZSH\\_TRACE\\_GENERIC\\_WIDGET which is read by \\_generic. Unsetting the parameter cancels any pending effect of the noread form.\n\nFor example, after executing the following:\n\nzle -N \\_complete\\_debug\\_generic \\_complete\\_help\\_generic\nbindkey '^x:' \\_complete\\_debug\\_generic\n\ntyping ‘C-x :’ followed by the key sequence for a generic widget will cause trace output for that widget to be saved to a file.\n\n\\_complete\\_tag (^Xt)\n\nThis widget completes symbol tags created by the etags or ctags programmes (note there is no connection with the completion system’s tags) stored in a file TAGS, in the format used by etags, or tags, in the format created by ctags. It will look back up the path hierarchy for the first occurrence of either file; if both exist, the file TAGS is preferred. You can specify the full path to a TAGS or tags file by setting the parameter $TAGSFILE or $tagsfile respectively. The corresponding completion tags used are etags and vtags, after emacs and vi respectively.\n\n* * *\n\n## 20.6 Utility Functions\n\nDescriptions follow for utility functions that may be useful when writing completion functions. If functions are installed in subdirectories, most of these reside in the Base subdirectory. Like the example functions for commands in the distribution, the utility functions generating matches all follow the convention of returning status zero if they generated completions and non-zero if no matching completions could be added.\n\n\\_absolute\\_command\\_paths\n\nThis function completes external commands as absolute paths (unlike \\_command\\_names -e which completes their basenames). It takes no arguments.\n\n\\_all\\_labels \\[ \\-x \\] \\[ \\-12VJ \\] tag name descr \\[ command arg ... \\]\n\nThis is a convenient interface to the \\_next\\_label function below, implementing the loop shown in the \\_next\\_label example. The command and its arguments are called to generate the matches. The options stored in the parameter name will automatically be inserted into the args passed to the command. Normally, they are put directly after the command, but if one of the args is a single hyphen, they are inserted directly before that. If the hyphen is the last argument, it will be removed from the argument list before the command is called. This allows \\_all\\_labels to be used in almost all cases where the matches can be generated by a single call to the compadd builtin command or by a call to one of the utility functions.\n\nFor example:\n\nlocal expl\n...\nif \\_requested foo; then\n  ...\n  \\_all\\_labels foo expl '...' compadd ... - $matches\nfi\n\nWill complete the strings from the matches parameter, using compadd with additional options which will take precedence over those generated by \\_all\\_labels.\n\n\\_alternative \\[ \\-O name \\] \\[ \\-C name \\] spec ...\n\nThis function is useful in simple cases where multiple tags are available. Essentially it implements a loop like the one described for the \\_tags function below.\n\nThe tags to use and the action to perform if a tag is requested are described using the specs which are of the form: ‘tag:descr:action’. The tags are offered using \\_tags and if the tag is requested, the action is executed with the given description descr. The actions are those accepted by the \\_arguments function (described below), with the following exceptions:\n\n*   The ‘\\->state’ and ‘\\=...’ forms are not supported.\n*   The ‘((a\\\\:bar b\\\\:baz))’ form does not need the colon to be escaped, since the specs have no colon-separated fields after the action.\n\nFor example, the action may be a simple function call:\n\n\\_alternative \\\\ \n    'users:user:\\_users' \\\\ \n    'hosts:host:\\_hosts'\n\noffers usernames and hostnames as possible matches, generated by the \\_users and \\_hosts functions respectively.\n\nLike \\_arguments, this function uses \\_all\\_labels to execute the actions, which will loop over all sets of tags. Special handling is only required if there is an additional valid tag, for example inside a function called from \\_alternative.\n\nThe option ‘\\-O name’ is used in the same way as by the \\_arguments function. In other words, the elements of the name array will be passed to compadd when executing an action.\n\nLike \\_tags this function supports the \\-C option to give a different name for the argument context field.\n\n\\_arguments \\[ \\-nswWCRS \\] \\[ \\-A pat \\] \\[ \\-O name \\] \\[ \\-M matchspec \\]\n\n           \\[ : \\] spec ...\n\n\\_arguments \\[ opt ... \\] \\-\\- \\[ \\-l \\] \\[ \\-i pats \\] \\[ \\-s pair \\]\n\n           \\[ helpspec ...\\]\n\nThis function can be used to give a complete specification for completion for a command whose arguments follow standard UNIX option and argument conventions.\n\n_Options Overview_\n\nOptions to \\_arguments itself must be in separate words, i.e. \\-s -w, not \\-sw. The options are followed by specs that describe options and arguments of the analyzed command. To avoid ambiguity, all options to \\_arguments itself may be separated from the spec forms by a single colon.\n\nThe ‘\\-\\-’ form is used to intuit spec forms from the help output of the command being analyzed, and is described in detail below. The opts for the ‘\\-\\-’ form are otherwise the same options as the first form. Note that ‘\\-s’ following ‘\\-\\-’ has a distinct meaning from ‘\\-s’ preceding ‘\\-\\-’, and both may appear.\n\nThe option switches \\-s, \\-S, \\-A, \\-w, and \\-W affect how \\_arguments parses the analyzed command line’s options. These switches are useful for commands with standard argument parsing.\n\nThe options of \\_arguments have the following meanings:\n\n\\-n\n\nWith this option, \\_arguments sets the parameter NORMARG to the position of the first normal argument in the $words array, i.e. the position after the end of the options. If that argument has not been reached, NORMARG is set to \\-1. The caller should declare ‘integer NORMARG’ if the \\-n option is passed; otherwise the parameter is not used.\n\n\\-s\n\nEnable _option stacking_ for single-letter options, whereby multiple single-letter options may be combined into a single word. For example, the two options ‘\\-x’ and ‘\\-y’ may be combined into a single word ‘\\-xy’. By default, every word corresponds to a single option name (‘\\-xy’ is a single option named ‘xy’).\n\nOptions beginning with a single hyphen or plus sign are eligible for stacking; words beginning with two hyphens are not.\n\nNote that \\-s after \\-\\- has a different meaning, which is documented in the segment entitled ‘Deriving spec forms from the help output’.\n\n\\-w\n\nIn combination with \\-s, allow option stacking even if one or more of the options take arguments. For example, if \\-x takes an argument, with no \\-s, ‘\\-xy’ is considered as a single (unhandled) option; with \\-s, \\-xy is an option with the argument ‘y’; with both \\-s and \\-w, \\-xy is the option \\-x and the option \\-y with arguments to \\-x (and to \\-y, if it takes arguments) still to come in subsequent words.\n\n\\-W\n\nThis option takes \\-w a stage further: it is possible to complete single-letter options even after an argument that occurs in the same word. However, it depends on the action performed whether options will really be completed at this point. For more control, use a utility function like \\_guard as part of the action.\n\n\\-C\n\nModify the curcontext parameter for an action of the form ‘\\->state’. This is discussed in detail below.\n\n\\-R\n\nReturn status 300 instead of zero when a $state is to be handled, in the ‘\\->string’ syntax.\n\n\\-S\n\nDo not complete options after a ‘\\-\\-’ appearing on the line, and ignore the ‘\\-\\-’. For example, with \\-S, in the line\n\nthe ‘\\-x’ is considered an option, the ‘\\-y’ is considered an argument, and the ‘\\-\\-’ is considered to be neither.\n\n\\-A pat\n\nDo not complete options after the first non-option argument on the line. pat is a pattern matching all strings which are not to be taken as arguments. For example, to make \\_arguments stop completing options after the first normal argument, but ignoring all strings starting with a hyphen even if they are not described by one of the optspecs, the form is ‘\\-A \"-\\*\"’.\n\n\\-O name\n\nPass the elements of the array name as arguments to functions called to execute actions. This is discussed in detail below.\n\n\\-M matchspec\n\nUse the match specification matchspec for completing option names and values. The default matchspec allows partial word completion after ‘\\_’ and ‘\\-’, such as completing ‘\\-f-b’ to ‘\\-foo-bar’. The default matchspec is:\n\n\\-0\n\nWhen populating values of the ‘opt\\_args’ associative array, don’t backslash-escape colons and backslashes and use NUL rather than colon for joining multiple values. This option is described in more detail below, under the heading _specs: actions_.\n\n_specs: overview_\n\nEach of the following forms is a spec describing individual sets of options or arguments on the command line being analyzed.\n\nn:message:action\n\nn::message:action\n\nThis describes the n’th normal argument. The message will be printed above the matches generated and the action indicates what can be completed in this position (see below). If there are two colons before the message the argument is optional. If the message contains only white space, nothing will be printed above the matches unless the action adds an explanation string itself.\n\n:message:action\n\n::message:action\n\nSimilar, but describes the _next_ argument, whatever number that happens to be. If all arguments are specified in this form in the correct order the numbers are unnecessary.\n\n\\*:message:action\n\n\\*::message:action\n\n\\*:::message:action\n\nThis describes how arguments (usually non-option arguments, those not beginning with \\- or +) are to be completed when neither of the first two forms was provided. Any number of arguments can be completed in this fashion.\n\nWith two colons before the message, the words special array and the CURRENT special parameter are modified to refer only to the normal arguments when the action is executed or evaluated. With three colons before the message they are modified to refer only to the normal arguments covered by this description.\n\noptspec\n\noptspec:...\n\nThis describes an option. The colon indicates handling for one or more arguments to the option; if it is not present, the option is assumed to take no arguments.\n\nThe following forms are available for the initial optspec, whether or not the option has arguments.\n\n\\*optspec\n\nHere optspec is one of the remaining forms below. This indicates the following optspec may be repeated. Otherwise if the corresponding option is already present on the command line to the left of the cursor it will not be offered again.\n\n\\-optname\n\n+optname\n\nIn the simplest form the optspec is just the option name beginning with a minus or a plus sign, such as ‘\\-foo’. The first argument for the option (if any) must follow as a _separate_ word directly after the option.\n\nEither of ‘\\-+optname’ and ‘+-optname’ can be used to specify that \\-optname and +optname are both valid.\n\nIn all the remaining forms, the leading ‘\\-’ may be replaced by or paired with ‘+’ in this way.\n\n\\-optname\\-\n\nThe first argument of the option must come directly after the option name _in the same word_. For example, ‘\\-foo-:...’ specifies that the completed option and argument will look like ‘\\-fooarg’.\n\n\\-optname+\n\nThe first argument may appear immediately after optname in the same word, or may appear as a separate word after the option. For example, ‘\\-foo+:...’ specifies that the completed option and argument will look like either ‘\\-fooarg’ or ‘\\-foo arg’.\n\n\\-optname\\=\n\nThe argument may appear as the next word, or in same word as the option name provided that it is separated from it by an equals sign, for example ‘\\-foo=arg’ or ‘\\-foo arg’.\n\n\\-optname\\=-\n\nThe argument to the option must appear after an equals sign in the same word, and may not be given in the next argument.\n\noptspec\\[explanation\\]\n\nAn explanation string may be appended to any of the preceding forms of optspec by enclosing it in brackets, as in ‘\\-q\\[query operation\\]’.\n\nThe verbose style is used to decide whether the explanation strings are displayed with the option in a completion listing.\n\nIf no bracketed explanation string is given but the auto-description style is set and only one argument is described for this optspec, the value of the style is displayed, with any appearance of the sequence ‘%d’ in it replaced by the message of the first optarg that follows the optspec; see below.\n\nIt is possible for options with a literal ‘+’ or ‘\\=’ to appear, but that character must be quoted, for example ‘\\-\\\\+’.\n\nEach optarg following an optspec must take one of the following forms:\n\n:message:action\n\n::message:action\n\nAn argument to the option; message and action are treated as for ordinary arguments. In the first form, the argument is mandatory, and in the second form it is optional.\n\nThis group may be repeated for options which take multiple arguments. In other words, :message1:action1:message2:action2 specifies that the option takes two arguments.\n\n:\\*pattern:message:action\n\n:\\*pattern::message:action\n\n:\\*pattern:::message:action\n\nThis describes multiple arguments. Only the last optarg for an option taking multiple arguments may be given in this form. If the pattern is empty (i.e. :\\*:), all the remaining words on the line are to be completed as described by the action; otherwise, all the words up to and including a word matching the pattern are to be completed using the action.\n\nMultiple colons are treated as for the ‘\\*:...’ forms for ordinary arguments: when the message is preceded by two colons, the words special array and the CURRENT special parameter are modified during the execution or evaluation of the action to refer only to the words after the option. When preceded by three colons, they are modified to refer only to the words covered by this description.\n\nAny literal colon in an optname, message, or action must be preceded by a backslash, ‘\\\\:’.\n\nEach of the forms above may be preceded by a list in parentheses of option names and argument numbers. If the given option is on the command line, the options and arguments indicated in parentheses will not be offered. For example, ‘(-two -three 1)-one:...’ completes the option ‘\\-one’; if this appears on the command line, the options \\-two and \\-three and the first ordinary argument will not be completed after it. ‘(-foo):...’ specifies an ordinary argument completion; \\-foo will not be completed if that argument is already present.\n\nOther items may appear in the list of excluded options to indicate various other items that should not be applied when the current specification is matched: a single star (\\*) for the rest arguments (i.e. a specification of the form ‘\\*:...’); a colon (:) for all normal (non-option-) arguments; and a hyphen (\\-) for all options. For example, if ‘(\\*)’ appears before an option and the option appears on the command line, the list of remaining arguments (those shown in the above table beginning with ‘\\*:’) will not be completed.\n\nTo aid in reuse of specifications, it is possible to precede any of the forms above with ‘!’; then the form will no longer be completed, although if the option or argument appears on the command line they will be skipped as normal. The main use for this is when the arguments are given by an array, and \\_arguments is called repeatedly for more specific contexts: on the first call ‘\\_arguments $global\\_options’ is used, and on subsequent calls ‘\\_arguments !$^global\\_options’.\n\n_specs: actions_\n\nIn each of the forms above the action determines how completions should be generated. Except for the ‘\\->string’ form below, the action will be executed by calling the \\_all\\_labels function to process all tag labels. No special handling of tags is needed unless a function call introduces a new one.\n\nThe functions called to execute actions will be called with the elements of the array named by the ‘\\-O name’ option as arguments. This can be used, for example, to pass the same set of options for the compadd builtin to all actions.\n\nThe forms for action are as follows.\n\n (single unquoted space)\n\nThis is useful where an argument is required but it is not possible or desirable to generate matches for it. The message will be displayed but no completions listed. Note that even in this case the colon at the end of the message is needed; it may only be omitted when neither a message nor an action is given.\n\n(item1 item2 ...)\n\nOne of a list of possible matches, for example:\n\n((item1\\\\:desc1 ...))\n\nSimilar to the above, but with descriptions for each possible match. Note the backslash before the colon. For example,\n\nThe matches will be listed together with their descriptions if the description style is set with the values tag in the context.\n\n\\->string\n\nIn this form, \\_arguments processes the arguments and options and then returns control to the calling function with parameters set to indicate the state of processing; the calling function then makes its own arrangements for generating completions. For example, functions that implement a state machine can use this type of action.\n\nWhere \\_arguments encounters action in the ‘\\->string’ format, it will strip all leading and trailing whitespace from string and set the array state to the set of all strings for which an action is to be performed. The elements of the array state\\_descr are assigned the corresponding message field from each optarg containing such an action.\n\nBy default and in common with all other well behaved completion functions, \\_arguments returns status zero if it was able to add matches and non-zero otherwise. However, if the \\-R option is given, \\_arguments will instead return a status of 300 to indicate that $state is to be handled.\n\nIn addition to $state and $state\\_descr, \\_arguments also sets the global parameters ‘context’, ‘line’ and ‘opt\\_args’ as described below, and does not reset any changes made to the special parameters such as PREFIX and words. This gives the calling function the choice of resetting these parameters or propagating changes in them.\n\nA function calling \\_arguments with at least one action containing a ‘\\->string’ must therefore declare appropriate local parameters:\n\nlocal context state state\\_descr line\ntypeset -A opt\\_args\n\nto prevent \\_arguments from altering the global environment.\n\n{eval-string}\n\nA string in braces is evaluated as shell code to generate matches. If the eval-string itself does not begin with an opening parenthesis or brace it is split into separate words before execution.\n\n\\= action\n\nIf the action starts with ‘\\= ’ (an equals sign followed by a space), \\_arguments will insert the contents of the argument field of the current context as the new first element in the words special array and increment the value of the CURRENT special parameter. This has the effect of inserting a dummy word onto the completion command line while not changing the point at which completion is taking place.\n\nThis is most useful with one of the specifiers that restrict the words on the command line on which the action is to operate (the two- and three-colon forms above). One particular use is when an action itself causes \\_arguments on a restricted range; it is necessary to use this trick to insert an appropriate command name into the range for the second call to \\_arguments to be able to parse the line.\n\n word...\n\nword...\n\nThis covers all forms other than those above. If the action starts with a space, the remaining list of words will be invoked unchanged.\n\nOtherwise it will be invoked with some extra strings placed after the first word; these are to be passed down as options to the compadd builtin. They ensure that the state specified by \\_arguments, in particular the descriptions of options and arguments, is correctly passed to the completion command. These additional arguments are taken from the array parameter ‘expl’; this will be set up before executing the action and hence may be referred to inside it, typically in an expansion of the form ‘$expl\\[@\\]’ which preserves empty elements of the array.\n\nDuring the performance of the action the array ‘line’ will be set to the normal arguments from the command line, i.e. the words from the command line after the command name excluding all options and their arguments. Options are stored in the associative array ‘opt\\_args’ with option names as keys and their arguments as the values. By default, all colons and backslashes in the value are escaped with backslashes, and if an option has multiple arguments (for example, when using an optspec of the form ‘\\*optspec’), they are joined with (unescaped) colons. However, if the \\-0 option was passed, no backslash escaping is performed, and multiple values are joined with NUL bytes. For example, after ‘zsh -o foo:foo -o bar:bar -o <TAB>’, the contents of ‘opt\\_args’ would be\n\ntypeset -A opt\\_args=( \\[-o\\]='foo\\\\:foo:bar\\\\:bar:' )\n\nby default, and\n\ntypeset -A opt\\_args=( \\[-o\\]=$'foo:foo\\\\x00bar:bar\\\\x00' )\n\nif \\_arguments had been called with the \\-0 option.\n\nThe parameter ‘context’ is set when returning to the calling function to perform an action of the form ‘\\->string’. It is set to an array of elements corresponding to the elements of $state. Each element is a suitable name for the argument field of the context: either a string of the form ‘option\\-opt\\-n’ for the n’th argument of the option \\-opt, or a string of the form ‘argument-n’ for the n’th argument. For ‘rest’ arguments, that is those in the list at the end not handled by position, n is the string ‘rest’. For example, when completing the argument of the \\-o option, the name is ‘option-o-1’, while for the second normal (non-option-) argument it is ‘argument-2’.\n\nFurthermore, during the evaluation of the action the context name in the curcontext parameter is altered to append the same string that is stored in the context parameter.\n\nThe option \\-C tells \\_arguments to modify the curcontext parameter for an action of the form ‘\\->state’. This is the standard parameter used to keep track of the current context. Here it (and not the context array) should be made local to the calling function to avoid passing back the modified value and should be initialised to the current value at the start of the function:\n\nlocal curcontext=\"$curcontext\"\n\nThis is useful where it is not possible for multiple states to be valid together.\n\n_Grouping Options_\n\nOptions can be grouped to simplify exclusion lists. A group is introduced with ‘+’ followed by a name for the group in the subsequent word. Whole groups can then be referenced in an exclusion list or a group name can be used to disambiguate between two forms of the same option. For example:\n\n\\_arguments \\\\ \n    '(group2--x)-a' \\\\ \n  + group1 \\\\ \n    -m \\\\ \n    '(group2)-n' \\\\ \n  + group2 \\\\ \n    -x -y\n\nIf the name of a group is specified in the form ‘(name)’ then only one value from that group will ever be completed; more formally, all specifications are mutually exclusive to all other specifications in that group. This is useful for defining options that are aliases for each other. For example:\n\n\\_arguments \\\\ \n    -a -b \\\\ \n  + '(operation)' \\\\ \n    {-c,--compress}'\\[compress\\]' \\\\ \n    {-d,--decompress}'\\[decompress\\]' \\\\ \n    {-l,--list}'\\[list\\]'\n\nIf an option in a group appears on the command line, it is stored in the associative array ‘opt\\_args’ with ’group\\-option’ as a key. In the example above, a key ‘operation–c’ is used if the option ‘\\-c’ is present on the command line.\n\n_Specifying Multiple Sets of Arguments_\n\nIt is possible to specify multiple sets of options and arguments with the sets separated by single hyphens. This differs from groups in that sets are considered to be mutually exclusive of each other.\n\nSpecifications before the first set and from any group are common to all sets. For example:\n\n\\_arguments \\\\ \n    -a \\\\ \n  - set1 \\\\ \n    -c \\\\ \n  - set2 \\\\ \n    -d \\\\ \n    ':arg:(x2 y2)'\n\nThis defines two sets. When the command line contains the option ‘\\-c’, the ‘\\-d’ option and the argument will not be considered possible completions. When it contains ‘\\-d’ or an argument, the option ‘\\-c’ will not be considered. However, after ‘\\-a’ both sets will still be considered valid.\n\nAs for groups, the name of a set may appear in exclusion lists, either alone or preceding a normal option or argument specification.\n\nThe completion code has to parse the command line separately for each set. This can be slow so sets should only be used when necessary. A useful alternative is often an option specification with rest-arguments (as in ‘\\-foo:\\*:...’); here the option \\-foo swallows up all remaining arguments as described by the optarg definitions.\n\n_Deriving spec forms from the help output_\n\nThe option ‘\\-\\-’ allows \\_arguments to work out the names of long options that support the ‘\\-\\-help’ option which is standard in many GNU commands. The command word is called with the argument ‘\\-\\-help’ and the output examined for option names. Clearly, it can be dangerous to pass this to commands which may not support this option as the behaviour of the command is unspecified.\n\nIn addition to options, ‘\\_arguments -\\-’ will try to deduce the types of arguments available for options when the form ‘\\-\\-opt\\=val’ is valid. It is also possible to provide hints by examining the help text of the command and adding helpspec of the form ‘pattern:message:action’; note that other \\_arguments spec forms are not used. The pattern is matched against the help text for an option, and if it matches the message and action are used as for other argument specifiers. The special case of ‘\\*:’ means both message and action are empty, which has the effect of causing options having no description in the help output to be ordered in listings ahead of options that have a description.\n\nFor example:\n\n\\_arguments -- '\\*\\\\\\*:toggle:(yes no)' \\\\ \n              '\\*=FILE\\*:file:\\_files' \\\\ \n              '\\*=DIR\\*:directory:\\_files -/' \\\\ \n              '\\*=PATH\\*:directory:\\_files -/'\n\nHere, ‘yes’ and ‘no’ will be completed as the argument of options whose description ends in a star; file names will be completed for options that contain the substring ‘\\=FILE’ in the description; and directories will be completed for options whose description contains ‘\\=DIR’ or ‘\\=PATH’. The last three are in fact the default and so need not be given explicitly, although it is possible to override the use of these patterns. A typical help text which uses this feature is:\n\n  -C, --directory=DIR          change to directory DIR\n\nso that the above specifications will cause directories to be completed after ‘\\-\\-directory’, though not after ‘\\-C’.\n\nNote also that \\_arguments tries to find out automatically if the argument for an option is optional. This can be specified explicitly by doubling the colon before the message.\n\nIf the pattern ends in ‘(-)’, this will be removed from the pattern and the action will be used only directly after the ‘\\=’, not in the next word. This is the behaviour of a normal specification defined with the form ‘\\=-’.\n\nBy default, the command (with the option ‘–help’) is run after resetting all the locale categories (except for LC\\_CTYPE) to ‘C’. If the localized help output is known to work, the option ‘\\-l’ can be specified after the ‘\\_arguments -\\-’ so that the command is run in the current locale.\n\nThe ‘\\_arguments -\\-’ can be followed by the option ‘\\-i patterns’ to give patterns for options which are not to be completed. The patterns can be given as the name of an array parameter or as a literal list in parentheses. For example,\n\n\\_arguments -- -i \\\\ \n    \"(--(en|dis)able-FEATURE\\*)\"\n\nwill cause completion to ignore the options ‘\\-\\-enable-FEATURE’ and ‘\\-\\-disable-FEATURE’ (this example is useful with GNU configure).\n\nThe ‘\\_arguments -\\-’ form can also be followed by the option ‘\\-s pair’ to describe option aliases. The pair consists of a list of alternating patterns and corresponding replacements, enclosed in parens and quoted so that it forms a single argument word in the \\_arguments call.\n\nFor example, some configure\\-script help output describes options only as ‘\\-\\-enable-foo’, but the script also accepts the negated form ‘\\-\\-disable-foo’. To allow completion of the second form:\n\n\\_arguments -- -s \"((#s)--enable- --disable-)\"\n\n_Miscellaneous notes_\n\nFinally, note that \\_arguments generally expects to be the primary function handling any completion for which it is used. It may have side effects which change the treatment of any matches added by other functions called after it. To combine \\_arguments with other functions, those functions should be called either before \\_arguments, as an action within a spec, or in handlers for ‘\\->state’ actions.\n\nHere is a more general example of the use of \\_arguments:\n\n\\_arguments '-l+:left border:' \\\\ \n           '-format:paper size:(letter A4)' \\\\ \n           '\\*-copy:output file:\\_files::resolution:(300 600)' \\\\ \n           ':postscript file:\\_files -g \\\\\\*.\\\\(ps\\\\|eps\\\\)' \\\\ \n           '\\*:page number:'\n\nThis describes three options: ‘\\-l’, ‘\\-format’, and ‘\\-copy’. The first takes one argument described as ‘left border’ for which no completion will be offered because of the empty action. Its argument may come directly after the ‘\\-l’ or it may be given as the next word on the line.\n\nThe ‘\\-format’ option takes one argument in the next word, described as ‘paper size’ for which only the strings ‘letter’ and ‘A4’ will be completed.\n\nThe ‘\\-copy’ option may appear more than once on the command line and takes two arguments. The first is mandatory and will be completed as a filename. The second is optional (because of the second colon before the description ‘resolution’) and will be completed from the strings ‘300’ and ‘600’.\n\nThe last two descriptions say what should be completed as arguments. The first describes the first argument as a ‘postscript file’ and makes files ending in ‘ps’ or ‘eps’ be completed. The last description gives all other arguments the description ‘page number’ but does not offer completions.\n\n\\_cache\\_invalid cache\\_identifier\n\nThis function returns status zero if the completions cache corresponding to the given cache identifier needs rebuilding. It determines this by looking up the cache-policy style for the current context. This should provide a function name which is run with the full path to the relevant cache file as the only argument.\n\nExample:\n\n\\_example\\_caching\\_policy () {\n    # rebuild if cache is more than a week old\n    local -a oldp\n    oldp=( \"$1\"(Nm+7) )\n    (( $#oldp ))\n}\n\n\\_call\\_function return name \\[ arg ... \\]\n\nIf a function name exists, it is called with the arguments args. The return argument gives the name of a parameter in which the return status from the function name should be stored; if return is empty or a single hyphen it is ignored.\n\nThe return status of \\_call\\_function itself is zero if the function name exists and was called and non-zero otherwise.\n\n\\_call\\_program \\[ \\-l \\] \\[ \\-p \\] tag string ...\n\nThis function provides a mechanism for the user to override the use of an external command. It looks up the command style with the supplied tag. If the style is set, its value is used as the command to execute. The strings from the call to \\_call\\_program, or from the style if set, are concatenated with spaces between them and the resulting string is evaluated. The return status is the return status of the command called.\n\nBy default, the command is run in an environment where all the locale categories (except for LC\\_CTYPE) are reset to ‘C’ by calling the utility function \\_comp\\_locale (see below). If the option ‘\\-l’ is given, the command is run with the current locale.\n\nIf the option ‘\\-p’ is supplied it indicates that the command output is influenced by the permissions it is run with. If the gain-privileges style is set to true, \\_call\\_program will make use of commands such as sudo, if present on the command-line, to match the permissions to whatever the final command is likely to run under. When looking up the gain-privileges and command styles, the command component of the zstyle context will end with a slash (‘/’) followed by the command that would be used to gain privileges.\n\n\\_combination \\[ \\-s pattern \\] tag style spec ... field opts ...\n\nThis function is used to complete combinations of values, for example pairs of hostnames and usernames. The style argument gives the style which defines the pairs; it is looked up in a context with the tag specified.\n\nThe style name consists of field names separated by hyphens, for example ‘users-hosts-ports’. For each field for a value is already known, a spec of the form ‘field\\=pattern’ is given. For example, if the command line so far specifies a user ‘pws’, the argument ‘users=pws’ should appear.\n\nThe next argument with no equals sign is taken as the name of the field for which completions should be generated (presumably not one of the fields for which the value is known).\n\nThe matches generated will be taken from the value of the style. These should contain the possible values for the combinations in the appropriate order (users, hosts, ports in the example above). The values for the different fields are separated by colons. This can be altered with the option \\-s to \\_combination which specifies a pattern. Typically this is a character class, as for example ‘\\-s \"\\[:@\\]\"’ in the case of the users-hosts style. Each ‘field\\=pattern’ specification restricts the completions which apply to elements of the style with appropriately matching fields.\n\nIf no style with the given name is defined for the given tag, or if none of the strings in style’s value match, but a function name of the required field preceded by an underscore is defined, that function will be called to generate the matches. For example, if there is no ‘users-hosts-ports’ or no matching hostname when a host is required, the function ‘\\_hosts’ will automatically be called.\n\nIf the same name is used for more than one field, in both the ‘field\\=pattern’ and the argument that gives the name of the field to be completed, the number of the field (starting with one) may be given after the fieldname, separated from it by a colon.\n\nAll arguments after the required field name are passed to compadd when generating matches from the style value, or to the functions for the fields if they are called.\n\n\\_command\\_names \\[ \\-e | \\- \\]\n\nThis function completes words that are valid at command position: names of aliases, builtins, hashed commands, functions, and so on. With the \\-e flag, only hashed commands are completed. The \\- flag is ignored.\n\n\\_comp\\_locale\n\nThis function resets all the locale categories other than LC\\_CTYPE to ‘C’ so that the output from external commands can be easily analyzed by the completion system. LC\\_CTYPE retains the current value (taking LC\\_ALL and LANG into account), ensuring that non-ASCII characters in file names are still handled properly.\n\nThis function should normally be run only in a subshell, because the new locale is exported to the environment. Typical usage would be ‘$(\\_comp\\_locale; command ...)’.\n\n\\_completers \\[ \\-p \\]\n\nThis function completes names of completers.\n\n\\-p\n\nInclude the leading underscore (‘\\_’) in the matches.\n\n\\_default\n\nThis function corresponds to the \\-default- special context which is applied where no completion is defined. It is useful to call it under certain error conditions such as completion after an unrecognised subcommand. This applies the concept of graceful degradation to the completion system, allowing it to fallback on basic completion of commonly useful things like filenames.\n\n\\_describe \\[\\-12JVx\\] \\[ \\-oO | \\-t tag \\] descr name1 \\[ name2 \\] \\[ opt ... \\]\n\n          \\[ \\-\\- name1 \\[ name2 \\] \\[ opt ... \\] ... \\]\n\nThis function associates completions with descriptions. Multiple groups separated by \\-\\- can be supplied, potentially with different completion options opts.\n\nThe descr is taken as a string to display above the matches if the format style for the descriptions tag is set. This is followed by one or two names of arrays followed by options to pass to compadd. The array name1 contains the possible completions with their descriptions in the form ‘completion:description’. Any literal colons in completion must be quoted with a backslash. If a name2 is given, it should have the same number of elements as name1; in this case the corresponding elements are added as possible completions instead of the completion strings from name1. The completion list will retain the descriptions from name1. Finally, a set of completion options can appear.\n\nIf the option ‘\\-o’ appears before the first argument, the matches added will be treated as names of command options (N.B. not shell options), typically following a ‘\\-’, ‘\\-\\-’ or ‘+’ on the command line. In this case \\_describe uses the prefix-hidden, prefix-needed and verbose styles to find out if the strings should be added as completions and if the descriptions should be shown. Without the ‘\\-o’ option, only the verbose style is used to decide how descriptions are shown. If ‘\\-O’ is used instead of ‘\\-o’, command options are completed as above but \\_describe will not handle the prefix-needed style.\n\nWith the \\-t option a tag can be specified. The default is ‘values’ or, if the \\-o option is given, ‘options’.\n\nThe options \\-1, \\-2, \\-J, \\-V, \\-x are passed to \\_next\\_label.\n\nIf selected by the list-grouped style, strings with the same description will appear together in the list.\n\n\\_describe uses the \\_all\\_labels function to generate the matches, so it does not need to appear inside a loop over tag labels.\n\n\\_description \\[ \\-x \\] \\[ \\-12VJ \\] tag name descr \\[ spec ... \\]\n\nThis function is not to be confused with the previous one; it is used as a helper function for creating options to compadd. It is buried inside many of the higher level completion functions and so often does not need to be called directly.\n\nThe styles listed below are tested in the current context using the given tag. The resulting options for compadd are put into the array named name (this is traditionally ‘expl’, but this convention is not enforced). The description for the corresponding set of matches is passed to the function in descr.\n\nThe styles tested are: format, hidden, matcher, ignore-line, ignored-patterns, group-name and sort. The format style is first tested for the given tag and then for the descriptions tag if no value was found, while the remainder are only tested for the tag given as the first argument. The function also calls \\_setup which tests some more styles.\n\nThe string returned by the format style (if any) will be modified so that the sequence ‘%d’ is replaced by the descr given as the third argument without any leading or trailing white space. If, after removing the white space, the descr is the empty string, the format style will not be used and the options put into the name array will not contain an explanation string to be displayed above the matches.\n\nIf \\_description is called with more than three arguments, the additional specs should be of the form ‘char:str’. These supply escape sequence replacements for the format style: every appearance of ‘%char’ will be replaced by string. If no additional specs are given but the description in descr conforms to a common form then further escape sequences are set for elements of that description. These elements correspond to a default value (‘%o’), the units (‘%m’) range of acceptable values (‘%r’) and the remaining initial part of the description (‘%h’). The form the description takes consists of specifying the units and range in parentheses and the default value in square brackets, for example:\n\n\\_description times expl 'timeout (seconds) (0-60) \\[20\\]'\n\nIt is possible to use zformat conditional expressions when styling these elements. So, for example, to add ‘default:’ as a tag but only when there is a default value to show, the format style might include ‘%(o.default: %o.)’.\n\nIf the \\-x option is given, the description will be passed to compadd using the \\-x option instead of the default \\-X. This means that the description will be displayed even if there are no corresponding matches.\n\nThe options placed in the array name take account of the group-name style, so matches are placed in a separate group where necessary. The group normally has its elements sorted (by passing the option \\-J to compadd), but if an option starting with ‘\\-V’, ‘\\-J’, ‘\\-1’, or ‘\\-2’ is passed to \\_description, that option will be included in the array. Hence it is possible for the completion group to be unsorted by giving the option ‘\\-V’, ‘\\-1V’, or ‘\\-2V’.\n\nIn most cases, the function will be used like this:\n\nlocal expl\n\\_description files expl file\ncompadd \"$expl\\[@\\]\" - \"$files\\[@\\]\"\n\nNote the use of the parameter expl, the hyphen, and the list of matches. Almost all calls to compadd within the completion system use a similar format; this ensures that user-specified styles are correctly passed down to the builtins which implement the internals of completion.\n\n\\_dir\\_list \\[ \\-s sep \\] \\[ \\-S \\]\n\nComplete a list of directory names separated by colons (the same format as $PATH).\n\n\\-s sep\n\nUse sep as separator between items. sep defaults to a colon (‘:’).\n\n\\-S\n\nAdd sep instead of slash (‘/’) as an autoremoveable suffix.\n\n\\_dispatch context string ...\n\nThis sets the current context to context and looks for completion functions to handle this context by hunting through the list of command names or special contexts (as described above for compdef) given as strings. The first completion function to be defined for one of the contexts in the list is used to generate matches. Typically, the last string is \\-default- to cause the function for default completion to be used as a fallback.\n\nThe function sets the parameter $service to the string being tried, and sets the context/command field (the fourth) of the $curcontext parameter to the context given as the first argument.\n\n\\_email\\_addresses \\[ \\-c \\] \\[ \\-n plugin \\]\n\nComplete email addresses. Addresses are provided by plugins.\n\n\\-c\n\nComplete bare localhost@domain.tld addresses, without a name part or a comment. Without this option, RFC822 ‘Firstname Lastname <address\\>’ strings are completed.\n\n\\-n plugin\n\nComplete aliases from plugin.\n\nThe following plugins are available by default: \\_email-ldap (see the filter style), \\_email-local (completes user@hostname Unix addresses), \\_email-mail (completes aliases from ~/.mailrc), \\_email-mush, \\_email-mutt, and \\_email-pine.\n\nAddresses from the \\_email-foo plugin are added under the tag ‘email-foo’.\n\n_Writing plugins_\n\nPlugins are written as separate functions with names starting with ‘\\_email-’. They are invoked with the \\-c option and compadd options. They should either do their own completion or set the $reply array to a list of ‘alias:address’ elements and return 300. New plugins will be picked up and run automatically.\n\n\\_files\n\nThe function \\_files is a wrapper around \\_path\\_files. It supports all of the same functionality, with some enhancements — notably, it respects the list-dirs-first style, and it allows users to override the behaviour of the \\-g and \\-/ options with the file-patterns style. \\_files should therefore be preferred over \\_path\\_files in most cases.\n\nThis function accepts the full set of options allowed by \\_path\\_files, described below.\n\n\\_gnu\\_generic\n\nThis function is a simple wrapper around the \\_arguments function described above. It can be used to determine automatically the long options understood by commands that produce a list when passed the option ‘\\-\\-help’. It is intended to be used as a top-level completion function in its own right. For example, to enable option completion for the commands foo and bar, use\n\ncompdef \\_gnu\\_generic foo bar\n\nafter the call to compinit.\n\nThe completion system as supplied is conservative in its use of this function, since it is important to be sure the command understands the option ‘\\-\\-help’.\n\n\\_guard \\[ options \\] pattern descr\n\nThis function displays descr if pattern matches the string to be completed. It is intended to be used in the action for the specifications passed to \\_arguments and similar functions.\n\nThe return status is zero if the message was displayed and the word to complete is not empty, and non-zero otherwise.\n\nThe pattern may be preceded by any of the options understood by compadd that are passed down from \\_description, namely \\-M, \\-J, \\-V, \\-1, \\-2, \\-n, \\-F and \\-X. All of these options will be ignored. This fits in conveniently with the argument-passing conventions of actions for \\_arguments.\n\nAs an example, consider a command taking the options \\-n and \\-none, where \\-n must be followed by a numeric value in the same word. By using:\n\n\\_arguments '-n-: :\\_guard \"\\[0-9\\]#\" \"numeric value\"' '-none'\n\n\\_arguments can be made to both display the message ‘numeric value’ and complete options after ‘\\-n<TAB>’. If the ‘\\-n’ is already followed by one or more digits (the pattern passed to \\_guard) only the message will be displayed; if the ‘\\-n’ is followed by another character, only options are completed.\n\n\\_message \\[ \\-r12 \\] \\[ \\-VJ group \\] descr\n\n\\_message -e \\[ tag \\] descr\n\nThe descr is used in the same way as the third argument to the \\_description function, except that the resulting string will always be shown whether or not matches were generated. This is useful for displaying a help message in places where no completions can be generated.\n\nThe format style is examined with the messages tag to find a message; the usual tag, descriptions, is used only if the style is not set with the former.\n\nIf the \\-r option is given, no style is used; the descr is taken literally as the string to display. This is most useful when the descr comes from a pre-processed argument list which already contains an expanded description. Note that this option does not disable the ‘%’-sequence parsing done by compadd.\n\nThe \\-12VJ options and the group are passed to compadd and hence determine the group the message string is added to.\n\nThe second \\-e form gives a description for completions with the tag tag to be shown even if there are no matches for that tag. This form is called by \\_arguments in the event that there is no action for an option specification. The tag can be omitted and if so the tag is taken from the parameter $curtag; this is maintained by the completion system and so is usually correct. Note that if there are no matches at the time this function is called, compstate\\[insert\\] is cleared, so additional matches generated later are not inserted on the command line.\n\n\\_multi\\_parts \\[ \\-i \\] sep array\n\nThe argument sep is a separator character. The array may be either the name of an array parameter or a literal array in the form ‘(foo bar)’, a parenthesised list of words separated by whitespace. The possible completions are the strings from the array. However, each chunk delimited by sep will be completed separately. For example, the \\_tar function uses ‘\\_multi\\_parts / patharray’ to complete partial file paths from the given array of complete file paths.\n\nThe \\-i option causes \\_multi\\_parts to insert a unique match even if that requires multiple separators to be inserted. This is not usually the expected behaviour with filenames, but certain other types of completion, for example those with a fixed set of possibilities, may be more suited to this form.\n\nLike other utility functions, this function accepts the ‘\\-V’, ‘\\-J’, ‘\\-1’, ‘\\-2’, ‘\\-n’, ‘\\-f’, ‘\\-X’, ‘\\-M’, ‘\\-P’, ‘\\-S’, ‘\\-r’, ‘\\-R’, and ‘\\-q’ options and passes them to the compadd builtin.\n\n\\_next\\_label \\[ \\-x \\] \\[ \\-12VJ \\] tag name descr \\[ option ... \\]\n\nThis function is used to implement the loop over different tag labels for a particular tag as described above for the tag-order style. On each call it checks to see if there are any more tag labels; if there is it returns status zero, otherwise non-zero. As this function requires a current tag to be set, it must always follow a call to \\_tags or \\_requested.\n\nThe \\-x12VJ options and the first three arguments are passed to the \\_description function. Where appropriate the tag will be replaced by a tag label in this call. Any description given in the tag-order style is preferred to the descr passed to \\_next\\_label.\n\nThe options given after the descr are set in the parameter given by name, and hence are to be passed to compadd or whatever function is called to add the matches.\n\nHere is a typical use of this function for the tag foo. The call to \\_requested determines if tag foo is required at all; the loop over \\_next\\_label handles any labels defined for the tag in the tag-order style.\n\nlocal expl ret=1\n...\nif \\_requested foo; then\n  ...\n  while \\_next\\_label foo expl '...'; do\n    compadd \"$expl\\[@\\]\" ... && ret=0\n  done\n  ...\nfi\nreturn ret\n\n\\_normal \\[ \\-P | \\-p precommand \\]\n\nThis is the standard function called to handle completion outside any special \\-context\\-. It is called both to complete the command word and also the arguments for a command. In the second case, \\_normal looks for a special completion for that command, and if there is none it uses the completion for the \\-default- context.\n\nA second use is to reexamine the command line specified by the $words array and the $CURRENT parameter after those have been modified. For example, the function \\_precommand, which completes after precommand specifiers such as nohup, removes the first word from the words array, decrements the CURRENT parameter, then calls ‘\\_normal -p $service’. The effect is that ‘nohup cmd ...’ is treated in the same way as ‘cmd ...’.\n\n\\-P\n\nReset the list of precommands. This option should be used if completing a command line which allows internal commands (e.g. builtins and functions) regardless of prior precommands (e.g. ‘zsh -c’).\n\n\\-p precommand\n\nAppend precommand to the list of precommands. This option should be used in nearly all cases in which \\-P is not applicable.\n\nIf the command name matches one of the patterns given by one of the options \\-p or \\-P to compdef, the corresponding completion function is called and then the parameter \\_compskip is checked. If it is set completion is terminated at that point even if no matches have been found. This is the same effect as in the \\-first- context.\n\n\\_numbers \\[ option ... \\] \\[ description \\] \\[ suffix ... \\]\n\nThis can be used where a number is followed by a suffix to indicate the units. The unit suffixes are completed and can also be included in the description used when completion is invoked for the preceding number.\n\nIn addition to common compadd options, \\_numbers accepts the following options:\n\n\\-t tag\n\nSpecify a tag to use instead of the default of numbers.\n\n\\-u units\n\nIndicate the default units for the number, e.g. bytes.\n\n\\-l min\n\nSpecify the lowest possible value for the number.\n\n\\-m max\n\nSpecify the highest possible value for the number.\n\n\\-d default\n\nSpecify the default value.\n\n\\-N\n\nAllow negative numbers. This is implied if the range includes a negative.\n\n\\-f\n\nAllow decimal numbers.\n\nWhere a particular suffix represents the default units for a number, it should be prefixed with a colon. Additionally, suffixes can be followed by a colon and a description. So for example, the following allows the age of something to be specified, either in seconds or with an optional suffix with a longer unit of time:\n\n\\_numbers -u seconds age :s:seconds m:minutes h:hours d:days\n\nIt is typically helpful for units to be presented in order of magnitude when completed. To facilitate this, the order in which they are given is preserved.\n\nWhen the format style is looked up with the descriptions tag or the tag specified with \\-t, the list of suffixes is available as a ‘%x’ escape sequence. This is in addition to the usual sequences documented under the format style. The form this list takes can also be configured. To this end, the format style is first looked up with the tag unit-suffixes. The retrieved format is applied to each suffix in turn and the results are then concatenated to form the completed list. For the unit-suffixes format, ‘%x’ expands to the individual suffix and ‘%X’ to its description. %d’ indicates a default suffix and can be used in a condition. The index and reverse index are set in ‘%i’ and ‘%r’ respectively and are useful for text included only with the first and last suffixes in the list. So for example, the following joins the suffixes together as a comma-separated list:\n\nzstyle ':completion:\\*:unit-suffixes' format '%x%(r::,)'\n\n\\_options\n\nThis can be used to complete the names of shell options. It provides a matcher specification that ignores a leading ‘no’, ignores underscores and allows upper-case letters to match their lower-case counterparts (for example, ‘glob’, ‘noglob’, ‘NO\\_GLOB’ are all completed). Any arguments are propagated to the compadd builtin.\n\n\\_options\\_set and \\_options\\_unset\n\nThese functions complete only set or unset options, with the same matching specification used in the \\_options function.\n\nNote that you need to uncomment a few lines in the \\_main\\_complete function for these functions to work properly. The lines in question are used to store the option settings in effect before the completion widget locally sets the options it needs. Hence these functions are not generally used by the completion system.\n\n\\_parameters\n\nThis is used to complete the names of shell parameters.\n\nThe option ‘\\-g pattern’ limits the completion to parameters whose type matches the pattern. The type of a parameter is that shown by ‘print ${(t)param}’, hence judicious use of ‘\\*’ in pattern is probably necessary.\n\nAll other arguments are passed to the compadd builtin.\n\n\\_path\\_files\n\nThis function is used throughout the completion system to complete filenames. It allows completion of partial paths. For example, the string ‘/u/i/s/sig’ may be completed to ‘/usr/include/sys/signal.h’.\n\nThe options accepted by both \\_path\\_files and \\_files are:\n\n\\-f\n\nComplete all filenames. This is the default.\n\n\\-/\n\nSpecifies that only directories should be completed.\n\n\\-g pattern\n\nSpecifies that only files matching the pattern should be completed.\n\n\\-W paths\n\nSpecifies path prefixes that are to be prepended to the string from the command line to generate the filenames but that should not be inserted as completions nor shown in completion listings. Here, paths may be the name of an array parameter, a literal list of paths enclosed in parentheses or an absolute pathname.\n\n\\-F ignored-files\n\nThis behaves as for the corresponding option to the compadd builtin. It gives direct control over which filenames should be ignored. If the option is not present, the ignored-patterns style is used.\n\nBoth \\_path\\_files and \\_files also accept the following options which are passed to compadd: ‘\\-J’, ‘\\-V’, ‘\\-1’, ‘\\-2’, ‘\\-n’, ‘\\-X’, ‘\\-M’, ‘\\-P’, ‘\\-S’, ‘\\-q’, ‘\\-r’, and ‘\\-R’.\n\nFinally, the \\_path\\_files function uses the styles expand, ambiguous, special-dirs, list-suffixes and file-sort described above.\n\n\\_pick\\_variant \\[ \\-b builtin-label \\] \\[ \\-c command \\] \\[ \\-r name \\]\n\n              label\\=pattern ... label \\[ arg ... \\]\n\nThis function is used to resolve situations where a single command name requires more than one type of handling, either because it has more than one variant or because there is a name clash between two different commands.\n\nThe command to run is taken from the first element of the array words unless this is overridden by the option \\-c. This command is run and its output is compared with a series of patterns. Arguments to be passed to the command can be specified at the end after all the other arguments. The patterns to try in order are given by the arguments label\\=pattern; if the output of ‘command arg ...’ contains pattern, then label is selected as the label for the command variant. If none of the patterns match, the final command label is selected and status 1 is returned.\n\nIf the ‘\\-b builtin-label’ is given, the command is tested to see if it is provided as a shell builtin, possibly autoloaded; if so, the label builtin-label is selected as the label for the variant.\n\nIf the ‘\\-r name’ is given, the label picked is stored in the parameter named name.\n\nThe results are also cached in the \\_cmd\\_variant associative array indexed by the name of the command run.\n\n\\_regex\\_arguments name spec ...\n\nThis function generates a completion function name which matches the specifications specs, a set of regular expressions as described below. After running \\_regex\\_arguments, the function name should be called as a normal completion function. The pattern to be matched is given by the contents of the words array up to the current cursor position joined together with null characters; no quotation is applied.\n\nThe arguments are grouped as sets of alternatives separated by ‘|’, which are tried one after the other until one matches. Each alternative consists of a one or more specifications which are tried left to right, with each pattern matched being stripped in turn from the command line being tested, until all of the group succeeds or until one fails; in the latter case, the next alternative is tried. This structure can be repeated to arbitrary depth by using parentheses; matching proceeds from inside to outside.\n\nA special procedure is applied if no test succeeds but the remaining command line string contains no null character (implying the remaining word is the one for which completions are to be generated). The completion target is restricted to the remaining word and any actions for the corresponding patterns are executed. In this case, nothing is stripped from the command line string. The order of evaluation of the actions can be determined by the tag-order style; the various formats supported by \\_alternative can be used in action. The descr is used for setting up the array parameter expl.\n\nSpecification arguments take one of following forms, in which metacharacters such as ‘(’, ‘)’, ‘#’ and ‘|’ should be quoted.\n\n/pattern/ \\[%lookahead%\\] \\[\\-guard\\] \\[:tag:descr:action\\]\n\nThis is a single primitive component. The function tests whether the combined pattern ‘(#b)((#B)pattern)lookahead\\*’ matches the command line string. If so, ‘guard’ is evaluated and its return status is examined to determine if the test has succeeded. The pattern string ‘\\[\\]’ is guaranteed never to match. The lookahead is not stripped from the command line before the next pattern is examined.\n\nThe argument starting with : is used in the same manner as an argument to \\_alternative.\n\nA component is used as follows: pattern is tested to see if the component already exists on the command line. If it does, any following specifications are examined to find something to complete. If a component is reached but no such pattern exists yet on the command line, the string containing the action is used to generate matches to insert at that point.\n\n/pattern/+ \\[%lookahead%\\] \\[\\-guard\\] \\[:tag:descr:action\\]\n\nThis is similar to ‘/pattern/ ...’ but the left part of the command line string (i.e. the part already matched by previous patterns) is also considered part of the completion target.\n\n/pattern/- \\[%lookahead%\\] \\[\\-guard\\] \\[:tag:descr:action\\]\n\nThis is similar to ‘/pattern/ ...’ but the actions of the current and previously matched patterns are ignored even if the following ‘pattern’ matches the empty string.\n\n( spec )\n\nParentheses may be used to groups specs; note each parenthesis is a single argument to \\_regex\\_arguments.\n\nspec #\n\nThis allows any number of repetitions of spec.\n\nspec spec\n\nThe two specs are to be matched one after the other as described above.\n\nspec | spec\n\nEither of the two specs can be matched.\n\nThe function \\_regex\\_words can be used as a helper function to generate matches for a set of alternative words possibly with their own arguments as a command line argument.\n\nExamples:\n\n\\_regex\\_arguments \\_tst /$'\\[^\\\\0\\]#\\\\0'/ \\\\ \n    /$'\\[^\\\\0\\]#\\\\0'/ :'compadd aaa'\n\nThis generates a function \\_tst that completes aaa as its only argument. The tag and description for the action have been omitted for brevity (this works but is not recommended in normal use). The first component matches the command word, which is arbitrary; the second matches any argument. As the argument is also arbitrary, any following component would not depend on aaa being present.\n\n\\_regex\\_arguments \\_tst /$'\\[^\\\\0\\]#\\\\0'/ \\\\ \n    /$'aaa\\\\0'/ :'compadd aaa'\n\nThis is a more typical use; it is similar, but any following patterns would only match if aaa was present as the first argument.\n\n\\_regex\\_arguments \\_tst /$'\\[^\\\\0\\]#\\\\0'/ \\\\( \\\\ \n    /$'aaa\\\\0'/ :'compadd aaa' \\\\ \n    /$'bbb\\\\0'/ :'compadd bbb' \\\\) \\\\#\n\nIn this example, an indefinite number of command arguments may be completed. Odd arguments are completed as aaa and even arguments as bbb. Completion fails unless the set of aaa and bbb arguments before the current one is matched correctly.\n\n\\_regex\\_arguments \\_tst /$'\\[^\\\\0\\]#\\\\0'/ \\\\ \n    \\\\( /$'aaa\\\\0'/ :'compadd aaa' \\\\| \\\\ \n    /$'bbb\\\\0'/ :'compadd bbb' \\\\) \\\\#\n\nThis is similar, but either aaa or bbb may be completed for any argument. In this case \\_regex\\_words could be used to generate a suitable expression for the arguments.\n\n\\_regex\\_words tag description spec ...\n\nThis function can be used to generate arguments for the \\_regex\\_arguments command which may be inserted at any point where a set of rules is expected. The tag and description give a standard tag and description pertaining to the current context. Each spec contains two or three arguments separated by a colon: note that there is no leading colon in this case.\n\nEach spec gives one of a set of words that may be completed at this point, together with arguments. It is thus roughly equivalent to the \\_arguments function when used in normal (non-regex) completion.\n\nThe part of the spec before the first colon is the word to be completed. This may contain a \\*; the entire word, before and after the \\* is completed, but only the text before the \\* is required for the context to be matched, so that further arguments may be completed after the abbreviated form.\n\nThe second part of spec is a description for the word being completed.\n\nThe optional third part of the spec describes how words following the one being completed are themselves to be completed. It will be evaluated in order to avoid problems with quoting. This means that typically it contains a reference to an array containing previously generated regex arguments.\n\nThe option \\-t term specifies a terminator for the word instead of the usual space. This is handled as an auto-removable suffix in the manner of the option \\-s sep to \\_values.\n\nThe result of the processing by \\_regex\\_words is placed in the array reply, which should be made local to the calling function. If the set of words and arguments may be matched repeatedly, a # should be appended to the generated array at that point.\n\nFor example:\n\nlocal -a reply\n\\_regex\\_words mydb-commands 'mydb commands' \\\\ \n  'add:add an entry to mydb:$mydb\\_add\\_cmds' \\\\ \n  'show:show entries in mydb'\n\\_regex\\_arguments \\_mydb \"$reply\\[@\\]\"\n\\_mydb \"$@\"\n\nThis shows a completion function for a command mydb which takes two command arguments, add and show. show takes no arguments, while the arguments for add have already been prepared in an array mydb\\_add\\_cmds, quite possibly by a previous call to \\_regex\\_words.\n\n\\_requested \\[ \\-x \\] \\[ \\-12VJ \\] tag \\[ name descr \\[ command \\[ arg ... \\] \\]\n\nThis function is called to decide whether a tag already registered by a call to \\_tags (see below) has been requested by the user and hence completion should be performed for it. It returns status zero if the tag is requested and non-zero otherwise. The function is typically used as part of a loop over different tags as follows:\n\n\\_tags foo bar baz\nwhile \\_tags; do\n  if \\_requested foo; then\n    ... # perform completion for foo\n  fi\n  ... # test the tags bar and baz in the same way\n  ... # exit loop if matches were generated\ndone\n\nNote that the test for whether matches were generated is not performed until the end of the \\_tags loop. This is so that the user can set the tag-order style to specify a set of tags to be completed at the same time.\n\nIf name and descr are given, \\_requested calls the \\_description function with these arguments together with the options passed to \\_requested.\n\nIf command is given, the \\_all\\_labels function will be called immediately with the same arguments. In simple cases this makes it possible to perform the test for the tag and the matching in one go. For example:\n\nlocal expl ret=1\n\\_tags foo bar baz\nwhile \\_tags; do\n  \\_requested foo expl 'description' \\\\ \n      compadd foobar foobaz && ret=0\n  ...\n  (( ret )) || break\ndone\n\nIf the command is not compadd, it must nevertheless be prepared to handle the same options.\n\n\\_retrieve\\_cache cache\\_identifier\n\nThis function retrieves completion information from the file given by cache\\_identifier, stored in a directory specified by the cache-path style which defaults to ~/.zcompcache. The return status is zero if retrieval was successful. It will only attempt retrieval if the use-cache style is set, so you can call this function without worrying about whether the user wanted to use the caching layer.\n\nSee \\_store\\_cache below for more details.\n\n\\_sep\\_parts\n\nThis function is passed alternating arrays and separators as arguments. The arrays specify completions for parts of strings to be separated by the separators. The arrays may be the names of array parameters or a quoted list of words in parentheses. For example, with the array ‘hosts=(ftp news)’ the call ‘\\_sep\\_parts ’(foo bar)’ @ hosts’ will complete the string ‘f’ to ‘foo’ and the string ‘b@n’ to ‘bar@news’.\n\nThis function accepts the compadd options ‘\\-V’, ‘\\-J’, ‘\\-1’, ‘\\-2’, ‘\\-n’, ‘\\-X’, ‘\\-M’, ‘\\-P’, ‘\\-S’, ‘\\-r’, ‘\\-R’, and ‘\\-q’ and passes them on to the compadd builtin used to add the matches.\n\n\\_sequence \\[ \\-s sep \\] \\[ \\-n max \\] \\[ \\-d \\] function \\[ \\- \\] ...\n\nThis function is a wrapper to other functions for completing items in a separated list. The same function is used to complete each item in the list. The separator is specified with the \\-s option. If \\-s is omitted it will use ‘,’. Duplicate values are not matched unless \\-d is specified. If there is a fixed or maximum number of items in the list, this can be specified with the \\-n option.\n\nCommon compadd options are passed on to the function. It is possible to use compadd directly with \\_sequence, though \\_values may be more appropriate in this situation.\n\n\\_setup tag \\[ group \\]\n\nThis function sets up the special parameters used by the completion system appropriately for the tag given as the first argument. It uses the styles list-colors, list-packed, list-rows-first, last-prompt, accept-exact, menu and force-list.\n\nThe optional group supplies the name of the group in which the matches will be placed. If it is not given, the tag is used as the group name.\n\nThis function is called automatically from \\_description and hence is not normally called explicitly.\n\n\\_store\\_cache cache\\_identifier param ...\n\nThis function, together with \\_retrieve\\_cache and \\_cache\\_invalid, implements a caching layer which can be used in any completion function. Data obtained by costly operations are stored in parameters; this function then dumps the values of those parameters to a file. The data can then be retrieved quickly from that file via \\_retrieve\\_cache, even in different instances of the shell.\n\nThe cache\\_identifier specifies the file which the data should be dumped to. The file is stored in a directory specified by the cache-path style which defaults to ~/.zcompcache. The remaining params arguments are the parameters to dump to the file.\n\nThe return status is zero if storage was successful. The function will only attempt storage if the use-cache style is set, so you can call this function without worrying about whether the user wanted to use the caching layer.\n\nThe completion function may avoid calling \\_retrieve\\_cache when it already has the completion data available as parameters. However, in that case it should call \\_cache\\_invalid to check whether the data in the parameters and in the cache are still valid.\n\nSee the \\_perl\\_modules completion function for a simple example of the usage of the caching layer.\n\n\\_tags \\[ \\[ \\-C name \\] tag ... \\]\n\nIf called with arguments, these are taken to be the names of tags valid for completions in the current context. These tags are stored internally and sorted by using the tag-order style.\n\nNext, \\_tags is called repeatedly without arguments from the same completion function. This successively selects the first, second, etc. set of tags requested by the user. The return status is zero if at least one of the tags is requested and non-zero otherwise. To test if a particular tag is to be tried, the \\_requested function should be called (see above).\n\nIf ‘\\-C name’ is given, name is temporarily stored in the argument field (the fifth) of the context in the curcontext parameter during the call to \\_tags; the field is restored on exit. This allows \\_tags to use a more specific context without having to change and reset the curcontext parameter (which has the same effect).\n\n\\_tilde\\_files\n\nLike \\_files, but resolve leading tildes according to the rules of filename expansion, so the suggested completions don’t start with a ‘~’ even if the filename on the command-line does.\n\n\\_values \\[ \\-O name \\] \\[ \\-s sep \\] \\[ \\-S sep \\] \\[ \\-wC \\] desc spec ...\n\nThis is used to complete arbitrary keywords (values) and their arguments, or lists of such combinations.\n\nIf the first argument is the option ‘\\-O name’, it will be used in the same way as by the \\_arguments function. In other words, the elements of the name array will be passed to compadd when executing an action.\n\nIf the first argument (or the first argument after ‘\\-O name’) is ‘\\-s’, the next argument is used as the character that separates multiple values. This character is automatically added after each value in an auto-removable fashion (see below); all values completed by ‘\\_values -s’ appear in the same word on the command line, unlike completion using \\_arguments. If this option is not present, only a single value will be completed per word.\n\nNormally, \\_values will only use the current word to determine which values are already present on the command line and hence are not to be completed again. If the \\-w option is given, other arguments are examined as well.\n\nThe first non-option argument, desc, is used as a string to print as a description before listing the values.\n\nAll other arguments describe the possible values and their arguments in the same format used for the description of options by the \\_arguments function (see above). The only differences are that no minus or plus sign is required at the beginning, values can have only one argument, and the forms of action beginning with an equal sign are not supported.\n\nThe character separating a value from its argument can be set using the option \\-S (like \\-s, followed by the character to use as the separator in the next argument). By default the equals sign will be used as the separator between values and arguments.\n\nExample:\n\n\\_values -s , 'description' \\\\ \n        '\\*foo\\[bar\\]' \\\\ \n        '(two)\\*one\\[number\\]:first count:' \\\\ \n        'two\\[another number\\]::second count:(1 2 3)'\n\nThis describes three possible values: ‘foo’, ‘one’, and ‘two’. The first is described as ‘bar’, takes no argument and may appear more than once. The second is described as ‘number’, may appear more than once, and takes one mandatory argument described as ‘first count’; no action is specified, so it will not be completed. The ‘(two)’ at the beginning says that if the value ‘one’ is on the line, the value ‘two’ will no longer be considered a possible completion. Finally, the last value (‘two’) is described as ‘another number’ and takes an optional argument described as ‘second count’ for which the completions (to appear after an ‘\\=’) are ‘1’, ‘2’, and ‘3’. The \\_values function will complete lists of these values separated by commas.\n\nLike \\_arguments, this function temporarily adds another context name component to the arguments element (the fifth) of the current context while executing the action. Here this name is just the name of the value for which the argument is completed.\n\nThe style verbose is used to decide if the descriptions for the values (but not those for the arguments) should be printed.\n\nThe associative array val\\_args is used to report values and their arguments; this works similarly to the opt\\_args associative array used by \\_arguments. Hence the function calling \\_values should declare the local parameters state, state\\_descr, line, context and val\\_args:\n\nlocal context state state\\_descr line\ntypeset -A val\\_args\n\nwhen using an action of the form ‘\\->string’. With this function the context parameter will be set to the name of the value whose argument is to be completed. Note that for \\_values, the state and state\\_descr are scalars rather than arrays. Only a single matching state is returned.\n\nNote also that \\_values normally adds the character used as the separator between values as an auto-removable suffix (similar to a ‘/’ after a directory). However, this is not possible for a ‘\\->string’ action as the matches for the argument are generated by the calling function. To get the usual behaviour, the calling function can add the separator x as a suffix by passing the options ‘\\-qS x’ either directly or indirectly to compadd.\n\nThe option \\-C is treated in the same way as it is by \\_arguments. In that case the parameter curcontext should be made local instead of context (as described above).\n\n\\_wanted \\[ \\-x \\] \\[ \\-C name \\] \\[ \\-12VJ \\] tag name descr command \\[ arg ...\\]\n\nIn many contexts, completion can only generate one particular set of matches, usually corresponding to a single tag. However, it is still necessary to decide whether the user requires matches of this type. This function is useful in such a case.\n\nThe arguments to \\_wanted are the same as those to \\_requested, i.e. arguments to be passed to \\_description. However, in this case the command is not optional; all the processing of tags, including the loop over both tags and tag labels and the generation of matches, is carried out automatically by \\_wanted.\n\nHence to offer only one tag and immediately add the corresponding matches with the given description:\n\nlocal expl\n\\_wanted tag expl 'description' \\\\ \n    compadd -- match1 match2...\n\nSee also the use of \\_wanted in the example function in [Dynamic named directories](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Dynamic-named-directories).\n\nNote that, as for \\_requested, the command must be able to accept options to be passed down to compadd.\n\nLike \\_tags this function supports the \\-C option to give a different name for the argument context field. The \\-x option has the same meaning as for \\_description.\n\n\\_widgets \\[ \\-g pattern \\]\n\nThis function completes names of zle widgets (see [Zle Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Widgets)). The pattern, if present, is matched against values of the $widgets special parameter, documented in [The zsh/zleparameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzleparameter-Module).\n\n* * *\n\n## 20.7 Completion System Variables\n\nThere are some standard variables, initialised by the \\_main\\_complete function and then used from other functions.\n\nThe standard variables are:\n\n\\_comp\\_caller\\_options\n\nThe completion system uses setopt to set a number of options. This allows functions to be written without concern for compatibility with every possible combination of user options. However, sometimes completion needs to know what the user’s option preferences are. These are saved in the \\_comp\\_caller\\_options associative array. Option names, spelled in lowercase without underscores, are mapped to one or other of the strings ‘on’ and ‘off’.\n\n\\_comp\\_priv\\_prefix\n\nCompletion functions such as \\_sudo can set the \\_comp\\_priv\\_prefix array to a command prefix that may then be used by \\_call\\_program to match the privileges when calling programs to generate matches.\n\nTwo more features are offered by the \\_main\\_complete function. The arrays compprefuncs and comppostfuncs may contain names of functions that are to be called immediately before or after completion has been tried. A function will only be called once unless it explicitly reinserts itself into the array.\n\n* * *\n\n## 20.8 Completion Directories\n\nIn the source distribution, the files are contained in various subdirectories of the Completion directory. They may have been installed in the same structure, or into one single function directory. The following is a description of the files found in the original directory structure. If you wish to alter an installed file, you will need to copy it to some directory which appears earlier in your fpath than the standard directory where it appears.\n\nBase\n\nThe core functions and special completion widgets automatically bound to keys. You will certainly need most of these, though will probably not need to alter them. Many of these are documented above.\n\nZsh\n\nFunctions for completing arguments of shell builtin commands and utility functions for this. Some of these are also used by functions from the Unix directory.\n\nUnix\n\nFunctions for completing arguments of external commands and suites of commands. They may need modifying for your system, although in many cases some attempt is made to decide which version of a command is present. For example, completion for the mount command tries to determine the system it is running on, while completion for many other utilities try to decide whether the GNU version of the command is in use, and hence whether the \\-\\-help option is supported.\n\nX, AIX, BSD, ...\n\nCompletion and utility function for commands available only on some systems. These are not arranged hierarchically, so, for example, both the Linux and Debian directories, as well as the X directory, may be useful on your system.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 520,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-System-html-Completion-System-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-System-html-Completion-System-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-System-html-Completion-System-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-System-html-Completion-System-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-Completion-System-html-Completion-System-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 229497,
      "readableText": 277946,
      "none": 303059,
      "readableTextIfPossible": 277946,
      "result": 277946,
      "markdown": 214329
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/index.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/index.html#Top",
    "loadedTime": "2025-05-08T06:51:55.132Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Function-System",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/index.html#Top",
    "title": "zsh: The Z Shell Manual",
    "description": "zsh: The Z Shell Manual",
    "author": null,
    "keywords": "zsh: The Z Shell Manual",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:54 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-8190\"",
      "expires": "Thu, 08 May 2025 06:52:52 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "HIT",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c708044e5f36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: The Z Shell Manual\nVersion 5.9\nUpdated May 14, 2022\nOriginal documentation by Paul Falstad \nThis is a texinfo version of the documentation for the Z Shell, originally by Paul Falstad. \nPermission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies. \nPermission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided also that the entire resulting derived work is distributed under the terms of a permission notice identical to this one. \nPermission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions. \nThe Z Shell Manual\nThis Info file documents Zsh, a freely available UNIX command interpreter (shell), which of the standard shells most closely resembles the Korn shell (ksh), although it is not completely compatible. Zsh is able to emulate POSIX shells, but its default mode is not POSIX compatible, either. \nVersion 5.9, last updated May 14, 2022. \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-index-html-Top-i0voqh.html",
  "markdown": "# zsh: The Z Shell Manual\n\n### Version 5.9\n\n### Updated May 14, 2022\n\n**Original documentation by Paul Falstad**\n\nThis is a texinfo version of the documentation for the Z Shell, originally by Paul Falstad.\n\nPermission is granted to make and distribute verbatim copies of this manual provided the copyright notice and this permission notice are preserved on all copies.\n\nPermission is granted to copy and distribute modified versions of this manual under the conditions for verbatim copying, provided also that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.\n\nPermission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions.\n\n* * *\n\n## The Z Shell Manual\n\nThis Info file documents Zsh, a freely available UNIX command interpreter (shell), which of the standard shells most closely resembles the Korn shell (ksh), although it is not completely compatible. Zsh is able to emulate POSIX shells, but its default mode is not POSIX compatible, either.\n\nVersion 5.9, last updated May 14, 2022.\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 160,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-index-html-Top-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-index-html-Top-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-index-html-Top-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-index-html-Top-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-index-html-Top-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 1436,
      "readableText": 1642,
      "none": 31487,
      "readableTextIfPossible": 31487,
      "result": 1642,
      "markdown": 1287
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_15.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_15.html#index_split-14_fn_letter-V",
    "loadedTime": "2025-05-08T06:51:58.034Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Functions-Index.html#Functions-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_15.html#index_split-14_fn_letter-V",
    "title": "zsh: Functions Index: V – Z",
    "description": "zsh: Functions Index: V – Z",
    "author": null,
    "keywords": "zsh: Functions Index: V – Z",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:57 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-79d8\"",
      "expires": "Thu, 08 May 2025 06:52:57 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70810ccf736d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Functions Index: V – Z\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-15-html-index-split-14-fn-letter-V-03lvu.html",
  "markdown": "# zsh: Functions Index: V – Z\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 250,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-15-html-index-split-14-fn-letter-V-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-15-html-index-split-14-fn-letter-V-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-15-html-index-split-14-fn-letter-V-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-15-html-index-split-14-fn-letter-V-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-15-html-index-split-14-fn-letter-V-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 28237,
      "readableText": 355,
      "none": 29550,
      "readableTextIfPossible": 29550,
      "result": 355,
      "markdown": 180
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_9.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_9.html#index_split-8",
    "loadedTime": "2025-05-08T06:51:58.034Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Options-Index.html#Options-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_9.html#index_split-8",
    "title": "zsh: Options Index: D – I",
    "description": "zsh: Options Index: D – I",
    "author": null,
    "keywords": "zsh: Options Index: D – I",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:57 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-840f\"",
      "expires": "Thu, 08 May 2025 06:52:56 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7080f3c2a36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Options Index: D – I\nIndex Entry Section D DEBUGBEFORECMD 16.2.9 Scripts and Functions DEBUG_BEFORE_CMD 16.2.9 Scripts and Functions DOTGLOB 16.3 Option Aliases DOT_GLOB 16.3 Option Aliases DVORAK 16.2.6 Input/Output E EMACS 16.2.12 Zle EQUALS 16.2.3 Expansion and Globbing ERREXIT 16.2.9 Scripts and Functions ERRRETURN 16.2.9 Scripts and Functions ERR_EXIT 16.2.9 Scripts and Functions ERR_RETURN 16.2.9 Scripts and Functions EVALLINENO 16.2.9 Scripts and Functions EVAL_LINENO 16.2.9 Scripts and Functions EXEC 16.2.9 Scripts and Functions EXTENDEDGLOB 16.2.3 Expansion and Globbing EXTENDEDHISTORY 16.2.4 History EXTENDED_GLOB 16.2.3 Expansion and Globbing EXTENDED_GLOB, enable 14.3.1 Parameter Expansion Flags EXTENDED_GLOB, use of 14.8 Filename Generation EXTENDED_HISTORY 16.2.4 History F FLOWCONTROL 16.2.6 Input/Output FLOW_CONTROL 16.2.6 Input/Output FORCEFLOAT 16.2.3 Expansion and Globbing FORCE_FLOAT 16.2.3 Expansion and Globbing FUNCTIONARGZERO 16.2.9 Scripts and Functions FUNCTION_ARGZERO 16.2.9 Scripts and Functions G GLOB 16.2.3 Expansion and Globbing GLOB, use of 14.8 Filename Generation GLOBALEXPORT 16.2.5 Initialisation GLOBALRCS 16.2.5 Initialisation GLOBAL_EXPORT 16.2.5 Initialisation GLOBAL_RCS 16.2.5 Initialisation GLOBAL_RCS, use of 5.1 Startup/Shutdown Files GLOBASSIGN 16.2.3 Expansion and Globbing GLOBCOMPLETE 16.2.2 Completion GLOBDOTS 16.2.3 Expansion and Globbing GLOBSTARSHORT 16.2.3 Expansion and Globbing GLOBSUBST 16.2.3 Expansion and Globbing GLOB_ASSIGN 16.2.3 Expansion and Globbing GLOB_COMPLETE 16.2.2 Completion GLOB_DOTS 16.2.3 Expansion and Globbing GLOB_DOTS, setting in pattern 14.8.7 Glob Qualifiers GLOB_DOTS, use of 14.8 Filename Generation GLOB_STAR_SHORT 16.2.3 Expansion and Globbing GLOB_SUBST 16.2.3 Expansion and Globbing GLOB_SUBST, toggle 14.3 Parameter Expansion H HASHALL 16.3 Option Aliases HASHCMDS 16.2.6 Input/Output HASHDIRS 16.2.6 Input/Output HASHEXECUTABLESONLY 16.2.6 Input/Output HASHLISTALL 16.2.2 Completion HASH_ALL 16.3 Option Aliases HASH_CMDS 16.2.6 Input/Output HASH_DIRS 16.2.6 Input/Output HASH_EXECUTABLES_ONLY 16.2.6 Input/Output HASH_LIST_ALL 16.2.2 Completion HISTALLOWCLOBBER 16.2.4 History HISTAPPEND 16.3 Option Aliases HISTBEEP 16.2.4 History HISTEXPAND 16.3 Option Aliases HISTEXPIREDUPSFIRST 16.2.4 History HISTFCNTLLOCK 16.2.4 History HISTFINDNODUPS 16.2.4 History HISTIGNOREALLDUPS 16.2.4 History HISTIGNOREDUPS 16.2.4 History HISTIGNORESPACE 16.2.4 History HISTLEXWORDS 16.2.4 History HISTNOFUNCTIONS 16.2.4 History HISTNOSTORE 16.2.4 History HISTREDUCEBLANKS 16.2.4 History HISTSAVEBYCOPY 16.2.4 History HISTSAVENODUPS 16.2.4 History HISTSUBSTPATTERN 16.2.3 Expansion and Globbing HISTVERIFY 16.2.4 History HIST_ALLOW_CLOBBER 16.2.4 History HIST_APPEND 16.3 Option Aliases HIST_BEEP 16.2.4 History HIST_EXPAND 16.3 Option Aliases HIST_EXPIRE_DUPS_FIRST 16.2.4 History HIST_FCNTL_LOCK 16.2.4 History HIST_FIND_NO_DUPS 16.2.4 History HIST_IGNORE_ALL_DUPS 16.2.4 History HIST_IGNORE_DUPS 16.2.4 History HIST_IGNORE_SPACE 16.2.4 History HIST_LEX_WORDS 16.2.4 History HIST_NO_FUNCTIONS 16.2.4 History HIST_NO_STORE 16.2.4 History HIST_REDUCE_BLANKS 16.2.4 History HIST_SAVE_BY_COPY 16.2.4 History HIST_SAVE_NO_DUPS 16.2.4 History HIST_SUBST_PATTERN 16.2.3 Expansion and Globbing HIST_VERIFY 16.2.4 History HUP 16.2.7 Job Control HUP, use of 10.1 Jobs I IGNOREBRACES 16.2.3 Expansion and Globbing IGNORECLOSEBRACES 16.2.3 Expansion and Globbing IGNOREEOF 16.2.6 Input/Output IGNORE_BRACES 16.2.3 Expansion and Globbing IGNORE_CLOSE_BRACES 16.2.3 Expansion and Globbing IGNORE_EOF 16.2.6 Input/Output IGNORE_EOF, use of 17 Shell Builtin Commands INCAPPENDHISTORY 16.2.4 History INCAPPENDHISTORYTIME 16.2.4 History INC_APPEND_HISTORY 16.2.4 History INC_APPEND_HISTORY_TIME 16.2.4 History INTERACTIVE 16.2.11 Shell State INTERACTIVE, use of 16.2.11 Shell State INTERACTIVECOMMENTS 16.2.6 Input/Output INTERACTIVE_COMMENTS 16.2.6 Input/Output INTERACTIVE_COMMENTS, use of 6.7 Comments \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-9-html-index-split-8-qiptj.html",
  "markdown": "# zsh: Options Index: D – I\n\nIndex Entry  Section\n\n* * *\n\nD [`DEBUGBEFORECMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-DEBUGBEFORECMD) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`DEBUG_BEFORE_CMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-DEBUG_005fBEFORE_005fCMD) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`DOTGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-DOTGLOB) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`DOT_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-DOT_005fGLOB) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`DVORAK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-DVORAK) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput)\n\n* * *\n\nE [`EMACS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-EMACS) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`EQUALS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-EQUALS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`ERREXIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ERREXIT) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`ERRRETURN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ERRRETURN) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`ERR_EXIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ERR_005fEXIT) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`ERR_RETURN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ERR_005fRETURN) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`EVALLINENO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-EVALLINENO) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`EVAL_LINENO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-EVAL_005fLINENO) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`EXEC`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-EXEC) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`EXTENDEDGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-EXTENDEDGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`EXTENDEDHISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-EXTENDEDHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`EXTENDED_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-EXTENDED_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`EXTENDED_GLOB, enable`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-EXTENDED_005fGLOB_002c-enable) [14.3.1 Parameter Expansion Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion-Flags) [`EXTENDED_GLOB, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-EXTENDED_005fGLOB_002c-use-of) [14.8 Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation) [`EXTENDED_HISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-EXTENDED_005fHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History)\n\n* * *\n\nF [`FLOWCONTROL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-FLOWCONTROL) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`FLOW_CONTROL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-FLOW_005fCONTROL) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`FORCEFLOAT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-FORCEFLOAT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`FORCE_FLOAT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-FORCE_005fFLOAT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`FUNCTIONARGZERO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-FUNCTIONARGZERO) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`FUNCTION_ARGZERO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-FUNCTION_005fARGZERO) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions)\n\n* * *\n\nG [`GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`GLOB, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-GLOB_002c-use-of) [14.8 Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation) [`GLOBALEXPORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOBALEXPORT) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`GLOBALRCS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOBALRCS) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`GLOBAL_EXPORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOBAL_005fEXPORT) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`GLOBAL_RCS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOBAL_005fRCS) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`GLOBAL_RCS, use of`](https://zsh.sourceforge.io/Doc/Release/Files.html#index-GLOBAL_005fRCS_002c-use-of) [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) [`GLOBASSIGN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOBASSIGN) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`GLOBCOMPLETE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOBCOMPLETE) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`GLOBDOTS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOBDOTS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`GLOBSTARSHORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOBSTARSHORT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`GLOBSUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOBSUBST) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`GLOB_ASSIGN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOB_005fASSIGN) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`GLOB_COMPLETE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOB_005fCOMPLETE) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`GLOB_DOTS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOB_005fDOTS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`GLOB_DOTS, setting in pattern`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-GLOB_005fDOTS_002c-setting-in-pattern) [14.8.7 Glob Qualifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers) [`GLOB_DOTS, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-GLOB_005fDOTS_002c-use-of) [14.8 Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation) [`GLOB_STAR_SHORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOB_005fSTAR_005fSHORT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`GLOB_SUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-GLOB_005fSUBST) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`GLOB_SUBST, toggle`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-GLOB_005fSUBST_002c-toggle) [14.3 Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion)\n\n* * *\n\nH [`HASHALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HASHALL) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`HASHCMDS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HASHCMDS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`HASHDIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HASHDIRS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`HASHEXECUTABLESONLY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HASHEXECUTABLESONLY) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`HASHLISTALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HASHLISTALL) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`HASH_ALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HASH_005fALL) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`HASH_CMDS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HASH_005fCMDS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`HASH_DIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HASH_005fDIRS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`HASH_EXECUTABLES_ONLY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HASH_005fEXECUTABLES_005fONLY) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`HASH_LIST_ALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HASH_005fLIST_005fALL) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`HISTALLOWCLOBBER`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTALLOWCLOBBER) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTAPPEND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTAPPEND) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`HISTBEEP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTBEEP) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTEXPAND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTEXPAND) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`HISTEXPIREDUPSFIRST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTEXPIREDUPSFIRST) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTFCNTLLOCK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTFCNTLLOCK) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTFINDNODUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTFINDNODUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTIGNOREALLDUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTIGNOREALLDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTIGNOREDUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTIGNOREDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTIGNORESPACE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTIGNORESPACE) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTLEXWORDS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTLEXWORDS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTNOFUNCTIONS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTNOFUNCTIONS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTNOSTORE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTNOSTORE) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTREDUCEBLANKS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTREDUCEBLANKS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTSAVEBYCOPY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTSAVEBYCOPY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTSAVENODUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTSAVENODUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HISTSUBSTPATTERN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTSUBSTPATTERN) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`HISTVERIFY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HISTVERIFY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_ALLOW_CLOBBER`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fALLOW_005fCLOBBER) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_APPEND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fAPPEND) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`HIST_BEEP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fBEEP) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_EXPAND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fEXPAND) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`HIST_EXPIRE_DUPS_FIRST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fEXPIRE_005fDUPS_005fFIRST) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_FCNTL_LOCK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fFCNTL_005fLOCK) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_FIND_NO_DUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fFIND_005fNO_005fDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_IGNORE_ALL_DUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fIGNORE_005fALL_005fDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_IGNORE_DUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fIGNORE_005fDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_IGNORE_SPACE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fIGNORE_005fSPACE) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_LEX_WORDS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fLEX_005fWORDS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_NO_FUNCTIONS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fNO_005fFUNCTIONS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_NO_STORE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fNO_005fSTORE) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_REDUCE_BLANKS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fREDUCE_005fBLANKS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_SAVE_BY_COPY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fSAVE_005fBY_005fCOPY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_SAVE_NO_DUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fSAVE_005fNO_005fDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HIST_SUBST_PATTERN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fSUBST_005fPATTERN) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`HIST_VERIFY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HIST_005fVERIFY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`HUP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-HUP) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`HUP, use of`](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-HUP_002c-use-of) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs)\n\n* * *\n\nI [`IGNOREBRACES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-IGNOREBRACES) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`IGNORECLOSEBRACES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-IGNORECLOSEBRACES) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`IGNOREEOF`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-IGNOREEOF) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`IGNORE_BRACES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-IGNORE_005fBRACES) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`IGNORE_CLOSE_BRACES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-IGNORE_005fCLOSE_005fBRACES) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`IGNORE_EOF`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-IGNORE_005fEOF) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`IGNORE_EOF, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-IGNORE_005fEOF_002c-use-of) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`INCAPPENDHISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-INCAPPENDHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`INCAPPENDHISTORYTIME`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-INCAPPENDHISTORYTIME) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`INC_APPEND_HISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-INC_005fAPPEND_005fHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`INC_APPEND_HISTORY_TIME`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-INC_005fAPPEND_005fHISTORY_005fTIME) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`INTERACTIVE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-INTERACTIVE) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`INTERACTIVE, use of`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-INTERACTIVE_002c-use-of) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`INTERACTIVECOMMENTS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-INTERACTIVECOMMENTS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`INTERACTIVE_COMMENTS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-INTERACTIVE_005fCOMMENTS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`INTERACTIVE_COMMENTS, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-INTERACTIVE_005fCOMMENTS_002c-use-of) [6.7 Comments](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Comments)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 289,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-9-html-index-split-8-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-9-html-index-split-8-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-9-html-index-split-8-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-9-html-index-split-8-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-9-html-index-split-8-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 33481,
      "readableText": 30904,
      "none": 32169,
      "readableTextIfPossible": 32169,
      "result": 30904,
      "markdown": 20870
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_11.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_11.html#index_split-10_pg_letter-O",
    "loadedTime": "2025-05-08T06:51:59.732Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Options-Index.html#Options-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_11.html#index_split-10_pg_letter-O",
    "title": "zsh: Options Index: O – S",
    "description": "zsh: Options Index: O – S",
    "author": null,
    "keywords": "zsh: Options Index: O – S",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:59 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-866d\"",
      "expires": "Thu, 08 May 2025 06:52:59 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7081d4bcb36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Options Index: O – S\nIndex Entry Section O OCTALZEROES 16.2.9 Scripts and Functions OCTAL_ZEROES 16.2.9 Scripts and Functions OCTAL_ZEROES, use of 11 Arithmetic Evaluation ONECMD 16.3 Option Aliases ONE_CMD 16.3 Option Aliases OVERSTRIKE 16.2.12 Zle P PATHDIRS 16.2.6 Input/Output PATHSCRIPT 16.2.6 Input/Output PATH_DIRS 16.2.6 Input/Output PATH_SCRIPT 16.2.6 Input/Output PHYSICAL 16.3 Option Aliases PIPEFAIL 16.2.9 Scripts and Functions PIPE_FAIL 16.2.9 Scripts and Functions POSIXALIASES 16.2.10 Shell Emulation POSIXARGZERO 16.2.10 Shell Emulation POSIXBUILTINS 16.2.10 Shell Emulation POSIXCD 16.2.1 Changing Directories POSIXIDENTIFIERS 16.2.10 Shell Emulation POSIXJOBS 16.2.7 Job Control POSIXSTRINGS 16.2.10 Shell Emulation POSIXTRAPS 16.2.10 Shell Emulation POSIX_ALIASES 16.2.10 Shell Emulation POSIX_ARGZERO 16.2.10 Shell Emulation POSIX_BUILTINS 16.2.10 Shell Emulation POSIX_CD 16.2.1 Changing Directories POSIX_IDENTIFIERS 16.2.10 Shell Emulation POSIX_JOBS 16.2.7 Job Control POSIX_STRINGS 16.2.10 Shell Emulation POSIX_TRAPS 16.2.10 Shell Emulation PRINTEIGHTBIT 16.2.6 Input/Output PRINTEXITVALUE 16.2.6 Input/Output PRINT_EIGHT_BIT 16.2.6 Input/Output PRINT_EXIT_VALUE 16.2.6 Input/Output PRIVILEGED 16.2.11 Shell State PROMPTBANG 16.2.8 Prompting PROMPTCR 16.2.8 Prompting PROMPTPERCENT 16.2.8 Prompting PROMPTSP 16.2.8 Prompting PROMPTSUBST 16.2.8 Prompting PROMPTVARS 16.3 Option Aliases PROMPT_BANG 16.2.8 Prompting PROMPT_BANG, use of 13.1 Expansion of Prompt Sequences PROMPT_CR 16.2.8 Prompting PROMPT_PERCENT 16.2.8 Prompting PROMPT_PERCENT, use of 13.1 Expansion of Prompt Sequences PROMPT_SP 16.2.8 Prompting PROMPT_SUBST 16.2.8 Prompting PROMPT_SUBST, use of 13.1 Expansion of Prompt Sequences PROMPT_VARS 16.3 Option Aliases PUSHDIGNOREDUPS 16.2.1 Changing Directories PUSHDMINUS 16.2.1 Changing Directories PUSHDSILENT 16.2.1 Changing Directories PUSHDTOHOME 16.2.1 Changing Directories PUSHD_IGNORE_DUPS 16.2.1 Changing Directories PUSHD_MINUS 16.2.1 Changing Directories PUSHD_MINUS, use of 14.7 Filename Expansion PUSHD_MINUS, use of 17 Shell Builtin Commands PUSHD_MINUS, use of 17 Shell Builtin Commands PUSHD_SILENT 16.2.1 Changing Directories PUSHD_SILENT, use of 17 Shell Builtin Commands PUSHD_TO_HOME 16.2.1 Changing Directories PUSHD_TO_HOME, use of 17 Shell Builtin Commands R RCEXPANDPARAM 16.2.3 Expansion and Globbing RCQUOTES 16.2.6 Input/Output RCS 16.2.5 Initialisation RCS, use of 5.1 Startup/Shutdown Files RC_EXPAND_PARAM 16.2.3 Expansion and Globbing RC_EXPAND_PARAM, toggle 14.3 Parameter Expansion RC_QUOTES 16.2.6 Input/Output RC_QUOTES, use of 6.9 Quoting RECEXACT 16.2.2 Completion REC_EXACT 16.2.2 Completion REMATCHPCRE 16.2.3 Expansion and Globbing REMATCH_PCRE 16.2.3 Expansion and Globbing REMATCH_PCRE 22.21 The zsh/pcre Module RESTRICTED 4.3 Restricted Shell RESTRICTED 16.2.11 Shell State RMSTARSILENT 16.2.6 Input/Output RMSTARWAIT 16.2.6 Input/Output RM_STAR_SILENT 16.2.6 Input/Output RM_STAR_WAIT 16.2.6 Input/Output S SHAREHISTORY 16.2.4 History SHARE_HISTORY 16.2.4 History SHFILEEXPANSION 16.2.10 Shell Emulation SHGLOB 16.2.3 Expansion and Globbing SHINSTDIN 16.2.11 Shell State SHIN_STDIN 16.2.11 Shell State SHNULLCMD 16.2.10 Shell Emulation SHOPTIONLETTERS 16.2.10 Shell Emulation SHORTLOOPS 16.2.6 Input/Output SHORTREPEAT 16.2.6 Input/Output SHORT_LOOPS 16.2.6 Input/Output SHORT_REPEAT 16.2.6 Input/Output SHWORDSPLIT 16.2.10 Shell Emulation SH_FILE_EXPANSION 16.2.10 Shell Emulation SH_GLOB 16.2.3 Expansion and Globbing SH_NULLCMD 16.2.10 Shell Emulation SH_NULLCMD, use of 7.3 Redirections with no command SH_OPTION_LETTERS 16.2.10 Shell Emulation SH_WORD_SPLIT 16.2.10 Shell Emulation SH_WORD_SPLIT, toggle 14.3 Parameter Expansion SH_WORD_SPLIT, use of 14.3.1 Parameter Expansion Flags SINGLECOMMAND 16.2.11 Shell State SINGLELINEZLE 16.2.12 Zle SINGLE_COMMAND 16.2.11 Shell State SINGLE_LINE_ZLE 16.2.12 Zle SINGLE_LINE_ZLE, use of 18.1 Description SOURCETRACE 16.2.9 Scripts and Functions SOURCE_TRACE 16.2.9 Scripts and Functions STDIN 16.3 Option Aliases SUNKEYBOARDHACK 16.2.6 Input/Output SUN_KEYBOARD_HACK 16.2.6 Input/Output \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-11-html-index-split-10-pg-letter-O-frrqh.html",
  "markdown": "# zsh: Options Index: O – S\n\nIndex Entry  Section\n\n* * *\n\nO [`OCTALZEROES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-OCTALZEROES) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`OCTAL_ZEROES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-OCTAL_005fZEROES) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`OCTAL_ZEROES, use of`](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-OCTAL_005fZEROES_002c-use-of) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [`ONECMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ONECMD) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`ONE_CMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ONE_005fCMD) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`OVERSTRIKE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-OVERSTRIKE) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle)\n\n* * *\n\nP [`PATHDIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PATHDIRS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`PATHSCRIPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PATHSCRIPT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`PATH_DIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PATH_005fDIRS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`PATH_SCRIPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PATH_005fSCRIPT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`PHYSICAL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PHYSICAL) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`PIPEFAIL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PIPEFAIL) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`PIPE_FAIL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PIPE_005fFAIL) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`POSIXALIASES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIXALIASES) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIXARGZERO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIXARGZERO) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIXBUILTINS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIXBUILTINS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIXCD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIXCD) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`POSIXIDENTIFIERS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIXIDENTIFIERS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIXJOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIXJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`POSIXSTRINGS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIXSTRINGS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIXTRAPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIXTRAPS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIX_ALIASES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIX_005fALIASES) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIX_ARGZERO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIX_005fARGZERO) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIX_BUILTINS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIX_005fBUILTINS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIX_CD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIX_005fCD) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`POSIX_IDENTIFIERS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIX_005fIDENTIFIERS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIX_JOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIX_005fJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`POSIX_STRINGS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIX_005fSTRINGS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`POSIX_TRAPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-POSIX_005fTRAPS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`PRINTEIGHTBIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PRINTEIGHTBIT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`PRINTEXITVALUE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PRINTEXITVALUE) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`PRINT_EIGHT_BIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PRINT_005fEIGHT_005fBIT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`PRINT_EXIT_VALUE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PRINT_005fEXIT_005fVALUE) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`PRIVILEGED`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PRIVILEGED) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`PROMPTBANG`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPTBANG) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`PROMPTCR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPTCR) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`PROMPTPERCENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPTPERCENT) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`PROMPTSP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPTSP) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`PROMPTSUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPTSUBST) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`PROMPTVARS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPTVARS) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`PROMPT_BANG`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPT_005fBANG) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`PROMPT_BANG, use of`](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#index-PROMPT_005fBANG_002c-use-of) [13.1 Expansion of Prompt Sequences](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Expansion-of-Prompt-Sequences) [`PROMPT_CR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPT_005fCR) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`PROMPT_PERCENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPT_005fPERCENT) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`PROMPT_PERCENT, use of`](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#index-PROMPT_005fPERCENT_002c-use-of) [13.1 Expansion of Prompt Sequences](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Expansion-of-Prompt-Sequences) [`PROMPT_SP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPT_005fSP) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`PROMPT_SUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPT_005fSUBST) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`PROMPT_SUBST, use of`](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#index-PROMPT_005fSUBST_002c-use-of) [13.1 Expansion of Prompt Sequences](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Expansion-of-Prompt-Sequences) [`PROMPT_VARS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PROMPT_005fVARS) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`PUSHDIGNOREDUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PUSHDIGNOREDUPS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`PUSHDMINUS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PUSHDMINUS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`PUSHDSILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PUSHDSILENT) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`PUSHDTOHOME`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PUSHDTOHOME) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`PUSHD_IGNORE_DUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PUSHD_005fIGNORE_005fDUPS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`PUSHD_MINUS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PUSHD_005fMINUS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`PUSHD_MINUS, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-PUSHD_005fMINUS_002c-use-of) [14.7 Filename Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Expansion) [`PUSHD_MINUS, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-PUSHD_005fMINUS_002c-use-of-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`PUSHD_MINUS, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-PUSHD_005fMINUS_002c-use-of-2) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`PUSHD_SILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PUSHD_005fSILENT) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`PUSHD_SILENT, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-PUSHD_005fSILENT_002c-use-of) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`PUSHD_TO_HOME`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PUSHD_005fTO_005fHOME) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`PUSHD_TO_HOME, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-PUSHD_005fTO_005fHOME_002c-use-of) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nR [`RCEXPANDPARAM`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RCEXPANDPARAM) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`RCQUOTES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RCQUOTES) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`RCS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RCS) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`RCS, use of`](https://zsh.sourceforge.io/Doc/Release/Files.html#index-RCS_002c-use-of) [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) [`RC_EXPAND_PARAM`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RC_005fEXPAND_005fPARAM) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`RC_EXPAND_PARAM, toggle`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-RC_005fEXPAND_005fPARAM_002c-toggle) [14.3 Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) [`RC_QUOTES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RC_005fQUOTES) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`RC_QUOTES, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-RC_005fQUOTES_002c-use-of) [6.9 Quoting](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Quoting) [`RECEXACT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RECEXACT) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`REC_EXACT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-REC_005fEXACT) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`REMATCHPCRE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-REMATCHPCRE) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`REMATCH_PCRE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-REMATCH_005fPCRE) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`REMATCH_PCRE`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-REMATCH_005fPCRE-1) [22.21 The zsh/pcre Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fpcre-Module) [`RESTRICTED`](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-RESTRICTED) [4.3 Restricted Shell](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Restricted-Shell) [`RESTRICTED`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RESTRICTED-1) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`RMSTARSILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RMSTARSILENT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`RMSTARWAIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RMSTARWAIT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`RM_STAR_SILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RM_005fSTAR_005fSILENT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`RM_STAR_WAIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-RM_005fSTAR_005fWAIT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput)\n\n* * *\n\nS [`SHAREHISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHAREHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`SHARE_HISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHARE_005fHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`SHFILEEXPANSION`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHFILEEXPANSION) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`SHGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`SHINSTDIN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHINSTDIN) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`SHIN_STDIN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHIN_005fSTDIN) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`SHNULLCMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHNULLCMD) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`SHOPTIONLETTERS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHOPTIONLETTERS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`SHORTLOOPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHORTLOOPS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`SHORTREPEAT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHORTREPEAT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`SHORT_LOOPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHORT_005fLOOPS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`SHORT_REPEAT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHORT_005fREPEAT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`SHWORDSPLIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SHWORDSPLIT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`SH_FILE_EXPANSION`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SH_005fFILE_005fEXPANSION) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`SH_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SH_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`SH_NULLCMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SH_005fNULLCMD) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`SH_NULLCMD, use of`](https://zsh.sourceforge.io/Doc/Release/Redirection.html#index-SH_005fNULLCMD_002c-use-of) [7.3 Redirections with no command](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirections-with-no-command) [`SH_OPTION_LETTERS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SH_005fOPTION_005fLETTERS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`SH_WORD_SPLIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SH_005fWORD_005fSPLIT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`SH_WORD_SPLIT, toggle`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-SH_005fWORD_005fSPLIT_002c-toggle) [14.3 Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) [`SH_WORD_SPLIT, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-SH_005fWORD_005fSPLIT_002c-use-of) [14.3.1 Parameter Expansion Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion-Flags) [`SINGLECOMMAND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SINGLECOMMAND) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`SINGLELINEZLE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SINGLELINEZLE) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`SINGLE_COMMAND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SINGLE_005fCOMMAND) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`SINGLE_LINE_ZLE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SINGLE_005fLINE_005fZLE) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`SINGLE_LINE_ZLE, use of`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-SINGLE_005fLINE_005fZLE_002c-use-of) [18.1 Description](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Description-6) [`SOURCETRACE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SOURCETRACE) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`SOURCE_TRACE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SOURCE_005fTRACE) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`STDIN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-STDIN) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`SUNKEYBOARDHACK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SUNKEYBOARDHACK) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`SUN_KEYBOARD_HACK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-SUN_005fKEYBOARD_005fHACK) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 291,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-11-html-index-split-10-pg-letter-O-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-11-html-index-split-10-pg-letter-O-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-11-html-index-split-10-pg-letter-O-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-11-html-index-split-10-pg-letter-O-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-11-html-index-split-10-pg-letter-O-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 34300,
      "readableText": 31587,
      "none": 32775,
      "readableTextIfPossible": 32775,
      "result": 31587,
      "markdown": 21591
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_16.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_16.html#index_split-15",
    "loadedTime": "2025-05-08T06:51:58.923Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Editor-Functions-Index.html#Editor-Functions-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_16.html#index_split-15",
    "title": "zsh: Editor Functions Index: N – V",
    "description": "zsh: Editor Functions Index: N – V",
    "author": null,
    "keywords": "zsh: Editor Functions Index: N – V",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:57 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-a5e5\"",
      "expires": "Thu, 08 May 2025 06:52:57 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c708166fb636d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Editor Functions Index: N – V\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-16-html-index-split-15-z3673.html",
  "markdown": "# zsh: Editor Functions Index: N – V\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 338,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-16-html-index-split-15-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-16-html-index-split-15-removedElementsHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-16-html-index-split-15-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-16-html-index-split-15-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 0,
      "readableText": 362,
      "none": 40813,
      "readableTextIfPossible": 40813,
      "result": 362,
      "markdown": 187
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_3.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-M",
    "loadedTime": "2025-05-08T06:52:00.509Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-M",
    "title": "zsh: Concept Index: M – R",
    "description": "zsh: Concept Index: M – R",
    "author": null,
    "keywords": "zsh: Concept Index: M – R",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:59 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-a69c\"",
      "expires": "Thu, 08 May 2025 06:52:59 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c708206d6436d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Concept Index: M – R\nIndex Entry Section M mail, warning of reading 16.2.6 Input/Output mailing lists 2.3 Mailing Lists marking directories 16.2.3 Expansion and Globbing marking file types 16.2.2 Completion matching, approximate 14.8.5 Approximate Matching mathematical functions 22.17 The zsh/mathfunc Module mathematical functions, use of 11 Arithmetic Evaluation mode, privileged 16.2.11 Shell State modifiers 14.1.4 Modifiers modifiers, precommand 6.2 Precommand Modifiers modules 22 Zsh Modules modules, example 22.13 The zsh/example Module modules, loading 17 Shell Builtin Commands modules, writing 22.13 The zsh/example Module multibyte characters, in expansion and globbing 16.2.3 Expansion and Globbing multios 7.2 Multios N named directories, dynamic 14.7.1 Dynamic named directories named directories, dynamic, helper function 26.4 Abbreviated dynamic references to directories named directories, static 14.7.2 Static named directories no clobber, POSIX compatible 16.2.10 Shell Emulation notification of background jobs 16.2.7 Job Control null command style 15.6 Parameters Used By The Shell null globbing style, csh 16.2.3 Expansion and Globbing nulls, embedded in $’...’ 16.2.10 Shell Emulation O octal, arithmetic expressions 16.2.9 Scripts and Functions octal, output in C format 16.2.9 Scripts and Functions operator precedence 16.2.9 Scripts and Functions operators, arithmetic 11 Arithmetic Evaluation option printing style, ksh 16.2.10 Shell Emulation option printing, ksh style 16.2.10 Shell Emulation options 16 Options options, aliases 16.3 Option Aliases options, description 16.2 Description of Options options, processing 17 Shell Builtin Commands options, setting 17 Shell Builtin Commands options, shell 4.1 Invocation options, single letter 16.4 Single Letter Options options, single letter, ksh style 16.2.10 Shell Emulation options, specifying 16.1 Specifying Options options, unsetting 17 Shell Builtin Commands overstrike mode, of editor 16.2.12 Zle P parameter expansion 14.3 Parameter Expansion parameter expansion flags 14.3.1 Parameter Expansion Flags parameter expansion rules 14.3.2 Rules parameter expansion style, rc 16.2.3 Expansion and Globbing parameter expansion, examples 14.3.3 Examples parameter modifiers 14.1.4 Modifiers parameter names, non-portable characters in 16.2.10 Shell Emulation parameter, file access via 22.16 The zsh/mapfile Module parameters 15 Parameters parameters, array 15.1 Description parameters, associative array 15.1 Description parameters, declaring 17 Shell Builtin Commands parameters, editing 18.3 Zle Builtins parameters, editor 18.5 User-Defined Widgets parameters, expanding 17 Shell Builtin Commands parameters, floating point 11 Arithmetic Evaluation parameters, for using file descriptors 7.1 Opening file descriptors using parameters parameters, integer 11 Arithmetic Evaluation parameters, listing 17 Shell Builtin Commands parameters, marking readonly 17 Shell Builtin Commands parameters, positional 17 Shell Builtin Commands parameters, positional 17 Shell Builtin Commands parameters, scalar 15.1 Description parameters, setting 17 Shell Builtin Commands parameters, setting array 17 Shell Builtin Commands parameters, special 15.1 Description parameters, special 22.20 The zsh/parameter Module parameters, special 22.34 The zsh/zleparameter Module parameters, substituting unset 16.2.3 Expansion and Globbing parameters, unsetting 17 Shell Builtin Commands parameters, warning when created globally 16.2.3 Expansion and Globbing parameters, warning when setting in enclosing scope 16.2.3 Expansion and Globbing parameters, zle 18.5 User-Defined Widgets path search, extended 16.2.6 Input/Output path search, for script argument to shell 16.2.6 Input/Output PCRE, regexp 16.2.3 Expansion and Globbing pipeline 6.1 Simple Commands & Pipelines pipeline, exit status from 16.2.9 Scripts and Functions precedence of glob operators 14.8.3 Precedence precedence, operator 16.2.9 Scripts and Functions precommand modifiers 6.2 Precommand Modifiers priority of background jobs 16.2.7 Job Control private parameter, creating 22.22 The zsh/param/private Module privileged mode 16.2.11 Shell State process substitution 14.2 Process Substitution prompt expansion 13.1 Expansion of Prompt Sequences prompt, ! expansion 16.2.8 Prompting prompt, % expansion 16.2.8 Prompting prompt, parameter expansion 16.2.8 Prompting prompt, save partial lines 16.2.8 Prompting prompt, with CR 16.2.8 Prompting pushd, making cd behave like 16.2.1 Changing Directories pushd, to home 16.2.1 Changing Directories Q qualifiers, globbing 14.8.7 Glob Qualifiers querying before rm * 16.2.6 Input/Output quoting 6.9 Quoting quoting style, csh 16.2.10 Shell Emulation quoting style, rc 16.2.6 Input/Output R rc, array expansion style 14.3 Parameter Expansion rc, parameter expansion style 16.2.3 Expansion and Globbing rc, quoting style 16.2.6 Input/Output reading a line 17 Shell Builtin Commands rebinding keys 18.3 Zle Builtins rebinding widgets 18.3 Zle Builtins recent directories, maintaining list of 26.3 Remembering Recent Directories recursive globbing 14.8.6 Recursive Globbing redirection 7 Redirection redirection, current shell’s I/O 17 Shell Builtin Commands redirections with no command, csh 16.2.10 Shell Emulation redirections with no command, ksh 16.2.10 Shell Emulation redirections with no command, sh 16.2.10 Shell Emulation referring to jobs 10.1 Jobs regex 22.23 The zsh/regex Module regexp, bash BASH_REMATCH variable 16.2.10 Shell Emulation regexp, PCRE 16.2.3 Expansion and Globbing region, highlighting 18.7 Character Highlighting regular expressions 22.23 The zsh/regex Module regular expressions, case-insensitive matching, option 16.2.3 Expansion and Globbing regular expressions, perl-compatible 22.21 The zsh/pcre Module removable suffix, highlighting in completion 18.7 Character Highlighting repeat loops 6.3 Complex Commands reporter utility 26.2.4 Dumping Shell State reserved words 6.5 Reserved Words resource limits 17 Shell Builtin Commands resource limits 17 Shell Builtin Commands resource limits 17 Shell Builtin Commands restricted shell 4.3 Restricted Shell restricted shell 16.2.11 Shell State resuming jobs automatically 16.2.7 Job Control return from function, on error 16.2.9 Scripts and Functions rm *, querying before 16.2.6 Input/Output rm *, waiting before 16.2.6 Input/Output roadmap 3 Roadmap rules, parameter expansion 14.3.2 Rules \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-3-html-index-split-2-cp-letter-M-qwku5i.html",
  "markdown": "# zsh: Concept Index: M – R\n\nIndex Entry  Section\n\n* * *\n\nM [mail, warning of reading](https://zsh.sourceforge.io/Doc/Release/Options.html#index-mail_002c-warning-of-reading) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [mailing lists](https://zsh.sourceforge.io/Doc/Release/Introduction.html#index-mailing-lists) [2.3 Mailing Lists](https://zsh.sourceforge.io/Doc/Release/Introduction.html#Mailing-Lists) [marking directories](https://zsh.sourceforge.io/Doc/Release/Options.html#index-marking-directories) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [marking file types](https://zsh.sourceforge.io/Doc/Release/Options.html#index-marking-file-types) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [matching, approximate](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-matching_002c-approximate) [14.8.5 Approximate Matching](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Approximate-Matching) [mathematical functions](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-mathematical-functions) [22.17 The zsh/mathfunc Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fmathfunc-Module) [mathematical functions, use of](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-mathematical-functions_002c-use-of) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [mode, privileged](https://zsh.sourceforge.io/Doc/Release/Options.html#index-mode_002c-privileged) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-modifiers) [14.1.4 Modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Modifiers) [modifiers, precommand](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-modifiers_002c-precommand) [6.2 Precommand Modifiers](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Precommand-Modifiers) [modules](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-modules) [22 Zsh Modules](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Zsh-Modules) [modules, example](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-modules_002c-example) [22.13 The zsh/example Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fexample-Module) [modules, loading](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-modules_002c-loading) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [modules, writing](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-modules_002c-writing) [22.13 The zsh/example Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fexample-Module) [multibyte characters, in expansion and globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-multibyte-characters_002c-in-expansion-and-globbing) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [multios](https://zsh.sourceforge.io/Doc/Release/Redirection.html#index-multios) [7.2 Multios](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Multios)\n\n* * *\n\nN [named directories, dynamic](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-named-directories_002c-dynamic) [14.7.1 Dynamic named directories](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Dynamic-named-directories) [named directories, dynamic, helper function](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-named-directories_002c-dynamic_002c-helper-function) [26.4 Abbreviated dynamic references to directories](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Other-Directory-Functions) [named directories, static](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-named-directories_002c-static) [14.7.2 Static named directories](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Static-named-directories) [no clobber, POSIX compatible](https://zsh.sourceforge.io/Doc/Release/Options.html#index-no-clobber_002c-POSIX-compatible) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [notification of background jobs](https://zsh.sourceforge.io/Doc/Release/Options.html#index-notification-of-background-jobs) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [null command style](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-null-command-style) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [null globbing style, csh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-null-globbing-style_002c-csh) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [nulls, embedded in $’...’](https://zsh.sourceforge.io/Doc/Release/Options.html#index-nulls_002c-embedded-in-_0024_0027_002e_002e_002e_0027) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation)\n\n* * *\n\nO [octal, arithmetic expressions](https://zsh.sourceforge.io/Doc/Release/Options.html#index-octal_002c-arithmetic-expressions) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [octal, output in C format](https://zsh.sourceforge.io/Doc/Release/Options.html#index-octal_002c-output-in-C-format) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [operator precedence](https://zsh.sourceforge.io/Doc/Release/Options.html#index-operator-precedence) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [operators, arithmetic](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-operators_002c-arithmetic) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [option printing style, ksh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-option-printing-style_002c-ksh) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [option printing, ksh style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-option-printing_002c-ksh-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [options](https://zsh.sourceforge.io/Doc/Release/Options.html#index-options) [16 Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Options) [options, aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#index-options_002c-aliases) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [options, description](https://zsh.sourceforge.io/Doc/Release/Options.html#index-options_002c-description) [16.2 Description of Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Description-of-Options) [options, processing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-options_002c-processing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [options, setting](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-options_002c-setting) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [options, shell](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-options_002c-shell) [4.1 Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation-1) [options, single letter](https://zsh.sourceforge.io/Doc/Release/Options.html#index-options_002c-single-letter) [16.4 Single Letter Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Single-Letter-Options) [options, single letter, ksh style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-options_002c-single-letter_002c-ksh-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [options, specifying](https://zsh.sourceforge.io/Doc/Release/Options.html#index-options_002c-specifying) [16.1 Specifying Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Specifying-Options) [options, unsetting](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-options_002c-unsetting) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [overstrike mode, of editor](https://zsh.sourceforge.io/Doc/Release/Options.html#index-overstrike-mode_002c-of-editor) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle)\n\n* * *\n\nP [parameter expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-parameter-expansion) [14.3 Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) [parameter expansion flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-parameter-expansion-flags) [14.3.1 Parameter Expansion Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion-Flags) [parameter expansion rules](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-parameter-expansion-rules) [14.3.2 Rules](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Rules) [parameter expansion style, rc](https://zsh.sourceforge.io/Doc/Release/Options.html#index-parameter-expansion-style_002c-rc) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [parameter expansion, examples](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-parameter-expansion_002c-examples) [14.3.3 Examples](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Examples) [parameter modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-parameter-modifiers) [14.1.4 Modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Modifiers) [parameter names, non-portable characters in](https://zsh.sourceforge.io/Doc/Release/Options.html#index-parameter-names_002c-non_002dportable-characters-in) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [parameter, file access via](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-parameter_002c-file-access-via) [22.16 The zsh/mapfile Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fmapfile-Module) [parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-parameters) [15 Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters) [parameters, array](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-parameters_002c-array) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [parameters, associative array](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-parameters_002c-associative-array) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [parameters, declaring](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-parameters_002c-declaring) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [parameters, editing](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-parameters_002c-editing) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [parameters, editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-parameters_002c-editor) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [parameters, expanding](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-parameters_002c-expanding) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [parameters, floating point](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-parameters_002c-floating-point) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [parameters, for using file descriptors](https://zsh.sourceforge.io/Doc/Release/Redirection.html#index-parameters_002c-for-using-file-descriptors) [7.1 Opening file descriptors using parameters](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Opening-file-descriptors-using-parameters) [parameters, integer](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-parameters_002c-integer) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [parameters, listing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-parameters_002c-listing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [parameters, marking readonly](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-parameters_002c-marking-readonly) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [parameters, positional](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-parameters_002c-positional) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [parameters, positional](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-parameters_002c-positional-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [parameters, scalar](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-parameters_002c-scalar) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [parameters, setting](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-parameters_002c-setting) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [parameters, setting array](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-parameters_002c-setting-array) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [parameters, special](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-parameters_002c-special) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [parameters, special](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-parameters_002c-special-1) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [parameters, special](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-parameters_002c-special-2) [22.34 The zsh/zleparameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzleparameter-Module) [parameters, substituting unset](https://zsh.sourceforge.io/Doc/Release/Options.html#index-parameters_002c-substituting-unset) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [parameters, unsetting](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-parameters_002c-unsetting) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [parameters, warning when created globally](https://zsh.sourceforge.io/Doc/Release/Options.html#index-parameters_002c-warning-when-created-globally) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [parameters, warning when setting in enclosing scope](https://zsh.sourceforge.io/Doc/Release/Options.html#index-parameters_002c-warning-when-setting-in-enclosing-scope) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [parameters, zle](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-parameters_002c-zle) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [path search, extended](https://zsh.sourceforge.io/Doc/Release/Options.html#index-path-search_002c-extended) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [path search, for script argument to shell](https://zsh.sourceforge.io/Doc/Release/Options.html#index-path-search_002c-for-script-argument-to-shell) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [PCRE, regexp](https://zsh.sourceforge.io/Doc/Release/Options.html#index-PCRE_002c-regexp) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [pipeline](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-pipeline) [6.1 Simple Commands & Pipelines](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Simple-Commands-_0026-Pipelines) [pipeline, exit status from](https://zsh.sourceforge.io/Doc/Release/Options.html#index-pipeline_002c-exit-status-from) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [precedence of glob operators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-precedence-of-glob-operators) [14.8.3 Precedence](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Precedence) [precedence, operator](https://zsh.sourceforge.io/Doc/Release/Options.html#index-precedence_002c-operator) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [precommand modifiers](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-precommand-modifiers) [6.2 Precommand Modifiers](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Precommand-Modifiers) [priority of background jobs](https://zsh.sourceforge.io/Doc/Release/Options.html#index-priority-of-background-jobs) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [private parameter, creating](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-private-parameter_002c-creating) [22.22 The zsh/param/private Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparam_002fprivate-Module) [privileged mode](https://zsh.sourceforge.io/Doc/Release/Options.html#index-privileged-mode) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [process substitution](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-process-substitution) [14.2 Process Substitution](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Process-Substitution) [prompt expansion](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#index-prompt-expansion) [13.1 Expansion of Prompt Sequences](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Expansion-of-Prompt-Sequences) [prompt, ! expansion](https://zsh.sourceforge.io/Doc/Release/Options.html#index-prompt_002c-_0021-expansion) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [prompt, % expansion](https://zsh.sourceforge.io/Doc/Release/Options.html#index-prompt_002c-_0025-expansion) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [prompt, parameter expansion](https://zsh.sourceforge.io/Doc/Release/Options.html#index-prompt_002c-parameter-expansion) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [prompt, save partial lines](https://zsh.sourceforge.io/Doc/Release/Options.html#index-prompt_002c-save-partial-lines) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [prompt, with CR](https://zsh.sourceforge.io/Doc/Release/Options.html#index-prompt_002c-with-CR) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [pushd, making cd behave like](https://zsh.sourceforge.io/Doc/Release/Options.html#index-pushd_002c-making-cd-behave-like) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [pushd, to home](https://zsh.sourceforge.io/Doc/Release/Options.html#index-pushd_002c-to-home) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories)\n\n* * *\n\nQ [qualifiers, globbing](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-qualifiers_002c-globbing) [14.8.7 Glob Qualifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers) [querying before rm \\*](https://zsh.sourceforge.io/Doc/Release/Options.html#index-querying-before-rm-_002a) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [quoting](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-quoting) [6.9 Quoting](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Quoting) [quoting style, csh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-quoting-style_002c-csh) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [quoting style, rc](https://zsh.sourceforge.io/Doc/Release/Options.html#index-quoting-style_002c-rc) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput)\n\n* * *\n\nR [rc, array expansion style](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-rc_002c-array-expansion-style) [14.3 Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) [rc, parameter expansion style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-rc_002c-parameter-expansion-style) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [rc, quoting style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-rc_002c-quoting-style) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [reading a line](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-reading-a-line) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [rebinding keys](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-rebinding-keys) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [rebinding widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-rebinding-widgets) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [recent directories, maintaining list of](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-recent-directories_002c-maintaining-list-of) [26.3 Remembering Recent Directories](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Recent-Directories) [recursive globbing](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-recursive-globbing) [14.8.6 Recursive Globbing](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Recursive-Globbing) [redirection](https://zsh.sourceforge.io/Doc/Release/Redirection.html#index-redirection) [7 Redirection](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirection) [redirection, current shell’s I/O](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-redirection_002c-current-shell_0027s-I_002fO) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [redirections with no command, csh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-redirections-with-no-command_002c-csh) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [redirections with no command, ksh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-redirections-with-no-command_002c-ksh) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [redirections with no command, sh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-redirections-with-no-command_002c-sh) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [referring to jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-referring-to-jobs) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [regex](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-regex) [22.23 The zsh/regex Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fregex-Module) [regexp, bash BASH\\_REMATCH variable](https://zsh.sourceforge.io/Doc/Release/Options.html#index-regexp_002c-bash-BASH_005fREMATCH-variable) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [regexp, PCRE](https://zsh.sourceforge.io/Doc/Release/Options.html#index-regexp_002c-PCRE) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [region, highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-region_002c-highlighting) [18.7 Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting) [regular expressions](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-regular-expressions) [22.23 The zsh/regex Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fregex-Module) [regular expressions, case-insensitive matching, option](https://zsh.sourceforge.io/Doc/Release/Options.html#index-regular-expressions_002c-case_002dinsensitive-matching_002c-option) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [regular expressions, perl-compatible](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-regular-expressions_002c-perl_002dcompatible) [22.21 The zsh/pcre Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fpcre-Module) [removable suffix, highlighting in completion](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-removable-suffix_002c-highlighting-in-completion) [18.7 Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting) [repeat loops](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-repeat-loops) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [reporter utility](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-reporter-utility) [26.2.4 Dumping Shell State](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Dumping-Shell-State) [reserved words](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-reserved-words) [6.5 Reserved Words](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Reserved-Words) [resource limits](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-resource-limits) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [resource limits](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-resource-limits-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [resource limits](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-resource-limits-2) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [restricted shell](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-restricted-shell) [4.3 Restricted Shell](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Restricted-Shell) [restricted shell](https://zsh.sourceforge.io/Doc/Release/Options.html#index-restricted-shell-1) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [resuming jobs automatically](https://zsh.sourceforge.io/Doc/Release/Options.html#index-resuming-jobs-automatically) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [return from function, on error](https://zsh.sourceforge.io/Doc/Release/Options.html#index-return-from-function_002c-on-error) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [rm \\*, querying before](https://zsh.sourceforge.io/Doc/Release/Options.html#index-rm-_002a_002c-querying-before) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [rm \\*, waiting before](https://zsh.sourceforge.io/Doc/Release/Options.html#index-rm-_002a_002c-waiting-before) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [roadmap](https://zsh.sourceforge.io/Doc/Release/Roadmap.html#index-roadmap) [3 Roadmap](https://zsh.sourceforge.io/Doc/Release/Roadmap.html#Roadmap) [rules, parameter expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-rules_002c-parameter-expansion) [14.3.2 Rules](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Rules)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 347,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-3-html-index-split-2-cp-letter-M-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-3-html-index-split-2-cp-letter-M-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-3-html-index-split-2-cp-letter-M-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-3-html-index-split-2-cp-letter-M-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-3-html-index-split-2-cp-letter-M-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 43522,
      "readableText": 40270,
      "none": 40996,
      "readableTextIfPossible": 40996,
      "result": 40270,
      "markdown": 29646
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_8.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_8.html#index_split-7",
    "loadedTime": "2025-05-08T06:51:59.134Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Options-Index.html#Options-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_8.html#index_split-7",
    "title": "zsh: Variables Index: Y – Z",
    "description": "zsh: Variables Index: Y – Z",
    "author": null,
    "keywords": "zsh: Variables Index: Y – Z",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:58 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-5ff2\"",
      "expires": "Thu, 08 May 2025 06:52:58 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "MISS",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70819099336d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Variables Index: Y – Z\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-8-html-index-split-7-gk4rj.html",
  "markdown": "# zsh: Variables Index: Y – Z\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 195,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-8-html-index-split-7-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-8-html-index-split-7-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-8-html-index-split-7-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-8-html-index-split-7-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-8-html-index-split-7-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 17482,
      "readableText": 355,
      "none": 22920,
      "readableTextIfPossible": 22920,
      "result": 355,
      "markdown": 180
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_12.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_12.html#index_split-11_pg_letter-T",
    "loadedTime": "2025-05-08T06:51:58.638Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Options-Index.html#Options-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_12.html#index_split-11_pg_letter-T",
    "title": "zsh: Options Index: T – Z",
    "description": "zsh: Options Index: T – Z",
    "author": null,
    "keywords": "zsh: Options Index: T – Z",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:57 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-3751\"",
      "expires": "Thu, 08 May 2025 06:52:57 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70812ee1036d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Options Index: T – Z\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-12-html-index-split-11-pg-letter-T-a89jk.html",
  "markdown": "# zsh: Options Index: T – Z\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 109,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-12-html-index-split-11-pg-letter-T-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-12-html-index-split-11-pg-letter-T-removedElementsHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-12-html-index-split-11-pg-letter-T-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-12-html-index-split-11-pg-letter-T-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 0,
      "readableText": 353,
      "none": 12523,
      "readableTextIfPossible": 12523,
      "result": 353,
      "markdown": 178
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_17.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_17.html#index_split-16_tp_letter-W",
    "loadedTime": "2025-05-08T06:52:00.818Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Editor-Functions-Index.html#Editor-Functions-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_17.html#index_split-16_tp_letter-W",
    "title": "zsh: Editor Functions Index: W – Z",
    "description": "zsh: Editor Functions Index: W – Z",
    "author": null,
    "keywords": "zsh: Editor Functions Index: W – Z",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:51:59 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-3691\"",
      "expires": "Thu, 08 May 2025 06:52:59 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c708230ea036d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Editor Functions Index: W – Z\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-17-html-index-split-16-tp-letter-W-ztakih.html",
  "markdown": "# zsh: Editor Functions Index: W – Z\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 98,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-17-html-index-split-16-tp-letter-W-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-17-html-index-split-16-tp-letter-W-removedElementsHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-17-html-index-split-16-tp-letter-W-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-17-html-index-split-16-tp-letter-W-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 0,
      "readableText": 362,
      "none": 12313,
      "readableTextIfPossible": 12313,
      "result": 362,
      "markdown": 187
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_4.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-S",
    "loadedTime": "2025-05-08T06:52:03.325Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-S",
    "title": "zsh: Concept Index: S – W",
    "description": "zsh: Concept Index: S – W",
    "author": null,
    "keywords": "zsh: Concept Index: S – W",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:01 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-8877\"",
      "expires": "Thu, 08 May 2025 06:53:01 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7082decd036d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Concept Index: S – W\nIndex Entry Section S scalar 15.1 Description select, system call 22.37 The zsh/zselect Module selection, case 6.3 Complex Commands selection, user 6.3 Complex Commands sh compatibility 4.2 Compatibility sh, compatibility 17 Shell Builtin Commands sh, expansion style 16.2.10 Shell Emulation sh, field splitting style 16.2.10 Shell Emulation sh, field splitting style, parameter 14.3 Parameter Expansion sh, globbing style 16.2.3 Expansion and Globbing sh, redirections with no command 16.2.10 Shell Emulation sh, single letter options style 16.2.10 Shell Emulation share history 16.2.4 History shell flags 4.1 Invocation shell grammar 6 Shell Grammar shell options 4.1 Invocation shell, cloning 22.4 The zsh/clone Module shell, suspending 17 Shell Builtin Commands shell, timing 17 Shell Builtin Commands shutdown files 5.1 Startup/Shutdown Files signals, trapping 9.3.2 Trap Functions signals, trapping 17 Shell Builtin Commands simple commands 6.1 Simple Commands & Pipelines single command 16.2.11 Shell State single letter options 16.4 Single Letter Options single letter options, ksh style 16.2.10 Shell Emulation slash, removing trailing 16.2.2 Completion slow connection, editing over 15.6 Parameters Used By The Shell sockets 22.25 The zsh/net/socket Module sockets, closing TCP 22.28.3 Closing Connections sockets, inbound TCP 22.28.2 Inbound Connections sockets, inbound Unix domain 22.25.2 Inbound Connections sockets, outbound TCP 22.28.1 Outbound Connections sockets, outbound Unix domain 22.25.1 Outbound Connections sockets, TCP 22.28 The zsh/net/tcp Module sockets, Unix domain 22.25 The zsh/net/socket Module special characters, highlighting 18.7 Character Highlighting special parameters 15.1 Description spelling correction 16.2.6 Input/Output stack, history 17 Shell Builtin Commands startup files 5.1 Startup/Shutdown Files startup files, global, inhibiting 16.2.5 Initialisation startup files, sourcing 16.2.5 Initialisation static named directories 14.7.2 Static named directories status, on exit from pipeline 16.2.9 Scripts and Functions styles in zftp functions 25.4.1 Configuration sublist 6.1 Simple Commands & Pipelines subscript flags 15.2.3 Subscript Flags subscripts 15.2.1 Array Subscripts subshell 6.3 Complex Commands substitution, command 14.4 Command Substitution substitution, parameter, flags 14.3.1 Parameter Expansion Flags substitution, parameter, rules 14.3.2 Rules substitution, process 14.2 Process Substitution suffix, highlighting removable, in completion 18.7 Character Highlighting sun keyboard, annoying 16.2.6 Input/Output suspending jobs 10.1 Jobs suspending the shell 17 Shell Builtin Commands symbolic links 16.2.1 Changing Directories T TCP 22.28 The zsh/net/tcp Module TCP function system 24 TCP Function System TCP, example 22.28.4 Example termcap value, printing 22.29 The zsh/termcap Module terminal 22.4 The zsh/clone Module terminal escape sequences for highlighting 18.7 Character Highlighting terminfo value, printing 22.30 The zsh/terminfo Module text objects 18.6.7 Text Objects timed execution 22.24 The zsh/sched Module timing 6.3 Complex Commands timing the shell 17 Shell Builtin Commands tracing, of commands 16.2.9 Scripts and Functions tracing, of input lines 16.2.9 Scripts and Functions trapping signals 9.3.2 Trap Functions trapping signals 17 Shell Builtin Commands traps, asynchronous 16.2.10 Shell Emulation traps, DEBUG, before or after command 16.2.9 Scripts and Functions traps, on function exit 16.2.10 Shell Emulation traps, POSIX compatibility 16.2.10 Shell Emulation try blocks 6.3 Complex Commands tty, freezing 17 Shell Builtin Commands U umask 17 Shell Builtin Commands Unicode combining characters 16.2.12 Zle unset parameters, substituting 16.2.3 Expansion and Globbing until loops 6.3 Complex Commands user contributions 26 User Contributions user selection 6.3 Complex Commands users, watching 22.31 The zsh/watch Module V variables 15 Parameters variables, environment 15.1 Description version The Z Shell Manual version control utility 26.5 Gathering information from version control systems W waiting before rm * 16.2.6 Input/Output waiting for jobs 17 Shell Builtin Commands watching users 22.31 The zsh/watch Module while loops 6.3 Complex Commands widgets 18.4 Zle Widgets widgets, binding 18.3 Zle Builtins widgets, calling 18.3 Zle Builtins widgets, defining 18.3 Zle Builtins widgets, invoking 18.3 Zle Builtins widgets, rebinding 18.3 Zle Builtins widgets, standard 18.6 Standard Widgets widgets, user-defined 18.5 User-Defined Widgets windows, curses 22.9.1 Builtin word designators, history 14.1.3 Word Designators writing modules 22.13 The zsh/example Module \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-4-html-index-split-3-cp-letter-S-q0oo3.html",
  "markdown": "# zsh: Concept Index: S – W\n\nIndex Entry  Section\n\n* * *\n\nS [scalar](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-scalar) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [select, system call](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-select_002c-system-call) [22.37 The zsh/zselect Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzselect-Module) [selection, case](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-selection_002c-case) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [selection, user](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-selection_002c-user) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [sh compatibility](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-sh-compatibility) [4.2 Compatibility](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Compatibility) [sh, compatibility](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-sh_002c-compatibility) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [sh, expansion style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-sh_002c-expansion-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [sh, field splitting style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-sh_002c-field-splitting-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [sh, field splitting style, parameter](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-sh_002c-field-splitting-style_002c-parameter) [14.3 Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) [sh, globbing style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-sh_002c-globbing-style) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [sh, redirections with no command](https://zsh.sourceforge.io/Doc/Release/Options.html#index-sh_002c-redirections-with-no-command) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [sh, single letter options style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-sh_002c-single-letter-options-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [share history](https://zsh.sourceforge.io/Doc/Release/Options.html#index-share-history) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [shell flags](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-shell-flags) [4.1 Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation-1) [shell grammar](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-shell-grammar) [6 Shell Grammar](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Shell-Grammar) [shell options](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-shell-options) [4.1 Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation-1) [shell, cloning](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-shell_002c-cloning) [22.4 The zsh/clone Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fclone-Module) [shell, suspending](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-shell_002c-suspending) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [shell, timing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-shell_002c-timing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [shutdown files](https://zsh.sourceforge.io/Doc/Release/Files.html#index-shutdown-files) [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) [signals, trapping](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-signals_002c-trapping) [9.3.2 Trap Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Trap-Functions) [signals, trapping](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-signals_002c-trapping-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [simple commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-simple-commands) [6.1 Simple Commands & Pipelines](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Simple-Commands-_0026-Pipelines) [single command](https://zsh.sourceforge.io/Doc/Release/Options.html#index-single-command) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [single letter options](https://zsh.sourceforge.io/Doc/Release/Options.html#index-single-letter-options) [16.4 Single Letter Options](https://zsh.sourceforge.io/Doc/Release/Options.html#Single-Letter-Options) [single letter options, ksh style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-single-letter-options_002c-ksh-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [slash, removing trailing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-slash_002c-removing-trailing) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [slow connection, editing over](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-slow-connection_002c-editing-over) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [sockets](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-sockets) [22.25 The zsh/net/socket Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fnet_002fsocket-Module) [sockets, closing TCP](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-sockets_002c-closing-TCP) [22.28.3 Closing Connections](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Closing-Connections) [sockets, inbound TCP](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-sockets_002c-inbound-TCP) [22.28.2 Inbound Connections](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Inbound-Connections-1) [sockets, inbound Unix domain](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-sockets_002c-inbound-Unix-domain) [22.25.2 Inbound Connections](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Inbound-Connections) [sockets, outbound TCP](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-sockets_002c-outbound-TCP) [22.28.1 Outbound Connections](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Outbound-Connections) [sockets, outbound Unix domain](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-sockets_002c-outbound-Unix-domain) [22.25.1 Outbound Connections](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Outbound-Connections-1) [sockets, TCP](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-sockets_002c-TCP) [22.28 The zsh/net/tcp Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fnet_002ftcp-Module) [sockets, Unix domain](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-sockets_002c-Unix-domain) [22.25 The zsh/net/socket Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fnet_002fsocket-Module) [special characters, highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-special-characters_002c-highlighting) [18.7 Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting) [special parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-special-parameters) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [spelling correction](https://zsh.sourceforge.io/Doc/Release/Options.html#index-spelling-correction) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [stack, history](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-stack_002c-history) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [startup files](https://zsh.sourceforge.io/Doc/Release/Files.html#index-startup-files) [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) [startup files, global, inhibiting](https://zsh.sourceforge.io/Doc/Release/Options.html#index-startup-files_002c-global_002c-inhibiting) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [startup files, sourcing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-startup-files_002c-sourcing) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [static named directories](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-static-named-directories) [14.7.2 Static named directories](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Static-named-directories) [status, on exit from pipeline](https://zsh.sourceforge.io/Doc/Release/Options.html#index-status_002c-on-exit-from-pipeline) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [styles in zftp functions](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-styles-in-zftp-functions) [25.4.1 Configuration](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Configuration-2) [sublist](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-sublist) [6.1 Simple Commands & Pipelines](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Simple-Commands-_0026-Pipelines) [subscript flags](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-subscript-flags) [15.2.3 Subscript Flags](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Subscript-Flags) [subscripts](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-subscripts) [15.2.1 Array Subscripts](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Array-Subscripts) [subshell](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-subshell) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [substitution, command](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-substitution_002c-command) [14.4 Command Substitution](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Command-Substitution) [substitution, parameter, flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-substitution_002c-parameter_002c-flags) [14.3.1 Parameter Expansion Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion-Flags) [substitution, parameter, rules](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-substitution_002c-parameter_002c-rules) [14.3.2 Rules](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Rules) [substitution, process](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-substitution_002c-process) [14.2 Process Substitution](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Process-Substitution) [suffix, highlighting removable, in completion](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-suffix_002c-highlighting-removable_002c-in-completion) [18.7 Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting) [sun keyboard, annoying](https://zsh.sourceforge.io/Doc/Release/Options.html#index-sun-keyboard_002c-annoying) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [suspending jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-suspending-jobs) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [suspending the shell](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-suspending-the-shell) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [symbolic links](https://zsh.sourceforge.io/Doc/Release/Options.html#index-symbolic-links) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories)\n\n* * *\n\nT [TCP](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-TCP) [22.28 The zsh/net/tcp Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fnet_002ftcp-Module) [TCP function system](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP-function-system) [24 TCP Function System](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Function-System) [TCP, example](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-TCP_002c-example) [22.28.4 Example](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Example-2) [termcap value, printing](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-termcap-value_002c-printing) [22.29 The zsh/termcap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ftermcap-Module) [terminal](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-terminal) [22.4 The zsh/clone Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fclone-Module) [terminal escape sequences for highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-terminal-escape-sequences-for-highlighting) [18.7 Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting) [terminfo value, printing](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-terminfo-value_002c-printing) [22.30 The zsh/terminfo Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fterminfo-Module) [text objects](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-text-objects) [18.6.7 Text Objects](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Text-Objects) [timed execution](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-timed-execution) [22.24 The zsh/sched Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fsched-Module) [timing](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-timing) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [timing the shell](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-timing-the-shell) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [tracing, of commands](https://zsh.sourceforge.io/Doc/Release/Options.html#index-tracing_002c-of-commands) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [tracing, of input lines](https://zsh.sourceforge.io/Doc/Release/Options.html#index-tracing_002c-of-input-lines) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [trapping signals](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-trapping-signals) [9.3.2 Trap Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Trap-Functions) [trapping signals](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-trapping-signals-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [traps, asynchronous](https://zsh.sourceforge.io/Doc/Release/Options.html#index-traps_002c-asynchronous) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [traps, DEBUG, before or after command](https://zsh.sourceforge.io/Doc/Release/Options.html#index-traps_002c-DEBUG_002c-before-or-after-command) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [traps, on function exit](https://zsh.sourceforge.io/Doc/Release/Options.html#index-traps_002c-on-function-exit) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [traps, POSIX compatibility](https://zsh.sourceforge.io/Doc/Release/Options.html#index-traps_002c-POSIX-compatibility) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [try blocks](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-try-blocks) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [tty, freezing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-tty_002c-freezing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nU [umask](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-umask-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [Unicode combining characters](https://zsh.sourceforge.io/Doc/Release/Options.html#index-Unicode-combining-characters) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [unset parameters, substituting](https://zsh.sourceforge.io/Doc/Release/Options.html#index-unset-parameters_002c-substituting) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [until loops](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-until-loops) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [user contributions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-user-contributions) [26 User Contributions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#User-Contributions) [user selection](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-user-selection) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [users, watching](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-users_002c-watching) [22.31 The zsh/watch Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fwatch-Module)\n\n* * *\n\nV [variables](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-variables) [15 Parameters](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters) [variables, environment](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-variables_002c-environment) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [version](https://zsh.sourceforge.io/Doc/Release/index.html#index-version) [The Z Shell Manual](https://zsh.sourceforge.io/Doc/Release/index.html#Top) [version control utility](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-version-control-utility) [26.5 Gathering information from version control systems](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Version-Control-Information)\n\n* * *\n\nW [waiting before rm \\*](https://zsh.sourceforge.io/Doc/Release/Options.html#index-waiting-before-rm-_002a) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [waiting for jobs](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-waiting-for-jobs) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [watching users](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-watching-users) [22.31 The zsh/watch Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fwatch-Module) [while loops](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-while-loops) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-widgets) [18.4 Zle Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Widgets) [widgets, binding](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-widgets_002c-binding) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [widgets, calling](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-widgets_002c-calling) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [widgets, defining](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-widgets_002c-defining) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [widgets, invoking](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-widgets_002c-invoking) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [widgets, rebinding](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-widgets_002c-rebinding) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [widgets, standard](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-widgets_002c-standard) [18.6 Standard Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Standard-Widgets) [widgets, user-defined](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-widgets_002c-user_002ddefined) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [windows, curses](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-windows_002c-curses) [22.9.1 Builtin](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Builtin) [word designators, history](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-word-designators_002c-history) [14.1.3 Word Designators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Word-Designators) [writing modules](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-writing-modules) [22.13 The zsh/example Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fexample-Module)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 288,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-4-html-index-split-3-cp-letter-S-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-4-html-index-split-3-cp-letter-S-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-4-html-index-split-3-cp-letter-S-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-4-html-index-split-3-cp-letter-S-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-4-html-index-split-3-cp-letter-S-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 33555,
      "readableText": 31043,
      "none": 33297,
      "readableTextIfPossible": 33297,
      "result": 31043,
      "markdown": 22604
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_13.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_13.html#index_split-12",
    "loadedTime": "2025-05-08T06:52:03.028Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Functions-Index.html#Functions-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_13.html#index_split-12",
    "title": "zsh: Functions Index: C – M",
    "description": "zsh: Functions Index: C – M",
    "author": null,
    "keywords": "zsh: Functions Index: C – M",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:01 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-8946\"",
      "expires": "Thu, 08 May 2025 06:53:01 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "MISS",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70826c88336d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Functions Index: C – M\nIndex Entry Section C calendar 23.3.1 Calendar system functions calendar_add 23.3.1 Calendar system functions calendar_edit 23.3.1 Calendar system functions calendar_lockfiles 23.5 Utility functions calendar_parse 23.3.1 Calendar system functions calendar_read 23.5 Utility functions calendar_scandate 23.5 Utility functions calendar_show 23.5 Utility functions calendar_showdate 23.3.1 Calendar system functions calendar_sort 23.3.1 Calendar system functions cap 22.3 The zsh/cap Module case 6.3 Complex Commands catch 26.8 Exception Handling cd 17 Shell Builtin Commands cdr 26.3 Remembering Recent Directories chdir 17 Shell Builtin Commands chgrp 22.14 The zsh/files Module chmod 22.14 The zsh/files Module chown 22.14 The zsh/files Module chpwd 9.3.1 Hook Functions chpwd_recent_add 26.3 Remembering Recent Directories chpwd_recent_dirs 26.3 Remembering Recent Directories chpwd_recent_filehandler 26.3 Remembering Recent Directories clone 22.4 The zsh/clone Module colors 26.12.1 Descriptions command 6.2 Precommand Modifiers command 17 Shell Builtin Commands command_not_found_handler 8 Command Execution compadd 19.3 Completion Builtin Commands comparguments 22.8 The zsh/computil Module compaudit 20.2.1 Use of compinit compctl 21.2 Description compdef 20.2.3 Functions compdescribe 22.8 The zsh/computil Module compfiles 22.8 The zsh/computil Module compgroups 22.8 The zsh/computil Module compinit 20.2.1 Use of compinit compinstall 20.2 Initialization compquote 22.8 The zsh/computil Module compset 19.3 Completion Builtin Commands comptags 22.8 The zsh/computil Module comptry 22.8 The zsh/computil Module compvalues 22.8 The zsh/computil Module continue 17 Shell Builtin Commands coproc 6.1 Simple Commands & Pipelines cube 17 Shell Builtin Commands D declare 17 Shell Builtin Commands dirs 17 Shell Builtin Commands disable 17 Shell Builtin Commands disable, use of 6.5 Reserved Words disown 17 Shell Builtin Commands disown, use of 10.1 Jobs E echo 17 Shell Builtin Commands echotc 22.29 The zsh/termcap Module echoti 22.30 The zsh/terminfo Module emulate 17 Shell Builtin Commands enable 17 Shell Builtin Commands eval 17 Shell Builtin Commands example 22.13 The zsh/example Module exec 6.2 Precommand Modifiers exit 17 Shell Builtin Commands export 17 Shell Builtin Commands F false 17 Shell Builtin Commands fc 17 Shell Builtin Commands fc, use of 14.1.1 Overview fg 17 Shell Builtin Commands fg, use of 10.1 Jobs float 17 Shell Builtin Commands float, use of 11 Arithmetic Evaluation fned 26.12.1 Descriptions for 6.3 Complex Commands foreach 6.4 Alternate Forms For Complex Commands function 6.3 Complex Commands function, use of 9 Functions functions 17 Shell Builtin Commands functions, hook 9.3.1 Hook Functions functions, use of 9 Functions G getcap 22.3 The zsh/cap Module getln 17 Shell Builtin Commands getopts 17 Shell Builtin Commands H hash 17 Shell Builtin Commands histed 26.12.1 Descriptions history 17 Shell Builtin Commands hook functions 9.3.1 Hook Functions I if 6.3 Complex Commands integer 17 Shell Builtin Commands integer, use of 11 Arithmetic Evaluation is-at-least 26.12.1 Descriptions J jobs 17 Shell Builtin Commands K kill 17 Shell Builtin Commands L let 17 Shell Builtin Commands let, use of 11 Arithmetic Evaluation limit 17 Shell Builtin Commands ln 22.14 The zsh/files Module local 17 Shell Builtin Commands log 22.31 The zsh/watch Module logout 17 Shell Builtin Commands M max 26.10 Mathematical Functions min 26.10 Mathematical Functions mkdir 22.14 The zsh/files Module mv 22.14 The zsh/files Module \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-13-html-index-split-12-x8gk6.html",
  "markdown": "# zsh: Functions Index: C – M\n\nIndex Entry  Section\n\n* * *\n\nC [`calendar`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar) [23.3.1 Calendar system functions](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-system-functions) [`calendar_add`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar_005fadd) [23.3.1 Calendar system functions](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-system-functions) [`calendar_edit`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar_005fedit) [23.3.1 Calendar system functions](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-system-functions) [`calendar_lockfiles`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar_005flockfiles) [23.5 Utility functions](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Utility-Functions) [`calendar_parse`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar_005fparse) [23.3.1 Calendar system functions](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-system-functions) [`calendar_read`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar_005fread) [23.5 Utility functions](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Utility-Functions) [`calendar_scandate`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar_005fscandate) [23.5 Utility functions](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Utility-Functions) [`calendar_show`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar_005fshow) [23.5 Utility functions](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Utility-Functions) [`calendar_showdate`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar_005fshowdate) [23.3.1 Calendar system functions](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-system-functions) [`calendar_sort`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-calendar_005fsort) [23.3.1 Calendar system functions](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-system-functions) [`cap`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-cap) [22.3 The zsh/cap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcap-Module) [`case`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-case) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [`catch`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-catch) [26.8 Exception Handling](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Exception-Handling) [`cd`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-cd) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`cdr`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-cdr) [26.3 Remembering Recent Directories](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Recent-Directories) [`chdir`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-chdir) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`chgrp`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-chgrp) [22.14 The zsh/files Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ffiles-Module) [`chmod`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-chmod) [22.14 The zsh/files Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ffiles-Module) [`chown`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-chown) [22.14 The zsh/files Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ffiles-Module) [`chpwd`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-chpwd) [9.3.1 Hook Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Hook-Functions) [`chpwd_recent_add`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-chpwd_005frecent_005fadd) [26.3 Remembering Recent Directories](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Recent-Directories) [`chpwd_recent_dirs`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-chpwd_005frecent_005fdirs) [26.3 Remembering Recent Directories](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Recent-Directories) [`chpwd_recent_filehandler`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-chpwd_005frecent_005ffilehandler) [26.3 Remembering Recent Directories](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Recent-Directories) [`clone`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-clone) [22.4 The zsh/clone Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fclone-Module) [`colors`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-colors) [26.12.1 Descriptions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Descriptions) [`command`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-command) [6.2 Precommand Modifiers](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Precommand-Modifiers) [`command`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-command-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`command_not_found_handler`](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#index-command_005fnot_005ffound_005fhandler) [8 Command Execution](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#Command-Execution) [`compadd`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-compadd) [19.3 Completion Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Builtin-Commands) [`comparguments`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-comparguments) [22.8 The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module) [`compaudit`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-compaudit) [20.2.1 Use of compinit](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Use-of-compinit) [`compctl`](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#index-compctl) [21.2 Description](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#Description-5) [`compdef`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-compdef) [20.2.3 Functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Functions-3) [`compdescribe`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-compdescribe) [22.8 The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module) [`compfiles`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-compfiles) [22.8 The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module) [`compgroups`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-compgroups) [22.8 The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module) [`compinit`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-compinit) [20.2.1 Use of compinit](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Use-of-compinit) [`compinstall`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-compinstall) [20.2 Initialization](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Initialization) [`compquote`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-compquote) [22.8 The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module) [`compset`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-compset) [19.3 Completion Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Builtin-Commands) [`comptags`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-comptags) [22.8 The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module) [`comptry`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-comptry) [22.8 The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module) [`compvalues`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-compvalues) [22.8 The zsh/computil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcomputil-Module) [`continue`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-continue) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`coproc`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-coproc) [6.1 Simple Commands & Pipelines](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Simple-Commands-_0026-Pipelines) [`cube`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-cube) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nD [`declare`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-declare) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`dirs`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-dirs) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`disable`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-disable) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`disable, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-disable_002c-use-of) [6.5 Reserved Words](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Reserved-Words) [`disown`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-disown) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`disown, use of`](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-disown_002c-use-of) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs)\n\n* * *\n\nE [`echo`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-echo) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`echotc`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-echotc) [22.29 The zsh/termcap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ftermcap-Module) [`echoti`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-echoti) [22.30 The zsh/terminfo Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fterminfo-Module) [`emulate`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-emulate) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`enable`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-enable) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`eval`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-eval) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`example`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-example) [22.13 The zsh/example Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fexample-Module) [`exec`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-exec) [6.2 Precommand Modifiers](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Precommand-Modifiers) [`exit`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-exit) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`export`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-export-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nF [`false`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-false) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`fc`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-fc) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`fc, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-fc_002c-use-of) [14.1.1 Overview](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Overview) [`fg`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-fg) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`fg, use of`](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-fg_002c-use-of) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [`float`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-float) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`float, use of`](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-float_002c-use-of) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [`fned`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-fned) [26.12.1 Descriptions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Descriptions) [`for`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-for) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [`foreach`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-foreach) [6.4 Alternate Forms For Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Alternate-Forms-For-Complex-Commands) [`function`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-function) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [`function, use of`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-function_002c-use-of) [9 Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions) [`functions`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-functions-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`functions, hook`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-functions_002c-hook) [9.3.1 Hook Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Hook-Functions) [`functions, use of`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-functions_002c-use-of) [9 Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions)\n\n* * *\n\nG [`getcap`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-getcap) [22.3 The zsh/cap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fcap-Module) [`getln`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-getln) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`getopts`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-getopts) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nH [`hash`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-hash-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`histed`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-histed) [26.12.1 Descriptions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Descriptions) [`history`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-history-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`hook functions`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-hook-functions) [9.3.1 Hook Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Hook-Functions)\n\n* * *\n\nI [`if`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-if) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [`integer`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-integer) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`integer, use of`](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-integer_002c-use-of) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [`is-at-least`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-is_002dat_002dleast) [26.12.1 Descriptions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Descriptions)\n\n* * *\n\nJ [`jobs`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-jobs-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nK [`kill`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-kill) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nL [`let`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-let) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`let, use of`](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-let_002c-use-of) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [`limit`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-limit) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`ln`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-ln) [22.14 The zsh/files Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ffiles-Module) [`local`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-local) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`log`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-log) [22.31 The zsh/watch Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fwatch-Module) [`logout`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-logout) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nM [`max`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-max) [26.10 Mathematical Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Mathematical-Functions) [`min`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-min) [26.10 Mathematical Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Mathematical-Functions) [`mkdir`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-mkdir) [22.14 The zsh/files Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ffiles-Module) [`mv`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-mv) [22.14 The zsh/files Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ffiles-Module)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 284,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-13-html-index-split-12-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-13-html-index-split-12-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-13-html-index-split-12-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-13-html-index-split-12-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-13-html-index-split-12-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 33053,
      "readableText": 30947,
      "none": 33500,
      "readableTextIfPossible": 33500,
      "result": 30947,
      "markdown": 21125
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_19.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_19.html#index_split-18_ky_letter-Q",
    "loadedTime": "2025-05-08T06:52:03.012Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Style-and-Tag-Index.html#Style-and-Tag-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_19.html#index_split-18_ky_letter-Q",
    "title": "zsh: Style and Tag Index: Q – Z",
    "description": "zsh: Style and Tag Index: Q – Z",
    "author": null,
    "keywords": "zsh: Style and Tag Index: Q – Z",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:01 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-6f41\"",
      "expires": "Thu, 08 May 2025 06:53:01 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "MISS",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7082a6a9a36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Style and Tag Index: Q – Z\nIndex Entry Section Q quilt-patch-dir 26.5.2 Configuration quilt-standalone 26.5.2 Configuration quiltcommand 26.5.2 Configuration R range, completion style 20.3.3 Standard Styles recursive-files, completion style 20.3.3 Standard Styles reformat-date 23.4 Styles regular, completion style 20.3.3 Standard Styles rehash, completion style 20.3.3 Standard Styles remote-access, completion style 20.3.3 Standard Styles remote-glob, zftp style 25.4.1 Configuration remove-all-dups, completion style 20.3.3 Standard Styles rprompt, nslookup style 26.12.2 Styles S select-prompt, completion style 20.3.3 Standard Styles select-scroll, completion style 20.3.3 Standard Styles separate-sections, completion style 20.3.3 Standard Styles sequences, completion tag 20.3.2 Standard Tags sessions, completion tag 20.3.2 Standard Tags show-ambiguity, completion style 20.3.3 Standard Styles show-completer, completion style 20.3.3 Standard Styles show-prog 23.4 Styles signals, completion tag 20.3.2 Standard Tags single-ignored, completion style 20.3.3 Standard Styles sort, completion style 20.3.3 Standard Styles special-dirs, completion style 20.3.3 Standard Styles squeeze-slashes, completion style 20.3.3 Standard Styles stagedstr 26.5.2 Configuration stop, completion style 20.3.3 Standard Styles stop-keys, widget style 26.7.3 Styles strings, completion tag 20.3.2 Standard Tags strip-comments, completion style 20.3.3 Standard Styles styles, completion tag 20.3.2 Standard Tags subst-globs-only, completion style 20.3.3 Standard Styles substitute, completion style 20.3.3 Standard Styles suffix, completion style 20.3.3 Standard Styles suffixes, completion tag 20.3.2 Standard Tags T tag-order, completion style 20.3.3 Standard Styles tags, completion tag 20.3.2 Standard Tags targets, completion tag 20.3.2 Standard Tags time-zones, completion tag 20.3.2 Standard Tags titlebar, zftp style 25.4.1 Configuration toggle, widget style 26.7.3 Styles types, completion tag 20.3.2 Standard Tags U unstagedstr 26.5.2 Configuration update, zftp style 25.4.1 Configuration urls, completion style 20.3.3 Standard Styles urls, completion tag 20.3.2 Standard Tags use-cache, completion style 20.3.3 Standard Styles use-compctl, completion style 20.3.3 Standard Styles use-ip, completion style 20.3.3 Standard Styles use-prompt-escapes 26.5.2 Configuration use-quilt 26.5.2 Configuration use-server 26.5.2 Configuration use-simple 26.5.2 Configuration users, completion style 20.3.3 Standard Styles users, completion tag 20.3.2 Standard Tags users-hosts, completion style 20.3.3 Standard Styles users-hosts-ports, completion style 20.3.3 Standard Styles V values, completion tag 20.3.2 Standard Tags variant, completion tag 20.3.2 Standard Tags verbose, completion style 20.3.3 Standard Styles verbose, widget style 26.7.3 Styles visuals, completion tag 20.3.2 Standard Tags W warn-time 23.4 Styles warnings, completion tag 20.3.2 Standard Tags widget, widget style 26.7.3 Styles widgets, completion tag 20.3.2 Standard Tags windows, completion tag 20.3.2 Standard Tags word, completion style 20.3.3 Standard Styles Z zsh-options, completion tag 20.3.2 Standard Tags \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-19-html-index-split-18-ky-letter-Q-4qifh.html",
  "markdown": "# zsh: Style and Tag Index: Q – Z\n\nIndex Entry  Section\n\n* * *\n\nQ [`quilt-patch-dir`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-quilt_002dpatch_002ddir) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`quilt-standalone`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-quilt_002dstandalone) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`quiltcommand`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-quiltcommand) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration)\n\n* * *\n\nR [`range, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-range_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`recursive-files, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-recursive_002dfiles_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`reformat-date`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-reformat_002ddate) [23.4 Styles](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Styles) [`regular, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-regular_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`rehash, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-rehash_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`remote-access, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-remote_002daccess_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`remote-glob, zftp style`](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-remote_002dglob_002c-zftp-style) [25.4.1 Configuration](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Configuration-2) [`remove-all-dups, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-remove_002dall_002ddups_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`rprompt, nslookup style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-rprompt_002c-nslookup-style) [26.12.2 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles)\n\n* * *\n\nS [`select-prompt, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-select_002dprompt_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`select-scroll, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-select_002dscroll_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`separate-sections, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-separate_002dsections_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`sequences, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-sequences_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`sessions, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-sessions_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`show-ambiguity, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-show_002dambiguity_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`show-completer, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-show_002dcompleter_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`show-prog`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-show_002dprog) [23.4 Styles](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Styles) [`signals, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-signals_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`single-ignored, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-single_002dignored_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`sort, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-sort_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`special-dirs, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-special_002ddirs_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`squeeze-slashes, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-squeeze_002dslashes_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`stagedstr`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-stagedstr) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`stop, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-stop_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`stop-keys, widget style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-stop_002dkeys_002c-widget-style) [26.7.3 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles-2) [`strings, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-strings_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`strip-comments, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-strip_002dcomments_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`styles, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-styles_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`subst-globs-only, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-subst_002dglobs_002donly_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`substitute, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-substitute_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`suffix, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-suffix_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`suffixes, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-suffixes_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nT [`tag-order, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-tag_002dorder_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`tags, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-tags_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`targets, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-targets_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`time-zones, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-time_002dzones_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`titlebar, zftp style`](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-titlebar_002c-zftp-style) [25.4.1 Configuration](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Configuration-2) [`toggle, widget style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-toggle_002c-widget-style) [26.7.3 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles-2) [`types, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-types_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nU [`unstagedstr`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-unstagedstr) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`update, zftp style`](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-update_002c-zftp-style) [25.4.1 Configuration](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Configuration-2) [`urls, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-urls_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`urls, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-urls_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`use-cache, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-use_002dcache_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`use-compctl, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-use_002dcompctl_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`use-ip, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-use_002dip_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`use-prompt-escapes`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-use_002dprompt_002descapes) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`use-quilt`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-use_002dquilt) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`use-server`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-use_002dserver) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`use-simple`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-use_002dsimple) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`users, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-users_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`users, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-users_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`users-hosts, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-users_002dhosts_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`users-hosts-ports, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-users_002dhosts_002dports_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles)\n\n* * *\n\nV [`values, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-values_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`variant, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-variant_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`verbose, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-verbose_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`verbose, widget style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-verbose_002c-widget-style) [26.7.3 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles-2) [`visuals, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-visuals_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nW [`warn-time`](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-warn_002dtime) [23.4 Styles](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Styles) [`warnings, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-warnings_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`widget, widget style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-widget_002c-widget-style) [26.7.3 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles-2) [`widgets, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-widgets_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`windows, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-windows_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`word, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-word_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles)\n\n* * *\n\nZ [`zsh-options, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-zsh_002doptions_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 210,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-19-html-index-split-18-ky-letter-Q-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-19-html-index-split-18-ky-letter-Q-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-19-html-index-split-18-ky-letter-Q-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-19-html-index-split-18-ky-letter-Q-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-19-html-index-split-18-ky-letter-Q-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 24402,
      "readableText": 23032,
      "none": 26831,
      "readableTextIfPossible": 26831,
      "result": 23032,
      "markdown": 16185
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_7.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_7.html#index_split-6_vr_letter-Q",
    "loadedTime": "2025-05-08T06:52:05.320Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Variables-Index.html#Variables-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_7.html#index_split-6_vr_letter-Q",
    "title": "zsh: Variables Index: Q – W",
    "description": "zsh: Variables Index: Q – W",
    "author": null,
    "keywords": "zsh: Variables Index: Q – W",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:03 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-8f4f\"",
      "expires": "Thu, 08 May 2025 06:53:03 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "MISS",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7083a1b7b36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Variables Index: Q – W\nIndex Entry Section Q QIPREFIX 19.2 Completion Special Parameters QISUFFIX 19.2 Completion Special Parameters quote, compstate 19.2 Completion Special Parameters quoting, compstate 19.2 Completion Special Parameters R RANDOM 15.5 Parameters Set By The Shell RBUFFER 18.5 User-Defined Widgets READNULLCMD 15.6 Parameters Used By The Shell READNULLCMD, ignoring 16.2.10 Shell Emulation READNULLCMD, ignoring 16.2.10 Shell Emulation READNULLCMD, use of 7.3 Redirections with no command redirect, compstate 19.2 Completion Special Parameters REGION_ACTIVE 18.5 User-Defined Widgets region_highlight 18.5 User-Defined Widgets registers 18.5 User-Defined Widgets REPLY 15.6 Parameters Used By The Shell reply 15.6 Parameters Used By The Shell REPLY, use of 6.3 Complex Commands REPLY, use of 14.8.7 Glob Qualifiers reply, use of 14.8.7 Glob Qualifiers REPLY, use of 17 Shell Builtin Commands reply, use of 17 Shell Builtin Commands reply, use of 21.4.2 Flags with Arguments reply, use of 21.4.3 Control Flags reply, use of 22.38 The zsh/zutil Module REPORTMEMORY 15.6 Parameters Used By The Shell REPORTTIME 15.6 Parameters Used By The Shell restore, compstate 19.2 Completion Special Parameters reswords 22.20 The zsh/parameter Module RPROMPT 15.6 Parameters Used By The Shell RPROMPT2 15.6 Parameters Used By The Shell RPS1 15.6 Parameters Used By The Shell RPS2 15.6 Parameters Used By The Shell S saliases 22.20 The zsh/parameter Module SAVEHIST 15.6 Parameters Used By The Shell SECONDS 15.5 Parameters Set By The Shell SHLVL 15.5 Parameters Set By The Shell signals 15.5 Parameters Set By The Shell SPROMPT 15.6 Parameters Used By The Shell status 15.5 Parameters Set By The Shell STTY 15.6 Parameters Used By The Shell SUFFIX 19.2 Completion Special Parameters SUFFIX_ACTIVE 18.5 User-Defined Widgets SUFFIX_END 18.5 User-Defined Widgets SUFFIX_START 18.5 User-Defined Widgets sysparams 22.27.3 Parameters T tcp_expect_lines 24.5 TCP User Parameters tcp_filter 24.5 TCP User Parameters TCP_HANDLER_ACTIVE 24.5 TCP User Parameters TCP_LINE 24.5 TCP User Parameters tcp_lines 24.5 TCP User Parameters TCP_LINE_FD 24.5 TCP User Parameters TCP_LOG 24.5 TCP User Parameters tcp_no_spam_list 24.5 TCP User Parameters tcp_on_read 24.6 TCP User-defined Parameters TCP_OUTPUT 24.5 TCP User Parameters TCP_PROMPT 24.5 TCP User Parameters TCP_READ_DEBUG 24.5 TCP User Parameters TCP_SECONDS_START 24.5 TCP User Parameters TCP_SESS 24.5 TCP User Parameters TCP_SILENT 24.5 TCP User Parameters tcp_spam_list 24.5 TCP User Parameters TCP_TALK_ESCAPE 24.5 TCP User Parameters TCP_TIMEOUT 24.5 TCP User Parameters TERM 15.6 Parameters Used By The Shell termcap 22.29 The zsh/termcap Module TERMINFO 15.6 Parameters Used By The Shell terminfo 22.30 The zsh/terminfo Module TERMINFO_DIRS 15.6 Parameters Used By The Shell TIMEFMT 15.6 Parameters Used By The Shell TMOUT 15.6 Parameters Used By The Shell TMPPREFIX 15.6 Parameters Used By The Shell TMPSUFFIX 15.6 Parameters Used By The Shell to_end, compstate 19.2 Completion Special Parameters TRY_BLOCK_ERROR 15.5 Parameters Set By The Shell TRY_BLOCK_INTERRUPT 15.5 Parameters Set By The Shell TTY 15.5 Parameters Set By The Shell TTYIDLE 15.5 Parameters Set By The Shell U UID 15.5 Parameters Set By The Shell unambiguous, compstate 19.2 Completion Special Parameters unambiguous_cursor, compstate 19.2 Completion Special Parameters unambiguous_positions, compstate 19.2 Completion Special Parameters UNDO_CHANGE_NO 18.5 User-Defined Widgets UNDO_LIMIT_NO 18.5 User-Defined Widgets userdirs 22.20 The zsh/parameter Module usergroups 22.20 The zsh/parameter Module USERNAME 15.5 Parameters Set By The Shell V vared, compstate 19.2 Completion Special Parameters VENDOR 15.5 Parameters Set By The Shell VISUAL 18.2 Keymaps W watch 22.31 The zsh/watch Module WATCH 22.31 The zsh/watch Module watch, use of 22.31 The zsh/watch Module WATCHFMT 22.31 The zsh/watch Module WIDGET 18.5 User-Defined Widgets WIDGET, in hooks 26.2.5 Manipulating Hook Functions WIDGETFUNC 18.5 User-Defined Widgets widgets 22.34 The zsh/zleparameter Module WIDGETSTYLE 18.5 User-Defined Widgets WORDCHARS 15.6 Parameters Used By The Shell words 19.2 Completion Special Parameters \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-7-html-index-split-6-vr-letter-Q-lz85p.html",
  "markdown": "# zsh: Variables Index: Q – W\n\nIndex Entry  Section\n\n* * *\n\nQ [`QIPREFIX`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-QIPREFIX) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`QISUFFIX`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-QISUFFIX) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`quote, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-quote_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`quoting, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-quoting_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters)\n\n* * *\n\nR [`RANDOM`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-RANDOM) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`RBUFFER`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-RBUFFER) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`READNULLCMD`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-READNULLCMD) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`READNULLCMD, ignoring`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-READNULLCMD_002c-ignoring) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`READNULLCMD, ignoring`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-READNULLCMD_002c-ignoring-1) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`READNULLCMD, use of`](https://zsh.sourceforge.io/Doc/Release/Redirection.html#index-READNULLCMD_002c-use-of) [7.3 Redirections with no command](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirections-with-no-command) [`redirect, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-redirect_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`REGION_ACTIVE`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-REGION_005fACTIVE) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`region_highlight`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-region_005fhighlight) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`registers`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-registers) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`REPLY`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-REPLY) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`reply`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-reply) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`REPLY, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-REPLY_002c-use-of) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [`REPLY, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-REPLY_002c-use-of-1) [14.8.7 Glob Qualifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers) [`reply, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-reply_002c-use-of) [14.8.7 Glob Qualifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers) [`REPLY, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-REPLY_002c-use-of-2) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`reply, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-reply_002c-use-of-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`reply, use of`](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#index-reply_002c-use-of-2) [21.4.2 Flags with Arguments](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#Flags-with-Arguments) [`reply, use of`](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#index-reply_002c-use-of-3) [21.4.3 Control Flags](https://zsh.sourceforge.io/Doc/Release/Completion-Using-compctl.html#Control-Flags) [`reply, use of`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-reply_002c-use-of-4) [22.38 The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module) [`REPORTMEMORY`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-REPORTMEMORY) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`REPORTTIME`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-REPORTTIME) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`restore, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-restore_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`reswords`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-reswords) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`RPROMPT`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-RPROMPT) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`RPROMPT2`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-RPROMPT2) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`RPS1`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-RPS1) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`RPS2`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-RPS2) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell)\n\n* * *\n\nS [`saliases`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-saliases) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`SAVEHIST`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-SAVEHIST) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`SECONDS`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-SECONDS) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`SHLVL`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-SHLVL) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`signals`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-signals) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`SPROMPT`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-SPROMPT) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`status`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-status) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`STTY`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-STTY) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`SUFFIX`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-SUFFIX) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`SUFFIX_ACTIVE`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-SUFFIX_005fACTIVE) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`SUFFIX_END`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-SUFFIX_005fEND) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`SUFFIX_START`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-SUFFIX_005fSTART) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`sysparams`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-sysparams) [22.27.3 Parameters](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Parameters-1)\n\n* * *\n\nT [`tcp_expect_lines`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-tcp_005fexpect_005flines) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`tcp_filter`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-tcp_005ffilter) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_HANDLER_ACTIVE`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fHANDLER_005fACTIVE) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_LINE`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fLINE) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`tcp_lines`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-tcp_005flines) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_LINE_FD`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fLINE_005fFD) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_LOG`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fLOG) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`tcp_no_spam_list`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-tcp_005fno_005fspam_005flist) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`tcp_on_read`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-tcp_005fon_005fread) [24.6 TCP User-defined Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-User_002ddefined-Parameters) [`TCP_OUTPUT`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fOUTPUT) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_PROMPT`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fPROMPT) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_READ_DEBUG`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fREAD_005fDEBUG) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_SECONDS_START`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fSECONDS_005fSTART) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_SESS`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fSESS) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_SILENT`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fSILENT) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`tcp_spam_list`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-tcp_005fspam_005flist) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_TALK_ESCAPE`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fTALK_005fESCAPE) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TCP_TIMEOUT`](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-TCP_005fTIMEOUT) [24.5 TCP User Parameters](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Parameters) [`TERM`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TERM) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`termcap`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-termcap) [22.29 The zsh/termcap Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ftermcap-Module) [`TERMINFO`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TERMINFO) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`terminfo`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-terminfo) [22.30 The zsh/terminfo Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fterminfo-Module) [`TERMINFO_DIRS`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TERMINFO_005fDIRS) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`TIMEFMT`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TIMEFMT) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`TMOUT`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TMOUT) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`TMPPREFIX`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TMPPREFIX) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`TMPSUFFIX`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TMPSUFFIX) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`to_end, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-to_005fend_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`TRY_BLOCK_ERROR`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TRY_005fBLOCK_005fERROR) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`TRY_BLOCK_INTERRUPT`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TRY_005fBLOCK_005fINTERRUPT) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`TTY`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TTY) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`TTYIDLE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-TTYIDLE) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\nU [`UID`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-UID) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`unambiguous, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-unambiguous_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`unambiguous_cursor, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-unambiguous_005fcursor_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`unambiguous_positions, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-unambiguous_005fpositions_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`UNDO_CHANGE_NO`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-UNDO_005fCHANGE_005fNO) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`UNDO_LIMIT_NO`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-UNDO_005fLIMIT_005fNO) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`userdirs`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-userdirs) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`usergroups`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-usergroups) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`USERNAME`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-USERNAME) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\nV [`vared, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-vared_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`VENDOR`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-VENDOR) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`VISUAL`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-VISUAL) [18.2 Keymaps](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Keymaps)\n\n* * *\n\nW [`watch`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-watch) [22.31 The zsh/watch Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fwatch-Module) [`WATCH`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-WATCH) [22.31 The zsh/watch Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fwatch-Module) [`watch, use of`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-watch_002c-use-of) [22.31 The zsh/watch Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fwatch-Module) [`WATCHFMT`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-WATCHFMT) [22.31 The zsh/watch Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fwatch-Module) [`WIDGET`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-WIDGET) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`WIDGET, in hooks`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-WIDGET_002c-in-hooks) [26.2.5 Manipulating Hook Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Manipulating-Hook-Functions) [`WIDGETFUNC`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-WIDGETFUNC) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`widgets`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-widgets-1) [22.34 The zsh/zleparameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzleparameter-Module) [`WIDGETSTYLE`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-WIDGETSTYLE) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`WORDCHARS`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-WORDCHARS) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`words`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-words) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 292,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-7-html-index-split-6-vr-letter-Q-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-7-html-index-split-6-vr-letter-Q-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-7-html-index-split-6-vr-letter-Q-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-7-html-index-split-6-vr-letter-Q-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-7-html-index-split-6-vr-letter-Q-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 33135,
      "readableText": 30873,
      "none": 35045,
      "readableTextIfPossible": 35045,
      "result": 30873,
      "markdown": 21565
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_18.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_18.html#index_split-17",
    "loadedTime": "2025-05-08T06:52:09.318Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Style-and-Tag-Index.html#Style-and-Tag-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_18.html#index_split-17",
    "title": "zsh: Style and Tag Index: G – P",
    "description": "zsh: Style and Tag Index: G – P",
    "author": null,
    "keywords": "zsh: Style and Tag Index: G – P",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:06 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-9eb6\"",
      "expires": "Thu, 08 May 2025 06:53:06 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70849bb6436d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Style and Tag Index: G – P\nIndex Entry Section G gain-privileges, completion style 20.3.3 Standard Styles get-bookmarks 26.5.2 Configuration get-mq 26.5.2 Configuration get-revision 26.5.2 Configuration get-unapplied 26.5.2 Configuration glob, completion style 20.3.3 Standard Styles global, completion style 20.3.3 Standard Styles globbed-files, completion tag 20.3.2 Standard Tags group-name, completion style 20.3.3 Standard Styles group-order, completion style 20.3.3 Standard Styles groups, completion style 20.3.3 Standard Styles groups, completion tag 20.3.2 Standard Tags H handle-nonexistent, MIME style 26.9 MIME Functions handler, MIME style 26.9 MIME Functions hgrevformat 26.5.2 Configuration hidden, completion style 20.3.3 Standard Styles history-words, completion tag 20.3.2 Standard Tags hooks 26.5.2 Configuration hosts, completion style 20.3.3 Standard Styles hosts, completion tag 20.3.2 Standard Tags hosts-ports, completion style 20.3.3 Standard Styles I ignore-line, completion style 20.3.3 Standard Styles ignore-parents, completion style 20.3.3 Standard Styles ignored-patterns, completion style 20.3.3 Standard Styles indexes, completion tag 20.3.2 Standard Tags insert, completion style 20.3.3 Standard Styles insert-ids, completion style 20.3.3 Standard Styles insert-sections, completion style 20.3.3 Standard Styles insert-tab, completion style 20.3.3 Standard Styles insert-tab, completion style 26.12.2 Styles insert-unambiguous, completion style 20.3.3 Standard Styles interfaces, completion tag 20.3.2 Standard Tags J jobs, completion tag 20.3.2 Standard Tags K keep-prefix, completion style 20.3.3 Standard Styles keymaps, completion tag 20.3.2 Standard Tags keysyms, completion tag 20.3.2 Standard Tags known-hosts-files 20.3.3 Standard Styles L last-prompt, completion style 20.3.3 Standard Styles libraries, completion tag 20.3.2 Standard Tags limits, completion tag 20.3.2 Standard Tags list, completion style 20.3.3 Standard Styles list, widget style 26.7.3 Styles list-colors, completion style 20.3.3 Standard Styles list-dirs-first, completion style 20.3.3 Standard Styles list-grouped, completion style 20.3.3 Standard Styles list-packed, completion style 20.3.3 Standard Styles list-prompt, completion style 20.3.3 Standard Styles list-rows-first, completion style 20.3.3 Standard Styles list-separator, completion style 20.3.3 Standard Styles list-suffixes, completion style 20.3.3 Standard Styles local, completion style 20.3.3 Standard Styles local-directories, completion tag 20.3.2 Standard Tags M mail-directory, completion style 20.3.3 Standard Styles mailboxes, completion tag 20.3.2 Standard Tags mailcap, MIME style 26.9 MIME Functions mailcap-prio-flags, MIME style 26.9 MIME Functions mailcap-priorities, MIME style 26.9 MIME Functions manuals, completion tag 20.3.2 Standard Tags maps, completion tag 20.3.2 Standard Tags match, widget style 26.7.3 Styles match-original, completion style 20.3.3 Standard Styles matcher, completion style 20.3.3 Standard Styles matcher-list, completion style 20.3.3 Standard Styles max-errors, completion style 20.3.3 Standard Styles max-exports 26.5.2 Configuration max-matches-width, completion style 20.3.3 Standard Styles menu, completion style 20.3.3 Standard Styles messages, completion tag 20.3.2 Standard Tags mime-types, MIME style 26.9 MIME Functions modifiers, completion tag 20.3.2 Standard Tags modules, completion tag 20.3.2 Standard Tags muttrc, completion style 20.3.3 Standard Styles my-accounts, completion tag 20.3.2 Standard Tags N named-directories, completion tag 20.3.2 Standard Tags names, completion tag 20.3.2 Standard Tags never-background, MIME style 26.9 MIME Functions newsgroups, completion tag 20.3.2 Standard Tags nicknames, completion tag 20.3.2 Standard Tags nopatch-format 26.5.2 Configuration numbers, completion style 20.3.3 Standard Styles nvcsformats 26.5.2 Configuration O old-list, completion style 20.3.3 Standard Styles old-matches, completion style 20.3.3 Standard Styles old-menu, completion style 20.3.3 Standard Styles options, completion tag 20.3.2 Standard Tags original, completion style 20.3.3 Standard Styles original, completion tag 20.3.2 Standard Tags other-accounts, completion tag 20.3.2 Standard Tags P packages, completion tag 20.3.2 Standard Tags packageset, completion style 20.3.3 Standard Styles pager, MIME style 26.9 MIME Functions pager, nslookup style 26.12.2 Styles parameters, completion tag 20.3.2 Standard Tags patch-format 26.5.2 Configuration path, completion style 20.3.3 Standard Styles path-completion, completion style 20.3.3 Standard Styles path-directories, completion tag 20.3.2 Standard Tags paths, completion tag 20.3.2 Standard Tags pine-directory, completion style 20.3.3 Standard Styles pods, completion tag 20.3.2 Standard Tags ports, completion style 20.3.3 Standard Styles ports, completion tag 20.3.2 Standard Tags preferred-precipitation, example style 22.38 The zsh/zutil Module prefix-hidden, completion style 20.3.3 Standard Styles prefix-needed, completion style 20.3.3 Standard Styles prefixes, completion tag 20.3.2 Standard Tags preserve-prefix, completion style 20.3.3 Standard Styles printers, completion tag 20.3.2 Standard Tags processes, completion tag 20.3.2 Standard Tags processes-names, completion tag 20.3.2 Standard Tags progress, zftp style 25.4.1 Configuration prompt, nslookup style 26.12.2 Styles prompt, widget style 26.7.3 Styles \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-18-html-index-split-17-rvv8ej.html",
  "markdown": "# zsh: Style and Tag Index: G – P\n\nIndex Entry  Section\n\n* * *\n\nG [`gain-privileges, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-gain_002dprivileges_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`get-bookmarks`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-get_002dbookmarks) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`get-mq`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-get_002dmq) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`get-revision`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-get_002drevision) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`get-unapplied`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-get_002dunapplied) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`glob, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-glob_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`global, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-global_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`globbed-files, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-globbed_002dfiles_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`group-name, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-group_002dname_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`group-order, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-group_002dorder_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`groups, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-groups_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`groups, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-groups_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nH [`handle-nonexistent, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-handle_002dnonexistent_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`handler, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-handler_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`hgrevformat`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-hgrevformat) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`hidden, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-hidden_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`history-words, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-history_002dwords_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`hooks`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-hooks) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`hosts, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-hosts_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`hosts, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-hosts_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`hosts-ports, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-hosts_002dports_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles)\n\n* * *\n\nI [`ignore-line, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-ignore_002dline_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`ignore-parents, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-ignore_002dparents_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`ignored-patterns, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-ignored_002dpatterns_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`indexes, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-indexes_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`insert, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-insert_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`insert-ids, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-insert_002dids_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`insert-sections, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-insert_002dsections_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`insert-tab, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-insert_002dtab_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`insert-tab, completion style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-insert_002dtab_002c-completion-style-1) [26.12.2 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles) [`insert-unambiguous, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-insert_002dunambiguous_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`interfaces, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-interfaces_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nJ [`jobs, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-jobs_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nK [`keep-prefix, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-keep_002dprefix_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`keymaps, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-keymaps_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`keysyms, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-keysyms_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`known-hosts-files`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-known_002dhosts_002dfiles) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles)\n\n* * *\n\nL [`last-prompt, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-last_002dprompt_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`libraries, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-libraries_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`limits, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-limits_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`list, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-list_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`list, widget style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-list_002c-widget-style) [26.7.3 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles-2) [`list-colors, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-list_002dcolors_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`list-dirs-first, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-list_002ddirs_002dfirst_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`list-grouped, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-list_002dgrouped_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`list-packed, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-list_002dpacked_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`list-prompt, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-list_002dprompt_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`list-rows-first, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-list_002drows_002dfirst_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`list-separator, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-list_002dseparator_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`list-suffixes, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-list_002dsuffixes_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`local, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-local_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`local-directories, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-local_002ddirectories_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nM [`mail-directory, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-mail_002ddirectory_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`mailboxes, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-mailboxes_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`mailcap, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-mailcap_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`mailcap-prio-flags, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-mailcap_002dprio_002dflags_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`mailcap-priorities, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-mailcap_002dpriorities_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`manuals, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-manuals_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`maps, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-maps_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`match, widget style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-match_002c-widget-style) [26.7.3 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles-2) [`match-original, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-match_002doriginal_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`matcher, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-matcher_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`matcher-list, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-matcher_002dlist_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`max-errors, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-max_002derrors_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`max-exports`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-max_002dexports) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`max-matches-width, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-max_002dmatches_002dwidth_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`menu, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-menu_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`messages, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-messages_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`mime-types, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-mime_002dtypes_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`modifiers, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-modifiers_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`modules, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-modules_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`muttrc, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-muttrc_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`my-accounts, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-my_002daccounts_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nN [`named-directories, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-named_002ddirectories_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`names, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-names_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`never-background, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-never_002dbackground_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`newsgroups, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-newsgroups_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`nicknames, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-nicknames_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`nopatch-format`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-nopatch_002dformat) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`numbers, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-numbers_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`nvcsformats`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-nvcsformats) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration)\n\n* * *\n\nO [`old-list, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-old_002dlist_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`old-matches, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-old_002dmatches_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`old-menu, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-old_002dmenu_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`options, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-options_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`original, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-original_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`original, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-original_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`other-accounts, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-other_002daccounts_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags)\n\n* * *\n\nP [`packages, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-packages_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`packageset, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-packageset_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`pager, MIME style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-pager_002c-MIME-style) [26.9 MIME Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#MIME-Functions) [`pager, nslookup style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-pager_002c-nslookup-style) [26.12.2 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles) [`parameters, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-parameters_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`patch-format`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-patch_002dformat) [26.5.2 Configuration](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#vcs_005finfo-Configuration) [`path, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-path_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`path-completion, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-path_002dcompletion_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`path-directories, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-path_002ddirectories_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`paths, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-paths_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`pine-directory, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-pine_002ddirectory_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`pods, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-pods_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`ports, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-ports_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`ports, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-ports_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`preferred-precipitation, example style`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-preferred_002dprecipitation_002c-example-style) [22.38 The zsh/zutil Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzutil-Module) [`prefix-hidden, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-prefix_002dhidden_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`prefix-needed, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-prefix_002dneeded_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`prefixes, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-prefixes_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`preserve-prefix, completion style`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-preserve_002dprefix_002c-completion-style) [20.3.3 Standard Styles](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles) [`printers, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-printers_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`processes, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-processes_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`processes-names, completion tag`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-processes_002dnames_002c-completion-tag) [20.3.2 Standard Tags](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Tags) [`progress, zftp style`](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-progress_002c-zftp-style) [25.4.1 Configuration](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Configuration-2) [`prompt, nslookup style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-prompt_002c-nslookup-style) [26.12.2 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles) [`prompt, widget style`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-prompt_002c-widget-style) [26.7.3 Styles](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Styles-2)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 301,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-18-html-index-split-17-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-18-html-index-split-17-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-18-html-index-split-17-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-18-html-index-split-17-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-18-html-index-split-17-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 39887,
      "readableText": 37417,
      "none": 38980,
      "readableTextIfPossible": 38980,
      "result": 37417,
      "markdown": 26708
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_10.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_10.html#index_split-9_pg_letter-K",
    "loadedTime": "2025-05-08T06:52:04.620Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Options-Index.html#Options-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_10.html#index_split-9_pg_letter-K",
    "title": "zsh: Options Index: K – N",
    "description": "zsh: Options Index: K – N",
    "author": null,
    "keywords": "zsh: Options Index: K – N",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:02 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-1b902\"",
      "expires": "Thu, 08 May 2025 06:53:02 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "MISS",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70834580436d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Options Index: K – N\nIndex Entry Section K KSHARRAYS 16.2.10 Shell Emulation KSHAUTOLOAD 16.2.10 Shell Emulation KSHGLOB 16.2.3 Expansion and Globbing KSHOPTIONPRINT 16.2.10 Shell Emulation KSHTYPESET 16.2.10 Shell Emulation KSHZEROSUBSCRIPT 16.2.10 Shell Emulation KSH_ARRAYS 16.2.10 Shell Emulation KSH_ARRAYS, use of 15.2.1 Array Subscripts KSH_ARRAYS, use of 17 Shell Builtin Commands KSH_AUTOLOAD 16.2.10 Shell Emulation KSH_AUTOLOAD, use of 9.1 Autoloading Functions KSH_GLOB 16.2.3 Expansion and Globbing KSH_GLOB, use of 14.8.2 ksh-like Glob Operators KSH_OPTION_PRINT 16.2.10 Shell Emulation KSH_TYPESET 16.2.10 Shell Emulation KSH_ZERO_SUBSCRIPT 16.2.10 Shell Emulation L LISTAMBIGUOUS 16.2.2 Completion LISTBEEP 16.2.2 Completion LISTPACKED 16.2.2 Completion LISTROWSFIRST 16.2.2 Completion LISTTYPES 16.2.2 Completion LIST_AMBIGUOUS 16.2.2 Completion LIST_BEEP 16.2.2 Completion LIST_PACKED 16.2.2 Completion LIST_ROWS_FIRST 16.2.2 Completion LIST_TYPES 16.2.2 Completion LOCALLOOPS 16.2.9 Scripts and Functions LOCALOPTIONS 16.2.9 Scripts and Functions LOCALPATTERNS 16.2.9 Scripts and Functions LOCALTRAPS 16.2.9 Scripts and Functions LOCAL_LOOPS 16.2.9 Scripts and Functions LOCAL_OPTIONS 16.2.9 Scripts and Functions LOCAL_PATTERNS 16.2.9 Scripts and Functions LOCAL_TRAPS 16.2.9 Scripts and Functions LOG 16.3 Option Aliases LOGIN 16.2.11 Shell State LOGIN, use of 5.1 Startup/Shutdown Files LONGLISTJOBS 16.2.7 Job Control LONG_LIST_JOBS 16.2.7 Job Control M MAGICEQUALSUBST 16.2.3 Expansion and Globbing MAGIC_EQUAL_SUBST 16.2.3 Expansion and Globbing MAILWARN 16.3 Option Aliases MAILWARNING 16.2.6 Input/Output MAIL_WARN 16.3 Option Aliases MAIL_WARNING 16.2.6 Input/Output MARKDIRS 16.2.3 Expansion and Globbing MARK_DIRS 16.2.3 Expansion and Globbing MARK_DIRS, setting in pattern 14.8.7 Glob Qualifiers MENUCOMPLETE 16.2.2 Completion MENU_COMPLETE 16.2.2 Completion MENU_COMPLETE, use of 18.6.5 Completion MONITOR 16.2.7 Job Control MONITOR, use of 10.1 Jobs MULTIBYTE 16.2.3 Expansion and Globbing MULTIFUNCDEF 16.2.9 Scripts and Functions MULTIOS 16.2.9 Scripts and Functions MULTIOS, use of 7.2 Multios MULTI_FUNC_DEF 16.2.9 Scripts and Functions N NOALIASES 16.2.6 Input/Output NOALIASFUNCDEF 16.2.9 Scripts and Functions NOALLEXPORT 16.2.5 Initialisation NOALWAYSLASTPROMPT 16.2.2 Completion NOALWAYSTOEND 16.2.2 Completion NOAPPENDCREATE 16.2.10 Shell Emulation NOAPPENDHISTORY 16.2.4 History NOAUTOCD 16.2.1 Changing Directories NOAUTOCONTINUE 16.2.7 Job Control NOAUTOLIST 16.2.2 Completion NOAUTOMENU 16.2.2 Completion NOAUTONAMEDIRS 16.2.2 Completion NOAUTOPARAMKEYS 16.2.2 Completion NOAUTOPARAMSLASH 16.2.2 Completion NOAUTOPUSHD 16.2.1 Changing Directories NOAUTOREMOVESLASH 16.2.2 Completion NOAUTORESUME 16.2.7 Job Control NOBADPATTERN 16.2.3 Expansion and Globbing NOBANGHIST 16.2.4 History NOBAREGLOBQUAL 16.2.3 Expansion and Globbing NOBASHAUTOLIST 16.2.2 Completion NOBASHREMATCH 16.2.10 Shell Emulation NOBEEP 16.2.12 Zle NOBGNICE 16.2.7 Job Control NOBRACECCL 16.2.3 Expansion and Globbing NOBRACEEXPAND 16.3 Option Aliases NOBSDECHO 16.2.10 Shell Emulation NOCASEGLOB 16.2.3 Expansion and Globbing NOCASEMATCH 16.2.3 Expansion and Globbing NOCASEPATHS 16.2.3 Expansion and Globbing NOCBASES 16.2.9 Scripts and Functions NOCDABLEVARS 16.2.1 Changing Directories NOCDSILENT 16.2.1 Changing Directories NOCHASEDOTS 16.2.1 Changing Directories NOCHASELINKS 16.2.1 Changing Directories NOCHECKJOBS 16.2.7 Job Control NOCHECKRUNNINGJOBS 16.2.7 Job Control NOCLOBBER 16.2.6 Input/Output NOCLOBBEREMPTY 16.2.6 Input/Output NOCOMBININGCHARS 16.2.12 Zle NOCOMPLETEALIASES 16.2.2 Completion NOCOMPLETEINWORD 16.2.2 Completion NOCONTINUEONERROR 16.2.10 Shell Emulation NOCORRECT 16.2.6 Input/Output NOCORRECTALL 16.2.6 Input/Output NOCPRECEDENCES 16.2.9 Scripts and Functions NOCSHJUNKIEHISTORY 16.2.10 Shell Emulation NOCSHJUNKIELOOPS 16.2.10 Shell Emulation NOCSHJUNKIEQUOTES 16.2.10 Shell Emulation NOCSHNULLCMD 16.2.10 Shell Emulation NOCSHNULLGLOB 16.2.3 Expansion and Globbing NODEBUGBEFORECMD 16.2.9 Scripts and Functions NODOTGLOB 16.3 Option Aliases NODVORAK 16.2.6 Input/Output NOEMACS 16.2.12 Zle NOEQUALS 16.2.3 Expansion and Globbing NOERREXIT 16.2.9 Scripts and Functions NOERRRETURN 16.2.9 Scripts and Functions NOEVALLINENO 16.2.9 Scripts and Functions NOEXEC 16.2.9 Scripts and Functions NOEXTENDEDGLOB 16.2.3 Expansion and Globbing NOEXTENDEDHISTORY 16.2.4 History NOFLOWCONTROL 16.2.6 Input/Output NOFORCEFLOAT 16.2.3 Expansion and Globbing NOFUNCTIONARGZERO 16.2.9 Scripts and Functions NOGLOB 16.2.3 Expansion and Globbing NOGLOBALEXPORT 16.2.5 Initialisation NOGLOBALRCS 16.2.5 Initialisation NOGLOBASSIGN 16.2.3 Expansion and Globbing NOGLOBCOMPLETE 16.2.2 Completion NOGLOBDOTS 16.2.3 Expansion and Globbing NOGLOBSTARSHORT 16.2.3 Expansion and Globbing NOGLOBSUBST 16.2.3 Expansion and Globbing NOHASHALL 16.3 Option Aliases NOHASHCMDS 16.2.6 Input/Output NOHASHDIRS 16.2.6 Input/Output NOHASHEXECUTABLESONLY 16.2.6 Input/Output NOHASHLISTALL 16.2.2 Completion NOHISTALLOWCLOBBER 16.2.4 History NOHISTAPPEND 16.3 Option Aliases NOHISTBEEP 16.2.4 History NOHISTEXPAND 16.3 Option Aliases NOHISTEXPIREDUPSFIRST 16.2.4 History NOHISTFCNTLLOCK 16.2.4 History NOHISTFINDNODUPS 16.2.4 History NOHISTIGNOREALLDUPS 16.2.4 History NOHISTIGNOREDUPS 16.2.4 History NOHISTIGNORESPACE 16.2.4 History NOHISTLEXWORDS 16.2.4 History NOHISTNOFUNCTIONS 16.2.4 History NOHISTNOSTORE 16.2.4 History NOHISTREDUCEBLANKS 16.2.4 History NOHISTSAVEBYCOPY 16.2.4 History NOHISTSAVENODUPS 16.2.4 History NOHISTSUBSTPATTERN 16.2.3 Expansion and Globbing NOHISTVERIFY 16.2.4 History NOHUP 16.2.7 Job Control NOIGNOREBRACES 16.2.3 Expansion and Globbing NOIGNORECLOSEBRACES 16.2.3 Expansion and Globbing NOIGNOREEOF 16.2.6 Input/Output NOINCAPPENDHISTORY 16.2.4 History NOINCAPPENDHISTORYTIME 16.2.4 History NOINTERACTIVE 16.2.11 Shell State NOINTERACTIVECOMMENTS 16.2.6 Input/Output NOKSHARRAYS 16.2.10 Shell Emulation NOKSHAUTOLOAD 16.2.10 Shell Emulation NOKSHGLOB 16.2.3 Expansion and Globbing NOKSHOPTIONPRINT 16.2.10 Shell Emulation NOKSHTYPESET 16.2.10 Shell Emulation NOKSHZEROSUBSCRIPT 16.2.10 Shell Emulation NOLISTAMBIGUOUS 16.2.2 Completion NOLISTBEEP 16.2.2 Completion NOLISTPACKED 16.2.2 Completion NOLISTROWSFIRST 16.2.2 Completion NOLISTTYPES 16.2.2 Completion NOLOCALLOOPS 16.2.9 Scripts and Functions NOLOCALOPTIONS 16.2.9 Scripts and Functions NOLOCALPATTERNS 16.2.9 Scripts and Functions NOLOCALTRAPS 16.2.9 Scripts and Functions NOLOG 16.3 Option Aliases NOLOGIN 16.2.11 Shell State NOLONGLISTJOBS 16.2.7 Job Control NOMAGICEQUALSUBST 16.2.3 Expansion and Globbing NOMAILWARN 16.3 Option Aliases NOMAILWARNING 16.2.6 Input/Output NOMARKDIRS 16.2.3 Expansion and Globbing NOMATCH 16.2.3 Expansion and Globbing NOMATCH, use of 14.8 Filename Generation NOMENUCOMPLETE 16.2.2 Completion NOMONITOR 16.2.7 Job Control NOMULTIBYTE 16.2.3 Expansion and Globbing NOMULTIFUNCDEF 16.2.9 Scripts and Functions NOMULTIOS 16.2.9 Scripts and Functions NONOMATCH 16.2.3 Expansion and Globbing NONOTIFY 16.2.7 Job Control NONULLGLOB 16.2.3 Expansion and Globbing NONUMERICGLOBSORT 16.2.3 Expansion and Globbing NOOCTALZEROES 16.2.9 Scripts and Functions NOONECMD 16.3 Option Aliases NOOVERSTRIKE 16.2.12 Zle NOPATHDIRS 16.2.6 Input/Output NOPATHSCRIPT 16.2.6 Input/Output NOPHYSICAL 16.3 Option Aliases NOPIPEFAIL 16.2.9 Scripts and Functions NOPOSIXALIASES 16.2.10 Shell Emulation NOPOSIXARGZERO 16.2.10 Shell Emulation NOPOSIXBUILTINS 16.2.10 Shell Emulation NOPOSIXCD 16.2.1 Changing Directories NOPOSIXIDENTIFIERS 16.2.10 Shell Emulation NOPOSIXJOBS 16.2.7 Job Control NOPOSIXSTRINGS 16.2.10 Shell Emulation NOPOSIXTRAPS 16.2.10 Shell Emulation NOPRINTEIGHTBIT 16.2.6 Input/Output NOPRINTEXITVALUE 16.2.6 Input/Output NOPRIVILEGED 16.2.11 Shell State NOPROMPTBANG 16.2.8 Prompting NOPROMPTCR 16.2.8 Prompting NOPROMPTPERCENT 16.2.8 Prompting NOPROMPTSP 16.2.8 Prompting NOPROMPTSUBST 16.2.8 Prompting NOPROMPTVARS 16.3 Option Aliases NOPUSHDIGNOREDUPS 16.2.1 Changing Directories NOPUSHDMINUS 16.2.1 Changing Directories NOPUSHDSILENT 16.2.1 Changing Directories NOPUSHDTOHOME 16.2.1 Changing Directories NORCEXPANDPARAM 16.2.3 Expansion and Globbing NORCQUOTES 16.2.6 Input/Output NORCS 16.2.5 Initialisation NORECEXACT 16.2.2 Completion NOREMATCHPCRE 16.2.3 Expansion and Globbing NORESTRICTED 16.2.11 Shell State NORMSTARSILENT 16.2.6 Input/Output NORMSTARWAIT 16.2.6 Input/Output NOSHAREHISTORY 16.2.4 History NOSHFILEEXPANSION 16.2.10 Shell Emulation NOSHGLOB 16.2.3 Expansion and Globbing NOSHINSTDIN 16.2.11 Shell State NOSHNULLCMD 16.2.10 Shell Emulation NOSHOPTIONLETTERS 16.2.10 Shell Emulation NOSHORTLOOPS 16.2.6 Input/Output NOSHORTREPEAT 16.2.6 Input/Output NOSHWORDSPLIT 16.2.10 Shell Emulation NOSINGLECOMMAND 16.2.11 Shell State NOSINGLELINEZLE 16.2.12 Zle NOSOURCETRACE 16.2.9 Scripts and Functions NOSTDIN 16.3 Option Aliases NOSUNKEYBOARDHACK 16.2.6 Input/Output NOTIFY 16.2.7 Job Control NOTIFY, use of 10.1 Jobs NOTRACKALL 16.3 Option Aliases NOTRANSIENTRPROMPT 16.2.8 Prompting NOTRAPSASYNC 16.2.10 Shell Emulation NOTYPESETSILENT 16.2.9 Scripts and Functions NOTYPESETTOUNSET 16.2.9 Scripts and Functions NOUNSET 16.2.3 Expansion and Globbing NOVERBOSE 16.2.9 Scripts and Functions NOVI 16.2.12 Zle NOWARNCREATEGLOBAL 16.2.3 Expansion and Globbing NOXTRACE 16.2.9 Scripts and Functions NOZLE 16.2.12 Zle NO_ALIASES 16.2.6 Input/Output NO_ALIAS_FUNC_DEF 16.2.9 Scripts and Functions NO_ALL_EXPORT 16.2.5 Initialisation NO_ALWAYS_LAST_PROMPT 16.2.2 Completion NO_ALWAYS_TO_END 16.2.2 Completion NO_APPEND_CREATE 16.2.10 Shell Emulation NO_APPEND_HISTORY 16.2.4 History NO_AUTO_CD 16.2.1 Changing Directories NO_AUTO_CONTINUE 16.2.7 Job Control NO_AUTO_LIST 16.2.2 Completion NO_AUTO_MENU 16.2.2 Completion NO_AUTO_NAME_DIRS 16.2.2 Completion NO_AUTO_PARAM_KEYS 16.2.2 Completion NO_AUTO_PARAM_SLASH 16.2.2 Completion NO_AUTO_PUSHD 16.2.1 Changing Directories NO_AUTO_REMOVE_SLASH 16.2.2 Completion NO_AUTO_RESUME 16.2.7 Job Control NO_BAD_PATTERN 16.2.3 Expansion and Globbing NO_BANG_HIST 16.2.4 History NO_BARE_GLOB_QUAL 16.2.3 Expansion and Globbing NO_BASH_AUTO_LIST 16.2.2 Completion NO_BASH_REMATCH 16.2.10 Shell Emulation NO_BEEP 16.2.12 Zle NO_BG_NICE 16.2.7 Job Control NO_BRACE_CCL 16.2.3 Expansion and Globbing NO_BRACE_EXPAND 16.3 Option Aliases NO_BSD_ECHO 16.2.10 Shell Emulation NO_CASE_GLOB 16.2.3 Expansion and Globbing NO_CASE_MATCH 16.2.3 Expansion and Globbing NO_CASE_MATCH 22.21 The zsh/pcre Module NO_CASE_PATHS 16.2.3 Expansion and Globbing NO_CDABLE_VARS 16.2.1 Changing Directories NO_CD_SILENT 16.2.1 Changing Directories NO_CHASE_DOTS 16.2.1 Changing Directories NO_CHASE_LINKS 16.2.1 Changing Directories NO_CHECK_JOBS 16.2.7 Job Control NO_CHECK_RUNNING_JOBS 16.2.7 Job Control NO_CLOBBER 16.2.6 Input/Output NO_CLOBBER_EMPTY 16.2.6 Input/Output NO_COMBINING_CHARS 16.2.12 Zle NO_COMPLETE_ALIASES 16.2.2 Completion NO_COMPLETE_IN_WORD 16.2.2 Completion NO_CONTINUE_ON_ERROR 16.2.10 Shell Emulation NO_CORRECT 16.2.6 Input/Output NO_CORRECT_ALL 16.2.6 Input/Output NO_CSH_JUNKIE_HISTORY 16.2.10 Shell Emulation NO_CSH_JUNKIE_LOOPS 16.2.10 Shell Emulation NO_CSH_JUNKIE_QUOTES 16.2.10 Shell Emulation NO_CSH_NULLCMD 16.2.10 Shell Emulation NO_CSH_NULL_GLOB 16.2.3 Expansion and Globbing NO_C_BASES 16.2.9 Scripts and Functions NO_C_PRECEDENCES 16.2.9 Scripts and Functions NO_DEBUG_BEFORE_CMD 16.2.9 Scripts and Functions NO_DOT_GLOB 16.3 Option Aliases NO_DVORAK 16.2.6 Input/Output NO_EMACS 16.2.12 Zle NO_EQUALS 16.2.3 Expansion and Globbing NO_ERR_EXIT 16.2.9 Scripts and Functions NO_ERR_RETURN 16.2.9 Scripts and Functions NO_EVAL_LINENO 16.2.9 Scripts and Functions NO_EXEC 16.2.9 Scripts and Functions NO_EXTENDED_GLOB 16.2.3 Expansion and Globbing NO_EXTENDED_HISTORY 16.2.4 History NO_FLOW_CONTROL 16.2.6 Input/Output NO_FORCE_FLOAT 16.2.3 Expansion and Globbing NO_FUNCTION_ARGZERO 16.2.9 Scripts and Functions NO_GLOB 16.2.3 Expansion and Globbing NO_GLOBAL_EXPORT 16.2.5 Initialisation NO_GLOBAL_RCS 16.2.5 Initialisation NO_GLOBAL_RCS, use of 5.1 Startup/Shutdown Files NO_GLOB_ASSIGN 16.2.3 Expansion and Globbing NO_GLOB_COMPLETE 16.2.2 Completion NO_GLOB_DOTS 16.2.3 Expansion and Globbing NO_GLOB_STAR_SHORT 16.2.3 Expansion and Globbing NO_GLOB_SUBST 16.2.3 Expansion and Globbing NO_HASH_ALL 16.3 Option Aliases NO_HASH_CMDS 16.2.6 Input/Output NO_HASH_DIRS 16.2.6 Input/Output NO_HASH_EXECUTABLES_ONLY 16.2.6 Input/Output NO_HASH_LIST_ALL 16.2.2 Completion NO_HIST_ALLOW_CLOBBER 16.2.4 History NO_HIST_APPEND 16.3 Option Aliases NO_HIST_BEEP 16.2.4 History NO_HIST_EXPAND 16.3 Option Aliases NO_HIST_EXPIRE_DUPS_FIRST 16.2.4 History NO_HIST_FCNTL_LOCK 16.2.4 History NO_HIST_FIND_NO_DUPS 16.2.4 History NO_HIST_IGNORE_ALL_DUPS 16.2.4 History NO_HIST_IGNORE_DUPS 16.2.4 History NO_HIST_IGNORE_SPACE 16.2.4 History NO_HIST_LEX_WORDS 16.2.4 History NO_HIST_NO_FUNCTIONS 16.2.4 History NO_HIST_NO_STORE 16.2.4 History NO_HIST_REDUCE_BLANKS 16.2.4 History NO_HIST_SAVE_BY_COPY 16.2.4 History NO_HIST_SAVE_NO_DUPS 16.2.4 History NO_HIST_SUBST_PATTERN 16.2.3 Expansion and Globbing NO_HIST_VERIFY 16.2.4 History NO_HUP 16.2.7 Job Control NO_IGNORE_BRACES 16.2.3 Expansion and Globbing NO_IGNORE_CLOSE_BRACES 16.2.3 Expansion and Globbing NO_IGNORE_EOF 16.2.6 Input/Output NO_INC_APPEND_HISTORY 16.2.4 History NO_INC_APPEND_HISTORY_TIME 16.2.4 History NO_INTERACTIVE 16.2.11 Shell State NO_INTERACTIVE_COMMENTS 16.2.6 Input/Output NO_KSH_ARRAYS 16.2.10 Shell Emulation NO_KSH_AUTOLOAD 16.2.10 Shell Emulation NO_KSH_GLOB 16.2.3 Expansion and Globbing NO_KSH_OPTION_PRINT 16.2.10 Shell Emulation NO_KSH_TYPESET 16.2.10 Shell Emulation NO_KSH_ZERO_SUBSCRIPT 16.2.10 Shell Emulation NO_LIST_AMBIGUOUS 16.2.2 Completion NO_LIST_BEEP 16.2.2 Completion NO_LIST_PACKED 16.2.2 Completion NO_LIST_ROWS_FIRST 16.2.2 Completion NO_LIST_TYPES 16.2.2 Completion NO_LOCAL_LOOPS 16.2.9 Scripts and Functions NO_LOCAL_OPTIONS 16.2.9 Scripts and Functions NO_LOCAL_PATTERNS 16.2.9 Scripts and Functions NO_LOCAL_TRAPS 16.2.9 Scripts and Functions NO_LOG 16.3 Option Aliases NO_LOGIN 16.2.11 Shell State NO_LONG_LIST_JOBS 16.2.7 Job Control NO_MAGIC_EQUAL_SUBST 16.2.3 Expansion and Globbing NO_MAIL_WARN 16.3 Option Aliases NO_MAIL_WARNING 16.2.6 Input/Output NO_MARK_DIRS 16.2.3 Expansion and Globbing NO_MENU_COMPLETE 16.2.2 Completion NO_MONITOR 16.2.7 Job Control NO_MULTIBYTE 16.2.3 Expansion and Globbing NO_MULTIOS 16.2.9 Scripts and Functions NO_MULTI_FUNC_DEF 16.2.9 Scripts and Functions NO_NOMATCH 16.2.3 Expansion and Globbing NO_NOTIFY 16.2.7 Job Control NO_NULL_GLOB 16.2.3 Expansion and Globbing NO_NUMERIC_GLOB_SORT 16.2.3 Expansion and Globbing NO_OCTAL_ZEROES 16.2.9 Scripts and Functions NO_ONE_CMD 16.3 Option Aliases NO_OVERSTRIKE 16.2.12 Zle NO_PATH_DIRS 16.2.6 Input/Output NO_PATH_SCRIPT 16.2.6 Input/Output NO_PHYSICAL 16.3 Option Aliases NO_PIPE_FAIL 16.2.9 Scripts and Functions NO_POSIX_ALIASES 16.2.10 Shell Emulation NO_POSIX_ARGZERO 16.2.10 Shell Emulation NO_POSIX_BUILTINS 16.2.10 Shell Emulation NO_POSIX_CD 16.2.1 Changing Directories NO_POSIX_IDENTIFIERS 16.2.10 Shell Emulation NO_POSIX_JOBS 16.2.7 Job Control NO_POSIX_STRINGS 16.2.10 Shell Emulation NO_POSIX_TRAPS 16.2.10 Shell Emulation NO_PRINT_EIGHT_BIT 16.2.6 Input/Output NO_PRINT_EXIT_VALUE 16.2.6 Input/Output NO_PRIVILEGED 16.2.11 Shell State NO_PROMPT_BANG 16.2.8 Prompting NO_PROMPT_CR 16.2.8 Prompting NO_PROMPT_PERCENT 16.2.8 Prompting NO_PROMPT_SP 16.2.8 Prompting NO_PROMPT_SUBST 16.2.8 Prompting NO_PROMPT_VARS 16.3 Option Aliases NO_PUSHD_IGNORE_DUPS 16.2.1 Changing Directories NO_PUSHD_MINUS 16.2.1 Changing Directories NO_PUSHD_SILENT 16.2.1 Changing Directories NO_PUSHD_TO_HOME 16.2.1 Changing Directories NO_RCS 16.2.5 Initialisation NO_RCS, use of 5.1 Startup/Shutdown Files NO_RC_EXPAND_PARAM 16.2.3 Expansion and Globbing NO_RC_QUOTES 16.2.6 Input/Output NO_REC_EXACT 16.2.2 Completion NO_REMATCH_PCRE 16.2.3 Expansion and Globbing NO_RESTRICTED 16.2.11 Shell State NO_RM_STAR_SILENT 16.2.6 Input/Output NO_RM_STAR_WAIT 16.2.6 Input/Output NO_SHARE_HISTORY 16.2.4 History NO_SHIN_STDIN 16.2.11 Shell State NO_SHORT_LOOPS 16.2.6 Input/Output NO_SHORT_REPEAT 16.2.6 Input/Output NO_SH_FILE_EXPANSION 16.2.10 Shell Emulation NO_SH_GLOB 16.2.3 Expansion and Globbing NO_SH_NULLCMD 16.2.10 Shell Emulation NO_SH_OPTION_LETTERS 16.2.10 Shell Emulation NO_SH_WORD_SPLIT 16.2.10 Shell Emulation NO_SINGLE_COMMAND 16.2.11 Shell State NO_SINGLE_LINE_ZLE 16.2.12 Zle NO_SOURCE_TRACE 16.2.9 Scripts and Functions NO_STDIN 16.3 Option Aliases NO_SUN_KEYBOARD_HACK 16.2.6 Input/Output NO_TRACK_ALL 16.3 Option Aliases NO_TRANSIENT_RPROMPT 16.2.8 Prompting NO_TRAPS_ASYNC 16.2.10 Shell Emulation NO_TYPESET_SILENT 16.2.9 Scripts and Functions NO_TYPESET_TO_UNSET 16.2.9 Scripts and Functions NO_UNSET 16.2.3 Expansion and Globbing NO_VERBOSE 16.2.9 Scripts and Functions NO_VI 16.2.12 Zle NO_WARNNESTEDVAR 16.2.3 Expansion and Globbing NO_WARN_CREATE_GLOBAL 16.2.3 Expansion and Globbing NO_WARN_NESTED_VAR 16.2.3 Expansion and Globbing NO_XTRACE 16.2.9 Scripts and Functions NO_ZLE 16.2.12 Zle NULLGLOB 16.2.3 Expansion and Globbing NULL_GLOB 16.2.3 Expansion and Globbing NULL_GLOB, setting in pattern 14.8.7 Glob Qualifiers NULL_GLOB, use of 14.8 Filename Generation NUMERICGLOBSORT 16.2.3 Expansion and Globbing NUMERIC_GLOB_SORT 16.2.3 Expansion and Globbing NUMERIC_GLOB_SORT, setting in pattern 14.8.7 Glob Qualifiers \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-10-html-index-split-9-pg-letter-K-7ov7ci.html",
  "markdown": "# zsh: Options Index: K – N\n\nIndex Entry  Section\n\n* * *\n\nK [`KSHARRAYS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSHARRAYS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`KSHAUTOLOAD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSHAUTOLOAD) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`KSHGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSHGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`KSHOPTIONPRINT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSHOPTIONPRINT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`KSHTYPESET`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSHTYPESET) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`KSHZEROSUBSCRIPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSHZEROSUBSCRIPT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`KSH_ARRAYS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSH_005fARRAYS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`KSH_ARRAYS, use of`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-KSH_005fARRAYS_002c-use-of) [15.2.1 Array Subscripts](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Array-Subscripts) [`KSH_ARRAYS, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-KSH_005fARRAYS_002c-use-of-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`KSH_AUTOLOAD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSH_005fAUTOLOAD) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`KSH_AUTOLOAD, use of`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-KSH_005fAUTOLOAD_002c-use-of) [9.1 Autoloading Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Autoloading-Functions) [`KSH_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSH_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`KSH_GLOB, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-KSH_005fGLOB_002c-use-of) [14.8.2 ksh-like Glob Operators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#ksh_002dlike-Glob-Operators) [`KSH_OPTION_PRINT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSH_005fOPTION_005fPRINT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`KSH_TYPESET`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSH_005fTYPESET) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`KSH_ZERO_SUBSCRIPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-KSH_005fZERO_005fSUBSCRIPT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation)\n\n* * *\n\nL [`LISTAMBIGUOUS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LISTAMBIGUOUS) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`LISTBEEP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LISTBEEP) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`LISTPACKED`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LISTPACKED) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`LISTROWSFIRST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LISTROWSFIRST) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`LISTTYPES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LISTTYPES) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`LIST_AMBIGUOUS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LIST_005fAMBIGUOUS) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`LIST_BEEP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LIST_005fBEEP) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`LIST_PACKED`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LIST_005fPACKED) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`LIST_ROWS_FIRST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LIST_005fROWS_005fFIRST) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`LIST_TYPES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LIST_005fTYPES) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`LOCALLOOPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LOCALLOOPS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`LOCALOPTIONS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LOCALOPTIONS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`LOCALPATTERNS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LOCALPATTERNS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`LOCALTRAPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LOCALTRAPS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`LOCAL_LOOPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LOCAL_005fLOOPS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`LOCAL_OPTIONS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LOCAL_005fOPTIONS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`LOCAL_PATTERNS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LOCAL_005fPATTERNS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`LOCAL_TRAPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LOCAL_005fTRAPS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`LOG`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LOG) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`LOGIN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LOGIN) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`LOGIN, use of`](https://zsh.sourceforge.io/Doc/Release/Files.html#index-LOGIN_002c-use-of) [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) [`LONGLISTJOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LONGLISTJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`LONG_LIST_JOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-LONG_005fLIST_005fJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control)\n\n* * *\n\nM [`MAGICEQUALSUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MAGICEQUALSUBST) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`MAGIC_EQUAL_SUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MAGIC_005fEQUAL_005fSUBST) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`MAILWARN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MAILWARN) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`MAILWARNING`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MAILWARNING) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`MAIL_WARN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MAIL_005fWARN) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`MAIL_WARNING`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MAIL_005fWARNING) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`MARKDIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MARKDIRS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`MARK_DIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MARK_005fDIRS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`MARK_DIRS, setting in pattern`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-MARK_005fDIRS_002c-setting-in-pattern) [14.8.7 Glob Qualifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers) [`MENUCOMPLETE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MENUCOMPLETE) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`MENU_COMPLETE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MENU_005fCOMPLETE) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`MENU_COMPLETE, use of`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-MENU_005fCOMPLETE_002c-use-of) [18.6.5 Completion](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Completion) [`MONITOR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MONITOR) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`MONITOR, use of`](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-MONITOR_002c-use-of) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [`MULTIBYTE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MULTIBYTE) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`MULTIFUNCDEF`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MULTIFUNCDEF) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`MULTIOS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MULTIOS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`MULTIOS, use of`](https://zsh.sourceforge.io/Doc/Release/Redirection.html#index-MULTIOS_002c-use-of) [7.2 Multios](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Multios) [`MULTI_FUNC_DEF`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-MULTI_005fFUNC_005fDEF) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions)\n\n* * *\n\nN [`NOALIASES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOALIASES) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOALIASFUNCDEF`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOALIASFUNCDEF) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOALLEXPORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOALLEXPORT) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`NOALWAYSLASTPROMPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOALWAYSLASTPROMPT) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOALWAYSTOEND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOALWAYSTOEND) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOAPPENDCREATE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAPPENDCREATE) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOAPPENDHISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAPPENDHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOAUTOCD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAUTOCD) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NOAUTOCONTINUE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAUTOCONTINUE) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NOAUTOLIST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAUTOLIST) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOAUTOMENU`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAUTOMENU) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOAUTONAMEDIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAUTONAMEDIRS) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOAUTOPARAMKEYS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAUTOPARAMKEYS) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOAUTOPARAMSLASH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAUTOPARAMSLASH) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOAUTOPUSHD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAUTOPUSHD) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NOAUTOREMOVESLASH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAUTOREMOVESLASH) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOAUTORESUME`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOAUTORESUME) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NOBADPATTERN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOBADPATTERN) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOBANGHIST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOBANGHIST) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOBAREGLOBQUAL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOBAREGLOBQUAL) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOBASHAUTOLIST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOBASHAUTOLIST) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOBASHREMATCH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOBASHREMATCH) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOBEEP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOBEEP) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NOBGNICE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOBGNICE) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NOBRACECCL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOBRACECCL) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOBRACEEXPAND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOBRACEEXPAND) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOBSDECHO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOBSDECHO) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOCASEGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCASEGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOCASEMATCH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCASEMATCH) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOCASEPATHS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCASEPATHS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOCBASES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCBASES) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOCDABLEVARS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCDABLEVARS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NOCDSILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCDSILENT) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NOCHASEDOTS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCHASEDOTS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NOCHASELINKS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCHASELINKS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NOCHECKJOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCHECKJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NOCHECKRUNNINGJOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCHECKRUNNINGJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NOCLOBBER`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCLOBBER) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOCLOBBEREMPTY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCLOBBEREMPTY) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOCOMBININGCHARS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCOMBININGCHARS) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NOCOMPLETEALIASES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCOMPLETEALIASES) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOCOMPLETEINWORD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCOMPLETEINWORD) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOCONTINUEONERROR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCONTINUEONERROR) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOCORRECT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCORRECT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOCORRECTALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCORRECTALL) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOCPRECEDENCES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCPRECEDENCES) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOCSHJUNKIEHISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCSHJUNKIEHISTORY) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOCSHJUNKIELOOPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCSHJUNKIELOOPS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOCSHJUNKIEQUOTES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCSHJUNKIEQUOTES) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOCSHNULLCMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCSHNULLCMD) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOCSHNULLGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOCSHNULLGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NODEBUGBEFORECMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NODEBUGBEFORECMD) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NODOTGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NODOTGLOB) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NODVORAK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NODVORAK) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOEMACS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOEMACS) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NOEQUALS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOEQUALS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOERREXIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOERREXIT) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOERRRETURN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOERRRETURN) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOEVALLINENO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOEVALLINENO) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOEXEC`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOEXEC) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOEXTENDEDGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOEXTENDEDGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOEXTENDEDHISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOEXTENDEDHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOFLOWCONTROL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOFLOWCONTROL) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOFORCEFLOAT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOFORCEFLOAT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOFUNCTIONARGZERO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOFUNCTIONARGZERO) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOGLOBALEXPORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOGLOBALEXPORT) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`NOGLOBALRCS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOGLOBALRCS) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`NOGLOBASSIGN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOGLOBASSIGN) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOGLOBCOMPLETE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOGLOBCOMPLETE) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOGLOBDOTS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOGLOBDOTS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOGLOBSTARSHORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOGLOBSTARSHORT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOGLOBSUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOGLOBSUBST) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOHASHALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHASHALL) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOHASHCMDS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHASHCMDS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOHASHDIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHASHDIRS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOHASHEXECUTABLESONLY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHASHEXECUTABLESONLY) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOHASHLISTALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHASHLISTALL) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOHISTALLOWCLOBBER`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTALLOWCLOBBER) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTAPPEND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTAPPEND) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOHISTBEEP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTBEEP) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTEXPAND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTEXPAND) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOHISTEXPIREDUPSFIRST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTEXPIREDUPSFIRST) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTFCNTLLOCK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTFCNTLLOCK) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTFINDNODUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTFINDNODUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTIGNOREALLDUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTIGNOREALLDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTIGNOREDUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTIGNOREDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTIGNORESPACE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTIGNORESPACE) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTLEXWORDS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTLEXWORDS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTNOFUNCTIONS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTNOFUNCTIONS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTNOSTORE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTNOSTORE) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTREDUCEBLANKS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTREDUCEBLANKS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTSAVEBYCOPY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTSAVEBYCOPY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTSAVENODUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTSAVENODUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHISTSUBSTPATTERN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTSUBSTPATTERN) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOHISTVERIFY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHISTVERIFY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOHUP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOHUP) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NOIGNOREBRACES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOIGNOREBRACES) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOIGNORECLOSEBRACES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOIGNORECLOSEBRACES) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOIGNOREEOF`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOIGNOREEOF) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOINCAPPENDHISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOINCAPPENDHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOINCAPPENDHISTORYTIME`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOINCAPPENDHISTORYTIME) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOINTERACTIVE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOINTERACTIVE) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NOINTERACTIVECOMMENTS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOINTERACTIVECOMMENTS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOKSHARRAYS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOKSHARRAYS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOKSHAUTOLOAD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOKSHAUTOLOAD) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOKSHGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOKSHGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOKSHOPTIONPRINT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOKSHOPTIONPRINT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOKSHTYPESET`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOKSHTYPESET) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOKSHZEROSUBSCRIPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOKSHZEROSUBSCRIPT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOLISTAMBIGUOUS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLISTAMBIGUOUS) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOLISTBEEP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLISTBEEP) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOLISTPACKED`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLISTPACKED) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOLISTROWSFIRST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLISTROWSFIRST) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOLISTTYPES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLISTTYPES) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOLOCALLOOPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLOCALLOOPS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOLOCALOPTIONS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLOCALOPTIONS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOLOCALPATTERNS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLOCALPATTERNS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOLOCALTRAPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLOCALTRAPS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOLOG`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLOG) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOLOGIN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLOGIN) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NOLONGLISTJOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOLONGLISTJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NOMAGICEQUALSUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOMAGICEQUALSUBST) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOMAILWARN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOMAILWARN) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOMAILWARNING`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOMAILWARNING) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOMARKDIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOMARKDIRS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOMATCH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOMATCH) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOMATCH, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-NOMATCH_002c-use-of) [14.8 Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation) [`NOMENUCOMPLETE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOMENUCOMPLETE) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOMONITOR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOMONITOR) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NOMULTIBYTE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOMULTIBYTE) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOMULTIFUNCDEF`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOMULTIFUNCDEF) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOMULTIOS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOMULTIOS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NONOMATCH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NONOMATCH) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NONOTIFY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NONOTIFY) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NONULLGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NONULLGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NONUMERICGLOBSORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NONUMERICGLOBSORT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOOCTALZEROES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOOCTALZEROES) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOONECMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOONECMD) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOOVERSTRIKE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOOVERSTRIKE) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NOPATHDIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPATHDIRS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOPATHSCRIPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPATHSCRIPT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOPHYSICAL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPHYSICAL) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOPIPEFAIL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPIPEFAIL) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOPOSIXALIASES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPOSIXALIASES) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOPOSIXARGZERO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPOSIXARGZERO) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOPOSIXBUILTINS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPOSIXBUILTINS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOPOSIXCD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPOSIXCD) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NOPOSIXIDENTIFIERS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPOSIXIDENTIFIERS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOPOSIXJOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPOSIXJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NOPOSIXSTRINGS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPOSIXSTRINGS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOPOSIXTRAPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPOSIXTRAPS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOPRINTEIGHTBIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPRINTEIGHTBIT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOPRINTEXITVALUE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPRINTEXITVALUE) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOPRIVILEGED`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPRIVILEGED) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NOPROMPTBANG`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPROMPTBANG) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NOPROMPTCR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPROMPTCR) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NOPROMPTPERCENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPROMPTPERCENT) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NOPROMPTSP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPROMPTSP) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NOPROMPTSUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPROMPTSUBST) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NOPROMPTVARS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPROMPTVARS) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOPUSHDIGNOREDUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPUSHDIGNOREDUPS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NOPUSHDMINUS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPUSHDMINUS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NOPUSHDSILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPUSHDSILENT) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NOPUSHDTOHOME`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOPUSHDTOHOME) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NORCEXPANDPARAM`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NORCEXPANDPARAM) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NORCQUOTES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NORCQUOTES) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NORCS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NORCS) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`NORECEXACT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NORECEXACT) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NOREMATCHPCRE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOREMATCHPCRE) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NORESTRICTED`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NORESTRICTED) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NORMSTARSILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NORMSTARSILENT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NORMSTARWAIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NORMSTARWAIT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOSHAREHISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSHAREHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NOSHFILEEXPANSION`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSHFILEEXPANSION) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOSHGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSHGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOSHINSTDIN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSHINSTDIN) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NOSHNULLCMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSHNULLCMD) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOSHOPTIONLETTERS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSHOPTIONLETTERS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOSHORTLOOPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSHORTLOOPS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOSHORTREPEAT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSHORTREPEAT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOSHWORDSPLIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSHWORDSPLIT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOSINGLECOMMAND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSINGLECOMMAND) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NOSINGLELINEZLE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSINGLELINEZLE) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NOSOURCETRACE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSOURCETRACE) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOSTDIN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSTDIN) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOSUNKEYBOARDHACK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOSUNKEYBOARDHACK) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NOTIFY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOTIFY) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NOTIFY, use of`](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-NOTIFY_002c-use-of) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [`NOTRACKALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOTRACKALL) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NOTRANSIENTRPROMPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOTRANSIENTRPROMPT) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NOTRAPSASYNC`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOTRAPSASYNC) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NOTYPESETSILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOTYPESETSILENT) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOTYPESETTOUNSET`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOTYPESETTOUNSET) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOUNSET`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOUNSET) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOVERBOSE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOVERBOSE) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOVI`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOVI) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NOWARNCREATEGLOBAL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOWARNCREATEGLOBAL) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NOXTRACE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOXTRACE) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NOZLE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NOZLE) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NO_ALIASES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fALIASES) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_ALIAS_FUNC_DEF`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fALIAS_005fFUNC_005fDEF) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_ALL_EXPORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fALL_005fEXPORT) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`NO_ALWAYS_LAST_PROMPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fALWAYS_005fLAST_005fPROMPT) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_ALWAYS_TO_END`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fALWAYS_005fTO_005fEND) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_APPEND_CREATE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAPPEND_005fCREATE) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_APPEND_HISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAPPEND_005fHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_AUTO_CD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAUTO_005fCD) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_AUTO_CONTINUE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAUTO_005fCONTINUE) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NO_AUTO_LIST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAUTO_005fLIST) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_AUTO_MENU`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAUTO_005fMENU) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_AUTO_NAME_DIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAUTO_005fNAME_005fDIRS) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_AUTO_PARAM_KEYS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAUTO_005fPARAM_005fKEYS) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_AUTO_PARAM_SLASH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAUTO_005fPARAM_005fSLASH) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_AUTO_PUSHD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAUTO_005fPUSHD) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_AUTO_REMOVE_SLASH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAUTO_005fREMOVE_005fSLASH) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_AUTO_RESUME`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fAUTO_005fRESUME) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NO_BAD_PATTERN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fBAD_005fPATTERN) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_BANG_HIST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fBANG_005fHIST) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_BARE_GLOB_QUAL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fBARE_005fGLOB_005fQUAL) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_BASH_AUTO_LIST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fBASH_005fAUTO_005fLIST) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_BASH_REMATCH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fBASH_005fREMATCH) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_BEEP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fBEEP) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NO_BG_NICE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fBG_005fNICE) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NO_BRACE_CCL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fBRACE_005fCCL) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_BRACE_EXPAND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fBRACE_005fEXPAND) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_BSD_ECHO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fBSD_005fECHO) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_CASE_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCASE_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_CASE_MATCH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCASE_005fMATCH) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_CASE_MATCH`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-NO_005fCASE_005fMATCH-1) [22.21 The zsh/pcre Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fpcre-Module) [`NO_CASE_PATHS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCASE_005fPATHS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_CDABLE_VARS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCDABLE_005fVARS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_CD_SILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCD_005fSILENT) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_CHASE_DOTS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCHASE_005fDOTS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_CHASE_LINKS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCHASE_005fLINKS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_CHECK_JOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCHECK_005fJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NO_CHECK_RUNNING_JOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCHECK_005fRUNNING_005fJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NO_CLOBBER`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCLOBBER) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_CLOBBER_EMPTY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCLOBBER_005fEMPTY) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_COMBINING_CHARS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCOMBINING_005fCHARS) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NO_COMPLETE_ALIASES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCOMPLETE_005fALIASES) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_COMPLETE_IN_WORD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCOMPLETE_005fIN_005fWORD) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_CONTINUE_ON_ERROR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCONTINUE_005fON_005fERROR) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_CORRECT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCORRECT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_CORRECT_ALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCORRECT_005fALL) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_CSH_JUNKIE_HISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCSH_005fJUNKIE_005fHISTORY) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_CSH_JUNKIE_LOOPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCSH_005fJUNKIE_005fLOOPS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_CSH_JUNKIE_QUOTES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCSH_005fJUNKIE_005fQUOTES) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_CSH_NULLCMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCSH_005fNULLCMD) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_CSH_NULL_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fCSH_005fNULL_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_C_BASES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fC_005fBASES) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_C_PRECEDENCES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fC_005fPRECEDENCES) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_DEBUG_BEFORE_CMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fDEBUG_005fBEFORE_005fCMD) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_DOT_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fDOT_005fGLOB) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_DVORAK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fDVORAK) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_EMACS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fEMACS) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NO_EQUALS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fEQUALS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_ERR_EXIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fERR_005fEXIT) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_ERR_RETURN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fERR_005fRETURN) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_EVAL_LINENO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fEVAL_005fLINENO) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_EXEC`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fEXEC) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_EXTENDED_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fEXTENDED_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_EXTENDED_HISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fEXTENDED_005fHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_FLOW_CONTROL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fFLOW_005fCONTROL) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_FORCE_FLOAT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fFORCE_005fFLOAT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_FUNCTION_ARGZERO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fFUNCTION_005fARGZERO) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_GLOBAL_EXPORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fGLOBAL_005fEXPORT) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`NO_GLOBAL_RCS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fGLOBAL_005fRCS) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`NO_GLOBAL_RCS, use of`](https://zsh.sourceforge.io/Doc/Release/Files.html#index-NO_005fGLOBAL_005fRCS_002c-use-of) [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) [`NO_GLOB_ASSIGN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fGLOB_005fASSIGN) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_GLOB_COMPLETE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fGLOB_005fCOMPLETE) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_GLOB_DOTS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fGLOB_005fDOTS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_GLOB_STAR_SHORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fGLOB_005fSTAR_005fSHORT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_GLOB_SUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fGLOB_005fSUBST) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_HASH_ALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHASH_005fALL) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_HASH_CMDS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHASH_005fCMDS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_HASH_DIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHASH_005fDIRS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_HASH_EXECUTABLES_ONLY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHASH_005fEXECUTABLES_005fONLY) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_HASH_LIST_ALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHASH_005fLIST_005fALL) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_HIST_ALLOW_CLOBBER`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fALLOW_005fCLOBBER) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_APPEND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fAPPEND) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_HIST_BEEP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fBEEP) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_EXPAND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fEXPAND) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_HIST_EXPIRE_DUPS_FIRST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fEXPIRE_005fDUPS_005fFIRST) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_FCNTL_LOCK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fFCNTL_005fLOCK) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_FIND_NO_DUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fFIND_005fNO_005fDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_IGNORE_ALL_DUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fIGNORE_005fALL_005fDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_IGNORE_DUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fIGNORE_005fDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_IGNORE_SPACE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fIGNORE_005fSPACE) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_LEX_WORDS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fLEX_005fWORDS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_NO_FUNCTIONS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fNO_005fFUNCTIONS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_NO_STORE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fNO_005fSTORE) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_REDUCE_BLANKS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fREDUCE_005fBLANKS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_SAVE_BY_COPY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fSAVE_005fBY_005fCOPY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_SAVE_NO_DUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fSAVE_005fNO_005fDUPS) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HIST_SUBST_PATTERN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fSUBST_005fPATTERN) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_HIST_VERIFY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHIST_005fVERIFY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_HUP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fHUP) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NO_IGNORE_BRACES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fIGNORE_005fBRACES) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_IGNORE_CLOSE_BRACES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fIGNORE_005fCLOSE_005fBRACES) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_IGNORE_EOF`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fIGNORE_005fEOF) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_INC_APPEND_HISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fINC_005fAPPEND_005fHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_INC_APPEND_HISTORY_TIME`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fINC_005fAPPEND_005fHISTORY_005fTIME) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_INTERACTIVE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fINTERACTIVE) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NO_INTERACTIVE_COMMENTS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fINTERACTIVE_005fCOMMENTS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_KSH_ARRAYS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fKSH_005fARRAYS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_KSH_AUTOLOAD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fKSH_005fAUTOLOAD) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_KSH_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fKSH_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_KSH_OPTION_PRINT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fKSH_005fOPTION_005fPRINT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_KSH_TYPESET`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fKSH_005fTYPESET) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_KSH_ZERO_SUBSCRIPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fKSH_005fZERO_005fSUBSCRIPT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_LIST_AMBIGUOUS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLIST_005fAMBIGUOUS) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_LIST_BEEP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLIST_005fBEEP) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_LIST_PACKED`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLIST_005fPACKED) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_LIST_ROWS_FIRST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLIST_005fROWS_005fFIRST) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_LIST_TYPES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLIST_005fTYPES) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_LOCAL_LOOPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLOCAL_005fLOOPS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_LOCAL_OPTIONS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLOCAL_005fOPTIONS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_LOCAL_PATTERNS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLOCAL_005fPATTERNS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_LOCAL_TRAPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLOCAL_005fTRAPS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_LOG`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLOG) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_LOGIN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLOGIN) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NO_LONG_LIST_JOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fLONG_005fLIST_005fJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NO_MAGIC_EQUAL_SUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fMAGIC_005fEQUAL_005fSUBST) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_MAIL_WARN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fMAIL_005fWARN) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_MAIL_WARNING`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fMAIL_005fWARNING) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_MARK_DIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fMARK_005fDIRS) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_MENU_COMPLETE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fMENU_005fCOMPLETE) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_MONITOR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fMONITOR) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NO_MULTIBYTE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fMULTIBYTE) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_MULTIOS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fMULTIOS) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_MULTI_FUNC_DEF`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fMULTI_005fFUNC_005fDEF) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_NOMATCH`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fNOMATCH) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_NOTIFY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fNOTIFY) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NO_NULL_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fNULL_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_NUMERIC_GLOB_SORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fNUMERIC_005fGLOB_005fSORT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_OCTAL_ZEROES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fOCTAL_005fZEROES) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_ONE_CMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fONE_005fCMD) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_OVERSTRIKE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fOVERSTRIKE) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NO_PATH_DIRS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPATH_005fDIRS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_PATH_SCRIPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPATH_005fSCRIPT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_PHYSICAL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPHYSICAL) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_PIPE_FAIL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPIPE_005fFAIL) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_POSIX_ALIASES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPOSIX_005fALIASES) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_POSIX_ARGZERO`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPOSIX_005fARGZERO) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_POSIX_BUILTINS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPOSIX_005fBUILTINS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_POSIX_CD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPOSIX_005fCD) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_POSIX_IDENTIFIERS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPOSIX_005fIDENTIFIERS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_POSIX_JOBS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPOSIX_005fJOBS) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [`NO_POSIX_STRINGS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPOSIX_005fSTRINGS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_POSIX_TRAPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPOSIX_005fTRAPS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_PRINT_EIGHT_BIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPRINT_005fEIGHT_005fBIT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_PRINT_EXIT_VALUE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPRINT_005fEXIT_005fVALUE) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_PRIVILEGED`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPRIVILEGED) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NO_PROMPT_BANG`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPROMPT_005fBANG) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NO_PROMPT_CR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPROMPT_005fCR) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NO_PROMPT_PERCENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPROMPT_005fPERCENT) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NO_PROMPT_SP`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPROMPT_005fSP) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NO_PROMPT_SUBST`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPROMPT_005fSUBST) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NO_PROMPT_VARS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPROMPT_005fVARS) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_PUSHD_IGNORE_DUPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPUSHD_005fIGNORE_005fDUPS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_PUSHD_MINUS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPUSHD_005fMINUS) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_PUSHD_SILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPUSHD_005fSILENT) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_PUSHD_TO_HOME`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fPUSHD_005fTO_005fHOME) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [`NO_RCS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fRCS) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [`NO_RCS, use of`](https://zsh.sourceforge.io/Doc/Release/Files.html#index-NO_005fRCS_002c-use-of) [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) [`NO_RC_EXPAND_PARAM`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fRC_005fEXPAND_005fPARAM) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_RC_QUOTES`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fRC_005fQUOTES) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_REC_EXACT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fREC_005fEXACT) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [`NO_REMATCH_PCRE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fREMATCH_005fPCRE) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_RESTRICTED`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fRESTRICTED) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NO_RM_STAR_SILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fRM_005fSTAR_005fSILENT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_RM_STAR_WAIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fRM_005fSTAR_005fWAIT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_SHARE_HISTORY`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSHARE_005fHISTORY) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [`NO_SHIN_STDIN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSHIN_005fSTDIN) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NO_SHORT_LOOPS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSHORT_005fLOOPS) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_SHORT_REPEAT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSHORT_005fREPEAT) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_SH_FILE_EXPANSION`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSH_005fFILE_005fEXPANSION) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_SH_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSH_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_SH_NULLCMD`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSH_005fNULLCMD) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_SH_OPTION_LETTERS`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSH_005fOPTION_005fLETTERS) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_SH_WORD_SPLIT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSH_005fWORD_005fSPLIT) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_SINGLE_COMMAND`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSINGLE_005fCOMMAND) [16.2.11 Shell State](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-State) [`NO_SINGLE_LINE_ZLE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSINGLE_005fLINE_005fZLE) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NO_SOURCE_TRACE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSOURCE_005fTRACE) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_STDIN`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSTDIN) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_SUN_KEYBOARD_HACK`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fSUN_005fKEYBOARD_005fHACK) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [`NO_TRACK_ALL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fTRACK_005fALL) [16.3 Option Aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#Option-Aliases) [`NO_TRANSIENT_RPROMPT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fTRANSIENT_005fRPROMPT) [16.2.8 Prompting](https://zsh.sourceforge.io/Doc/Release/Options.html#Prompting) [`NO_TRAPS_ASYNC`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fTRAPS_005fASYNC) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NO_TYPESET_SILENT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fTYPESET_005fSILENT) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_TYPESET_TO_UNSET`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fTYPESET_005fTO_005fUNSET) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_UNSET`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fUNSET) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_VERBOSE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fVERBOSE) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_VI`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fVI) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NO_WARNNESTEDVAR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fWARNNESTEDVAR) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_WARN_CREATE_GLOBAL`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fWARN_005fCREATE_005fGLOBAL) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_WARN_NESTED_VAR`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fWARN_005fNESTED_005fVAR) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NO_XTRACE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fXTRACE) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [`NO_ZLE`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NO_005fZLE) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [`NULLGLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NULLGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NULL_GLOB`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NULL_005fGLOB) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NULL_GLOB, setting in pattern`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-NULL_005fGLOB_002c-setting-in-pattern) [14.8.7 Glob Qualifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers) [`NULL_GLOB, use of`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-NULL_005fGLOB_002c-use-of) [14.8 Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation) [`NUMERICGLOBSORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NUMERICGLOBSORT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NUMERIC_GLOB_SORT`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NUMERIC_005fGLOB_005fSORT) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [`NUMERIC_GLOB_SORT, setting in pattern`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-NUMERIC_005fGLOB_005fSORT_002c-setting-in-pattern) [14.8.7 Glob Qualifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 999,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-10-html-index-split-9-pg-letter-K-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-10-html-index-split-9-pg-letter-K-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-10-html-index-split-9-pg-letter-K-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-10-html-index-split-9-pg-letter-K-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-10-html-index-split-9-pg-letter-K-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 140757,
      "readableText": 128482,
      "none": 111260,
      "readableTextIfPossible": 111260,
      "result": 128482,
      "markdown": 89108
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_2.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-G",
    "loadedTime": "2025-05-08T06:52:07.634Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-G",
    "title": "zsh: Concept Index: G – L",
    "description": "zsh: Concept Index: G – L",
    "author": null,
    "keywords": "zsh: Concept Index: G – L",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:04 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-8ffc\"",
      "expires": "Thu, 08 May 2025 06:53:04 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "MISS",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c708421fe136d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Concept Index: G – L\nIndex Entry Section G glob flags 14.8.4 Globbing Flags glob operators 14.8.1 Glob Operators globbing 14 Expansion globbing flags 14.8.4 Globbing Flags globbing modifiers 14.1.4 Modifiers globbing qualifiers, enable 16.2.3 Expansion and Globbing globbing style, sh 16.2.3 Expansion and Globbing globbing, ** special 16.2.3 Expansion and Globbing globbing, bad pattern 16.2.3 Expansion and Globbing globbing, enabling 16.2.3 Expansion and Globbing globbing, extended 16.2.3 Expansion and Globbing globbing, no matches 16.2.3 Expansion and Globbing globbing, no matches 16.2.3 Expansion and Globbing globbing, null, style, csh 16.2.3 Expansion and Globbing globbing, of . files 16.2.3 Expansion and Globbing globbing, qualifiers 14.8.7 Glob Qualifiers globbing, recursive 14.8.6 Recursive Globbing globbing, short forms 16.2.3 Expansion and Globbing globbing, sorting numerically 16.2.3 Expansion and Globbing grammar, shell 6 Shell Grammar H hash 15.1 Description hashing, of commands 16.2.6 Input/Output hashing, of directories 16.2.6 Input/Output hashing, of executables 16.2.6 Input/Output helpfiles utility 26.2.1 Accessing On-Line Help hexadecimal, output in C format 16.2.9 Scripts and Functions highlighting, region 18.7 Character Highlighting highlighting, special characters 18.7 Character Highlighting history 14.1 History Expansion history beeping 16.2.4 History history event designators 14.1.2 Event Designators history expansion 14.1 History Expansion history modifiers 14.1.4 Modifiers history style, csh 16.2.10 Shell Emulation history word designators 14.1.3 Word Designators history, appending to a file 16.2.4 History history, editing 17 Shell Builtin Commands history, enable substitution 16.2.4 History history, expiring duplicates 16.2.4 History history, file 17 Shell Builtin Commands history, hook when line is saved 9.3.1 Hook Functions history, ignoring all duplicates 16.2.4 History history, ignoring duplicates 16.2.4 History history, ignoring duplicates in search 16.2.4 History history, ignoring spaces 16.2.4 History history, incremental appending to a file 16.2.4 History history, incremental appending to a file with time 16.2.4 History history, sharing 16.2.4 History history, stack 17 Shell Builtin Commands history, timestamping 16.2.4 History history, verifying substitution 16.2.4 History hook function utility 26.2.5 Manipulating Hook Functions I identifiers, non-portable characters in 16.2.10 Shell Emulation if construct 6.3 Complex Commands input, tracing 16.2.9 Scripts and Functions integer parameters 11 Arithmetic Evaluation introduction 2 Introduction invocation 4 Invocation invoking widgets 18.3 Zle Builtins J job control, allowing 16.2.7 Job Control job control, in subshell 16.2.7 Job Control jobs 10.1 Jobs jobs, asynchronous, and exiting shell 10.2 Signals jobs, background priority 16.2.7 Job Control jobs, background, I/O 10.1 Jobs jobs, backgrounding 17 Shell Builtin Commands jobs, continuing automatically 16.2.7 Job Control jobs, disowning 10.1 Jobs jobs, disowning 17 Shell Builtin Commands jobs, foregrounding 17 Shell Builtin Commands jobs, HUP 16.2.7 Job Control jobs, killing 17 Shell Builtin Commands jobs, list format 16.2.7 Job Control jobs, output in subshell 16.2.7 Job Control jobs, referring to 10.1 Jobs jobs, resuming 17 Shell Builtin Commands jobs, resuming automatically 16.2.7 Job Control jobs, suspending 10.1 Jobs jobs, waiting for 17 Shell Builtin Commands K key bindings 18.2 Keymaps keyboard definition 26.2.3 Keyboard Definition keymaps 18.2 Keymaps keymaps 18.3 Zle Builtins keys, binding 18.3 Zle Builtins keys, rebinding 18.3 Zle Builtins killing jobs 17 Shell Builtin Commands ksh compatibility 4.2 Compatibility ksh, argument splitting in typeset 16.2.10 Shell Emulation ksh, array style 16.2.10 Shell Emulation ksh, compatibility 17 Shell Builtin Commands ksh, editor mode 18.1 Description ksh, null command style 15.6 Parameters Used By The Shell ksh, option printing style 16.2.10 Shell Emulation ksh, redirections with no command 16.2.10 Shell Emulation ksh, single letter options style 16.2.10 Shell Emulation L limits, resource 17 Shell Builtin Commands limits, resource 17 Shell Builtin Commands limits, resource 17 Shell Builtin Commands line editor 18 Zsh Line Editor line number, in evaluated expression 16.2.9 Scripts and Functions line, reading 17 Shell Builtin Commands links, symbolic 16.2.1 Changing Directories list 6.1 Simple Commands & Pipelines loading modules 17 Shell Builtin Commands local keymaps 18.2.2 Local Keymaps logging out, checking jobs when 16.2.7 Job Control logging out, checking running jobs when 16.2.7 Job Control long option 4.1 Invocation loop style, csh 16.2.10 Shell Emulation loops, continuing 17 Shell Builtin Commands loops, exiting 17 Shell Builtin Commands loops, for 6.3 Complex Commands loops, repeat 6.3 Complex Commands loops, until 6.3 Complex Commands loops, while 6.3 Complex Commands \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-2-html-index-split-1-cp-letter-G-1w21el.html",
  "markdown": "# zsh: Concept Index: G – L\n\nIndex Entry  Section\n\n* * *\n\nG [glob flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-glob-flags) [14.8.4 Globbing Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Globbing-Flags) [glob operators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-glob-operators) [14.8.1 Glob Operators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Operators) [globbing](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-globbing) [14 Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Expansion) [globbing flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-globbing-flags) [14.8.4 Globbing Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Globbing-Flags) [globbing modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-globbing-modifiers) [14.1.4 Modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Modifiers) [globbing qualifiers, enable](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing-qualifiers_002c-enable) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing style, sh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing-style_002c-sh) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing, \\*\\* special](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing_002c-_002a_002a-special) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing, bad pattern](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing_002c-bad-pattern) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing, enabling](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing_002c-enabling) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing, extended](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing_002c-extended) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing, no matches](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing_002c-no-matches) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing, no matches](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing_002c-no-matches-1) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing, null, style, csh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing_002c-null_002c-style_002c-csh) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing, of . files](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing_002c-of-_002e-files) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing, qualifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-globbing_002c-qualifiers) [14.8.7 Glob Qualifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Glob-Qualifiers) [globbing, recursive](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-globbing_002c-recursive) [14.8.6 Recursive Globbing](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Recursive-Globbing) [globbing, short forms](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing_002c-short-forms) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [globbing, sorting numerically](https://zsh.sourceforge.io/Doc/Release/Options.html#index-globbing_002c-sorting-numerically) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [grammar, shell](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-grammar_002c-shell) [6 Shell Grammar](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Shell-Grammar)\n\n* * *\n\nH [hash](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-hash) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [hashing, of commands](https://zsh.sourceforge.io/Doc/Release/Options.html#index-hashing_002c-of-commands) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [hashing, of directories](https://zsh.sourceforge.io/Doc/Release/Options.html#index-hashing_002c-of-directories) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [hashing, of executables](https://zsh.sourceforge.io/Doc/Release/Options.html#index-hashing_002c-of-executables) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [helpfiles utility](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-helpfiles-utility) [26.2.1 Accessing On-Line Help](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Accessing-On_002dLine-Help) [hexadecimal, output in C format](https://zsh.sourceforge.io/Doc/Release/Options.html#index-hexadecimal_002c-output-in-C-format) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [highlighting, region](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-highlighting_002c-region) [18.7 Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting) [highlighting, special characters](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-highlighting_002c-special-characters) [18.7 Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting) [history](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-history) [14.1 History Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#History-Expansion) [history beeping](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history-beeping) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history event designators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-history-event-designators) [14.1.2 Event Designators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Event-Designators) [history expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-history-expansion) [14.1 History Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#History-Expansion) [history modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-history-modifiers) [14.1.4 Modifiers](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Modifiers) [history style, csh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history-style_002c-csh) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [history word designators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-history-word-designators) [14.1.3 Word Designators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Word-Designators) [history, appending to a file](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-appending-to-a-file) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, editing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-history_002c-editing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [history, enable substitution](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-enable-substitution) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, expiring duplicates](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-expiring-duplicates) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, file](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-history_002c-file) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [history, hook when line is saved](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-history_002c-hook-when-line-is-saved) [9.3.1 Hook Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Hook-Functions) [history, ignoring all duplicates](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-ignoring-all-duplicates) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, ignoring duplicates](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-ignoring-duplicates) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, ignoring duplicates in search](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-ignoring-duplicates-in-search) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, ignoring spaces](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-ignoring-spaces) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, incremental appending to a file](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-incremental-appending-to-a-file) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, incremental appending to a file with time](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-incremental-appending-to-a-file-with-time) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, sharing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-sharing) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, stack](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-history_002c-stack) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [history, timestamping](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-timestamping) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [history, verifying substitution](https://zsh.sourceforge.io/Doc/Release/Options.html#index-history_002c-verifying-substitution) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [hook function utility](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-hook-function-utility) [26.2.5 Manipulating Hook Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Manipulating-Hook-Functions)\n\n* * *\n\nI [identifiers, non-portable characters in](https://zsh.sourceforge.io/Doc/Release/Options.html#index-identifiers_002c-non_002dportable-characters-in) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [if construct](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-if-construct) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [input, tracing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-input_002c-tracing) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [integer parameters](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-integer-parameters) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [introduction](https://zsh.sourceforge.io/Doc/Release/Introduction.html#index-introduction) [2 Introduction](https://zsh.sourceforge.io/Doc/Release/Introduction.html#Introduction) [invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-invocation) [4 Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation) [invoking widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-invoking-widgets) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins)\n\n* * *\n\nJ [job control, allowing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-job-control_002c-allowing) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [job control, in subshell](https://zsh.sourceforge.io/Doc/Release/Options.html#index-job-control_002c-in-subshell) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-jobs) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [jobs, asynchronous, and exiting shell](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-jobs_002c-asynchronous_002c-and-exiting-shell) [10.2 Signals](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Signals) [jobs, background priority](https://zsh.sourceforge.io/Doc/Release/Options.html#index-jobs_002c-background-priority) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [jobs, background, I/O](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-jobs_002c-background_002c-I_002fO) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [jobs, backgrounding](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-jobs_002c-backgrounding) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [jobs, continuing automatically](https://zsh.sourceforge.io/Doc/Release/Options.html#index-jobs_002c-continuing-automatically) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [jobs, disowning](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-jobs_002c-disowning) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [jobs, disowning](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-jobs_002c-disowning-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [jobs, foregrounding](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-jobs_002c-foregrounding) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [jobs, HUP](https://zsh.sourceforge.io/Doc/Release/Options.html#index-jobs_002c-HUP) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [jobs, killing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-jobs_002c-killing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [jobs, list format](https://zsh.sourceforge.io/Doc/Release/Options.html#index-jobs_002c-list-format) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [jobs, output in subshell](https://zsh.sourceforge.io/Doc/Release/Options.html#index-jobs_002c-output-in-subshell) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [jobs, referring to](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-jobs_002c-referring-to) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [jobs, resuming](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-jobs_002c-resuming) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [jobs, resuming automatically](https://zsh.sourceforge.io/Doc/Release/Options.html#index-jobs_002c-resuming-automatically) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [jobs, suspending](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-jobs_002c-suspending) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [jobs, waiting for](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-jobs_002c-waiting-for) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nK [key bindings](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-key-bindings) [18.2 Keymaps](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Keymaps) [keyboard definition](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-keyboard-definition) [26.2.3 Keyboard Definition](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Keyboard-Definition) [keymaps](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-keymaps) [18.2 Keymaps](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Keymaps) [keymaps](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-keymaps-1) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [keys, binding](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-keys_002c-binding) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [keys, rebinding](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-keys_002c-rebinding) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [killing jobs](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-killing-jobs) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [ksh compatibility](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-ksh-compatibility) [4.2 Compatibility](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Compatibility) [ksh, argument splitting in typeset](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ksh_002c-argument-splitting-in-typeset) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [ksh, array style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ksh_002c-array-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [ksh, compatibility](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-ksh_002c-compatibility) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [ksh, editor mode](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-ksh_002c-editor-mode) [18.1 Description](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Description-6) [ksh, null command style](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-ksh_002c-null-command-style) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [ksh, option printing style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ksh_002c-option-printing-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [ksh, redirections with no command](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ksh_002c-redirections-with-no-command) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [ksh, single letter options style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-ksh_002c-single-letter-options-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation)\n\n* * *\n\nL [limits, resource](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-limits_002c-resource) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [limits, resource](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-limits_002c-resource-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [limits, resource](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-limits_002c-resource-2) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [line editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-line-editor) [18 Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor) [line number, in evaluated expression](https://zsh.sourceforge.io/Doc/Release/Options.html#index-line-number_002c-in-evaluated-expression) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [line, reading](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-line_002c-reading) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [links, symbolic](https://zsh.sourceforge.io/Doc/Release/Options.html#index-links_002c-symbolic) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [list](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-list) [6.1 Simple Commands & Pipelines](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Simple-Commands-_0026-Pipelines) [loading modules](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-loading-modules) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [local keymaps](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-local-keymaps) [18.2.2 Local Keymaps](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Local-Keymaps) [logging out, checking jobs when](https://zsh.sourceforge.io/Doc/Release/Options.html#index-logging-out_002c-checking-jobs-when) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [logging out, checking running jobs when](https://zsh.sourceforge.io/Doc/Release/Options.html#index-logging-out_002c-checking-running-jobs-when) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [long option](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-long-option) [4.1 Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation-1) [loop style, csh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-loop-style_002c-csh) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [loops, continuing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-loops_002c-continuing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [loops, exiting](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-loops_002c-exiting) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [loops, for](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-loops_002c-for) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [loops, repeat](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-loops_002c-repeat) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [loops, until](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-loops_002c-until) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [loops, while](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-loops_002c-while) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 307,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-2-html-index-split-1-cp-letter-G-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-2-html-index-split-1-cp-letter-G-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-2-html-index-split-1-cp-letter-G-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-2-html-index-split-1-cp-letter-G-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-2-html-index-split-1-cp-letter-G-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 36168,
      "readableText": 33456,
      "none": 35222,
      "readableTextIfPossible": 35222,
      "result": 33456,
      "markdown": 24270
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_1.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_1.html#index_split-0",
    "loadedTime": "2025-05-08T06:52:15.905Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_1.html#index_split-0",
    "title": "zsh: Concept Index: D – F",
    "description": "zsh: Concept Index: D – F",
    "author": null,
    "keywords": "zsh: Concept Index: D – F",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:10 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-a908\"",
      "expires": "Thu, 08 May 2025 06:53:10 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7085f7ea736d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Concept Index: D – F\nIndex Entry Section D database file path, reading 22.11 The zsh/db/gdbm Module database tied array, creating 22.11 The zsh/db/gdbm Module database tied array, destroying 22.11 The zsh/db/gdbm Module database tied arrays, enumerating 22.11 The zsh/db/gdbm Module date string, printing 22.10 The zsh/datetime Module DEBUG trap, before or after command 16.2.9 Scripts and Functions defining mathematical functions 17 Shell Builtin Commands defining widgets 18.3 Zle Builtins descriptors, file 7 Redirection directories, changing 17 Shell Builtin Commands directories, hashing 16.2.6 Input/Output directories, maintaining list of recent 26.3 Remembering Recent Directories directories, marking 16.2.3 Expansion and Globbing directories, named 16.2.2 Completion directories, named, dynamic 14.7.1 Dynamic named directories directories, named, dynamic, helper function 26.4 Abbreviated dynamic references to directories directories, named, static 14.7.2 Static named directories directory stack, controlling syntax 16.2.1 Changing Directories directory stack, ignoring duplicates 16.2.1 Changing Directories directory stack, printing 17 Shell Builtin Commands directory stack, silencing 16.2.1 Changing Directories disabling brace expansion 16.2.3 Expansion and Globbing disabling commands 17 Shell Builtin Commands discarding embedded nulls in $’...’ 16.2.10 Shell Emulation disowning jobs 10.1 Jobs doing nothing 17 Shell Builtin Commands doing nothing, successfully 17 Shell Builtin Commands doing nothing, unsuccessfully 17 Shell Builtin Commands dynamic directory naming, helper function 26.4 Abbreviated dynamic references to directories dynamic named directories 14.7.1 Dynamic named directories E echo, BSD compatible 16.2.10 Shell Emulation editing history 17 Shell Builtin Commands editing over slow connection 15.6 Parameters Used By The Shell editing parameters 18.3 Zle Builtins editor ksh style 18.1 Description editor, enabling 16.2.12 Zle editor, line 18 Zsh Line Editor editor, overstrike mode 16.2.12 Zle editor, single line mode 16.2.12 Zle eight bit characters, printing 16.2.6 Input/Output embedded nulls, in $’...’ 16.2.10 Shell Emulation enable globbing qualifiers 16.2.3 Expansion and Globbing enable history substitution 16.2.4 History enabling bracketed paste 15.6 Parameters Used By The Shell enabling commands 17 Shell Builtin Commands enabling globbing 16.2.3 Expansion and Globbing enabling the beep 16.2.12 Zle enabling the editor 16.2.12 Zle environment 15.1 Description environment variables 15.1 Description environment, and local parameters 16.2.5 Initialisation EOF, ignoring 16.2.6 Input/Output error, option to continue script on 16.2.10 Shell Emulation errors, handling of 6.6 Errors escape sequences, terminal, for highlighting 18.7 Character Highlighting evaluating arguments as commands 17 Shell Builtin Commands evaluation, arithmetic 11 Arithmetic Evaluation event designators, history 14.1.2 Event Designators executables, hashing 16.2.6 Input/Output execution, of commands 8 Command Execution execution, timed 22.24 The zsh/sched Module exit status from pipeline 16.2.9 Scripts and Functions exit status, printing 16.2.6 Input/Output exit status, trapping 16.2.9 Scripts and Functions exiting loops 17 Shell Builtin Commands exiting shell, and asynchronous jobs 10.2 Signals exiting, checking jobs when 16.2.7 Job Control exiting, checking running jobs when 16.2.7 Job Control expanding parameters 17 Shell Builtin Commands expansion 14 Expansion expansion style, sh 16.2.10 Shell Emulation expansion, arithmetic 14.5 Arithmetic Expansion expansion, brace 14.6 Brace Expansion expansion, brace, disabling 16.2.3 Expansion and Globbing expansion, brace, extending 16.2.3 Expansion and Globbing expansion, filename 14.7 Filename Expansion expansion, history 14.1 History Expansion expansion, parameter 14.3 Parameter Expansion expansion, prompt 13.1 Expansion of Prompt Sequences export 15.1 Description export, automatic 16.2.5 Initialisation exporting, and local parameters 16.2.5 Initialisation expressions, conditional 12 Conditional Expressions extended attributes, xattr, getting from files 22.2 The zsh/attr Module extended attributes, xattr, listing 22.2 The zsh/attr Module extended attributes, xattr, removing, deleting 22.2 The zsh/attr Module extended attributes, xattr, setting on files 22.2 The zsh/attr Module F fg, output in POSIX format 16.2.7 Job Control field splitting, sh style 16.2.10 Shell Emulation field splitting, sh style, parameter 14.3 Parameter Expansion file clobbering, allowing 16.2.6 Input/Output file clobbering, of empty files 16.2.6 Input/Output file clobbering, POSIX compatibility 16.2.10 Shell Emulation file descriptors 7 Redirection file descriptors, use with parameters 7.1 Opening file descriptors using parameters file descriptors, waiting for 22.37 The zsh/zselect Module file, history 17 Shell Builtin Commands filename expansion 14.7 Filename Expansion filename expansion, = 16.2.3 Expansion and Globbing filename expansion, notes 14.7.4 Notes filename generation 14.8 Filename Generation filename generation, bad pattern 16.2.3 Expansion and Globbing files used 5.2 Files files, examining 22.26 The zsh/stat Module files, global startup, inhibiting 16.2.5 Initialisation files, listing 22.26 The zsh/stat Module files, manipulating 22.14 The zsh/files Module files, marking type of 16.2.2 Completion files, shutdown 5.1 Startup/Shutdown Files files, startup 5.1 Startup/Shutdown Files files, transferring 22.32 The zsh/zftp Module flags, parameter expansion 14.3.1 Parameter Expansion Flags flags, shell 4.1 Invocation floating point parameters 11 Arithmetic Evaluation floating point, forcing use of 16.2.3 Expansion and Globbing flow control 16.2.6 Input/Output for loops 6.3 Complex Commands forcing use of floating point 16.2.3 Expansion and Globbing FTP 22.32 The zsh/zftp Module FTP sites for zsh 2.2 Availability FTP, functions for using shell as client 25 Zftp Function System FTP, starting a session 22.32.1 Subcommands function return, on error 16.2.9 Scripts and Functions function, scope of break and continue 16.2.9 Scripts and Functions functions 9 Functions functions, anonymous 9.2 Anonymous Functions functions, autoloading 9.1 Autoloading Functions functions, autoloading 17 Shell Builtin Commands functions, defining mathematical 17 Shell Builtin Commands functions, defining with expanded aliases 16.2.9 Scripts and Functions functions, math, use of 11 Arithmetic Evaluation functions, mathematical 22.17 The zsh/mathfunc Module functions, profiling 22.35 The zsh/zprof Module functions, recompiling 26.2.2 Recompiling Functions functions, removing 17 Shell Builtin Commands functions, returning from 17 Shell Builtin Commands \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-1-html-index-split-0-dufg2.html",
  "markdown": "# zsh: Concept Index: D – F\n\nIndex Entry  Section\n\n* * *\n\nD [database file path, reading](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-database-file-path_002c-reading) [22.11 The zsh/db/gdbm Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fdb_002fgdbm-Module) [database tied array, creating](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-database-tied-array_002c-creating) [22.11 The zsh/db/gdbm Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fdb_002fgdbm-Module) [database tied array, destroying](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-database-tied-array_002c-destroying) [22.11 The zsh/db/gdbm Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fdb_002fgdbm-Module) [database tied arrays, enumerating](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-database-tied-arrays_002c-enumerating) [22.11 The zsh/db/gdbm Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fdb_002fgdbm-Module) [date string, printing](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-date-string_002c-printing) [22.10 The zsh/datetime Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fdatetime-Module) [DEBUG trap, before or after command](https://zsh.sourceforge.io/Doc/Release/Options.html#index-DEBUG-trap_002c-before-or-after-command) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [defining mathematical functions](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-defining-mathematical-functions) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [defining widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-defining-widgets) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [descriptors, file](https://zsh.sourceforge.io/Doc/Release/Redirection.html#index-descriptors_002c-file) [7 Redirection](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirection) [directories, changing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-directories_002c-changing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [directories, hashing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-directories_002c-hashing) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [directories, maintaining list of recent](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-directories_002c-maintaining-list-of-recent) [26.3 Remembering Recent Directories](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Recent-Directories) [directories, marking](https://zsh.sourceforge.io/Doc/Release/Options.html#index-directories_002c-marking) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [directories, named](https://zsh.sourceforge.io/Doc/Release/Options.html#index-directories_002c-named) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [directories, named, dynamic](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-directories_002c-named_002c-dynamic) [14.7.1 Dynamic named directories](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Dynamic-named-directories) [directories, named, dynamic, helper function](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-directories_002c-named_002c-dynamic_002c-helper-function) [26.4 Abbreviated dynamic references to directories](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Other-Directory-Functions) [directories, named, static](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-directories_002c-named_002c-static) [14.7.2 Static named directories](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Static-named-directories) [directory stack, controlling syntax](https://zsh.sourceforge.io/Doc/Release/Options.html#index-directory-stack_002c-controlling-syntax) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [directory stack, ignoring duplicates](https://zsh.sourceforge.io/Doc/Release/Options.html#index-directory-stack_002c-ignoring-duplicates) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [directory stack, printing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-directory-stack_002c-printing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [directory stack, silencing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-directory-stack_002c-silencing) [16.2.1 Changing Directories](https://zsh.sourceforge.io/Doc/Release/Options.html#Changing-Directories) [disabling brace expansion](https://zsh.sourceforge.io/Doc/Release/Options.html#index-disabling-brace-expansion) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [disabling commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-disabling-commands) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [discarding embedded nulls in $’...’](https://zsh.sourceforge.io/Doc/Release/Options.html#index-discarding-embedded-nulls-in-_0024_0027_002e_002e_002e_0027) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [disowning jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-disowning-jobs) [10.1 Jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Jobs) [doing nothing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-doing-nothing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [doing nothing, successfully](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-doing-nothing_002c-successfully) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [doing nothing, unsuccessfully](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-doing-nothing_002c-unsuccessfully) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [dynamic directory naming, helper function](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-dynamic-directory-naming_002c-helper-function) [26.4 Abbreviated dynamic references to directories](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Other-Directory-Functions) [dynamic named directories](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-dynamic-named-directories) [14.7.1 Dynamic named directories](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Dynamic-named-directories)\n\n* * *\n\nE [echo, BSD compatible](https://zsh.sourceforge.io/Doc/Release/Options.html#index-echo_002c-BSD-compatible) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [editing history](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-editing-history) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [editing over slow connection](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-editing-over-slow-connection) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [editing parameters](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-editing-parameters) [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) [editor ksh style](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-editor-ksh-style) [18.1 Description](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Description-6) [editor, enabling](https://zsh.sourceforge.io/Doc/Release/Options.html#index-editor_002c-enabling) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [editor, line](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-editor_002c-line) [18 Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor) [editor, overstrike mode](https://zsh.sourceforge.io/Doc/Release/Options.html#index-editor_002c-overstrike-mode) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [editor, single line mode](https://zsh.sourceforge.io/Doc/Release/Options.html#index-editor_002c-single-line-mode) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [eight bit characters, printing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-eight-bit-characters_002c-printing) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [embedded nulls, in $’...’](https://zsh.sourceforge.io/Doc/Release/Options.html#index-embedded-nulls_002c-in-_0024_0027_002e_002e_002e_0027) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [enable globbing qualifiers](https://zsh.sourceforge.io/Doc/Release/Options.html#index-enable-globbing-qualifiers) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [enable history substitution](https://zsh.sourceforge.io/Doc/Release/Options.html#index-enable-history-substitution) [16.2.4 History](https://zsh.sourceforge.io/Doc/Release/Options.html#History) [enabling bracketed paste](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-enabling-bracketed-paste) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [enabling commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-enabling-commands) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [enabling globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-enabling-globbing) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [enabling the beep](https://zsh.sourceforge.io/Doc/Release/Options.html#index-enabling-the-beep) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [enabling the editor](https://zsh.sourceforge.io/Doc/Release/Options.html#index-enabling-the-editor) [16.2.12 Zle](https://zsh.sourceforge.io/Doc/Release/Options.html#Zle) [environment](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-environment) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [environment variables](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-environment-variables) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [environment, and local parameters](https://zsh.sourceforge.io/Doc/Release/Options.html#index-environment_002c-and-local-parameters) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [EOF, ignoring](https://zsh.sourceforge.io/Doc/Release/Options.html#index-EOF_002c-ignoring) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [error, option to continue script on](https://zsh.sourceforge.io/Doc/Release/Options.html#index-error_002c-option-to-continue-script-on) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [errors, handling of](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-errors_002c-handling-of) [6.6 Errors](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Errors) [escape sequences, terminal, for highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-escape-sequences_002c-terminal_002c-for-highlighting) [18.7 Character Highlighting](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting) [evaluating arguments as commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-evaluating-arguments-as-commands) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [evaluation, arithmetic](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-evaluation_002c-arithmetic) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [event designators, history](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-event-designators_002c-history) [14.1.2 Event Designators](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Event-Designators) [executables, hashing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-executables_002c-hashing) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [execution, of commands](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#index-execution_002c-of-commands) [8 Command Execution](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#Command-Execution) [execution, timed](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-execution_002c-timed) [22.24 The zsh/sched Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fsched-Module) [exit status from pipeline](https://zsh.sourceforge.io/Doc/Release/Options.html#index-exit-status-from-pipeline) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [exit status, printing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-exit-status_002c-printing) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [exit status, trapping](https://zsh.sourceforge.io/Doc/Release/Options.html#index-exit-status_002c-trapping) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [exiting loops](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-exiting-loops) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [exiting shell, and asynchronous jobs](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#index-exiting-shell_002c-and-asynchronous-jobs) [10.2 Signals](https://zsh.sourceforge.io/Doc/Release/Jobs-_0026-Signals.html#Signals) [exiting, checking jobs when](https://zsh.sourceforge.io/Doc/Release/Options.html#index-exiting_002c-checking-jobs-when) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [exiting, checking running jobs when](https://zsh.sourceforge.io/Doc/Release/Options.html#index-exiting_002c-checking-running-jobs-when) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [expanding parameters](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-expanding-parameters) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-expansion) [14 Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Expansion) [expansion style, sh](https://zsh.sourceforge.io/Doc/Release/Options.html#index-expansion-style_002c-sh) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [expansion, arithmetic](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-expansion_002c-arithmetic) [14.5 Arithmetic Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Arithmetic-Expansion) [expansion, brace](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-expansion_002c-brace) [14.6 Brace Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Brace-Expansion) [expansion, brace, disabling](https://zsh.sourceforge.io/Doc/Release/Options.html#index-expansion_002c-brace_002c-disabling) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [expansion, brace, extending](https://zsh.sourceforge.io/Doc/Release/Options.html#index-expansion_002c-brace_002c-extending) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [expansion, filename](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-expansion_002c-filename) [14.7 Filename Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Expansion) [expansion, history](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-expansion_002c-history) [14.1 History Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#History-Expansion) [expansion, parameter](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-expansion_002c-parameter) [14.3 Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) [expansion, prompt](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#index-expansion_002c-prompt) [13.1 Expansion of Prompt Sequences](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Expansion-of-Prompt-Sequences) [export](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-export) [15.1 Description](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Description-1) [export, automatic](https://zsh.sourceforge.io/Doc/Release/Options.html#index-export_002c-automatic) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [exporting, and local parameters](https://zsh.sourceforge.io/Doc/Release/Options.html#index-exporting_002c-and-local-parameters) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [expressions, conditional](https://zsh.sourceforge.io/Doc/Release/Conditional-Expressions.html#index-expressions_002c-conditional) [12 Conditional Expressions](https://zsh.sourceforge.io/Doc/Release/Conditional-Expressions.html#Conditional-Expressions) [extended attributes, xattr, getting from files](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-extended-attributes_002c-xattr_002c-getting-from-files) [22.2 The zsh/attr Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fattr-Module) [extended attributes, xattr, listing](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-extended-attributes_002c-xattr_002c-listing) [22.2 The zsh/attr Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fattr-Module) [extended attributes, xattr, removing, deleting](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-extended-attributes_002c-xattr_002c-removing_002c-deleting) [22.2 The zsh/attr Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fattr-Module) [extended attributes, xattr, setting on files](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-extended-attributes_002c-xattr_002c-setting-on-files) [22.2 The zsh/attr Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fattr-Module)\n\n* * *\n\nF [fg, output in POSIX format](https://zsh.sourceforge.io/Doc/Release/Options.html#index-fg_002c-output-in-POSIX-format) [16.2.7 Job Control](https://zsh.sourceforge.io/Doc/Release/Options.html#Job-Control) [field splitting, sh style](https://zsh.sourceforge.io/Doc/Release/Options.html#index-field-splitting_002c-sh-style) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [field splitting, sh style, parameter](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-field-splitting_002c-sh-style_002c-parameter) [14.3 Parameter Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion) [file clobbering, allowing](https://zsh.sourceforge.io/Doc/Release/Options.html#index-file-clobbering_002c-allowing) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [file clobbering, of empty files](https://zsh.sourceforge.io/Doc/Release/Options.html#index-file-clobbering_002c-of-empty-files) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [file clobbering, POSIX compatibility](https://zsh.sourceforge.io/Doc/Release/Options.html#index-file-clobbering_002c-POSIX-compatibility) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [file descriptors](https://zsh.sourceforge.io/Doc/Release/Redirection.html#index-file-descriptors) [7 Redirection](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirection) [file descriptors, use with parameters](https://zsh.sourceforge.io/Doc/Release/Redirection.html#index-file-descriptors_002c-use-with-parameters) [7.1 Opening file descriptors using parameters](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Opening-file-descriptors-using-parameters) [file descriptors, waiting for](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-file-descriptors_002c-waiting-for) [22.37 The zsh/zselect Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzselect-Module) [file, history](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-file_002c-history) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [filename expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-filename-expansion) [14.7 Filename Expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Expansion) [filename expansion, =](https://zsh.sourceforge.io/Doc/Release/Options.html#index-filename-expansion_002c-_003d) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [filename expansion, notes](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-filename-expansion_002c-notes) [14.7.4 Notes](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Notes) [filename generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-filename-generation) [14.8 Filename Generation](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Filename-Generation) [filename generation, bad pattern](https://zsh.sourceforge.io/Doc/Release/Options.html#index-filename-generation_002c-bad-pattern) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [files used](https://zsh.sourceforge.io/Doc/Release/Files.html#index-files-used) [5.2 Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Files-1) [files, examining](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-files_002c-examining) [22.26 The zsh/stat Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fstat-Module) [files, global startup, inhibiting](https://zsh.sourceforge.io/Doc/Release/Options.html#index-files_002c-global-startup_002c-inhibiting) [16.2.5 Initialisation](https://zsh.sourceforge.io/Doc/Release/Options.html#Initialisation) [files, listing](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-files_002c-listing) [22.26 The zsh/stat Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fstat-Module) [files, manipulating](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-files_002c-manipulating) [22.14 The zsh/files Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002ffiles-Module) [files, marking type of](https://zsh.sourceforge.io/Doc/Release/Options.html#index-files_002c-marking-type-of) [16.2.2 Completion](https://zsh.sourceforge.io/Doc/Release/Options.html#Completion-4) [files, shutdown](https://zsh.sourceforge.io/Doc/Release/Files.html#index-files_002c-shutdown) [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) [files, startup](https://zsh.sourceforge.io/Doc/Release/Files.html#index-files_002c-startup) [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) [files, transferring](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-files_002c-transferring) [22.32 The zsh/zftp Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzftp-Module) [flags, parameter expansion](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-flags_002c-parameter-expansion) [14.3.1 Parameter Expansion Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Parameter-Expansion-Flags) [flags, shell](https://zsh.sourceforge.io/Doc/Release/Invocation.html#index-flags_002c-shell) [4.1 Invocation](https://zsh.sourceforge.io/Doc/Release/Invocation.html#Invocation-1) [floating point parameters](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-floating-point-parameters) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [floating point, forcing use of](https://zsh.sourceforge.io/Doc/Release/Options.html#index-floating-point_002c-forcing-use-of) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [flow control](https://zsh.sourceforge.io/Doc/Release/Options.html#index-flow-control) [16.2.6 Input/Output](https://zsh.sourceforge.io/Doc/Release/Options.html#Input_002fOutput) [for loops](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#index-for-loops) [6.3 Complex Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Grammar.html#Complex-Commands) [forcing use of floating point](https://zsh.sourceforge.io/Doc/Release/Options.html#index-forcing-use-of-floating-point) [16.2.3 Expansion and Globbing](https://zsh.sourceforge.io/Doc/Release/Options.html#Expansion-and-Globbing) [FTP](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-FTP) [22.32 The zsh/zftp Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzftp-Module) [FTP sites for zsh](https://zsh.sourceforge.io/Doc/Release/Introduction.html#index-FTP-sites-for-zsh) [2.2 Availability](https://zsh.sourceforge.io/Doc/Release/Introduction.html#Availability) [FTP, functions for using shell as client](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-FTP_002c-functions-for-using-shell-as-client) [25 Zftp Function System](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Zftp-Function-System) [FTP, starting a session](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-FTP_002c-starting-a-session) [22.32.1 Subcommands](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Subcommands) [function return, on error](https://zsh.sourceforge.io/Doc/Release/Options.html#index-function-return_002c-on-error) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [function, scope of break and continue](https://zsh.sourceforge.io/Doc/Release/Options.html#index-function_002c-scope-of-break-and-continue) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-functions) [9 Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Functions) [functions, anonymous](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-functions_002c-anonymous) [9.2 Anonymous Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Anonymous-Functions) [functions, autoloading](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-functions_002c-autoloading) [9.1 Autoloading Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Autoloading-Functions) [functions, autoloading](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-functions_002c-autoloading-1) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [functions, defining mathematical](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-functions_002c-defining-mathematical) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [functions, defining with expanded aliases](https://zsh.sourceforge.io/Doc/Release/Options.html#index-functions_002c-defining-with-expanded-aliases) [16.2.9 Scripts and Functions](https://zsh.sourceforge.io/Doc/Release/Options.html#Scripts-and-Functions) [functions, math, use of](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#index-functions_002c-math_002c-use-of) [11 Arithmetic Evaluation](https://zsh.sourceforge.io/Doc/Release/Arithmetic-Evaluation.html#Arithmetic-Evaluation) [functions, mathematical](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-functions_002c-mathematical) [22.17 The zsh/mathfunc Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fmathfunc-Module) [functions, profiling](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-functions_002c-profiling) [22.35 The zsh/zprof Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzprof-Module) [functions, recompiling](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-functions_002c-recompiling) [26.2.2 Recompiling Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Recompiling-Functions) [functions, removing](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-functions_002c-removing) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [functions, returning from](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-functions_002c-returning-from) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 346,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-1-html-index-split-0-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-1-html-index-split-0-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-1-html-index-split-0-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-1-html-index-split-0-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-1-html-index-split-0-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 44276,
      "readableText": 40868,
      "none": 41610,
      "readableTextIfPossible": 41610,
      "result": 40868,
      "markdown": 30484
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_6.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_6.html#index_split-5",
    "loadedTime": "2025-05-08T06:52:17.104Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Variables-Index.html#Variables-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_6.html#index_split-5",
    "title": "zsh: Variables Index: J – P",
    "description": "zsh: Variables Index: J – P",
    "author": null,
    "keywords": "zsh: Variables Index: J – P",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:11 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-91db\"",
      "expires": "Thu, 08 May 2025 06:53:11 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c70868eb2836d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Variables Index: J – P\nIndex Entry Section J jobdirs 22.20 The zsh/parameter Module jobstates 22.20 The zsh/parameter Module jobtexts 22.20 The zsh/parameter Module K KEYBOARD_HACK 15.6 Parameters Used By The Shell KEYMAP 18.5 User-Defined Widgets keymaps 22.34 The zsh/zleparameter Module KEYS 18.5 User-Defined Widgets KEYS_QUEUED_COUNT 18.5 User-Defined Widgets KEYTIMEOUT 15.6 Parameters Used By The Shell killring 18.5 User-Defined Widgets L LANG 15.6 Parameters Used By The Shell langinfo 22.15 The zsh/langinfo Module LASTABORTEDSEARCH 18.5 User-Defined Widgets LASTSEARCH 18.5 User-Defined Widgets LASTWIDGET 18.5 User-Defined Widgets last_prompt, compstate 19.2 Completion Special Parameters LBUFFER 18.5 User-Defined Widgets LC_ALL 15.6 Parameters Used By The Shell LC_COLLATE 15.6 Parameters Used By The Shell LC_CTYPE 15.6 Parameters Used By The Shell LC_MESSAGES 15.6 Parameters Used By The Shell LC_NUMERIC 15.6 Parameters Used By The Shell LC_TIME 15.6 Parameters Used By The Shell line, use of 20.6 Utility Functions LINENO 15.5 Parameters Set By The Shell LINES 15.6 Parameters Used By The Shell LINES, use of 18.1 Description list, compstate 19.2 Completion Special Parameters LISTMAX 15.6 Parameters Used By The Shell list_lines, compstate 19.2 Completion Special Parameters list_max, compstate 19.2 Completion Special Parameters LOGCHECK 22.31 The zsh/watch Module LOGNAME 15.5 Parameters Set By The Shell M MACHTYPE 15.5 Parameters Set By The Shell MAIL 15.6 Parameters Used By The Shell MAILCHECK 15.6 Parameters Used By The Shell mailpath 15.6 Parameters Used By The Shell MAILPATH 15.6 Parameters Used By The Shell manpath 15.6 Parameters Used By The Shell MANPATH 15.6 Parameters Used By The Shell mapfile 22.16 The zsh/mapfile Module MARK 18.5 User-Defined Widgets match 14.8.4 Globbing Flags MATCH 14.8.4 Globbing Flags mbegin 14.8.4 Globbing Flags MBEGIN 14.8.4 Globbing Flags mend 14.8.4 Globbing Flags MEND 14.8.4 Globbing Flags MENUSELECT 22.7.3 Menu selection modules 22.20 The zsh/parameter Module module_path 15.6 Parameters Used By The Shell MODULE_PATH 15.6 Parameters Used By The Shell N nameddirs 22.20 The zsh/parameter Module nmatches, compstate 19.2 Completion Special Parameters NULLCMD 15.6 Parameters Used By The Shell NULLCMD, ignoring 16.2.10 Shell Emulation NULLCMD, ignoring 16.2.10 Shell Emulation NULLCMD, use of 7.3 Redirections with no command NUMERIC 18.5 User-Defined Widgets O OLDPWD 15.5 Parameters Set By The Shell old_insert, compstate 19.2 Completion Special Parameters old_list, compstate 19.2 Completion Special Parameters OPTARG 15.5 Parameters Set By The Shell OPTARG, use of 17 Shell Builtin Commands OPTIND 15.5 Parameters Set By The Shell OPTIND, use of 17 Shell Builtin Commands options 22.20 The zsh/parameter Module opt_args, use of 20.6 Utility Functions OSTYPE 15.5 Parameters Set By The Shell P parameter, compstate 19.2 Completion Special Parameters parameters 22.20 The zsh/parameter Module patchars 22.20 The zsh/parameter Module path 15.6 Parameters Used By The Shell PATH 15.6 Parameters Used By The Shell path, use of 8 Command Execution pattern_insert, compstate 19.2 Completion Special Parameters pattern_match, compstate 19.2 Completion Special Parameters PENDING 18.5 User-Defined Widgets PERIOD 9.3.1 Hook Functions periodic_functions 9.3.1 Hook Functions pid, sysparams 22.27.3 Parameters pipestatus 15.5 Parameters Set By The Shell POSTDISPLAY 18.5 User-Defined Widgets POSTEDIT 15.6 Parameters Used By The Shell PPID 15.5 Parameters Set By The Shell ppid, sysparams 22.27.3 Parameters PREBUFFER 18.5 User-Defined Widgets precmd_functions 9.3.1 Hook Functions PREDISPLAY 18.5 User-Defined Widgets preexec_functions 9.3.1 Hook Functions PREFIX 19.2 Completion Special Parameters PROMPT 15.6 Parameters Used By The Shell prompt 15.6 Parameters Used By The Shell PROMPT2 15.6 Parameters Used By The Shell PROMPT3 15.6 Parameters Used By The Shell PROMPT4 15.6 Parameters Used By The Shell PROMPT_EOL_MARK 15.6 Parameters Used By The Shell PS1 15.6 Parameters Used By The Shell PS2 15.6 Parameters Used By The Shell PS3 15.6 Parameters Used By The Shell PS4 15.6 Parameters Used By The Shell psvar 15.6 Parameters Used By The Shell PSVAR 15.6 Parameters Used By The Shell psvar, use of 13.3 Conditional Substrings in Prompts PWD 15.5 Parameters Set By The Shell \nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-6-html-index-split-5-wsie7.html",
  "markdown": "# zsh: Variables Index: J – P\n\nIndex Entry  Section\n\n* * *\n\nJ [`jobdirs`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-jobdirs) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`jobstates`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-jobstates) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`jobtexts`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-jobtexts) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module)\n\n* * *\n\nK [`KEYBOARD_HACK`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-KEYBOARD_005fHACK) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`KEYMAP`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-KEYMAP) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`keymaps`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-keymaps-2) [22.34 The zsh/zleparameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fzleparameter-Module) [`KEYS`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-KEYS) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`KEYS_QUEUED_COUNT`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-KEYS_005fQUEUED_005fCOUNT) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`KEYTIMEOUT`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-KEYTIMEOUT) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`killring`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-killring) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets)\n\n* * *\n\nL [`LANG`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LANG) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`langinfo`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-langinfo) [22.15 The zsh/langinfo Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002flanginfo-Module) [`LASTABORTEDSEARCH`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-LASTABORTEDSEARCH) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`LASTSEARCH`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-LASTSEARCH) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`LASTWIDGET`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-LASTWIDGET) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`last_prompt, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-last_005fprompt_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`LBUFFER`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-LBUFFER) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`LC_ALL`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LC_005fALL) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`LC_COLLATE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LC_005fCOLLATE) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`LC_CTYPE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LC_005fCTYPE) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`LC_MESSAGES`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LC_005fMESSAGES) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`LC_NUMERIC`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LC_005fNUMERIC) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`LC_TIME`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LC_005fTIME) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`line, use of`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-line_002c-use-of) [20.6 Utility Functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-Functions) [`LINENO`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LINENO) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`LINES`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LINES) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`LINES, use of`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-LINES_002c-use-of) [18.1 Description](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Description-6) [`list, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-list_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`LISTMAX`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LISTMAX) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`list_lines, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-list_005flines_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`list_max, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-list_005fmax_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`LOGCHECK`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-LOGCHECK) [22.31 The zsh/watch Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fwatch-Module) [`LOGNAME`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-LOGNAME) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\nM [`MACHTYPE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-MACHTYPE) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`MAIL`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-MAIL) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`MAILCHECK`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-MAILCHECK) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`mailpath`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-mailpath) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`MAILPATH`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-MAILPATH) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`manpath`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-manpath) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`MANPATH`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-MANPATH) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`mapfile`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-mapfile) [22.16 The zsh/mapfile Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fmapfile-Module) [`MARK`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-MARK) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`match`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-match) [14.8.4 Globbing Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Globbing-Flags) [`MATCH`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-MATCH) [14.8.4 Globbing Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Globbing-Flags) [`mbegin`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-mbegin) [14.8.4 Globbing Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Globbing-Flags) [`MBEGIN`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-MBEGIN) [14.8.4 Globbing Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Globbing-Flags) [`mend`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-mend) [14.8.4 Globbing Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Globbing-Flags) [`MEND`](https://zsh.sourceforge.io/Doc/Release/Expansion.html#index-MEND) [14.8.4 Globbing Flags](https://zsh.sourceforge.io/Doc/Release/Expansion.html#Globbing-Flags) [`MENUSELECT`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-MENUSELECT) [22.7.3 Menu selection](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Menu-selection) [`modules`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-modules-1) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`module_path`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-module_005fpath) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`MODULE_PATH`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-MODULE_005fPATH) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell)\n\n* * *\n\nN [`nameddirs`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-nameddirs) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`nmatches, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-nmatches_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`NULLCMD`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-NULLCMD) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`NULLCMD, ignoring`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NULLCMD_002c-ignoring) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NULLCMD, ignoring`](https://zsh.sourceforge.io/Doc/Release/Options.html#index-NULLCMD_002c-ignoring-1) [16.2.10 Shell Emulation](https://zsh.sourceforge.io/Doc/Release/Options.html#Shell-Emulation) [`NULLCMD, use of`](https://zsh.sourceforge.io/Doc/Release/Redirection.html#index-NULLCMD_002c-use-of) [7.3 Redirections with no command](https://zsh.sourceforge.io/Doc/Release/Redirection.html#Redirections-with-no-command) [`NUMERIC`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-NUMERIC) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets)\n\n* * *\n\nO [`OLDPWD`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-OLDPWD) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`old_insert, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-old_005finsert_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`old_list, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-old_005flist_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`OPTARG`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-OPTARG) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`OPTARG, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-OPTARG_002c-use-of) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`OPTIND`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-OPTIND) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`OPTIND, use of`](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#index-OPTIND_002c-use-of) [17 Shell Builtin Commands](https://zsh.sourceforge.io/Doc/Release/Shell-Builtin-Commands.html#Shell-Builtin-Commands) [`options`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-options-1) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`opt_args, use of`](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-opt_005fargs_002c-use-of) [20.6 Utility Functions](https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Completion-Functions) [`OSTYPE`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-OSTYPE) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\nP [`parameter, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-parameter_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`parameters`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-parameters-1) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`patchars`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-patchars) [22.20 The zsh/parameter Module](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#The-zsh_002fparameter-Module) [`path`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-path) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PATH`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PATH) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`path, use of`](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#index-path_002c-use-of) [8 Command Execution](https://zsh.sourceforge.io/Doc/Release/Command-Execution.html#Command-Execution) [`pattern_insert, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-pattern_005finsert_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`pattern_match, compstate`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-pattern_005fmatch_002c-compstate) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`PENDING`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-PENDING) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`PERIOD`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-PERIOD) [9.3.1 Hook Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Hook-Functions) [`periodic_functions`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-periodic_005ffunctions) [9.3.1 Hook Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Hook-Functions) [`pid, sysparams`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-pid_002c-sysparams) [22.27.3 Parameters](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Parameters-1) [`pipestatus`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-pipestatus) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`POSTDISPLAY`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-POSTDISPLAY) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`POSTEDIT`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-POSTEDIT) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PPID`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PPID) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell) [`ppid, sysparams`](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-ppid_002c-sysparams) [22.27.3 Parameters](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Parameters-1) [`PREBUFFER`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-PREBUFFER) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`precmd_functions`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-precmd_005ffunctions) [9.3.1 Hook Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Hook-Functions) [`PREDISPLAY`](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-PREDISPLAY) [18.5 User-Defined Widgets](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#User_002dDefined-Widgets) [`preexec_functions`](https://zsh.sourceforge.io/Doc/Release/Functions.html#index-preexec_005ffunctions) [9.3.1 Hook Functions](https://zsh.sourceforge.io/Doc/Release/Functions.html#Hook-Functions) [`PREFIX`](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#index-PREFIX) [19.2 Completion Special Parameters](https://zsh.sourceforge.io/Doc/Release/Completion-Widgets.html#Completion-Special-Parameters) [`PROMPT`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PROMPT) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`prompt`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-prompt) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PROMPT2`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PROMPT2) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PROMPT3`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PROMPT3) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PROMPT4`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PROMPT4) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PROMPT_EOL_MARK`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PROMPT_005fEOL_005fMARK) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PS1`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PS1) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PS2`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PS2) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PS3`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PS3) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PS4`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PS4) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`psvar`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-psvar) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`PSVAR`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PSVAR) [15.6 Parameters Used By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Used-By-The-Shell) [`psvar, use of`](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#index-psvar_002c-use-of) [13.3 Conditional Substrings in Prompts](https://zsh.sourceforge.io/Doc/Release/Prompt-Expansion.html#Conditional-Substrings-in-Prompts) [`PWD`](https://zsh.sourceforge.io/Doc/Release/Parameters.html#index-PWD) [15.5 Parameters Set By The Shell](https://zsh.sourceforge.io/Doc/Release/Parameters.html#Parameters-Set-By-The-Shell)\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 302,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-6-html-index-split-5-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-6-html-index-split-5-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-6-html-index-split-5-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-6-html-index-split-5-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-6-html-index-split-5-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 34170,
      "readableText": 31773,
      "none": 35697,
      "readableTextIfPossible": 35697,
      "result": 31773,
      "markdown": 22050
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_5.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_5.html#index_split-4",
    "loadedTime": "2025-05-08T06:52:15.904Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Variables-Index.html#Variables-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_5.html#index_split-4",
    "title": "zsh: Concept Index: Z",
    "description": "zsh: Concept Index: Z",
    "author": null,
    "keywords": "zsh: Concept Index: Z",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:10 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-38d6\"",
      "expires": "Thu, 08 May 2025 06:53:10 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-2",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c7085b3c9136d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Concept Index: Z\nJump to: $ - . \nA B C D E F G H I J K L M N O P Q R S T U V W Z \t\n\tIndex Entry \tSection\n\t\nZ\t\t\n\tzftp function system\t\t25 Zftp Function System\t\n\tzftp function system, automatic reopening\t\t25.4.3 Automatic and temporary reopening\t\n\tzftp function system, configuration\t\t25.4.1 Configuration\t\n\tzftp function system, remote globbing\t\t25.4.2 Remote globbing\t\n\tzftp function system, styles\t\t25.4.1 Configuration\t\n\tzftp, functions\t\t22.32.3 Functions\t\n\tzftp, parameters\t\t22.32.2 Parameters\t\n\tzftp, problems\t\t22.32.4 Problems\t\n\tzftp, subcommands\t\t22.32.1 Subcommands\t\n\tZLE\t\t18 Zsh Line Editor\t\n\tzle, builtin commands\t\t18.3 Zle Builtins\t\n\tzlogin\t\t5.1 Startup/Shutdown Files\t\n\tzlogout\t\t5.1 Startup/Shutdown Files\t\n\tzprofile\t\t5.1 Startup/Shutdown Files\t\n\tzrecompile utility\t\t26.2.2 Recompiling Functions\t\n\tzsh/datetime, function system based on\t\t23 Calendar Function System\t\n\tzshenv\t\t5.1 Startup/Shutdown Files\t\n\tzshrc\t\t5.1 Startup/Shutdown Files\t\n\tztcp, function system based on\t\t24 TCP Function System\t\n\t\nJump to: $ - . \nA B C D E F G H I J K L M N O P Q R S T U V W Z \t\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-5-html-index-split-4-yh2ps.html",
  "markdown": "# zsh: Concept Index: Z\n\n|     |     |\n| --- | --- |\n| Jump to: | [**$**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_symbol-1)   [**\\-**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_symbol-2)   [**.**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_symbol-3)    <br>[**A**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_letter-A)   [**B**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_letter-B)   [**C**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_letter-C)   [**D**](https://zsh.sourceforge.io/Doc/Release/zsh_1.html#index_split-0_cp_letter-D)   [**E**](https://zsh.sourceforge.io/Doc/Release/zsh_1.html#index_split-0_cp_letter-E)   [**F**](https://zsh.sourceforge.io/Doc/Release/zsh_1.html#index_split-0_cp_letter-F)   [**G**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-G)   [**H**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-H)   [**I**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-I)   [**J**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-J)   [**K**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-K)   [**L**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-L)   [**M**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-M)   [**N**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-N)   [**O**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-O)   [**P**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-P)   [**Q**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-Q)   [**R**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-R)   [**S**](https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-S)   [**T**](https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-T)   [**U**](https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-U)   [**V**](https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-V)   [**W**](https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-W)   [**Z**](#index_split-4_cp_letter-Z) |\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n|     | Index Entry |     | Section |\n| * * * |     |     |     |\n| Z   |     |     |\n|     | [zftp function system](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-zftp-function-system) |     | [25 Zftp Function System](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Zftp-Function-System) |\n|     | [zftp function system, automatic reopening](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-zftp-function-system_002c-automatic-reopening) |     | [25.4.3 Automatic and temporary reopening](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Automatic-and-temporary-reopening) |\n|     | [zftp function system, configuration](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-zftp-function-system_002c-configuration) |     | [25.4.1 Configuration](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Configuration-2) |\n|     | [zftp function system, remote globbing](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-zftp-function-system_002c-remote-globbing) |     | [25.4.2 Remote globbing](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Remote-globbing) |\n|     | [zftp function system, styles](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#index-zftp-function-system_002c-styles) |     | [25.4.1 Configuration](https://zsh.sourceforge.io/Doc/Release/Zftp-Function-System.html#Configuration-2) |\n|     | [zftp, functions](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-zftp_002c-functions) |     | [22.32.3 Functions](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Functions-1) |\n|     | [zftp, parameters](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-zftp_002c-parameters) |     | [22.32.2 Parameters](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Parameters-4) |\n|     | [zftp, problems](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-zftp_002c-problems) |     | [22.32.4 Problems](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Problems) |\n|     | [zftp, subcommands](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#index-zftp_002c-subcommands) |     | [22.32.1 Subcommands](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Subcommands) |\n|     | [ZLE](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-ZLE-1) |     | [18 Zsh Line Editor](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zsh-Line-Editor) |\n|     | [zle, builtin commands](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#index-zle_002c-builtin-commands) |     | [18.3 Zle Builtins](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins) |\n|     | [zlogin](https://zsh.sourceforge.io/Doc/Release/Files.html#index-zlogin) |     | [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) |\n|     | [zlogout](https://zsh.sourceforge.io/Doc/Release/Files.html#index-zlogout) |     | [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) |\n|     | [zprofile](https://zsh.sourceforge.io/Doc/Release/Files.html#index-zprofile) |     | [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) |\n|     | [zrecompile utility](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#index-zrecompile-utility) |     | [26.2.2 Recompiling Functions](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Recompiling-Functions) |\n|     | [zsh/datetime, function system based on](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#index-zsh_002fdatetime_002c-function-system-based-on) |     | [23 Calendar Function System](https://zsh.sourceforge.io/Doc/Release/Calendar-Function-System.html#Calendar-Function-System) |\n|     | [zshenv](https://zsh.sourceforge.io/Doc/Release/Files.html#index-zshenv) |     | [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) |\n|     | [zshrc](https://zsh.sourceforge.io/Doc/Release/Files.html#index-zshrc) |     | [5.1 Startup/Shutdown Files](https://zsh.sourceforge.io/Doc/Release/Files.html#Startup_002fShutdown-Files) |\n|     | [ztcp, function system based on](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#index-ztcp_002c-function-system-based-on) |     | [24 TCP Function System](https://zsh.sourceforge.io/Doc/Release/TCP-Function-System.html#TCP-Function-System) |\n| * * * |     |     |     |\n\n|     |     |\n| --- | --- |\n| Jump to: | [**$**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_symbol-1)   [**\\-**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_symbol-2)   [**.**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_symbol-3)    <br>[**A**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_letter-A)   [**B**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_letter-B)   [**C**](https://zsh.sourceforge.io/Doc/Release/Concept-Index.html#Concept-Index-1_cp_letter-C)   [**D**](https://zsh.sourceforge.io/Doc/Release/zsh_1.html#index_split-0_cp_letter-D)   [**E**](https://zsh.sourceforge.io/Doc/Release/zsh_1.html#index_split-0_cp_letter-E)   [**F**](https://zsh.sourceforge.io/Doc/Release/zsh_1.html#index_split-0_cp_letter-F)   [**G**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-G)   [**H**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-H)   [**I**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-I)   [**J**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-J)   [**K**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-K)   [**L**](https://zsh.sourceforge.io/Doc/Release/zsh_2.html#index_split-1_cp_letter-L)   [**M**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-M)   [**N**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-N)   [**O**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-O)   [**P**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-P)   [**Q**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-Q)   [**R**](https://zsh.sourceforge.io/Doc/Release/zsh_3.html#index_split-2_cp_letter-R)   [**S**](https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-S)   [**T**](https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-T)   [**U**](https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-U)   [**V**](https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-V)   [**W**](https://zsh.sourceforge.io/Doc/Release/zsh_4.html#index_split-3_cp_letter-W)   [**Z**](#index_split-4_cp_letter-Z) |\n\n* * *\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 110,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-5-html-index-split-4-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-5-html-index-split-4-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-5-html-index-split-4-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-5-html-index-split-4-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-5-html-index-split-4-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 12918,
      "readableText": 12159,
      "none": 12944,
      "readableTextIfPossible": 12944,
      "result": 12159,
      "markdown": 9618
    },
    "requestHandlerMode": "browser"
  }
},
{
  "url": "https://zsh.sourceforge.io/Doc/Release/zsh_14.html",
  "crawl": {
    "loadedUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_14.html#index_split-13_fn_letter-N",
    "loadedTime": "2025-05-08T06:52:18.125Z",
    "referrerUrl": "https://zsh.sourceforge.io/Doc/Release/Functions-Index.html#Functions-Index",
    "depth": 2,
    "httpStatusCode": 200
  },
  "metadata": {
    "canonicalUrl": "https://zsh.sourceforge.io/Doc/Release/zsh_14.html#index_split-13_fn_letter-N",
    "title": "zsh: Functions Index: N – U",
    "description": "zsh: Functions Index: N – U",
    "author": null,
    "keywords": "zsh: Functions Index: N – U",
    "languageCode": null,
    "jsonLd": null,
    "headers": {
      "date": "Thu, 08 May 2025 06:52:15 GMT",
      "content-type": "text/html",
      "last-modified": "Sun, 13 Apr 2025 16:15:33 GMT",
      "etag": "W/\"67fbe325-8bf2\"",
      "expires": "Thu, 08 May 2025 06:53:15 GMT",
      "cache-control": "max-age=60",
      "x-from": "sfp-staticweb-1",
      "cf-cache-status": "REVALIDATED",
      "vary": "Accept-Encoding",
      "server": "cloudflare",
      "cf-ray": "93c708859a1a36d4-YYZ",
      "content-encoding": "zstd",
      "alt-svc": "h3=\":443\"; ma=86400",
      "x-firefox-spdy": "h2"
    }
  },
  "screenshotUrl": null,
  "text": "zsh: Functions Index: N – U\nThis document was generated on May 14, 2022 using texi2html 5.0. \nZsh version 5.9, released on May 14, 2022.",
  "htmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-14-html-index-split-13-fn-letter-N-hx27u.html",
  "markdown": "# zsh: Functions Index: N – U\n\nThis document was generated on _May 14, 2022_ using [_texi2html 5.0_](http://www.nongnu.org/texi2html/).  \nZsh version 5.9, released on May 14, 2022.",
  "debug": {
    "pageType": "Article",
    "pageTypeReason": "HasUrlIndicators",
    "totalLinks": 291,
    "response": {
      "statusCode": 200
    },
    "snapshots": {
      "originalHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-14-html-index-split-13-fn-letter-N-originalHtmlUrl",
      "removedElementsHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-14-html-index-split-13-fn-letter-N-removedElementsHtmlUrl",
      "extractusHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-14-html-index-split-13-fn-letter-N-extractusHtmlUrl",
      "readableTextHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-14-html-index-split-13-fn-letter-N-readableTextHtmlUrl",
      "readableTextIfPossibleHtmlUrl": "https://api.apify.com/v2/key-value-stores/GfMqsQ9MkQGqe4i7R/records/https---zsh-sourceforge-io-Doc-Release-zsh-14-html-index-split-13-fn-letter-N-readableTextIfPossibleHtmlUrl"
    },
    "lengths": {
      "extractus": 34331,
      "readableText": 355,
      "none": 34184,
      "readableTextIfPossible": 34184,
      "result": 355,
      "markdown": 180
    },
    "requestHandlerMode": "browser"
  }
}]